<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kubernetets核心对象和控制器模式</title>
      <link href="2022/09/06/kubernetets-he-xin-dui-xiang-he-kong-zhi-qi-mo-shi/"/>
      <url>2022/09/06/kubernetets-he-xin-dui-xiang-he-kong-zhi-qi-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetets核心对象和控制器模式"><a href="#Kubernetets核心对象和控制器模式" class="headerlink" title="Kubernetets核心对象和控制器模式"></a>Kubernetets核心对象和控制器模式</h1>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Kubernetets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> K8s </tag>
            
            <tag> Kubernetets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetets的核心架构原则</title>
      <link href="2022/09/06/kubernetets-de-he-xin-jia-gou-yuan-ze/"/>
      <url>2022/09/06/kubernetets-de-he-xin-jia-gou-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetets的核心架构原则"><a href="#Kubernetets的核心架构原则" class="headerlink" title="Kubernetets的核心架构原则"></a>Kubernetets的核心架构原则</h1><blockquote><p>容器技术</p><p>namespace：隔离应用进程，给应用进程一个独立的运行环境，让进程之间不受干扰，完全封闭的环境独立的网络标识</p><p>cgroup：限制进程资源</p><p>有了namespace做隔离，有了cgroup限制资源，我们可以很安全将一个应用丢到某个隔离环境中运行，并且不对主机产生影响</p><p>应用要跑起来要overlay文件系统支持</p></blockquote><h2 id="什么是-Kubernetes-K8s"><a href="#什么是-Kubernetes-K8s" class="headerlink" title="什么是 Kubernetes(K8s)?"></a>什么是 Kubernetes(K8s)?</h2><p>Kubernetes 是谷歌开源的容器集群管理系统，是 Google 多年大规模容器管理技术 Borg 的 开源版本，主要功能包括:</p><ul><li><p>基于容器的应用部署、维护和滚动升级; </p></li><li><p>负载均衡和服务发现;</p></li><li><p>跨机器和跨地区的集群调度;</p></li><li><p>自动伸缩;</p></li><li><p>无状态服务和有状态服务; </p></li><li><p> 插件机制保证扩展性。</p></li></ul><p><img src="https://s2.loli.net/2022/09/17/1AP3rHTIW6v7zYp.png" alt="image.png"></p><h2 id="命令式-Imperative-vs-声明式-Declarative"><a href="#命令式-Imperative-vs-声明式-Declarative" class="headerlink" title="命令式( Imperative)vs 声明式( Declarative)"></a>命令式( Imperative)vs 声明式( Declarative)</h2><ul><li><p>声明式系统关注<strong>做什么</strong></p><ul><li>幂等性:状态固定，每次我我要你做事，请给我返回相同结果。</li><li>面向对象的:把一切抽象成对象</li></ul></li><li><p>命令式系统关注<strong>如何做</strong></p></li></ul><h2 id="Kubernetes-声明式系统"><a href="#Kubernetes-声明式系统" class="headerlink" title="Kubernetes:声明式系统"></a>Kubernetes:声明式系统</h2><p>Kubernetes 的所有管理能力构建在对象抽象的基础上，核心对象包括:</p><ul><li><p><strong>Node</strong>:计算节点的抽象，用来描述计算节点的资源抽象，健康状态等;</p></li><li><p><strong>Namespace</strong>:资源隔离的基本单位，可以简单理解为文件系统中的目录结构;</p></li><li><p><strong>Pod</strong>:用来描述应用实例，包括镜像地址，资源需求等。Kubernetes中最核心的对象，也是打通应用和基础架构的秘密武器;</p></li></ul><ul><li><strong>Service</strong>:服务如何将应用发布成服务，本质上是负载均衡和域名服务的声明。</li></ul><h2 id="Kubernetes-采用与-Borg-类似的架构"><a href="#Kubernetes-采用与-Borg-类似的架构" class="headerlink" title="Kubernetes 采用与 Borg 类似的架构"></a>Kubernetes 采用与 Borg 类似的架构</h2><p><img src="https://s2.loli.net/2022/09/17/DsNvIz84aiJOhbn.png" alt="image.png"></p><h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><p>etcd 是 CoreOS 基于 Raft 开发的分布式 key-value 存储，可用于服务发现、共享配置以及一致性保障 (如数据库选主、分布式锁等)。</p><ul><li>基本的key-value存储;</li><li>监听机制 watch;</li><li> key的过期及续约机制，用于监控和服务发现;</li><li>原子CAS和CAD，用于分布式锁和leader选举。</li></ul><p><img src="https://s2.loli.net/2022/09/17/ZHQUyNjMhGv5EV4.png" alt="image.png"></p><blockquote><p>raft协议： 确保数据一致性</p><p>etcd每个member都有三种身份：leader、follower（启动时：跟随者）、candidate（候选人、竞选者）</p><p>为了从member中选出一个主来，然后所有的写操作都是通过主来的，其它实例变成follower的角色来听从主的吩咐。</p><p>​        etcd启动时角色为follower，如果有leader则跟随，否则，角色变成candidate，通过拉票的方式选主，leader选举出来后，其它实例都变成follower角色，leader会一直给follower发送心跳来维持leader的地位。所有的写请求leader会将数据通过下次心跳一起发送给follower，follower接受到心跳之后会返回log给leader，leader确认后，这一次数据将写入（commit）完成。</p><p>支持watch机制，</p><p>​        根据你的请求的条件，返回当前的结果，并且不会断开当前client的链接，保持长连接，接下来当前请求结果有变更，会通过enevt机制将结果推送</p></blockquote><h4 id="直接访问etcd的数据"><a href="#直接访问etcd的数据" class="headerlink" title="直接访问etcd的数据"></a>直接访问etcd的数据</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">- 通过etcd进程查看启动参数 - 进入容器- 到主机namespace查看cert信息 - 进入容器查询数据  $ export ETCDCTL_API=3  $ etcdctl --endpoints https://localhost:2379 --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key --cacert /etc/kubernetes/pki/etcd/ca.crt get --keys- only --prefix /- 监听对象变化  $ etcdctl --endpoints https://localhost:2379 --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key --cacert /etc/kubernetes/pki/etcd/ca.crt watch --prefix /registry/services/specs/default/mynginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="APIServer"><a href="#APIServer" class="headerlink" title="APIServer"></a>APIServer</h2><p>kube-APIServer 是 Kubernetes 最重要的核心组件之一，主要提供以下的功能:</p><ul><li>提供集群管理的 REST API 接口，包括:<ul><li>认证 Authentication;</li><li>授权 Authorization;</li><li>准入 Admission(Mutating &amp; Valiating)。</li></ul></li><li>提供其他模块之间的数据交互和通信的枢纽(其他模块通过 API Server 查询或修改数据，只有 API Server 才直接操作 etcd)。</li><li>APIServer 提供 etcd 数据缓存以减少集群对 etcd 的访问。</li></ul><p><img src="https://s2.loli.net/2022/09/18/oF1GPDJfdHuS8Ut.png" alt="image.png"></p><blockquote><p>Apiserver是整个集群的核心，接受了所有的请求，并且所有的数据库读写都是从apiserver过</p><p>只有apiserver可以访问etcd，因为apiserver在访问etcd时构建了一个在apiserver的缓存，所以对于任意的客户端访问apiserver的时候，数据时不穿透APIserver的，APIserver会把缓存直接返回，etcd支持watch，有任意变化都会以通知形式告诉apiserver，理论上从apiserver获取的数据都是最新的数据。同理，apiserver也支持watch</p></blockquote><p><img src="https://s2.loli.net/2022/09/18/jLdXMDkSgiBRYNo.png" alt="image.png"></p><blockquote><p>上面时标准APIserver，下面是二次开发</p></blockquote><h2 id="Controller-Manager"><a href="#Controller-Manager" class="headerlink" title="Controller Manager"></a>Controller Manager</h2><ul><li>ControllerManager是集群的大脑，是确保整个集群动起来的关键;</li><li>其作用是确保Kubernetes遵循声明式系统规范，确保系统的真实状态(ActualState)与用 户定义的期望状态(Desired State 一直);</li><li>ControllerManager是多个控制器的组合，每个Controller事实上都是一个controlloop， 负责侦听其管控的对象，当对象发生变更时完成配置;</li><li>Controller配置失败通常会触发自动重试，整个集群会在控制器不断重试的机制下确保最终一 致性( Eventual Consistency)。</li></ul><h3 id="控制器的工作流程"><a href="#控制器的工作流程" class="headerlink" title="控制器的工作流程"></a>控制器的工作流程</h3><p><img src="https://s2.loli.net/2022/09/18/aCki9xcTyDeh4Ev.png"></p><blockquote><p>生产者消费者模式，任何的控制器会维护一个队列</p></blockquote><h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p>特殊的 Controller，工作原理与其他控制器无差别;</p><p>Scheduler 的特殊职责在于监控当前集群所有未调度的Pod，并且获取当前集群所有节点的健康 状况和资源使用情况，为待调度 Pod 选择最佳计算节点，完成调度。</p><p>调度阶段分为:</p><ul><li>Predict:过滤不能满足业务需求的节点，如资源不足，端口冲突等。 </li><li>Priority:按既定要素将满足调度需求的节点评分，选择最佳节点。</li><li>Bind:将计算节点与Pod绑定，完成调度。</li></ul><p><img src="https://s2.loli.net/2022/09/18/GBKcQDiNAWy3FwE.png"></p><h2 id="Kubelet"><a href="#Kubelet" class="headerlink" title="Kubelet"></a>Kubelet</h2><p>Kubernetes 的初始化系统(init system)</p><ul><li><p>从不同源获取Pod清单，并按需求启停Pod的核心组件:</p><ul><li><p>Pod 清单可从本地文件目录，给定的 HTTPServer 或 KubeAPIServer 等源头获取;</p></li><li><p>Kubelet 将运行时，网络和存储抽象成了 CRI，CNI，CSI。 </p></li></ul></li><li><p>负责汇报当前节点的资源信息和健康状态;</p></li><li><p>负责Pod的健康检查和状态汇报。</p><p><img src="https://s2.loli.net/2022/09/18/wWxpygF6AVz1q5o.png"></p></li></ul><blockquote><p>理论上把用户进程拉起来，通过namespace和cgroup做资源控制，通过replay把docker image把overlay fs拉起来，然后通过网络插件把网络配起来，K8S为了标准化，把这些借口抽象成CRI, CNI, CSI</p><p>kubelet是systemd里面的一个service</p><p>配置文件读取路径：/etc/kubenetes/manifests</p><p>kubelet除了watchapiserver，还可以扫描本地目录加载pod</p></blockquote><h2 id="Kube-Proxy"><a href="#Kube-Proxy" class="headerlink" title="Kube-Proxy"></a>Kube-Proxy</h2><ul><li><p>监控集群中用户发布的服务，并完成负载均衡配置。</p></li><li><p>每个节点的Kube-Proxy都会配置相同的负载均衡策略，使得整个集群的服务发现建立在分布 式负载均衡器之上，服务调用无需经过额外的网络跳转(Network Hop)。</p></li><li><p>负载均衡配置基于不同插件实现: •</p><ul><li><p>userspace。</p></li><li><p>操作系统网络协议栈不同的 Hooks 点和插件: </p><ul><li><p>iptables;</p></li><li><p>ipvs。</p></li></ul></li></ul></li></ul><p><img src="https://s2.loli.net/2022/09/18/bd5XpzCjBIKHL9n.png"></p><blockquote></blockquote><h2 id="Add-ons"><a href="#Add-ons" class="headerlink" title="Add-ons"></a>Add-ons</h2><p>kube-dns:负责为整个集群提供 DNS 服务;</p><p>Ingress Controller:为服务提供外网入口; </p><p>MetricsServer:提供资源监控;</p><p>Dashboard:提供 GUI; </p><p>Federation:提供跨可用区的集群; </p><p>Fluentd-elasticsearch:提供集群日志采集、存储与查询。</p><h2 id="API-设计原则"><a href="#API-设计原则" class="headerlink" title="API 设计原则"></a>API 设计原则</h2><ul><li>Kubernetes 将业务模型化，这些对象的操作都以 API 的形式发布出来，因此其所有 API 设计都是声明式的。</li><li>控制器的行为应该是可重入和幂等的，通过幂等的控制器使得系统一致朝用户期望状态努力，且结果稳定。</li><li>所有对象应该是互补和可组合的，而不是简单的封装。通过组合关系构建的系统，通常能保持很好的高内聚、松耦合特性。</li><li>API 操作复杂度应该与对象数量成线性或接近线性比例，这制约了系统的规模上限，如果操作复杂度和 对象成指数比例，那么随着对象的增加，操作的复杂度会迅速上升到用户无法接受的程度。</li><li>API 对象状态不能依赖于网络连接状态。众所周知，在分布式环境下，网络连接断开是经常发生的事情， 如果希望API对象的状态能应对网络的不稳定，那么 API 对象的状态就不能依赖于网络连接状态。</li><li>尽量避免让操作机制依赖于全局状态，因为在分布式系统中要保证全局状态的同步是非常困难的。</li></ul><h2 id="架构设计原则"><a href="#架构设计原则" class="headerlink" title="架构设计原则"></a>架构设计原则</h2><ul><li>只有apiserver可以直接访问etcd存储，其他服务必须通过KubernetesAPI来访问集群状态;</li><li>单节点故障不应该影响集群的状态;</li><li>在没有新请求的情况下，所有组件应该在故障恢复后继续执行上次最后收到的请求(比如网络分区 或服务重启等);</li><li>所有组件都应该在内存中保持所需要的状态，apiserver将状态写入etcd存储，而其他组件则通过 apiserver 更新并监听所有的变化;</li><li>优先使用事件监听而不是轮询。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Kubernetets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器核心技术</title>
      <link href="2022/09/05/rong-qi-he-xin-ji-zhu/"/>
      <url>2022/09/05/rong-qi-he-xin-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="容器核心技术"><a href="#容器核心技术" class="headerlink" title="容器核心技术"></a>容器核心技术</h1><blockquote><p>Namespace做资源隔离，Cgroup做资源控制</p></blockquote><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul><li>基于Linux内核的Cgroup，Namespace，以及UnionFS等技术，对进程进行封装隔离，属 于操作系统层面的虚拟化技术，由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其 为容器。</li><li>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极 大的简化了容器的创建和维护，使得 Docker 技术比虚拟机技术更为轻便、快捷。</li></ul><h2 id="为什么要用docker"><a href="#为什么要用docker" class="headerlink" title="为什么要用docker"></a>为什么要用docker</h2><ul><li>更高效的利用系统资源 </li><li>更快速的启动时间 </li><li>一致的运行环境 </li><li>持续交付和部署 </li><li>更轻松的迁移 </li><li>更轻松的维护和扩展</li></ul><h2 id="虚拟机和容器运行态的对比"><a href="#虚拟机和容器运行态的对比" class="headerlink" title="虚拟机和容器运行态的对比"></a>虚拟机和容器运行态的对比</h2><p><img src="https://s2.loli.net/2022/09/14/DNTibXw7xBMqsFj.png" alt="image.png"></p><h2 id="容器主要特性"><a href="#容器主要特性" class="headerlink" title="容器主要特性"></a>容器主要特性</h2><ul><li>安全性</li><li>隔离性</li><li>便携性</li><li>可配额</li></ul><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><ul><li>LinuxNamespace是一种LinuxKernel提供的资源隔离方案:<ul><li>系统可以为进程分配不同的 Namespace;</li><li>并保证不同的 Namespace 资源独立分配、进程彼此隔离，即不同的 Namespace 下的进程互不干扰 。</li></ul></li></ul><h3 id="Linux-内核代码中-Namespace-的实现"><a href="#Linux-内核代码中-Namespace-的实现" class="headerlink" title="Linux 内核代码中 Namespace 的实现"></a>Linux 内核代码中 Namespace 的实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 进程数据结构</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">/* namespaces */</span><span class="token keyword">struct</span> <span class="token class-name">nsproxy</span> <span class="token operator">*</span>nsproxy<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">// Namespace数据结构</span><span class="token keyword">struct</span> <span class="token class-name">nsproxy</span> <span class="token punctuation">{</span>atomic_t count<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">uts_namespace</span> <span class="token operator">*</span>uts_ns<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ipc_ns<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mnt_namespace</span> <span class="token operator">*</span>mnt_ns<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pid_namespace</span><span class="token operator">*</span>pid_ns_for_children<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net_ns<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Linux-对-Namespace操作方法"><a href="#Linux-对-Namespace操作方法" class="headerlink" title="Linux 对 Namespace操作方法"></a>Linux 对 Namespace操作方法</h3><ul><li>clone<br> 在创建新进程的系统调用时，可以通过 flags 参数指定需要新建的 Namespace 类型:</li></ul><p>​        // CLONE_NEWCGROUP / CLONE_NEWIPC / CLONE_NEWNET / CLONE_NEWNS / CLONE_NEWPID / CLONE_NEWUSER / CLONE_NEWUTS</p><p><code>int clone(int (*fn)(void *), void *child_stack, int flags, void *arg)</code></p><ul><li><p>setns<br> 该系统调用可以让调用进程加入某个已经存在的 Namespace 中: </p><p><code>Int setns(int fd, int nstype)</code></p></li><li><p>unshare<br> 该系统调用可以将调用进程移动到新的 Namespace 下: </p><p><code>int unshare(int flags)</code></p></li></ul><h3 id="隔离性-–-Linux-Namespace"><a href="#隔离性-–-Linux-Namespace" class="headerlink" title="隔离性 – Linux Namespace"></a>隔离性 – Linux Namespace</h3><p><img src="https://s2.loli.net/2022/09/14/LzCyg1YNK9x8VHX.png"></p><h3 id="关于-namespace-的常用操作"><a href="#关于-namespace-的常用操作" class="headerlink" title="关于 namespace 的常用操作"></a>关于 namespace 的常用操作</h3><ul><li><p>查看当前系统的namespace: <code>lsns –t &lt;type&gt;</code></p></li><li><p>查看某进程的namespace: <code>ls -la /proc/&lt;pid&gt;/ns/</code></p></li><li><p>进入某namespace运行命令: <code>nsenter -t &lt;pid&gt; -n ip addr</code></p></li></ul><h2 id="Cgroups"><a href="#Cgroups" class="headerlink" title="Cgroups"></a>Cgroups</h2><ul><li>Cgroups(ControlGroups)是Linux下用于对一个或一组进程进行资源控制和监控的机制;</li><li>可以对诸如CPU使用时间、内存、磁盘I/O等进程所需的资源进行限制;</li><li>不同资源的具体管理工作由相应的Cgroup子系统(Subsystem)来实现;</li><li>针对不同类型的资源限制，只要将限制策略在不同的的子系统上进行关联即可;</li><li>Cgroups在不同的系统资源管理子系统中以层级树(Hierarchy)的方式来组织管理:每个 Cgroup 都可以包含其他的子 Cgroup，因此子 Cgroup 能使用的资源除了受本 Cgroup 配置 的资源参数限制，还受到父 Cgroup 设置的资源限制 。</li></ul><h3 id="Linux-内核代码中-Cgroups-的实现"><a href="#Linux-内核代码中-Cgroups-的实现" class="headerlink" title="Linux 内核代码中 Cgroups 的实现"></a>Linux 内核代码中 Cgroups 的实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 进程数据结构</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token punctuation">{</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_CGROUPS </span></span>  <span class="token keyword">struct</span> <span class="token class-name">css_set</span> __rcu <span class="token operator">*</span>cgroups<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> cg_list<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token comment">// css_set 是 cgroup_subsys_state 对象的集合数据结构</span><span class="token keyword">struct</span> <span class="token class-name">css_set</span> <span class="token punctuation">{</span><span class="token comment">/** Set of subsystem states, one for each subsystem. This array is * immutable after creation apart from the init_css_set during* subsystem registration (at boot time).*/</span><span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys_state</span> <span class="token operator">*</span>subsys<span class="token punctuation">[</span>CGROUP_SUBSYS_COUNT<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可配额-可度量-Control-Groups-cgroups"><a href="#可配额-可度量-Control-Groups-cgroups" class="headerlink" title="可配额/可度量 - Control Groups (cgroups)"></a>可配额/可度量 - Control Groups (cgroups)</h3><p><img src="https://s2.loli.net/2022/09/14/cLKanYt5Axjlp63.png" alt="image.png"></p><p><strong>cgroups 实现了对资源的配额和度量。</strong></p><ul><li><strong>blkio</strong>:这个子系统设置限制每个块设备的输入输出控制。例如:磁盘，光盘以及USB等等; </li><li> <strong>cpu</strong>:这个子系统使用调度程序为cgroup任务提供CPU的访问;</li><li> <strong>cpuacct</strong>:产生cgroup任务的CPU资源报告;</li><li> <strong>cpuset</strong>:如果是多核心的CPU，这个子系统会为cgroup任务分配单独的CPU和内存;</li><li> <strong>devices</strong>:允许或拒绝cgroup任务对设备的访问;</li><li> <strong>freezer</strong>:暂停和恢复cgroup任务;</li><li> <strong>memory</strong>:设置每个cgroup的内存限制以及产生内存资源报告;</li><li> <strong>net_cls</strong>:标记每个网络包以供cgroup方便使用;</li><li> <strong>ns</strong>:名称空间子系统;</li><li> <strong>pid</strong>:进程标识子系统。</li></ul><h3 id="cpuacct-子系统"><a href="#cpuacct-子系统" class="headerlink" title="cpuacct 子系统"></a>cpuacct 子系统</h3><p> 用于统计 Cgroup 及其子 Cgroup 下进程的 CPU 的使用情况。</p><ul><li><p>cpuacct.usage<br> 包含该 Cgroup 及其子 Cgroup 下进程使用 CPU 的时间，单位是 ns(纳秒)。</p></li><li><p>cpuacct.stat<br> 包含该 Cgroup 及其子 Cgroup 下进程使用的 CPU 时间，以及用户态和内核态的时间。</p></li></ul><h3 id="memory-子系统"><a href="#memory-子系统" class="headerlink" title="memory 子系统"></a>memory 子系统</h3><ul><li><p>memory.usage_in_bytes </p><p>cgroup下进程使用的内存，包含cgroup及其子cgroup下的进程使用的内存。</p></li><li><p>memory.max_usage_in_bytes </p><p>cgroup下进程使用内存的最大值，包含子cgroup的内存使用量。</p></li><li><p>memory.limit_in_bytes </p><p>设置Cgroup下进程最多能使用的内存。如果设置为-1，表示对该cgroup的内存使用不做限制。</p></li><li><p>memory.oom_control</p><p>设置是否在Cgroup中使用OOM(Out of Memory)Killer，默认为使用。当属于该cgroup 的进程使用的内存超过最大的限定值时，会立刻被OOM Killer处理。</p></li></ul><h2 id="文件系统-Union-FS"><a href="#文件系统-Union-FS" class="headerlink" title="文件系统 Union FS"></a>文件系统 Union FS</h2><ul><li>将不同目录挂载到同一个虚拟文件系统下(unite several directories into asingle virtual filesystem)的文件系统。</li><li>支持为每一个成员目录(类似Git Branch)设定 readonly、readwrite 和 whiteout-able 权 限。</li><li>文件系统分层,对readonly权限的branch可以逻辑上进行修改(增量地,不影响readonly部 分的)。</li><li>通常UnionFS有两个用途,一方面可以将多个disk挂到同一个目录下,另一个更常用的就是将 一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起。</li></ul><h2 id="Docker-的文件系统"><a href="#Docker-的文件系统" class="headerlink" title="Docker 的文件系统"></a>Docker 的文件系统</h2><p>典型的 Linux 文件系统组成:</p><ul><li><p>Bootfs(bootfilesystem)</p><ul><li><p>Bootloader - 引导加载 kernel，</p></li><li><p>Kernel - 当 kernel 被加载到内存中后 umount bootfs。</p></li></ul></li><li><p>rootfs(rootfilesystem)</p><ul><li><p>/dev，/proc，/bin，/etc 等标准目录和文件。</p></li><li><p>对于不同的 linux 发行版, bootfs 基本是一致的， 但 rootfs 会有差别。</p></li></ul></li></ul><h2 id="Docker-启动"><a href="#Docker-启动" class="headerlink" title="Docker 启动"></a>Docker 启动</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li> 在启动后，首先将rootfs设置为readonly,进行一系列检查,然后将其切换为“readwrite” 供用户使用。</li></ul><h3 id="Docker启动"><a href="#Docker启动" class="headerlink" title="Docker启动"></a>Docker启动</h3><ul><li>初始化时也是将rootfs以readonly方式加载并检查，然而接下来利用unionmount的方式 将一个 readwrite 文件系统挂载在 readonly 的 rootfs 之上;</li><li>并且允许再次将下层的FS(filesystem)设定为readonly并且向上叠加;</li><li>这样一组readonly和一个writeable的结构构成一个container的运行时态,每一个FS被称 作一个 FS 层。</li></ul><h3 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h3><pre class="line-numbers language-none"><code class="language-none">由于镜像具有共享特性，所以对容器可写层的操作需要依赖存储驱动提供的写时复制和用时分配机制，以此来支持对容器可写层的修改，进而提高对存储和内存资源的利用率。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>写时复制</li></ul><p>写时复制，即 Copy-on-Write。一个镜像可以被多个容器使用，但是不需要在内存和磁盘上做多 个拷贝。在需要对镜像提供的文件进行修改时，该文件会从镜像的文件系统被复制到容器的可写 层的文件系统进行修改，而镜像里面的文件不会改变。不同容器对文件的修改都相互独立、互不 影响。</p><ul><li>用时分配 </li></ul><p>按需分配空间，而非提前分配，即当一个文件被创建出来后，才会分配空间。</p><h3 id="OverlayFS"><a href="#OverlayFS" class="headerlink" title="OverlayFS"></a>OverlayFS</h3><p>OverlayFS 也是一种与 AUFS 类似的联合文件系统，同样属于文件级的存储驱动，包含了最初的 Overlay 和更新更稳定的 overlay2。</p><p>Overlay 只有两层:upper 层和 Lower 层。Lower 层代表镜像层，upper 层代表容器可写层</p><p><img src="https://s2.loli.net/2022/09/15/GImyhMNbaWC26EQ.png" alt="image.png"></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># demo$ mkdir upper lower merged work$ echo "from lower" &gt; lower/in_lower.txt$ echo "from upper" &gt; upper/in_upper.txt$ echo "from lower" &gt; lower/in_both.txt$ echo "from upper" &gt; upper/in_both.txt$ sudo mount -t overlay overlay -o lowerdir=`pwd`/lower,upperdir=`pwd`/upper,workdir=`pwd`/work `pwd`/merged$ cat merged/in_both.txt$ delete merged/in_both.txt $ delete merged/in_lower.txt $ delete merged/in_upper.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="Null（–net-null）"><a href="#Null（–net-null）" class="headerlink" title="Null（–net=null）"></a>Null（–net=null）</h3><ul><li>把容器放入独立的网络空间但不做任何网络配置;</li><li> 用户需要通过运行 docker network 命令来完成网络配置。</li></ul><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><ul><li>使用主机网络名空间，复用主机网络。</li></ul><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><ul><li>重用其他容器的网络。</li></ul><h3 id="Bridge-–net-bridge"><a href="#Bridge-–net-bridge" class="headerlink" title="Bridge(–net=bridge)"></a>Bridge(–net=bridge)</h3><ul><li>使用 Linux 网桥和 iptables 提供容器互联，Docker 在每台主机上创建一个名叫 docker0 的网桥，通过 veth pair 来连接该主机的每一个 EndPoint。</li></ul><h2 id="Docker优势"><a href="#Docker优势" class="headerlink" title="Docker优势"></a>Docker优势</h2><ul><li>封装性:<ul><li>不需要再启动内核，所以应用扩缩容时可以秒速启动。</li><li>资源利用率高，直接使用宿主机内核调度资源，性能损失小。 • 方便的 CPU、内存资源调整。</li><li>能实现秒级快速回滚。</li></ul></li><li>封装性:<ul><li>一键启动所有依赖服务，测试不用为搭建环境犯愁，PE 也不用 为建站复杂担心。</li><li>镜像一次编译，随处使用。</li><li>测试、生产环境高度一致(数据除外)。</li></ul></li><li>隔离性:<ul><li>应用的运行环境和宿主机环境无关，完全由镜像控制，一台物 理机上部署多种环境的镜像测试。</li><li>多个应用版本可以并存在机器上。</li></ul></li><li>镜像增量分发:<ul><li>   由于采用了 Union FS， 简单来说就是支持将不同的目录挂载到同 一个虚拟文件系统下，并实现一种 layer 的概念，每次发布只传输 变化的部分，节约带宽。</li></ul></li><li>社区活跃:<ul><li>Docker 命令简单、易用，社区十分活跃，且周边组件丰富。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>victoriametrics_vs_tdengine_single_version</title>
      <link href="2022/08/08/cloudnativate/vm-vs-tdengine-single-version/"/>
      <url>2022/08/08/cloudnativate/vm-vs-tdengine-single-version/</url>
      
        <content type="html"><![CDATA[<h1 id="victoriametrics-vs-tdengine-single-version"><a href="#victoriametrics-vs-tdengine-single-version" class="headerlink" title="victoriametrics_vs_tdengine_single_version"></a>victoriametrics_vs_tdengine_single_version</h1><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><ul><li><p><strong>Prometheus</strong>: 178.104.163.111 2c4g</p></li><li><p><strong>Node:</strong> 178.104.163.188  4c8g</p><blockquote><p>victoriametrics、tdengine 均安装最新版本作为本次测试</p><p>docker version：20.10.17 </p><p>linux kernel version:  3.10.0-957.el7.x86_64 </p></blockquote></li></ul><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p><img src="https://s2.loli.net/2022/08/24/NMKVR8vDJuz7QPl.png" alt="image-20220731222438136"></p><h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><h2 id="Test-Result"><a href="#Test-Result" class="headerlink" title="Test Result"></a>Test Result</h2><blockquote><p>duration: 5 days</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[root@desktop-7f8a ~]# du -sh /var/lib/vm ;du -sh /var/lib/taos93M     /var/lib/vm859M    /var/lib/taos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">rate(prometheus_tsdb_head_samples_appended_total[1m])avg(rate(container_cpu_usage_seconds_total{job="vm_td_cadvisor", name=~"vm|tdengine"}[1m])) by (name, image, instance,  job)container_cpu_usage_seconds_total{job="vm_td_cadvisor", name=~"vm|tdengine"}container_fs_writes_bytes_total{job="vm_td_cadvisor", name=~"vm|tdengine"}container_fs_writes_total{job="vm_td_cadvisor", name=~"vm|tdengine"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/24/GEn8bPtMgoUKNce.png" alt="image-20220802151311428"></p><ul><li><p>CPU</p><p><img src="https://s2.loli.net/2022/08/24/B8FmzZjaHnXKuxA.png" alt="image-20220802151441630"></p></li><li><p>Memory</p><p><img src="https://s2.loli.net/2022/08/24/qMEp6AcTHWFo1z5.png" alt="image-20220802151534464"></p></li><li><p>Rss</p><p><img src="https://s2.loli.net/2022/08/24/QN2eRbYEsZDpqIu.png" alt="image-20220802151648122"></p></li><li><p>IO</p><p><img src="https://s2.loli.net/2022/08/24/vBA69xrTlufgazq.png" alt="image-20220802151728888"></p><p><img src="https://s2.loli.net/2022/08/24/b2CHjwZKGLWTYIq.png" alt="image-20220802152224653"></p></li></ul><blockquote><p>[PromQL] <a href="http://178.104.163.111:9090/graph?g0.expr=rate(prometheus_tsdb_head_samples_appended_total%5B1m%5D)&amp;g0.tab=0&amp;g0.stacked=0&amp;g0.show_exemplars=0&amp;g0.range_input=5d&amp;g1.expr=avg(rate(container_cpu_usage_seconds_total%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name,%20image,%20instance,%20%20job)&amp;g1.tab=0&amp;g1.stacked=0&amp;g1.show_exemplars=0&amp;g1.range_input=5d&amp;g2.expr=container_memory_usage_bytes%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D&amp;g2.tab=0&amp;g2.stacked=0&amp;g2.show_exemplars=0&amp;g2.range_input=5d&amp;g3.expr=container_memory_rss%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D&amp;g3.tab=0&amp;g3.stacked=0&amp;g3.show_exemplars=0&amp;g3.range_input=5d&amp;g4.expr=avg(rate(container_fs_writes_bytes_total%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name,%20image,%20instance,%20%20job)&amp;g4.tab=0&amp;g4.stacked=0&amp;g4.show_exemplars=0&amp;g4.range_input=5d&amp;g5.expr=rate(container_fs_writes_total%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D%5B1m%5D)&amp;g5.tab=0&amp;g5.stacked=0&amp;g5.show_exemplars=0&amp;g5.range_input=5d">http://178.104.163.111:9090/graph?g0.expr=rate(prometheus_tsdb_head_samples_appended_total%5B1m%5D)&amp;g0.tab=0&amp;g0.stacked=0&amp;g0.show_exemplars=0&amp;g0.range_input=5d&amp;g1.expr=avg(rate(container_cpu_usage_seconds_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&amp;g1.tab=0&amp;g1.stacked=0&amp;g1.show_exemplars=0&amp;g1.range_input=5d&amp;g2.expr=container_memory_usage_bytes%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&amp;g2.tab=0&amp;g2.stacked=0&amp;g2.show_exemplars=0&amp;g2.range_input=5d&amp;g3.expr=container_memory_rss%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&amp;g3.tab=0&amp;g3.stacked=0&amp;g3.show_exemplars=0&amp;g3.range_input=5d&amp;g4.expr=avg(rate(container_fs_writes_bytes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&amp;g4.tab=0&amp;g4.stacked=0&amp;g4.show_exemplars=0&amp;g4.range_input=5d&amp;g5.expr=rate(container_fs_writes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B1m%5D)&amp;g5.tab=0&amp;g5.stacked=0&amp;g5.show_exemplars=0&amp;g5.range_input=5d</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tsdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> benchmark </tag>
            
            <tag> prometheus </tag>
            
            <tag> victoriametrics </tag>
            
            <tag> cadvisor </tag>
            
            <tag> tdengine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InfluxDB不同版本调研</title>
      <link href="2022/07/28/cloudnativate/influxdb1.x-vs-2.x/"/>
      <url>2022/07/28/cloudnativate/influxdb1.x-vs-2.x/</url>
      
        <content type="html"><![CDATA[<h1 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h1><ul><li>InfluxDB是时序数据库中应用比较广泛的一种，在DB-Engines TSDB rank中位居首位，可见InfluxDB在互联网的受欢迎程度是非常高的</li></ul><p><img src="https://s2.loli.net/2022/08/24/tZmWflFUirO896R.png" alt="db-engine tsdbrank"></p><ul><li><p>它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。</p></li><li><p>InfluxDB 2.0还与<a href="https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/">InfluxDB Cloud紧密集成，InfluxDB Cloud</a>是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。</p></li></ul><ul><li><p>时序数据库与我们熟悉的关系型数据库有所不同，首先需要了解一下 InfluxDB 中字段的含义</p><blockquote><p>v1.x</p></blockquote></li></ul><p><img src="https://s2.loli.net/2022/08/24/4XlzG35RENOnByi.png" alt="image-20220812143742317"></p><blockquote><p> v2.x</p></blockquote><p>V2具有以下几个概念：</p><p>timestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization</p><p>新增的概念：</p><p><strong>bucket</strong>：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织</p><p><strong>bucket schema</strong>：具有明确的schema-type的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。</p><p><strong>organization</strong>：InfluxDB组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。</p><h3 id="TICK-架构分析与各组件功能介绍"><a href="#TICK-架构分析与各组件功能介绍" class="headerlink" title="TICK 架构分析与各组件功能介绍"></a>TICK 架构分析与各组件功能介绍</h3><p>TICK 架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括 Telegraf、InfluxDB、Chronograf 和 Kapacitor。TICK 架构以及各组件分工情况如图所示：</p><p>V2版本主要有这么几个特性:<br>1.一个可执行文件<br>chronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后，监听9999她口，这个端口既是@b贪面的端商，料练袋库<br>的监听端口。<br>2,权限全增强，新增了token.可以使用token进行数据读写操作<br>3,DSL又改了！目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tck.能执行的操作更多。<br>4,接口返回数据的格式改为csv,并且可以使用uxQL来自定义返回数据的格式与字段<br>5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使<br>用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。<br>现在influxdb v2直接可以实现这个采集的操作<br>6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfil进influxdb中。</p><p>并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行</p><p>OSS 2.x包括1.x兼容的<code>/query</code>和<code>/write</code>端点</p><p>它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台</p>]]></content>
      
      
      <categories>
          
          <category> tsdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> influxdb </tag>
            
            <tag> benchmark </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InfluxDB不同版本调研2</title>
      <link href="2022/07/28/cloudnativate/influxdb2/"/>
      <url>2022/07/28/cloudnativate/influxdb2/</url>
      
        <content type="html"><![CDATA[<h1 id="InfluxDB不同版本调研"><a href="#InfluxDB不同版本调研" class="headerlink" title="InfluxDB不同版本调研"></a>InfluxDB不同版本调研</h1><h1 id="一、关键概念"><a href="#一、关键概念" class="headerlink" title="一、关键概念"></a>一、关键概念</h1><p>相比 V1 移除了 database 和 RP，增加了 bucket。</p><ul><li><p>背景</p><ul><li><p>它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。</p></li><li><p>InfluxDB 2.0还与<a href="https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/">InfluxDB Cloud紧密集成，InfluxDB Cloud</a>是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。</p></li></ul></li><li><p>V2 具有以下几个概念：</p></li></ul><p>timestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization</p><p>新增的概念：</p><p>bucket：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织</p><p>bucket schema：具有明确的 schema-type 的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。</p><p>organization：InfluxDB 组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。</p><ul><li><p>v2 特性</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">1,telegraf chronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后2,权限全增强，新增了token.可以使用token进行数据读写操作3,DSL改了,FluxQL的目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tick.能执行的操作更多。4,接口返回数据的格式改为csv,并且可以使用 FluxQL 来自定义返回数据的格式与字段5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。现在influxdb v2直接可以实现这个采集的操作6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfill进influxdb中。并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行7,OSS 2.x包括1.x兼容的`/query`和`/write`端点8,它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="二、系统结构"><a href="#二、系统结构" class="headerlink" title="二、系统结构"></a>二、系统结构</h1><p><strong>TICK架构分析与各组件功能介绍</strong></p><p>TICK架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括Telegraf、InfluxDB、Chronograf和 Kapacitor。TICK架构以及各组件分工情况如图所示：</p><p><img src="https://s2.loli.net/2022/08/24/j8tpD4FCQhUuqMB.png" alt="tick"></p><p><strong>数据模式</strong>：InfluxDB 数据元素存储在时间结构合并树 (TSM) 和时间序列索引 (TSI) 文件中，以有效压缩存储的数据。</p><p>除了上图可视化管理工具Chronograf外，还有一种可视化工具Grafana，它也是用于大规模指标数据的可视化展示，提供包括折线图，饼图，仪表盘等多种监控数据可视化UI，若应用过程中考虑到扩展性问题，也会使用Grafana代替Chronograf。</p><p><strong>文件系统布局</strong></p><blockquote><p>InfluxDB Dockerhub镜像使用/var/lib/influxdb2而不是/var/lib/influxdb，因此在升级过程中，你可以很容易地为InfluxDB 1.x和2.x的数据装载不同的卷。</p></blockquote><p><strong>默认路径：</strong></p><table><thead><tr><th align="left">Path</th><th align="left">Default</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#engine-path">Engine path</a></td><td align="left"><code>/var/lib/influxdb2/engine/</code></td></tr><tr><td align="left"><a href="https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#bolt-path">Bolt path</a></td><td align="left"><code>/var/lib/influxdb2/influxd.bolt</code></td></tr><tr><td align="left"><a href="https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#sqlite-path">SQLite path</a></td><td align="left"><code>/var/lib/influxdb2/influxd.sqlite</code></td></tr><tr><td align="left"><a href="https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#configs-path">Configs path</a></td><td align="left"><code>/etc/influxdb2/configs</code></td></tr></tbody></table><p><strong><a href="https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#">文件目录结构</a>：</strong></p><ul><li>/var/lib/influxdb2/<ul><li>engine/<ul><li>data/<ul><li><em>TSM directories and files</em></li></ul></li><li>wal/<ul><li><em>WAL directories and files</em></li></ul></li></ul></li><li>influxd.bolt</li><li>influxd.sqlite</li></ul></li><li>/etc/influxdb2/<ul><li>configs</li></ul></li></ul><p><strong>Influxdb 分片和分片组</strong></p><p>InfluxDB 在将数据存储到磁盘时将时间序列数据组织成分片。分片被分组到分片组中</p><p>表示具有 4d 保留期&nbsp;和 1d 分片组持续时间的存储桶：</p><p><img src="https://s2.loli.net/2022/08/24/laJFv6ofSKBuCwT.png"></p><p>分片删除：InfluxDB 保留强制执行服务会例行检查早于其存储桶保留期的分片组。一旦分片组的开始时间超过存储桶的保留期，InfluxDB 将删除该分片组以及关联的分片和 TSM 文件 (在具有无限保留期的存储桶中，分片无限期地保留在磁盘上)。</p><p><strong>系统存储桶</strong></p><p><strong>_monitoring system bucket :</strong> 该_monitoring 系统桶存储 InfluxDB 数据用于 监控数据并发送警报。数据保留：7 天</p><p><strong>_tasks system bucket:</strong> 该_tasks 系统桶存储与数据 InfluxDB 任务的执行。数据保留：1 天</p><p>标签和字段描述详见：<a href="https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/">https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/</a></p><h1 id="三、配置文件"><a href="#三、配置文件" class="headerlink" title="三、配置文件"></a>三、配置文件</h1><p>当 influxd 启动时，它会在当前工作目录检查一个名为 config.* 的文件。</p><p>支持以下语法：</p><ul><li>  YAML (.yaml, .yml)</li><li>  TOML (.toml)</li><li>  JSON (.json)</li></ul><p>配置选项 (日志、并发压缩…)：<a href="https://docs.influxdata.com/influxdb/v2.3/reference/config-options/">https://docs.influxdata.com/influxdb/v2.3/reference/config-options/</a></p><h1 id="四、Flux-查询语句"><a href="#四、Flux-查询语句" class="headerlink" title="四、Flux 查询语句"></a>四、Flux 查询语句</h1><p>Flux 是 InfluxData 的功能性数据脚本语言，设计用于查询、分析和处理数据，它是 InfluxQL 和其他类似 SQL 的查询语言的替代品。</p><p>设计原则：受 Javascript&nbsp;启发，旨在设计出可用、可读、灵活、可组合、可测试、可贡献和可共享的语言。</p><p>示例查询：近一小时存储的数据，按<code>cpu</code>度量和<code>cpu=cpu-total</code>标签过滤，以 1 分钟为间隔对数据进行窗口化，并计算每个窗口的平均值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span><span class="token string">"example-bucket"</span><span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span>h<span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>    r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and    r<span class="token punctuation">.</span>cpu <span class="token operator">==</span> <span class="token string">"cpu-total"</span>  <span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">aggregateWindow</span><span class="token punctuation">(</span>every<span class="token operator">:</span> <span class="token number">1</span>m<span class="token punctuation">,</span> fn<span class="token operator">:</span> mean<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1 &gt; 关键概念</strong></p><p><strong>Pipe-forward operator</strong>（管道转发操作符 “|&gt;”）：Flux 广泛使用管道转发运算符 “|&gt;” 将操作链接在一起。在每个函数或操作之后，Flux 返回一个包含数据的表或表的集合。管道转发运算符将这些表通过管道输送到下一个函数或操作中，在那里它们将被进一步处理或操作。</p><p><strong>Tables</strong>：Flux 构造表格中的所有数据。当数据从数据源流式传输时，Flux 将其格式化为带注释的逗号分隔值 (CSV)，表示表格。然后函数操作或处理它们并输出新表。</p><p><strong>Group keys</strong>：每个表都有一个组键 (Group keys)，用于描述表的内容。它是一个列列表，表中的每一行都具有相同的值。每行中具有唯一值的列不是组键的一部分。</p><p>示例 group key</p><pre class="line-numbers language-none"><code class="language-none"> Group key: [_start, _stop, _field]                   _start:time                      _stop:time           _field:string                      _time:time                  _value:float------------------------------  ------------------------------  ----------------------  ------------------------------  ----------------------------2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:33:56.000000000Z             65.553188323974612019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:06.000000000Z             65.523910522460942019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:36.000000000Z              65.536737442016<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：_time 和_value 被排除在示例组键之外，它们对于每一行都是唯一的。</p><p><strong>2 &gt; 查询语法</strong></p><p><a href="https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/">https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/</a></p><p>指定数据源：<code>from(bucket:"example-bucket")</code></p><p>指定时间范围：</p><p>使用管道转发运算符 (|&gt;) 将数据从数据源通过管道传输到 range() 函数，该函数指定查询的时间范围。它接受两个参数：start 和 stop。范围可以是使用相对负持续时间 或使用绝对时间</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Relative time range with start only. Stop defaults to now.</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span><span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>h<span class="token punctuation">)</span><span class="token comment">// Relative time range with start and stop</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span><span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>h<span class="token punctuation">,</span> stop<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span>m<span class="token punctuation">)</span> <span class="token comment">//使用绝对时间</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span><span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>T00<span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>Z<span class="token punctuation">,</span> stop<span class="token operator">:</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>T12<span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>Z<span class="token punctuation">)</span> <span class="token comment">//过去十五分钟的数据</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span><span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">15</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3 &gt; 数据过滤：</strong></p><p>将范围数据传递到 filter() 函数中，以根据数据属性或列缩小结果范围。该 filter() 函数有一个参数 ，fn 它需要一个匿名函数，该函数具有基于列或属性过滤数据的逻</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Pattern</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>recordProperty comparisonOperator comparisonExpression<span class="token punctuation">)</span><span class="token comment">// Example with single filter</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span class="token comment">// Example with multiple filters</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and r<span class="token punctuation">.</span>_field <span class="token operator">!=</span> <span class="token string">"usage_system"</span><span class="token punctuation">)</span> <span class="token comment">//按cpu度量、usage_system字段和cpu-total标记值过滤</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span> <span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">15</span>m<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and r<span class="token punctuation">.</span>_field <span class="token operator">==</span> <span class="token string">"usage_system"</span> and r<span class="token punctuation">.</span>cpu <span class="token operator">==</span> <span class="token string">"cpu-total"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4 &gt; 生成指定查询数据</strong></p><p>Flux 的 yield() 函数将过滤后的表作为查询结果输出。</p><p>Flux 会 yield() 在每个脚本的末尾自动假设一个函数，以便输出和可视化数据。yield() 只有在同一个 Flux 查询中包含多个查询时，才需要显式调用。每组返回的数据都需要使用该 yield() 函数命</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span> <span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">15</span>m<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and r<span class="token punctuation">.</span>_field <span class="token operator">==</span> <span class="token string">"usage_system"</span> and r<span class="token punctuation">.</span>cpu <span class="token operator">==</span> <span class="token string">"cpu-total"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5 &gt; 数据转换</strong></p><p>使用函数，将数据聚合为平均值、下采样数据等</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">//更新范围从最后一小时拉取数据</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span> <span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>h<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and r<span class="token punctuation">.</span>_field <span class="token operator">==</span> <span class="token string">"usage_system"</span> and r<span class="token punctuation">.</span>cpu <span class="token operator">==</span> <span class="token string">"cpu-total"</span><span class="token punctuation">)</span> <span class="token comment">//以五分钟为间隔的窗口化数据</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span> <span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>h<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and r<span class="token punctuation">.</span>_field <span class="token operator">==</span> <span class="token string">"usage_system"</span> and r<span class="token punctuation">.</span>cpu <span class="token operator">==</span> <span class="token string">"cpu-total"</span><span class="token punctuation">)</span> <span class="token comment">//聚合窗口数据</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span> <span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>h<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and r<span class="token punctuation">.</span>_field <span class="token operator">==</span> <span class="token string">"usage_system"</span> and r<span class="token punctuation">.</span>cpu <span class="token operator">==</span> <span class="token string">"cpu-total"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">window</span><span class="token punctuation">(</span>every<span class="token operator">:</span> <span class="token number">5</span>m<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//添加时间列到聚合函数</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span> <span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>h<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and r<span class="token punctuation">.</span>_field <span class="token operator">==</span> <span class="token string">"usage_system"</span> and r<span class="token punctuation">.</span>cpu <span class="token operator">==</span> <span class="token string">"cpu-total"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">window</span><span class="token punctuation">(</span>every<span class="token operator">:</span> <span class="token number">5</span>m<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">duplicate</span><span class="token punctuation">(</span>column<span class="token operator">:</span> <span class="token string">"_stop"</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">"_time"</span><span class="token punctuation">)</span> <span class="token comment">//取消窗口聚合表，将所有点收集到一个无限的窗口中</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span><span class="token string">"example-bucket"</span><span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>h<span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>    r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and    r<span class="token punctuation">.</span>_field <span class="token operator">==</span> <span class="token string">"usage_system"</span> and    r<span class="token punctuation">.</span>cpu <span class="token operator">==</span> <span class="token string">"cpu-total"</span>  <span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">window</span><span class="token punctuation">(</span>every<span class="token operator">:</span> <span class="token number">5</span>m<span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">duplicate</span><span class="token punctuation">(</span>column<span class="token operator">:</span> <span class="token string">"_stop"</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">"_time"</span><span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">window</span><span class="token punctuation">(</span>every<span class="token operator">:</span> inf<span class="token punctuation">)</span> <span class="token comment">//辅助函数(将聚合或选择器函数应用于固定的时间窗口,通过every指定窗口的持续时间)</span><span class="token keyword">from</span><span class="token punctuation">(</span>bucket<span class="token operator">:</span> <span class="token string">"example-bucket"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>h<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>_measurement <span class="token operator">==</span> <span class="token string">"cpu"</span> and r<span class="token punctuation">.</span>_field <span class="token operator">==</span> <span class="token string">"usage_system"</span> and r<span class="token punctuation">.</span>cpu <span class="token operator">==</span> <span class="token string">"cpu-total"</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">window</span><span class="token punctuation">(</span>every<span class="token operator">:</span> <span class="token number">5</span>m<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">&gt;</span> <span class="token function">duplicate</span><span class="token punctuation">(</span>column<span class="token operator">:</span> <span class="token string">"_stop"</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">"_time"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6 &gt; 语法基础与通量函数</strong></p><p>语法基础：<a href="https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/">https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/</a></p><p>通量函数包：<a href="https://docs.influxdata.com/flux/v0.x/stdlib/">https://docs.influxdata.com/flux/v0.x/stdlib/</a></p><p>比如: filter() 函数 筛选数据 (<a href="https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/">https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/</a></p><h1 id="五、可视化数据"><a href="#五、可视化数据" class="headerlink" title="五、可视化数据"></a>五、可视化数据</h1><p><a href="https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/">https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/</a></p><p><strong>支持的可视化类型：</strong></p><p>Band&nbsp;（乐队）：显示随时间变化的数据组的上限和下限</p><p><img src="https://s2.loli.net/2022/08/24/wl3GkiUWRCapEDn.png"></p><p>guage（仪表盘）：仪表视图中显示时间序列的单个值最新值</p><p><img src="https://s2.loli.net/2022/08/24/Js5RNkhtiAD1jcS.png"></p><p>graph（图形）：折线图</p><p><img src="https://s2.loli.net/2022/08/24/jHdI7zC5JbpNA1q.png"></p><p>Graph + Single Stat（图表 + 单一统计）：以折线图显示指定的时间序列，并将最近的单个值叠加为一个大数值</p><p><img src="https://s2.loli.net/2022/08/24/pxkolJKtwRAn1jh.png"></p><p>heatmap（热图）：显示 x 和 y 轴上的数据分布，其中颜色代表不同的数据点浓度</p><p><img src="https://s2.loli.net/2022/08/24/aOkSMDyiz2bwfRI.png"></p><p>histogram（直方图）：一种查看数据分布的方法。y 轴专用于计数，x 轴分为 bin</p><p><img src="https://s2.loli.net/2022/08/24/ivagJkyHX1zqeE9.png"></p><p>mosaic（马赛克）：化显示时间序列数据中的状态变化</p><p><img src="https://s2.loli.net/2022/08/24/n6G4NXkImWyUpda.png"></p><p>scatter（散点图）：视图使用散点图来显示时间序列数据</p><p><img src="https://s2.loli.net/2022/08/24/iHmI2W6Ct39VwLu.png"></p><p>single stat（单项统计）： 将指定时间序列的最新值显示为数值</p><p><img src="https://s2.loli.net/2022/08/24/VfpXCTugheW5H1Q.png"></p><p>table（表格视图）：表格视图中显示查询结果<br><img src="https://s2.loli.net/2022/08/24/N3Y5RnkUZOCgTlF.png"></p><p><strong>本地制造数据，通过图表数据展示案例：</strong></p><p><img src="https://s2.loli.net/2022/08/24/9gwDhEf1JNdmG3z.png"></p><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p><strong>问：V1 版本的 RP+CQ 在 V2 版本应该怎样使用？</strong></p><p>答：</p><p>RP 存储周期，完全由 bucket 决定，在创建 bucket 时需要指定 bucket 的数据保留时间。</p><p>需要注意的是：bucket 的数据存储时间并不能随意更换，可以将永久存储的数据改成 Retention 存储，但是也存在限制；无法将有 Retention 的数据改成永久存储。</p><p><img src="https://s2.loli.net/2022/08/24/tlMXa2DyxPYv51j.png"></p><p>CQ 需要使用 task 代替，InfluxQL 需要使用 Flux 代替。&nbsp;</p><p>task 示例：每小时执行一次，收集一个小时内的数据，输出到另一个 bucket 中 (可使用内置函数，本案例为了验证功能使用直接输出)</p><pre class="line-numbers language-none"><code class="language-none">option task = {name: "tast2", every: 1h} from(bucket: "bucket1")|&gt; range(start: -task.every)|&gt; filter(fn: (r) =&gt;(r._measurement == "mem2"))|&gt; filter(fn: (r) =&gt;(r._field == "used_percent"))|&gt; set(key: "_measurement", value: "average3-mem2")|&gt; to(org: "test", bucket: "bucket1/mem2-rp")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/24/a87tnCN9JzjpxZi.png"></p><p><img src="https://s2.loli.net/2022/08/24/qsEHiImy1X3xWwn.png"></p><p>CQ 转 Task 官方描述：<a href="https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/">https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/</a></p><p>Task 使用介绍：<a href="https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/">https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/</a></p><p><strong>问：V2 版本数据如何备份？文件拷贝是否可行？</strong></p><p>答：</p><p>官方提供的备份方式：</p><pre class="line-numbers language-none"><code class="language-none">//将所有数据备份到一个目录influx backup /path/to/backup/dir/ //将特定存储桶备份到目录influx backup --bucket example-bucket /path/to/backup/dir/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件拷贝方式（/var/lib/influxdb）：与 V1 一致，服务重启时生效。</p><p>相比 V1 :&nbsp; (1) 它在文件层次使用 ID 区分具体存储桶&nbsp; (2) 它无法在插入过程中更换数据文件，即使更换了也会失效，不过成功启动之后删了它的数据文件，它也不会报错</p><p>结论：(1) 可以使用官方提供的命令进行冷备份，服务器上备份前需要进行 token 配置&nbsp; (2) 文件拷贝是可行的，但是必须要重启服务，否则数据将会不准确。</p><p>官方描述：<a href="https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/">https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/</a></p>]]></content>
      
      
      <categories>
          
          <category> tsdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> influxdb </tag>
            
            <tag> benchmark </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InfluxDB存储原理</title>
      <link href="2022/07/27/cloudnativate/influx-yuan-li/"/>
      <url>2022/07/27/cloudnativate/influx-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="InfluxDB存储原理"><a href="#InfluxDB存储原理" class="headerlink" title="InfluxDB存储原理"></a><strong>InfluxDB存储原理</strong></h1><p>InfluxDB的存储结构树是时间结构合并树（Time-Structured Merge Tree，TSM），它是由日志结构化合并树（Log-Structured Merge Tree，LSM），根据实际需求变化而来的。</p><p>**LSM树 **</p><p>LSM树包含三部分：Memtable，Immutable和SSTable。MemTable是内存中的数据结构，用于保存最近产生的数据，并按照Key有序地组织数据。内存并不是可靠存储，若断电就会丢失数据，因此通常会使用预写式日志(Write-ahead logging，WAL)的方式来保证数据的可靠性。</p><p><img src="https://s2.loli.net/2022/08/24/6R4mKYCgjaIE5AB.png" alt="lsm tree"></p><p> <strong>TSM存储引擎</strong></p><p>TSM存储引擎主要包括四部分:Cache，WAL，TSM File，Compactor。下图中shard与TSM引擎主要部分放在一起，但其实shard在是TSM存储引擎之上的一个概念。在 InfluxDB 中按照数据产生的时间范围，会创建不同的shard分组，每个 shard 都有本身的 cache、wal、tsm file 以及 compactor。<br><img src="https://s2.loli.net/2022/08/24/ATmW1QMznoFqUdj.png" alt="tsm engine"></p><p>整个数据的写入流程简化为 3 个步骤：</p><ol><li><p>先写入 WAL</p></li><li><p>然后写入 Cache</p></li><li><p>最终持久化为 TSM File</p><p><img src="https://s2.loli.net/2022/08/24/7Zbqemzhxyf1aO4.jpg" alt="shard"></p><p>WAL</p></li></ol><p>　预写日志<code>Write-Ahead-Log</code>是一种常见的提高数据库优化手段，能够在保证数据安全的同时，提升系统的写入性能。<br>　InfluxDB WAL 由一组定长的 segement 文件构成，每个文件大小约为 10MB。这些 segment 文件只允许追加，不允许修改。</p><p> Cache</p><p>　Cache 是 WAL 的一个内存快照，保证 WAL 中的数据对用户实时可见。<br>　当 Cache 空闲或者过满时，对应的 WAL 将被压缩并转换为 TSM，最终释放内存空间。<br>　每次重启时会根据 WAL 重新构造 Cache。</p><p> TSM File</p><p>　TSM 是一组存储在磁盘上的外存索引文件，细节将在后续进行介绍。</p><p>　它们之间的关系可以简单描述为：</p><ul><li>Cache = WAL</li><li>Cache + TSM = 完整的数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> tsdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> influxdb </tag>
            
            <tag> benchmark </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iInfluxDB 2.0 开源正式发布</title>
      <link href="2022/07/26/cloudnativate/influx2.x/"/>
      <url>2022/07/26/cloudnativate/influx2.x/</url>
      
        <content type="html"><![CDATA[<h1 id="InfluxDB-2-0-开源正式发布"><a href="#InfluxDB-2-0-开源正式发布" class="headerlink" title="InfluxDB 2.0 开源正式发布"></a>InfluxDB 2.0 开源正式发布</h1><p>===================</p><h3 id="By-Russ-Savage-Nov-10，-2020-InfluxDB，-Community，-Developer，-Flux，-InfluxDB-Templates"><a href="#By-Russ-Savage-Nov-10，-2020-InfluxDB，-Community，-Developer，-Flux，-InfluxDB-Templates" class="headerlink" title="By Russ Savage / Nov 10， 2020 / InfluxDB， Community， Developer， Flux， InfluxDB Templates"></a>By <a href="/blog/author/russ">Russ Savage</a> / Nov 10， 2020 / <a href="/blog/category/tech/influxdb">InfluxDB</a>， <a href="/blog/category/community">Community</a>， <a href="/blog/category/tech">Developer</a>， <a href="/blog/category/tech/flux">Flux</a>， <a href="/blog/category/tech/influxdb-templates">InfluxDB Templates</a></h3><p>今天，我们很自豪地宣布，InfluxDB开源2.0现已正式向所有人开放。这是一条漫长的道路，如果没有我们社区的惊人支持和贡献，我们就无法做到这一点。这标志着InfluxDB平台的新时代，但它确实只是一个开始。</p><p><img src="https://s2.loli.net/2022/08/24/7T1KkiJE8HSdDav.png" alt="Getting started with InfluxDB 2.0"></p><p>在我们谈论未来之前，让我们来看看我们的团队一直在研究的一些惊人的新功能。</p><h2 id="默认情况下易于部署和安全"><a href="#默认情况下易于部署和安全" class="headerlink" title="默认情况下易于部署和安全"></a>默认情况下易于部署和安全</h2><p>对于任何熟悉我们现有的开源产品（亲切地称为<a href="https://www.influxdata.com/time-series-platform/telegraf/">Telegraf</a>，<a href="https://www.influxdata.com/products/influxdb-overview/">InfluxDB</a>，<a href="https://www.influxdata.com/time-series-platform/chronograf/">Chronograf</a>和<a href="https://www.influxdata.com/time-series-platform/kapacitor/">Kapacitor</a>的TICK Stack缩写）的人来说，您可能会注意到的第一件事是只有一个二进制文件需要下载和安装。</p><p>新的 InfluxDB 现在在单个二进制文件中包含时间序列数据平台中所需的一切。这简化了部署和设置体验，同时保持了各个组件的强大功能和灵活性。</p><p>单个二进制文件意味着它也更容易保护，因此我们默认使InfluxDB安全。对InfluxDB的每个请求都伴随着一个可以撤销的身份验证令牌，并且内置用户界面使用用户名和密码进行保护。</p><p>通过这些更改，您再也不必担心意外地将存储在 InfluxDB 中的数据暴露给公共互联网。</p><p>易于部署，易于管理，默认情况下是安全的。开发人员期望从现代开发平台获得这些东西，InfluxDB也不例外。</p><h2 id="下一代数据探索和分析"><a href="#下一代数据探索和分析" class="headerlink" title="下一代数据探索和分析"></a>下一代数据探索和分析</h2><p>我们知道开发人员尽快掌握数据的重要性。我们从社区中不断听到的一件事是，Chronograf（TICK Stack的“C”）使得快速查看进入系统的时间序列数据的形状变得非常容易，并简化了许多常见的管理任务。</p><p><img src="https://s2.loli.net/2022/08/24/ZrxmPI3vWgRiojC.png" alt="Next-generation data exploration analytics are available in InfluxDB 2.0"></p><p>InfluxDB 开源 2.0 通过全新的<a href="https://docs.influxdata.com/influxdb/v2.0/visualize-data/explore-metrics/">数据资源管理器</a>、<a href="https://docs.influxdata.com/influxdb/v2.0/visualize-data/visualization-types/">其他可视化类型</a>以及专为时序数据构建的强大新查询语言 <a href="https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/">Flux</a> 延续了这一体验。您可以快速浏览所有测量值、字段和标签，并将常见转换应用于该数据，而无需使用键盘。</p><p>以下是我们新的数据资源管理器的外观：</p><p><img src="https://s2.loli.net/2022/08/24/MXw4KmFahHNLJrY.png" alt="InfluxDB 的新数据资源管理器"></p><p>当然，对于那些希望释放其数据全部潜力的人来说，我们提供了一个脚本编辑器，其中包括自动完成，实时语法检查以及大量示例和文档，以帮助您入门。此编辑器在 InfluxDB Data Explorer、<a href="https://docs.influxdata.com/influxdb/v2.0/visualize-data/dashboards/">Dashboards</a> 和 <a href="https://docs.influxdata.com/influxdb/v2.0/process-data/">Tasks</a> 中使用，并使用 <a href="https://microsoft.github.io/monaco-editor/">Monaco</a>，与 Visual Studio Code 中的编辑器相同。</p><p><img src="https://s2.loli.net/2022/08/24/pAtwLXliT7CByzF.png" alt="摩纳哥 InfluxDB 编辑"></p><p>等等，但是您已经拥有大量基于<a href="https://docs.influxdata.com/influxdb/v1.8/query_language/">InfluxQL</a>构建的应用程序和集成？没问题。InfluxDB 2.0 旨在替代<a href="https://docs.influxdata.com/influxdb/v2.0/reference/api/influxdb-1x/">您现有的 InfluxDB</a> 实例。这意味着，如果您使用外部可视化工具进行仪表板操作或将数据写入数据库，则在升级后，该工具仍可正常工作。当然，我们建议将这些连接迁移到最新的 v2 API，但它们将继续按原样正常工作。向后兼容的 API 可帮助您根据需要快速移动。</p><h2 id="Flux：下一代数据处理语言，可在数据所在的位置处理数据"><a href="#Flux：下一代数据处理语言，可在数据所在的位置处理数据" class="headerlink" title="Flux：下一代数据处理语言，可在数据所在的位置处理数据"></a>Flux：下一代数据处理语言，可在数据所在的位置处理数据</h2><p>许多用户喜欢通过InfluxQL（我们类似SQL的查询语言）访问数据的简单性。作为通往平台的简单入口，这是体验InfluxDB强大功能的好地方。但是，随着时间的推移，随着用例的复杂性越来越超出简单的选择语句，因此也带来了挑战。因此，开发人员最终编写了自定义应用程序逻辑，以执行现代应用程序通常需要的许多复杂转换。</p><p>这有一些缺点。首先，我们希望构建一个平台，使开发人员的工作效率更高，而花费在编写通用数据转换逻辑上的任何时间都是从为他们自己的用户和客户建立价值中花费的时间。第二个缺点是性能。数据从存储层获取的距离越远，转换往往会变得越慢。</p><p><a href="https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/query-influxdb/">Flux</a>的核心就是解决这些问题。Flux不是一种类似SQL的语言;它是一种类似于JavaScript或Python<a href="https://en.wikipedia.org/wiki/Functional_programming">的函数式编程语言</a>。这意味着您可以像编程应用程序一样自定义和构建查询，将通用逻辑分离到可重用的函数和库中，从而减少需要编写的代码总量。该代码也尽可能靠近存储层执行，直接向下推送许多操作，从而为您提供最快的系统性能。</p><h2 id="数据更好地结合在一起"><a href="#数据更好地结合在一起" class="headerlink" title="数据更好地结合在一起"></a>数据更好地结合在一起</h2><p>Flux 还构建为处理不仅仅是时间序列数据（尽管这是它的主要工作）。它可以直接从SQL数据存储中提取数据，例如Postgres，Microsoft SQL Server，SQLite和SAP Hana以及基于云的数据存储，如Google Bigtable，Amazon Athena和Snowflake。这使您可以丰富时序数据以提供额外的上下文。以下是一些示例：</p><ul><li>  对于 <strong>IoT</strong> 用户，Flux 允许您将来自传感器的时间序列数据与来自制造商、型号、设备使用年限或里程等关系表的信息相结合。</li><li>  对于<strong>真实用户监控</strong> （RUM），您可以使用 Flux 查找客户 ID 并连接客户名称、定价计划以及公司名称和位置等公司数据。</li><li>  在<strong>IT基础设施监控中</strong>，Flux可以将服务器ID解析为软件版本和配置参数。</li></ul><p><img src="https://s2.loli.net/2022/08/24/kWlvSq3IZ7Kbt6X.png" alt="InfluxDB 和 Flux 允许您使用关系数据库丰富时间序列数据"></p><blockquote><p>InfluxDB 和 Flux 可让您使用关系数据库来丰富时间序列数据</p></blockquote><h2 id="时间与空间相遇：使用通量的地理时态查询"><a href="#时间与空间相遇：使用通量的地理时态查询" class="headerlink" title="时间与空间相遇：使用通量的地理时态查询"></a>时间与空间相遇：使用通量的地理时态查询</h2><p>Flux 还允许您<a href="https://www.influxdata.com/blog/exploring-geo-temporal-flux/">执行地理时态查询</a>，因此您可以<a href="https://docs.influxdata.com/influxdb/v2.0/query-data/flux/geo/">按时间和位置进行过滤</a>。这对于许多需要跟踪移动设备或<a href="https://www.influxdata.com/customer/waykonect/">车辆</a>的物联网用例至关重要。例如，下面的简单 Flux 查询允许您查询以三角形为界的所有点，三个坐标处的点。</p><pre class="line-numbers language-none"><code class="language-none">`from(bucket: "example-bucket")  |&gt; range(start: -1h)  |&gt; filter(fn: (r) =&gt; r._measurement == "example-measurement")  |&gt; geo.filterRows(    region: {      points: [        {lat: 40.671659, lon: -73.936631},        {lat: 40.706543, lon: -73.749177},        {lat: 40.791333, lon: -73.880327}      ]    }  )`Copy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上面的查询，您将获得以下可视化效果的数据：</p><p><img src="https://s2.loli.net/2022/08/24/G5UEOeVqJbsIS4t.png" alt="Flux 的地理时态库可让您按位置和时间进行查询"></p><blockquote><p>Flux 的地理时态库允许您按位置和时间进行查询</p></blockquote><p>开发人员寻找的不仅仅是查询其数据的能力。他们想用它来建造。Flux 为我们的社区提供了使用数据分析和构建应用程序的最快、最强大的方法，我们迫不及待地想让您尝试一下。</p><h2 id="计算指标、缩减采样等的后台处理"><a href="#计算指标、缩减采样等的后台处理" class="headerlink" title="计算指标、缩减采样等的后台处理"></a>计算指标、缩减采样等的后台处理</h2><p>以交互方式处理数据可以提供强大的见解，但在现代系统中，这些交互式查询仅占整体处理的一小部分。流入应用程序的大多数数据在与其他信息结合使用以生成有关正在发生的事情的知识时会更加强大。该处理需要在后台持续可靠地进行，同时专注于利用见解。</p><p>InfluxDB 2.0包含一<a href="https://docs.influxdata.com/influxdb/v2.0/process-data/get-started/">个名为Messions的强大新后台处理系统</a>，该系统是使用与访问平台中存储的数据相同的Flux语言构建和执行的。这些任务可以执行许多强大的操作，包括聚合经常访问的指标以提高仪表板的性能，根据存储在完全不同系统中的数据计算自定义指标，或对数据进行缩减采样以节省长期存储费用。</p><p>还可以利用任务自动将数据推送到其他系统，从而对数据进行通知或警报。因为它们基于 Flux 语言，所以当我们添加新的库、功能或工具时，可以在任务中自动利用这些库、功能或工具。</p><p>InfluxDB任务在概念上类似于Kapacitor（TICK中的“K”）。但与Kapacitor不同的是，Kapacitor使用一种名为TICKscript的语言，该语言与Chronograf中使用的InfluxQL分开，Tasks使用Flux。这简化了开发人员的工作，因为他们可以对数据资源管理器和仪表板中的查询以及任务中的数据处理使用一种语言。</p><p>任务是平台的处理支柱，我们认为您将找到一些惊人的方法来使用它们。</p><h2 id="实时警报和通知"><a href="#实时警报和通知" class="headerlink" title="实时警报和通知"></a>实时警报和通知</h2><p>我们公司的座右铭是，我们的团队永远不必查看仪表板即可知道出了什么问题。监控和警报对任何应用程序平台都至关重要，我们也不例外。</p><p>InfluxDB 2.0包括一个强大的监控和警报系统，该系统基于与任务和Flux相同的技术。我们的原生用户界面提供了一种快速定义数据阈值和死人警报的方法，但如果您需要更高的灵活性，您可以使用底层任务系统构建您自己的自定义警报。</p><p><img src="https://s2.loli.net/2022/08/24/guIDq5AFXHMQb2i.png" alt="使用 InfluxDB 2.0 构建自定义警报"></p><blockquote><p>InfluxDB 和 Flux 可让您向各种端点发送警报</p></blockquote><p>来自这些警报的通知可以发送到任意数量的外部系统，包括 PagerDuty、Slack、Microsoft Teams、电子邮件、MQTT 或你控制的自定义 HTTP 终结点（webhook）。我们提供直观的用户界面来定义和管理这些警报，但通过 UI 提供的每一点功能都通过我们的 API 公开，因此您可以构建适合您的自动化。</p><h2 id="具有异常良好工具的通用-API"><a href="#具有异常良好工具的通用-API" class="headerlink" title="具有异常良好工具的通用 API"></a>具有异常良好工具的通用 API</h2><p>时间是最终的稀缺资源，开发人员经常在易用性与未来的功能和灵活性之间取得平衡，这是很常见的。在 InfluxDB 2.0 中，我们希望让它变得非常简单，同时也让我们的社区相信，随着他们的用例的发展和使用的增长，我们已经为您做好了准备。</p><p>我们的下一代平台是围绕单个通用 API 构建的。无论您是在笔记本电脑上本地构建应用程序，还是扩展到全球数百万用户，构建应用程序的 API 都是相同的。</p><p>这也使我们能够提供一套功能强大的<a href="https://docs.influxdata.com/influxdb/v2.0/reference/cli/">命令行工具和</a><a href="https://docs.influxdata.com/influxdb/v2.0/tools/client-libraries/">跨10种语言的特定于语言的客户端库</a>，以及适用于所有产品的SDK。如果您正在构建应用程序，那么使用 InfluxDB 启动和运行的最快方法是通过我们的一个客户端库。</p><p><img src="https://s2.loli.net/2022/08/24/xYE72sW1wcOJl6P.png" alt="InfluxDB 客户端库提供多种语言版本"></p><blockquote><p>InfluxDB 客户端库提供多种语言版本</p></blockquote><p>无论您现在正在构建什么，或者将来需要什么样的规模，您都可以放心，您不需要重写应用程序来利用InfluxDB的强大功能。</p><h2 id="通过-InfluxDB-堆栈和模板实现现代-GitOps-工作流"><a href="#通过-InfluxDB-堆栈和模板实现现代-GitOps-工作流" class="headerlink" title="通过 InfluxDB 堆栈和模板实现现代 GitOps 工作流"></a>通过 InfluxDB 堆栈和模板实现现代 GitOps 工作流</h2><p>Kubernetes已经接管了世界，它带来了<a href="https://www.weave.works/technologies/gitops/">GitOps</a>工作流的兴起，使管理和部署应用程序就像签入代码一样简单。InfluxDB 2.0 旨在利用 <a href="https://docs.influxdata.com/influxdb/v2.0/influxdb-templates/stacks/">InfluxDB 堆栈</a>和<a href="https://www.influxdata.com/products/influxdb-templates/">模板</a>无缝集成到您的 GitOps 部署策略中。</p><p>使用命令行工具，您可以通过声明性配置和基于 git 的更改管理来快速管理平台中所有资源的状态。这还允许您构建功能强大的持续集成和部署管道，使部署（更重要的是回滚）更改变得轻松。</p><p>该技术为InfluxDB模板功能提供支持，该功能为各种流行技术提供开箱即用的全栈监控。InfluxDB模板是免费使用的，<a href="https://www.influxdata.com/products/influxdb-templates/gallery/">模板库</a>继续增长，因为专家希望与他人分享他们的专业知识。您可以利用InfluxDB社区的集体知识，同时保持扩展和自定义模板的自由，以满足您的确切需求。认为你有正确的东西吗？您也可以<a href="https://github.com/influxdata/community-templates">贡献自己的专业知识</a>！</p><p><img src="https://s2.loli.net/2022/08/24/PeK3dI5fEAyWr6i.png" alt="InfluxDB 模板库"></p><blockquote><p>InfluxDB Template Gallery</p></blockquote><p>InfluxDB 2.0 允许您自信地部署更改，站在专家的肩膀上，让您专注于构建应用程序。</p><h2 id="我们从这里走向何方"><a href="#我们从这里走向何方" class="headerlink" title="我们从这里走向何方"></a>我们从这里走向何方</h2><p>正如我在本文开头所说，此版本代表了我们的工程团队在近两年的参与和倾听我们社区方面的大量辛勤工作，但这仅仅是个开始。展望未来，您可以期待一些事情。我们计划标准化我们的发布节奏，以便社区知道何时需要新功能和错误修复。</p><p>我们的InfluxDB开源路线图将开始专注于解锁需要本地部署软件的用例，但继续与InfluxDB平台的其他部分（包括<a href="https://www.influxdata.com/products/influxdb-cloud/">InfluxDB Cloud</a>）结合使用。寻找简单的方法来解锁数据复制和聚合到云，以及更多在边缘引入和分析数据的方法。</p><p>我们对开源软件的未来感到非常兴奋，并为我们令人惊叹的社区感到谦卑，这些社区帮助我们构建了出色的软件。我们希望您加入我们的旅程，并在<a href="https://github.com/influxdata/influxdb">GitHub</a>或我们的<a href="https://community.influxdata.com/">社区论坛</a>和<a href="https://influxdata.com/slack">Slack</a>上打招呼。</p>]]></content>
      
      
      <categories>
          
          <category> tsdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> influxdb </tag>
            
            <tag> benchmark </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influx_vs_victoriametrics_single_test_report</title>
      <link href="2022/07/25/cloudnativate/influx-vs-vm-single-version/"/>
      <url>2022/07/25/cloudnativate/influx-vs-vm-single-version/</url>
      
        <content type="html"><![CDATA[<h1 id="influx-vs-victoriametrics-single-test-report"><a href="#influx-vs-victoriametrics-single-test-report" class="headerlink" title="influx_vs_victoriametrics_single_test_report"></a>influx_vs_victoriametrics_single_test_report</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p><strong>Prometheus</strong>: 178.104.163.111 2c4g</p></li><li><p><strong>k8s集群</strong>：178.104.163.88</p></li><li><p><strong>Node</strong>： 178.104.163.175     2c6g</p></li></ul><blockquote><p>influxdb, victoriametrics 均安装最新版本作为本次测试</p></blockquote><p><strong>架构图</strong></p><p><img src="https://s2.loli.net/2022/08/24/RItj6TpcVk9Nv5a.png" alt="image-20220725164911617"></p><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><p><a href="./single_version.md">各组件部署方式</a></p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><blockquote><p>运行时间两天</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 磁盘本地存储[root@vm-3 ~]# du -sh vm221M    vm[root@vm-3 ~]# du -sh /var/lib/influxdb2/1.6G    /var/lib/influxdb2/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/24/M2XBdumLibYhTcG.png" alt="image-20220725132539769"></p><ul><li><p>CPU</p><p><img src="https://s2.loli.net/2022/08/24/6DfW4goZSQG5umz.png" alt="image-20220725133149273"></p></li><li><p>Memory</p><p><img src="https://s2.loli.net/2022/08/24/yP6rOb7GVTMx9uc.png" alt="image-20220725133709846"></p></li><li><p>Rss</p><p><img src="https://s2.loli.net/2022/08/24/KHmRQ1g3Yk6nIp9.png" alt="image-20220725134536786"></p></li><li><p>Disk</p><p><img src="https://s2.loli.net/2022/08/24/fQgeyaFsDcujwtZ.png" alt="image-20220725134809572"></p><p><img src="https://s2.loli.net/2022/08/24/eLEKWbwJatPlCok.png" alt="image-20220725135017922"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tsdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> influxdb </tag>
            
            <tag> benchmark </tag>
            
            <tag> prometheus </tag>
            
            <tag> victoriametrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoByExample-变量</title>
      <link href="2022/07/24/gobyexample-bian-liang/"/>
      <url>2022/07/24/gobyexample-bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="GoByExample-变量"><a href="#GoByExample-变量" class="headerlink" title="GoByExample-变量"></a>GoByExample-变量</h1><h3 id="1-变量的来历"><a href="#1-变量的来历" class="headerlink" title="1. 变量的来历"></a>1. 变量的来历</h3><p>​        程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。</p><h3 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2.  变量类型"></a>2.  变量类型</h3><p>​        变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。</p><p>Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。</p><h3 id="3-变量声明"><a href="#3-变量声明" class="headerlink" title="3. 变量声明"></a>3. 变量声明</h3><p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。</p><ul><li><p>方法一：声明一个变量, 默认的值是 0</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 方法一：声明一个变量, 默认的值是0</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a的类型是: %T\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法二：声明一个变量, 并初始化一个值</p><blockquote><p> Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为<code>false</code>。 切片、函数、指针变量的默认为<code>nil</code>。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 方法二：声明一个变量, 初始化一个值</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b = %d, type of b = %T\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">var</span> bb <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"google.com"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"bb = %s, bb的类型是: %T\n"</span><span class="token punctuation">,</span> bb<span class="token punctuation">,</span> bb<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c = %d, type of c = %T\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token string">"google.com"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"cc = %s, cc的类型是: %T\n"</span><span class="token punctuation">,</span> cc<span class="token punctuation">,</span> cc<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>短声明，只能在函数内</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 方法四：(常用的方法) 省去var关键字，直接自动匹配</span>    <span class="token comment">// 注: 短声明是在函数或方法内部使用, 不支持全局变量声明！！！！</span>    e <span class="token operator">:=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"e = %d, e的类型是: %T\n"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    f <span class="token operator">:=</span> <span class="token string">"google.com"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"f = %s, f的类型是: %T\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多变量声明</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 声明多个变量</span>    <span class="token keyword">var</span> xx<span class="token punctuation">,</span> yy <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"xx = "</span><span class="token punctuation">,</span> xx<span class="token punctuation">,</span> <span class="token string">", yy = "</span><span class="token punctuation">,</span> yy<span class="token punctuation">)</span>    <span class="token keyword">var</span> kk<span class="token punctuation">,</span> jj <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">"google.com"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"kk = "</span><span class="token punctuation">,</span> kk<span class="token punctuation">,</span> <span class="token string">", jj = "</span><span class="token punctuation">,</span> jj<span class="token punctuation">)</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        nn <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>        mm <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"nn = "</span><span class="token punctuation">,</span> nn<span class="token punctuation">,</span> <span class="token string">", mm = "</span><span class="token punctuation">,</span> mm<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> GoByExamble </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influx_vs_victoriametrics_cluster_test_report</title>
      <link href="2022/07/24/cloudnativate/influx-vs-vm-cluster-version/"/>
      <url>2022/07/24/cloudnativate/influx-vs-vm-cluster-version/</url>
      
        <content type="html"><![CDATA[<h1 id="influx-vs-victoriametrics-cluster-test-report"><a href="#influx-vs-victoriametrics-cluster-test-report" class="headerlink" title="influx_vs_victoriametrics_cluster_test_report"></a>influx_vs_victoriametrics_cluster_test_report</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p><strong>Prometheus</strong>: 178.104.163.111         2c4g</p></li><li><p><strong>k8s集群</strong>：178.104.163.88</p><blockquote><p>docker version:20.10.16  k8s version: 1.20.6</p></blockquote></li><li><p><strong>influxdb-cluster</strong></p></li></ul><p>178.104.163.151 influx-1         2c4g<br>178.104.163.26  influx-2          4c8g<br>178.104.163.53  influx-3          4c8g</p><blockquote><p>内核版本：3.10.0-862.el7.x86_64</p><p>docker version：20.10.17</p></blockquote><p><strong>架构图</strong></p><p><img src="https://s2.loli.net/2022/08/24/7um1iE8blcAx3wa.png" alt="image-20220725111041635"></p><ul><li><strong>victoriametrics-cluster</strong></li></ul><p>178.104.163.177  tsdb1       2c4g<br>178.104.163.76   tsdb2        4c8g<br>178.104.163.113  tsdb3        4c8g</p><p><strong>架构图</strong></p><p><img src="https://s2.loli.net/2022/08/24/xCREeMzPVBLowSH.png" alt="image-20220725112020055"></p><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><ul><li><a href="influx_1.6_cluster/README.md">influxdb_cluster 部署方式</a></li><li><a href="vmcluster/README.md">victoriametrics_cluster 部署方式</a></li></ul><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><blockquote><p> 运行时间三天</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 磁盘本地存储[root@influx-1 ~]# du -sh /var/lib/influxdb/1.5G    /var/lib/influxdb/[root@influx-2 ~]# du -sh /var/lib/influxdb/707M    /var/lib/influxdb/[root@influx-3 ~]# du -sh /var/lib/influxdb/1.7G    /var/lib/influxdb/--------------------------------[root@tsdb-cluster-3 ~]# du -sh /var/lib/vm122M    /var/lib/vm[root@tsdb-cluster-2 ~]# du -sh /var/lib/vm174M    /var/lib/vm[root@tsdb-cluster-1 ~]#  du -sh /var/lib/vm199M    /var/lib/vm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/24/WehX5Ec9sLwRFaT.png" alt="image-20220725131101361"></p><p><img src="https://s2.loli.net/2022/08/24/d9ozSZiHkgY7p3X.png" alt="image-20220725131036156"></p><p><img src="https://s2.loli.net/2022/08/24/t4VsSWCoiYv9FjG.png" alt="image-20220725130959873"></p><hr><p><img src="https://s2.loli.net/2022/08/24/26WEjInm7RZACgJ.png" alt="image-20220725121904474"></p><p><img src="https://s2.loli.net/2022/08/24/D7JRMtyXradYlNG.png" alt="image-20220725122029764"></p><p><img src="https://s2.loli.net/2022/08/24/iclMDKn7Z1gR456.png" alt="image-20220725122201004"></p><ul><li><p>CPU</p><p><img src="https://s2.loli.net/2022/08/24/nON9DL3blZJCBvx.png" alt="image-20220725123958988"></p><p><img src="https://s2.loli.net/2022/08/24/YWiFNJUI2K4cjG8.png" alt="image-20220725123408776"></p></li><li><p>Memory</p><p><img src="https://s2.loli.net/2022/08/24/D1huadKbHsYOJ6X.png" alt="image-20220725124140828"></p><p><img src="https://s2.loli.net/2022/08/24/kHojpOWU9i6cMPR.png" alt="image-20220725124516583"></p></li><li><p>Rss</p><p><img src="https://s2.loli.net/2022/08/24/6LBkVFfMKrn84G3.png" alt="image-20220725124653629"></p><p><img src="https://s2.loli.net/2022/08/24/UW8tzhe2PiwdgBO.png" alt="image-20220725124743895"></p></li><li><p>Disk</p><p><img src="https://s2.loli.net/2022/08/24/HIWJ4yBUDVCRdn7.png" alt="image-20220725125916072"></p><p><img src="https://s2.loli.net/2022/08/24/EL3aCsSfhRyWmvN.png" alt="image-20220725125151780"></p><hr><p><img src="https://s2.loli.net/2022/08/24/TvAQVGtrPN2LFXw.png" alt="image-20220725130429272"></p><p><img src="https://s2.loli.net/2022/08/24/1w7fSOWIeLGEMrP.png" alt="image-20220725153305772"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tsdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> influxdb </tag>
            
            <tag> benchmark </tag>
            
            <tag> prometheus </tag>
            
            <tag> victoriametrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Single Version installation</title>
      <link href="2022/07/18/cloudnativate/single-version/"/>
      <url>2022/07/18/cloudnativate/single-version/</url>
      
        <content type="html"><![CDATA[<h1 id="Single-Version"><a href="#Single-Version" class="headerlink" title="Single Version"></a>Single Version</h1><ul><li><p>install victoriametrics</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker run -it -d \--name vm \    -v /root/vm:/victoria-metrics-data \    -p 8428:8428 \    victoriametrics/victoria-metrics:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>install influxdb(latest)</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker run -p 8086:8086 -d  \--name influxdb-v /var/lib/influxdb2:/var/lib/influxdb2  \    -e DOCKER_INFLUXDB_INIT_USERNAME=root    \    -e DOCKER_INFLUXDB_INIT_PASSWORD=huayun@123   \    -e DOCKER_INFLUXDB_INIT_ORG=huayun   \    -e DOCKER_INFLUXDB_INIT_BUCKET=prometheus   \    influxdb:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>install cadvisor</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker run -d \    --name cadvisor \    -p 8080:8080 \    -v /:/rootfs:ro \    -v /var/run/:/var/run/:rw \    -v /sys/:/sys/:ro \    -v /var/lib/docker/:/var/lib/docker/:ro \    -v /dev/disk/:/dev/disk/:ro \    google/cadvisor:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> tsdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> influxdb </tag>
            
            <tag> benchmark </tag>
            
            <tag> prometheus </tag>
            
            <tag> cadvisor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装 Prometheus，并配置后台启动</title>
      <link href="2022/07/01/cloudnativate/install-prometheus/"/>
      <url>2022/07/01/cloudnativate/install-prometheus/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS7-安装-Prometheus，并配置后台启动"><a href="#CentOS7-安装-Prometheus，并配置后台启动" class="headerlink" title="CentOS7 安装 Prometheus，并配置后台启动"></a>CentOS7 安装 Prometheus，并配置后台启动</h1><blockquote><p>官网获取下载链接地址：<a href="https://prometheus.io/download/">https://prometheus.io/download/</a></p></blockquote><h5 id="1、获取安装包"><a href="#1、获取安装包" class="headerlink" title="1、获取安装包"></a>1、获取安装包</h5><p>切换目录</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom ~]# cd /opt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@Prom opt]#  wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果下载慢，可以用下载工具，下载后上传至服务器。</p><h5 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h5><pre class="line-numbers language-none"><code class="language-none">[root@Prom opt]# tar -zxvf prometheus-2.19.0.linux-amd64.tar.gz[root@Prom opt]# mv prometheus-2.19.0.linux-amd64 prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h5><p>切换目录</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom opt]# cd prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认的端口号是 9090，因此要开放 9090 端口号</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# sudo firewall-cmd --add-port=9090/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新加载防火墙</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# sudo firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行，指定配置文件</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# ./prometheus --config.file=prometheus.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在网页输入地址：<br><strong>服务器 ip:9090</strong><br><img src="https://img-blog.csdnimg.cn/20200418215943525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70"><br>出现以下网页，可以输入以下指令：</p><pre class="line-numbers language-none"><code class="language-none">rate(promhttp_metric_handler_requests_total{code="200"}[1m])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200418220123216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70"></p><h2 id="5、后台启动方式"><a href="#5、后台启动方式" class="headerlink" title="5、后台启动方式"></a>5、后台启动方式</h2><p>创建日志文件</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]#  mkdir -p /applog/prometheus &amp;&amp; touch  /applog/prometheus/prometheus.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方式 一</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# nohup ./prometheus --config.file=prometheus.yml --web.enable-lifecycle &gt; /applog/prometheus/prometheus.log 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方式二 （systemctl 启动方式）</p><p>启动脚本</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# vi /opt/prometheus/prometheus.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加以下内容：</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash/opt/prometheus/prometheus --web.enable-lifecycle --config.file=/opt/prometheus/prometheus.yml &amp;&gt;&gt; /applog/prometheus/prometheus.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>授权脚本</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# chmod +x prometheus.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>新增 <strong>prometheus.service</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# vi /usr/lib/systemd/system/prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加以下内容：</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description=PrometheusDocumentation=https://prometheus.io/docs/introduction/overview/Wants=network-online.targetAfter=network-online.target[Service]User=rootGroup=rootType=simple# 启动脚本ExecStart=/opt/prometheus/prometheus.sh[Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证启动</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置开机加载</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# systemctl enable prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动 Prometheus</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# systemctl start prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看是启动状态</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# systemctl status prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6、启动端口号修改"><a href="#6、启动端口号修改" class="headerlink" title="6、启动端口号修改"></a>6、启动端口号修改</h2><p>启动参数新增，如果配置了脚本，在脚本中添加–web.listen-address=:8091 （你要修改成的端口号）改参数即可</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# prometheus --config.file=prometheus.yml --web.listen-address=:8091<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7、重载配置模式"><a href="#7、重载配置模式" class="headerlink" title="7、重载配置模式"></a>7、重载配置模式</h2><p>需配置参数 <strong>–web.enable-lifecycle</strong> ，上面后台脚本已经添加</p><pre class="line-numbers language-none"><code class="language-none">[root@Prom prometheus]# curl -X POST http://127.0.0.1:9090/-/reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8、prometheus页面警告"><a href="#8、prometheus页面警告" class="headerlink" title="8、prometheus页面警告"></a>8、prometheus页面警告</h2><p>解决方法：在服务器输入命令：ntpdate ntp.aliyun.com 同步时间即可正常~</p>]]></content>
      
      
      <categories>
          
          <category> tsdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minicube</title>
      <link href="2022/06/24/cloudnativate/minicube/"/>
      <url>2022/06/24/cloudnativate/minicube/</url>
      
        <content type="html"><![CDATA[<h1 id="Minicube"><a href="#Minicube" class="headerlink" title="Minicube"></a>Minicube</h1><h2 id="minikebu-start"><a href="#minikebu-start" class="headerlink" title="minikebu start"></a>minikebu start</h2><h3 id="1-Install"><a href="#1-Install" class="headerlink" title="1. Install"></a>1. Install</h3><p>要在 x86-64 Linux 上使用二进制下载安装最新的 minikube 稳定版本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64<span class="token function">sudo</span> <span class="token function">install</span> minikube-linux-amd64 /usr/local/bin/minikube<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>添加到shell配置文件 <code>alias kubectl="minikube kubectl --"</code></p></blockquote><h3 id="2-Start-your-cluster"><a href="#2-Start-your-cluster" class="headerlink" title="2. Start your cluster"></a>2. Start your cluster</h3><p><code>minikube start</code></p><h3 id="3-Interact-with-your-cluster"><a href="#3-Interact-with-your-cluster" class="headerlink" title="3. Interact with your cluster"></a>3. Interact with your cluster</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get po -A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Kubernetes-Dashboard"><a href="#Kubernetes-Dashboard" class="headerlink" title="Kubernetes Dashboard"></a>Kubernetes Dashboard</h4><p><code>minikube dashboard</code></p><h2 id="4-Deploy-applications"><a href="#4-Deploy-applications" class="headerlink" title="4. Deploy applications"></a>4. Deploy applications</h2><p>创建一个示例部署并在端口8080上公开它:</p><p><code>kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4</code></p><p><code>kubectl expose deployment hello-minikube --type=NodePort --port=8080</code></p><p>这可能需要一些时间，但是当您运行时，您的部署很快就会显示出来:</p><p><code>kubectl get services hello-minikube</code></p><p>访问这项服务最简单的方法是让 minikube 为你启动一个网页浏览器:</p><p><code>minikube service hello-minikube</code></p><p>或者，使用 kubectl 转发端口:</p><p><code>kubectl port-forward service/hello-minikube 7080:8080</code></p><p>你的应用程序现在可以在 google <a href="http://localhost:7080/%E4%B8%8A%E4%BD%BF%E7%94%A8%E4%BA%86%E3%80%82">http://localhost:7080/上使用了。</a></p><blockquote><p>Note：<br> k8s.gcr.io 换成 registry.cn-hangzhou.aliyuncs.com/google_containers</p></blockquote><h3 id="LoadBalancer-deployments"><a href="#LoadBalancer-deployments" class="headerlink" title="LoadBalancer deployments"></a>LoadBalancer deployments</h3><p>要访问 LoadBalancer 部署，可以使用“ minikube tunnel”命令:</p><p><code>kubectl create deployment balanced --image=k8s.gcr.io/echoserver:1.4</code><br><code>kubectl expose deployment balanced --type=LoadBalancer --port=8080</code></p><p>在另一个窗口中，启动隧道为平衡部署创建一个可路由的 IP:</p><p><code>minikube tunnel</code></p><p>要查找可路由的 IP，请运行以下命令并检查 external-IP 列:</p><p><code>kubectl get services balanced</code></p><p>您的部署现在可以在 &lt; external-ip &gt; : 8080获得</p><h2 id="5-Manage-your-cluster"><a href="#5-Manage-your-cluster" class="headerlink" title="5. Manage your cluster"></a>5. Manage your cluster</h2><p>暂停 Kubernetes 而不影响已部署的应用程序:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">minikube pause<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开暂停的实例:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">minikube unpause<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止群集:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">minikube stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提高默认内存限制(需要重新启动) :</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">minikube config <span class="token builtin class-name">set</span> memory <span class="token number">16384</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览易于安装的 Kubernetes 服务的目录:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">minikube addons list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建第二个集群，运行老版本的 Kubernetes:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">minikube start -p aged --kubernetes-version<span class="token operator">=</span>v1.16.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除所有的 minikube 集群:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">minikube delete --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> minikube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Schedule-Python周期性任务调度工具</title>
      <link href="2022/01/25/schedule-python-zhou-qi-xing-ren-wu-diao-du-gong-ju/"/>
      <url>2022/01/25/schedule-python-zhou-qi-xing-ren-wu-diao-du-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="Schedule-python周期性任务调度工具"><a href="#Schedule-python周期性任务调度工具" class="headerlink" title="Schedule-python周期性任务调度工具"></a>Schedule-python周期性任务调度工具</h1><p>如果你想在Linux服务器上周期性地执行某个 Python 脚本，最出名的选择应该是 Crontab 脚本，但是 Crontab 具有以下缺点：</p><p><strong><code>1.不方便执行**秒级的任务**。</code></strong> </p><p><strong><code>2.当需要执行的定时任务有上百个的时候，Crontab的**管理就会特别不方便**。</code></strong> </p><p>另外一个选择是 Celery，但是 Celery 的配置比较麻烦，如果你只是需要一个轻量级的调度工具，Celery 不会是一个好选择。</p><p>在你想要使用一个轻量级的任务调度工具，而且希望它尽量简单、容易使用、不需要外部依赖，最好能够容纳 Crontab 的所有基本功能，那么 Schedule 模块是你的不二之选。</p><p>使用它来调度任务可能只需要几行代码，感受一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule  <span class="token keyword">import</span> time    <span class="token keyword">def</span> job<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm working..."</span><span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      schedule<span class="token punctuation">.</span>run_pending<span class="token punctuation">(</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码表示每10分钟执行一次 job 函数，非常简单方便。你只需要引入 schedule 模块，通过调用 <strong><code>scedule.every(时间数).时间类型.do(job)</code></strong> &nbsp;发布周期任务。</p><p>发布后的周期任务需要用 <strong><code>run_pending</code></strong> 函数来检测是否执行，因此需要一个 <strong><code>While</code></strong> 循环不断地轮询这个函数。</p><p>下面具体讲讲Schedule模块的安装和初级、进阶使用方法。</p><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a><em><strong>1.准备</strong></em></h2><p>开始之前，你要确保Python和pip已经成功安装在电脑上，如果没有，可以访问这篇文章：<a href="http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&amp;mid=2247485004&amp;idx=1&amp;sn=6f89120cf926e71c7eb4788744ff625f&amp;chksm=eb25e4c5dc526dd31f216f56b963179a0bc301a5654644ef98f436aa4740caa6f2774046296f&amp;scene=21#wechat_redirect">超详细Python安装指南</a>&nbsp;进行安装。  </p><p>(可选1)&nbsp;如果你用Python的目的是数据分析，可以直接安装Anaconda：<a href="http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&amp;mid=2247486014&amp;idx=1&amp;sn=4519422fbd83b5feffcbb21552226bc3&amp;chksm=eb25e8b7dc5261a1aef2fa400ca7bcaa8c06394ea1f9a5860ab02bcf95d4664f41903b12bbd8&amp;scene=21#wechat_redirect">Python数据分析与挖掘好帮手—Anaconda</a>，它内置了Python和pip.</p><p>(可选2)&nbsp;此外，推荐大家用VSCode编辑器，它有许多的优点：<a href="http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&amp;mid=2247485849&amp;idx=1&amp;sn=ec098cf67a55bd1d61d4513397434c94&amp;chksm=eb25eb10dc52620682db716d206c18b00bd53c01743729a9dea381e1791566a04a06f1fabca5&amp;scene=21#wechat_redirect">Python 编程的最好搭档—VSCode 详细指南</a>。</p><p><strong>请选择以下任一种方式输入命令安装依赖</strong>：  </p><ol><li>Windows 环境 打开 Cmd (开始-运行-CMD)。  </li><li>MacOS 环境 打开 Terminal (command+空格输入Terminal)。  </li><li>如果你用的是 VSCode编辑器 或 Pycharm，可以直接使用界面下方的Terminal.</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> schedule<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a><em><strong>2.基本使用</strong></em></h2><p>最基本的使用在文首已经提到过，下面给大家展示更多的调度任务例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule  <span class="token keyword">import</span> time    <span class="token keyword">def</span> job<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm working..."</span><span class="token punctuation">)</span>    <span class="token comment"># 每十分钟执行任务  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>  <span class="token comment"># 每个小时执行任务  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>  <span class="token comment"># 每天的10:30执行任务  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">"10:30"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>  <span class="token comment"># 每个月执行任务  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>monday<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>  <span class="token comment"># 每个星期三的13:15分执行任务  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>wednesday<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">"13:15"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>  <span class="token comment"># 每分钟的第17秒执行任务  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minute<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">":17"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      schedule<span class="token punctuation">.</span>run_pending<span class="token punctuation">(</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，从月到秒的配置，上面的例子都覆盖到了。不过<strong>如果你想只运行一次任务</strong>的话，可以这么配：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule  <span class="token keyword">import</span> time    <span class="token keyword">def</span> job_that_executes_once<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 此处编写的任务只会执行一次...  </span>    <span class="token keyword">return</span> schedule<span class="token punctuation">.</span>CancelJob    schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">'22:30'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job_that_executes_once<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      schedule<span class="token punctuation">.</span>run_pending<span class="token punctuation">(</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数传递</strong></p><p>如果你有参数需要传递给作业去执行，你只需要这么做：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule    <span class="token keyword">def</span> greet<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token comment"># do() 将额外的参数传递给job函数  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">.</span>do<span class="token punctuation">(</span>greet<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Alice'</span><span class="token punctuation">)</span>  schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">.</span>do<span class="token punctuation">(</span>greet<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取目前所有的作业</strong></p><p>如果你想获取目前所有的作业：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule    <span class="token keyword">def</span> hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world'</span><span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>do<span class="token punctuation">(</span>hello<span class="token punctuation">)</span>    all_jobs <span class="token operator">=</span> schedule<span class="token punctuation">.</span>get_jobs<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>取消所有作业</strong></p><p>如果某些机制触发了，你需要立即清除当前程序的所有作业：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule    <span class="token keyword">def</span> greet<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>do<span class="token punctuation">(</span>greet<span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>标签功能</strong></p><p>在设置作业的时候，为了后续方便管理作业，你可以给作业打个标签，这样你可以通过标签过滤获取作业或取消作业。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule    <span class="token keyword">def</span> greet<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># .tag 打标签  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">.</span>do<span class="token punctuation">(</span>greet<span class="token punctuation">,</span> <span class="token string">'Andrea'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tag<span class="token punctuation">(</span><span class="token string">'daily-tasks'</span><span class="token punctuation">,</span> <span class="token string">'friend'</span><span class="token punctuation">)</span>  schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span>do<span class="token punctuation">(</span>greet<span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tag<span class="token punctuation">(</span><span class="token string">'hourly-tasks'</span><span class="token punctuation">,</span> <span class="token string">'friend'</span><span class="token punctuation">)</span>  schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span>do<span class="token punctuation">(</span>greet<span class="token punctuation">,</span> <span class="token string">'Monica'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tag<span class="token punctuation">(</span><span class="token string">'hourly-tasks'</span><span class="token punctuation">,</span> <span class="token string">'customer'</span><span class="token punctuation">)</span>  schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">.</span>do<span class="token punctuation">(</span>greet<span class="token punctuation">,</span> <span class="token string">'Derek'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tag<span class="token punctuation">(</span><span class="token string">'daily-tasks'</span><span class="token punctuation">,</span> <span class="token string">'guest'</span><span class="token punctuation">)</span>    <span class="token comment"># get_jobs(标签)：可以获取所有该标签的任务  </span>friends <span class="token operator">=</span> schedule<span class="token punctuation">.</span>get_jobs<span class="token punctuation">(</span><span class="token string">'friend'</span><span class="token punctuation">)</span>    <span class="token comment"># 取消所有 daily-tasks 标签的任务  </span>schedule<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token string">'daily-tasks'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设定作业截止时间</strong></p><p>如果你需要让某个作业到某个时间截止，你可以通过这个方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule  <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token punctuation">,</span> time    <span class="token keyword">def</span> job<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Boo'</span><span class="token punctuation">)</span>    <span class="token comment"># 每个小时运行作业，18:30后停止  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hours<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token string">"18:30"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>    <span class="token comment"># 每个小时运行作业，2030-01-01 18:33 today  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hours<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token string">"2030-01-01 18:33"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>    <span class="token comment"># 每个小时运行作业，8个小时后停止  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hours<span class="token punctuation">.</span>until<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>    <span class="token comment"># 每个小时运行作业，11:32:42后停止  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hours<span class="token punctuation">.</span>until<span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>    <span class="token comment"># 每个小时运行作业，2020-5-17 11:36:20后停止  </span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hours<span class="token punctuation">.</span>until<span class="token punctuation">(</span>datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>截止日期之后，该作业将无法运行。</p><p><strong>立即运行所有作业，而不管其安排如何</strong></p><p>如果某个机制触发了，你需要立即运行所有作业，可以调用 <strong><code>schedule.run_all()</code></strong> :</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule    <span class="token keyword">def</span> job_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Foo'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> job_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Bar'</span><span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>monday<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">"12:40"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job_1<span class="token punctuation">)</span>  schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tuesday<span class="token punctuation">.</span>at<span class="token punctuation">(</span><span class="token string">"16:40"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>do<span class="token punctuation">(</span>job_2<span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>run_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 立即运行所有作业，每次作业间隔10秒  </span>schedule<span class="token punctuation">.</span>run_all<span class="token punctuation">(</span>delay_seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-高级使用"><a href="#3-高级使用" class="headerlink" title="3.高级使用"></a><em><strong>3.高级使用</strong></em></h2><p><strong>装饰器安排作业</strong></p><p>如果你觉得设定作业这种形式太啰嗦了，也可以使用装饰器模式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">from</span> schedule <span class="token keyword">import</span> every<span class="token punctuation">,</span> repeat<span class="token punctuation">,</span> run_pending  <span class="token keyword">import</span> time    <span class="token comment"># 此装饰器效果等同于 schedule.every(10).minutes.do(job)  </span><span class="token decorator annotation punctuation">@repeat</span><span class="token punctuation">(</span>every<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">)</span>  <span class="token keyword">def</span> job<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am a scheduled job"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      run_pending<span class="token punctuation">(</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>并行执行</strong></p><p>默认情况下，Schedule 按顺序执行所有作业。其背后的原因是，很难找到让每个人都高兴的并行执行模型。</p><p>不过你可以通过多线程的形式来运行每个作业以解决此限制：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> threading  <span class="token keyword">import</span> time  <span class="token keyword">import</span> schedule    <span class="token keyword">def</span> job1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm running on thread %s"</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> job2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm running on thread %s"</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> job3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm running on thread %s"</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> run_threaded<span class="token punctuation">(</span>job_func<span class="token punctuation">)</span><span class="token punctuation">:</span>      job_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>job_func<span class="token punctuation">)</span>      job_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">.</span>do<span class="token punctuation">(</span>run_threaded<span class="token punctuation">,</span> job1<span class="token punctuation">)</span>  schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">.</span>do<span class="token punctuation">(</span>run_threaded<span class="token punctuation">,</span> job2<span class="token punctuation">)</span>  schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">.</span>do<span class="token punctuation">(</span>run_threaded<span class="token punctuation">,</span> job3<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      schedule<span class="token punctuation">.</span>run_pending<span class="token punctuation">(</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日志记录</strong></p><p>Schedule 模块同时也支持 logging 日志记录，这么使用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> schedule  <span class="token keyword">import</span> logging    logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span><span class="token punctuation">)</span>  schedule_logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'schedule'</span><span class="token punctuation">)</span>  <span class="token comment"># 日志级别为DEBUG  </span>schedule_logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>    <span class="token keyword">def</span> job<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, Logs"</span><span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>do<span class="token punctuation">(</span>job<span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>run_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    schedule<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">DEBUG:schedule:Running *all* <span class="token number">1</span> <span class="token function">jobs</span> with 0s delay <span class="token keyword">in</span> between  DEBUG:schedule:Running job Job<span class="token punctuation">(</span>interval<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">unit</span><span class="token operator">=</span>seconds, <span class="token assign-left variable">do</span><span class="token operator">=</span>job, <span class="token assign-left variable">args</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token assign-left variable">kwargs</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  Hello, Logs  DEBUG:schedule:Deleting *all* <span class="token function">jobs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>异常处理</strong></p><p>Schedule 不会自动捕捉异常，它遇到异常会直接抛出，这会导致一个严重的问题：<strong>后续所有的作业都会被中断执行</strong>，因此我们需要捕捉到这些异常。</p><p>你可以手动捕捉，但是某些你预料不到的情况需要程序进行自动捕获，加一个装饰器就能做到了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> functools    <span class="token keyword">def</span> catch_exceptions<span class="token punctuation">(</span>cancel_on_failure<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> catch_exceptions_decorator<span class="token punctuation">(</span>job_func<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>job_func<span class="token punctuation">)</span>          <span class="token keyword">def</span> wrapper<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">try</span><span class="token punctuation">:</span>                  <span class="token keyword">return</span> job_func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>              <span class="token keyword">except</span><span class="token punctuation">:</span>                  <span class="token keyword">import</span> traceback                  <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token keyword">if</span> cancel_on_failure<span class="token punctuation">:</span>                      <span class="token keyword">return</span> schedule<span class="token punctuation">.</span>CancelJob          <span class="token keyword">return</span> wrapper      <span class="token keyword">return</span> catch_exceptions_decorator    <span class="token decorator annotation punctuation">@catch_exceptions</span><span class="token punctuation">(</span>cancel_on_failure<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> bad_task<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span>    schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minutes<span class="token punctuation">.</span>do<span class="token punctuation">(</span>bad_task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，**<code>bad_task</code>** 在执行时遇到的任何错误，都会被 <strong><code>catch_exceptions</code></strong> 捕获，这点在保证调度任务正常运转的时候非常关键。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Schedule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python collections模块的高效数据类型</title>
      <link href="2022/01/25/collections-mo-kuai-de-gao-xiao-shu-ju-lei-xing/"/>
      <url>2022/01/25/collections-mo-kuai-de-gao-xiao-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="python-collections模块的高效数据类型"><a href="#python-collections模块的高效数据类型" class="headerlink" title="python collections模块的高效数据类型"></a>python collections模块的高效数据类型</h1><blockquote><p>python的collections是用于存储数据集合(比如列表list, 字典dict, 元组tuple和集合set)的容器。这些容器内置在Python中，可以直接使用。该collections模块提供了额外的，高性能的数据类型，可以增强你的代码，使事情变得更清洁，更容易。</p></blockquote><h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h2><p>Counter()是字典对象的子类。Counter()可接收一个可迭代遍历的对象（例如字符串、列表或元组）作为参数，并返回计数器字典。字典的键将是可遍历对象中的唯一元素，每个键的值将是可迭代对象中的每个唯一元素对应的计数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counterlst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>counter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token comment"># Conter ({1：7，2：2：5，3：3})</span><span class="token keyword">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 返回7。1的数量有7个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="most-common"><a href="#most-common" class="headerlink" title="most_common"></a>most_common</h3><p>Counter对象最有用的功能是most_common()函数。将其应用于Counter对象时，它将返回N个最常见元素及其计数的列表，按从最常见到最不常见的顺序排列。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>counter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 返回最常见两个元素及其计数 </span><span class="token comment"># [（1，7），（2，5）]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><p>defaultdict工作起来完全像一个普通的Python字典，但它有额外的奖励。当您试图访问一个不存在的键，它不会引发错误，而是使用不存在的键创建新的key，其对应的默认值是根据创建defaultdict对象时作为参数传递的数据类型自动设置的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdictnames_dict <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>names_dict<span class="token punctuation">[</span><span class="token string">"Bob"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>names_dict<span class="token punctuation">[</span><span class="token string">"Katie"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>sara_number <span class="token operator">=</span> names_dict<span class="token punctuation">[</span><span class="token string">"Sara"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>names_dict<span class="token punctuation">)</span><span class="token comment"># defaultdict(&lt;class 'int'&gt;, {'Bob': 1, 'Katie': 2, 'Sara': 0})</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在普通字典中，这将引发错误。使用defaultdict后不再报错，而是自动以”Sara”创建一个新键key，其初始化值为0，是因为我们指定了int数据类型作为初始化值。</p></blockquote><p>如果要将设置列表类型数据做为一个key的初始化值，我们只需设置<code>names_dict = defaultdict(list)</code>，此时“Sara”将使用空列表初始化[]。此时打印结果如下所示：</p><p><code>defaultdict(&lt;class 'int'&gt;, {'Bob': 1, 'Katie': 2, 'Sara': []})</code></p><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>deque队列是在计算机科学里最基本的数据结构，遵循先入先出（FIFO）的原理。简单来说，这意味着添加到队列中的第一个对象也必须是要删除的第一个对象。我们只能在队列的前面插入内容，而只能从队列的后面删除内容，而队列中间没有任何动作。</p><p>collections模块提供的deque对象是能实现队列数据结构的优化版本。该功能的主要特色是能够保持队列的大小，即如果将队列的最大长度设置为10，则将deque根据FIFO原理添加和删除元素以保持最大长度始终为10。这是到目前为止，Python中队列的最佳实现。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> dequemy_queue <span class="token operator">=</span> deque<span class="token punctuation">(</span>maxlen<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    my_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_queue<span class="token punctuation">)</span><span class="token comment"># 我们首先初始化deque，指定我们希望它始终保持最大长度为10。</span><span class="token comment"># 其次，当我们通过循环将值插入到队列中时。</span><span class="token comment"># 注意，填充队列的功能与使用常规Python列表的方式完全相同。</span><span class="token comment"># 最后，我们打印出结果。</span><span class="token comment"># deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxlen=10)</span><span class="token comment"># 由于队列中有一个maxlen=10，并且循环中添加了10个元素，</span><span class="token comment"># 因此队列中包含了从1到10的所有数字。</span><span class="token comment"># 现在，让我们看看添加更多数字时会发生什么。</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    my_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_queue<span class="token punctuation">)</span><span class="token comment"># 在上面的代码中，我们在队列中添加了另外5个元素，数字从11到15。</span><span class="token comment"># 但是我们的队列只有一个，且maxlen=10。</span><span class="token comment"># 因此必须删除一些元素，才能插入新的元素。</span><span class="token comment"># 由于队列必须遵循FIFO原则，</span><span class="token comment"># 因此它将删除最先插入队列中的前5个元素，即[1、2、3、4、5]。</span><span class="token comment"># 打印语句的结果如下：</span><span class="token comment"># deque([6, 7, 8, 9, 10, 11, 12, 13, 14, 15], maxlen=10)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><p>在Python中创建常规元组时，其元素是通用的且未命名，这迫使您记住每个元组元素的确切索引。可以使用具名元组namedtuple来解决这个问题。</p><p>该namedtuple()返回与用于所述元组中的每个位置和一个通用名固定名称的元组namedtuple对象。要使用namedtuple，请先为其创建一个模板。下面的代码创建一个namedtuple名为Person的模板，其属性为name，age和job。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuplePerson <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Person'</span><span class="token punctuation">,</span> <span class="token string">'name age job'</span><span class="token punctuation">)</span><span class="token comment"># 创建模板后，您可以使用它来创建namedtuple对象。</span><span class="token comment"># 让我们使用Person模板为2个人创建2个namedtuple对象，并打印它们。</span>Person <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Person'</span><span class="token punctuation">,</span> <span class="token string">'name age job'</span><span class="token punctuation">)</span>Mike <span class="token operator">=</span> Person<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Mike'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'Data Scientist'</span><span class="token punctuation">)</span>Kate <span class="token operator">=</span> Person<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Kate"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'Project Manager'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Mike<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Kate<span class="token punctuation">)</span><span class="token comment"># 上面的代码非常简单。我们使用namedtuple 模板的所有属性来初始化“人员” ，</span><span class="token comment"># 以后可以直接使用Mike或Kate使用元组元素，</span><span class="token comment"># 而不用再使用索引了。上面的打印语句将给出以下结果：</span>Person<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Mike'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'Data Scientist'</span><span class="token punctuation">)</span>Person<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Kate'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'Project Manager'</span><span class="token punctuation">)</span><span class="token comment"># 因此，namedtuple能够更容易地使用，更合适元组对象的组织，可读性也更强。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OrderDict"><a href="#OrderDict" class="headerlink" title="OrderDict"></a>OrderDict</h3><p>Python的字典dict是无序的。如果先键值A先插入字典，键值B后插入字典，但是当你打印字典的Keys列表时，你会发现B可能在A的前面。对于无序字典，每次打印字典时每次显示元素的顺序都不一样。如果你的Python版本较老，需要借助collections模块提供的OrderedDict实现有序字典。</p><p>OrderedDict类似于正常的字典，只是它记住了元素插入的顺序。当对有序的词字典上迭代时，返回元素的顺序是按第一次添加元素的顺序进行。当元素删除时，排好序的词典保持着排序的顺序；但是当新元素添加时，就会被添加到末尾。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dd <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'banana'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment">#按key排序</span>od_by_key <span class="token operator">=</span> collections<span class="token punctuation">.</span>OrderedDict<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>dd<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>od_by_key<span class="token punctuation">)</span> <span class="token comment">#按照value排序</span>od_by_value <span class="token operator">=</span> collections<span class="token punctuation">.</span>OrderedDict<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>dd<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>od_by_value<span class="token punctuation">)</span> <span class="token comment">#输出</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Collections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新安装 Ubuntu 必备工具</title>
      <link href="2022/01/01/new-install-ubuntu/"/>
      <url>2022/01/01/new-install-ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="新安装-Ubuntu-必备工具"><a href="#新安装-Ubuntu-必备工具" class="headerlink" title="新安装 Ubuntu 必备工具"></a>新安装 Ubuntu 必备工具</h1><p>1.更换软件源</p><p>2.更换中文目录名称</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_USxdg-user-dirs-gtk-update<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.安装常用工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ssh net-tools vim htop git</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.安装docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. Update the apt package index and install packages to allow apt to use a repository over HTTPS:</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>    apt-transport-https <span class="token punctuation">\</span>    ca-certificates <span class="token punctuation">\</span>    <span class="token function">curl</span> <span class="token punctuation">\</span>    gnupg <span class="token punctuation">\</span>    lsb-release<span class="token comment"># 2. Add Docker’s official GPG key:</span> <span class="token function">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<span class="token comment"># 3. Use the following command to set up the stable repository. </span><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>  <span class="token string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \  <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">&gt;</span> /dev/null<span class="token comment"># Install Docker Engine</span><span class="token comment"># 1. update index and install and install the latest version</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span class="token comment"># 2. Verify that Docker Engine is installed correctly by running the hello-world image.</span><span class="token function">sudo</span> docker run hello-world<span class="token comment"># docker permission denied </span><span class="token comment"># 1. 新建docker分组</span><span class="token function">sudo</span> <span class="token function">groupadd</span> docker<span class="token comment"># 2. 将当前用户添加进分组里面</span><span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token variable">${<span class="token environment constant">USER</span>}</span><span class="token comment"># 3. 然后重新登录，以便让权限生效</span><span class="token comment"># docker 更换淘宝源</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/docker/daemon.json<span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://klq9hjzs.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment"># Install docker-compose</span><span class="token comment"># 1. Run this command to download the current stable release of Docker Compose:</span><span class="token function">sudo</span> <span class="token function">curl</span> -L <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>"</span> -o /usr/local/bin/docker-compose<span class="token comment"># 2. Apply executable permissions to the binary:</span><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span class="token comment"># Test the installation.</span>docker-compose --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.生产软件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Pycharm</span><span class="token function">sudo</span> snap <span class="token function">install</span> <span class="token punctuation">[</span>pycharm-professional<span class="token operator">|</span>pycharm-community<span class="token punctuation">]</span> --classic<span class="token comment"># Postman</span><span class="token function">sudo</span> snap <span class="token function">install</span> postman<span class="token comment"># Redis Desktop Manager</span><span class="token function">sudo</span> snap <span class="token function">install</span> redis-desktop-manager<span class="token comment"># Typora</span><span class="token comment"># or run:</span><span class="token comment"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><span class="token function">wget</span> -qO - https://typora.io/linux/public-key.asc <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token comment"># add Typora's repository</span><span class="token function">sudo</span> add-apt-repository <span class="token string">'deb https://typora.io/linux ./'</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token comment"># install typora</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> typora<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.优化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 安装 tweek</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnome-tweak-tool<span class="token comment"># 2. 安装插件扩展支持</span><span class="token comment"># 让 gnome 支持插件扩展</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnome-shell-extensions <span class="token comment"># chrome 浏览器扩展支持，可以使用浏览器安装插件</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> chrome-gnome-shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.解决apt-get安装中的E: Sub-process /usr/bin/dpkg returned an error code (1)问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/lib/dpkg/<span class="token function">sudo</span> <span class="token function">mv</span> info/ info_bak          <span class="token comment"># 现将info文件夹更名</span><span class="token function">sudo</span> <span class="token function">mkdir</span> info                 <span class="token comment"># 再新建一个新的info文件夹</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update             <span class="token comment"># 更新</span><span class="token function">sudo</span> <span class="token function">apt-get</span> -f <span class="token function">install</span>         <span class="token comment"># 修复</span><span class="token function">sudo</span> <span class="token function">mv</span> info/* info_bak/        <span class="token comment"># 执行完上一步操作后会在新的info文件夹下生成一些文件，现将这些文件全部移到info_bak文件夹下</span><span class="token function">sudo</span> <span class="token function">rm</span> -rf info                <span class="token comment"># 把自己新建的info文件夹删掉</span><span class="token function">sudo</span> <span class="token function">mv</span> info_bak info           <span class="token comment"># 把以前的info文件夹重新改回名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.oss-browser</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># desktop icon</span><span class="token function">sudo</span> <span class="token function">vim</span> /usr/share/applications/oss.desktop<span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Name</span><span class="token operator">=</span>oss<span class="token assign-left variable">Comment</span><span class="token operator">=</span>a ali tool <span class="token keyword">for</span> pic and video<span class="token assign-left variable">Exec</span><span class="token operator">=</span>oss<span class="token assign-left variable">Icon</span><span class="token operator">=</span>/opt/oss-browser-linux-x64/resources/custom/icon.png<span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Categories</span><span class="token operator">=</span>Development<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># MySQL</span>docker run -itd --name mysql --restart<span class="token operator">=</span>always -p <span class="token number">3306</span>:3306 -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> mysql<span class="token comment"># redis</span>docker run -itd --name redis --restart<span class="token operator">=</span>always -p <span class="token number">6379</span>:6379  redis<span class="token comment"># postgres</span>docker run --name some-postgres --restart<span class="token operator">=</span>always -e <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -p <span class="token number">5432</span>:5432 -d postgres<span class="token comment"># mongodb</span>docker run -itd --name mongo -p <span class="token number">27017</span>:27017 --restart<span class="token operator">=</span>always mongo --authdocker <span class="token builtin class-name">exec</span> -it mongo mongo admin<span class="token comment"># 创建一个名为 admin，密码为 123456 的用户。</span><span class="token operator">&gt;</span>  db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span> user:<span class="token string">'admin'</span>,pwd:<span class="token string">'123456'</span>,roles:<span class="token punctuation">[</span> <span class="token punctuation">{</span> role:<span class="token string">'userAdminAnyDatabase'</span>, db: <span class="token string">'admin'</span><span class="token punctuation">}</span>,<span class="token string">"readWriteAnyDatabase"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 尝试使用上面创建的用户信息进行连接。</span><span class="token operator">&gt;</span> db.auth<span class="token punctuation">(</span><span class="token string">'admin'</span>, <span class="token string">'123456'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.Celery</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.RabbitMQ</p><p>If you’re using Ubuntu or Debian install RabbitMQ by executing this command:</p><p>$ sudo apt-get install rabbitmq-server<br>Or, if you want to run it on Docker execute this:</p><p>$ docker run -d -p 5672:5672 rabbitmq<br>When the command completes, the broker will already be running in the background, ready to move messages for you: Starting rabbitmq-server: SUCCESS.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it  --name rabbitmq -p <span class="token number">5672</span>:5672 -p <span class="token number">15672</span>:15672 -d rabbitmq:3.9-management<span class="token comment"># 启动 rabbitmq 服务</span><span class="token function">service</span> rabbitmq-server start<span class="token comment"># 关闭 rabbitmq 服务</span><span class="token function">service</span> rabbitmq-server stop<span class="token comment"># 重启 rabbitmq 服务</span><span class="token function">service</span> rabbitmq-server restart<span class="token comment"># 查看 rabbitmq 状态</span><span class="token function">service</span> rabbitmq-server status<span class="token comment"># 添加用户</span><span class="token function">sudo</span> rabbitmqctl add_user  admin  admin  <span class="token comment"># 赋予权限</span><span class="token function">sudo</span> rabbitmqctl set_user_tags admin administrator<span class="token comment"># 赋予 virtual host 中所有资源的配置、写、读权限</span><span class="token function">sudo</span> rabbitmqctl  set_permissions -p / admin <span class="token string">'.*'</span> <span class="token string">'.*'</span> <span class="token string">'.*'</span><span class="token comment"># rabbitmq_manager</span><span class="token comment"># rabbitmq_manager 是官方提供的管理工具，官方地址：https://www.rabbitmq.com/management.html</span><span class="token comment"># 启用 rabbitmq_manager</span><span class="token builtin class-name">cd</span> /etc/rabbitmq<span class="token function">sudo</span> rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management <span class="token comment"># 访问 rabbitmq_manager：</span><span class="token comment"># 地址：http://localhost:15672</span><span class="token comment"># 账户：admin</span><span class="token comment"># 密码：admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ununtu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="2021/06/06/dong-tai-gui-hua/"/>
      <url>2021/06/06/dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="判断动态规划"><a href="#判断动态规划" class="headerlink" title="判断动态规划"></a>判断动态规划</h2><p>Wikipedia 定义：它既是一种数学优化的方法，同时也是编程的方法。</p><ol><li><h4 id="是数学优化的方法——最优子结构"><a href="#是数学优化的方法——最优子结构" class="headerlink" title="是数学优化的方法——最优子结构"></a>是数学优化的方法——最优子结构</h4></li></ol><p>动态规划是数学优化的方法指，动态规划要解决的都是问题的最优解。而一个问题的最优解是由它的各个子问题的最优解决定的。</p><p>由此引出动态规划的第一个重要的属性：最优子结构（Optimal Substructure)。</p><p>一般由最优子结构，推导出一个状态转移方程 f(n)，就能很快写出问题的递归实现方法。</p><p><img src="http://s0.lgstatic.com/i/image2/M01/90/EF/CgoB5l2IcqKAT-iFAAvZ0mB2w9o185.gif" alt="dp"></p><ol start="2"><li><h4 id="是编程的方法——重叠子问题"><a href="#是编程的方法——重叠子问题" class="headerlink" title="是编程的方法——重叠子问题"></a>是编程的方法——重叠子问题</h4></li></ol><p>动态规划是编程的方法指，可以借助编程的技巧去保证每个重叠的子问题只会被求解一次。</p><p>引出了动态规划的第二个重要的属性：重叠子问题（Overlapping Sub-problems）。</p><h5 id="一、两种思路"><a href="#一、两种思路" class="headerlink" title="一、两种思路"></a>一、两种思路</h5><h6 id="1、第一种思路模板是一个一维的-dp-数组："><a href="#1、第一种思路模板是一个一维的-dp-数组：" class="headerlink" title="1、第一种思路模板是一个一维的 dp 数组："></a>1、第一种思路模板是一个一维的 dp 数组：</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n = array.length;int[] dp = new int[n];for (int i = 1; i &lt; n; i++) {    for (int j = 0; j &lt; i; j++) {        dp[i] = 最值(dp[i], dp[j] + ...)    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2、第二种思路模板是一个二维的-dp-数组："><a href="#2、第二种思路模板是一个二维的-dp-数组：" class="headerlink" title="2、第二种思路模板是一个二维的 dp 数组："></a>2、第二种思路模板是一个二维的 dp 数组：</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n = arr.length;int[][] dp = new dp[n][n];for (int i = 0; i &lt; n; i++) {    for (int j = 0; j &lt; n; j++) {        if (arr[i] == arr[j])             dp[i][j] = dp[i][j] + ...        else            dp[i][j] = 最值(...)    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>demo</title>
      <link href="2020/12/31/demo/"/>
      <url>2020/12/31/demo/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- i/o used begin--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt-5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>I/O<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io_tabs<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tablist<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav nav-tabs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-horizontal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io_tablink<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#read_tabpanel<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span>            <span class="token attr-name">aria-controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>read_tabpanel<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link active<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> Raw Usage <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io_tablink<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#write_tabpanel<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span>            <span class="token attr-name">aria-controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>write_tabpanel<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> %Allocated <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-pane active<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>read_tabpanel<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabpanel<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span>500px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-pane<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>write_tabpanel<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabpanel<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span>500px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- i/o used end--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'cpu_tabpanel'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'light'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 指定图表的配置项和数据</span><span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 全局调色盘。</span>    <span class="token comment">// color: ['#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],</span>    title<span class="token operator">:</span> <span class="token punctuation">{</span>        text<span class="token operator">:</span> <span class="token string">'CPU Usage'</span><span class="token punctuation">,</span>        left<span class="token operator">:</span> <span class="token string">"center"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    tooltip<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    legend<span class="token operator">:</span> <span class="token punctuation">{</span>        left<span class="token operator">:</span> <span class="token string">"12%"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'%cpu'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    xAxis<span class="token operator">:</span> <span class="token punctuation">{</span>        type<span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>        axisLabel<span class="token operator">:</span> <span class="token punctuation">{</span> interval<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> rotate<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">45</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    yAxis<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        type<span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span>        show<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        position<span class="token operator">:</span> <span class="token string">"left"</span><span class="token punctuation">,</span>        offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"% single core CPU useage"</span><span class="token punctuation">,</span>        nameLocation<span class="token operator">:</span> <span class="token string">"middle"</span><span class="token punctuation">,</span>        nameTextStyle<span class="token operator">:</span> <span class="token punctuation">{</span>            color<span class="token operator">:</span> <span class="token string">"rgba(19, 113, 200, 1)"</span><span class="token punctuation">,</span>            fontStyle<span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span>            fontWeight<span class="token operator">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>            fontFamily<span class="token operator">:</span> <span class="token string">"sans-serif"</span><span class="token punctuation">,</span>            fontSize<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>            align<span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>            lineHeight<span class="token operator">:</span> <span class="token number">50</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'%cpu'</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    toolbox<span class="token operator">:</span> <span class="token punctuation">{</span>        show<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        feature<span class="token operator">:</span> <span class="token punctuation">{</span>            dataZoom<span class="token operator">:</span> <span class="token punctuation">{</span>                yAxisIndex<span class="token operator">:</span> <span class="token string">"none"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            dataView<span class="token operator">:</span> <span class="token punctuation">{</span>                readOnly<span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            magicType<span class="token operator">:</span> <span class="token punctuation">{</span>                type<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"line"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            restore<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            saveAsImage<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> test <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>ids <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/v1/workflow/'</span> <span class="token operator">+</span> ids<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// console.log(response.data.data[i].cpu_precent);</span>            option<span class="token punctuation">.</span>series<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cpu_precent<span class="token punctuation">)</span><span class="token punctuation">;</span>            option<span class="token punctuation">.</span>xAxis<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>process<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// console.log(response.data.data.length);</span>        <span class="token comment">// console.log(option.series);</span>        <span class="token comment">// console.log(option.xAxis);</span>        myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// pctcpu_tabpanel</span><span class="token keyword">var</span> myChart2 <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'pctcpu_tabpanel'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'light'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> option2 <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token operator">:</span> <span class="token punctuation">{</span>        text<span class="token operator">:</span> <span class="token string">'% Requested CPU Used'</span><span class="token punctuation">,</span>        left<span class="token operator">:</span> <span class="token string">"center"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    tooltip<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    legend<span class="token operator">:</span> <span class="token punctuation">{</span>        left<span class="token operator">:</span> <span class="token string">"12%"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'%requested'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    xAxis<span class="token operator">:</span> <span class="token punctuation">{</span>        type<span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>        axisLabel<span class="token operator">:</span> <span class="token punctuation">{</span> interval<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> rotate<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">45</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    yAxis<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        type<span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span>        show<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        position<span class="token operator">:</span> <span class="token string">"left"</span><span class="token punctuation">,</span>        offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"% Allocated CPUs Used"</span><span class="token punctuation">,</span>        nameLocation<span class="token operator">:</span> <span class="token string">"middle"</span><span class="token punctuation">,</span>        nameTextStyle<span class="token operator">:</span> <span class="token punctuation">{</span>            color<span class="token operator">:</span> <span class="token string">"rgba(19, 113, 200, 1)"</span><span class="token punctuation">,</span>            fontStyle<span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span>            fontWeight<span class="token operator">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>            fontFamily<span class="token operator">:</span> <span class="token string">"sans-serif"</span><span class="token punctuation">,</span>            fontSize<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>            align<span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>            lineHeight<span class="token operator">:</span> <span class="token number">50</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'%requested'</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    toolbox<span class="token operator">:</span> <span class="token punctuation">{</span>        show<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        feature<span class="token operator">:</span> <span class="token punctuation">{</span>            dataZoom<span class="token operator">:</span> <span class="token punctuation">{</span>                yAxisIndex<span class="token operator">:</span> <span class="token string">"none"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            dataView<span class="token operator">:</span> <span class="token punctuation">{</span>                readOnly<span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            magicType<span class="token operator">:</span> <span class="token punctuation">{</span>                type<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"line"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            restore<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            saveAsImage<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/v1/workflow/'</span> <span class="token operator">+</span> ids<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// console.log(response.data.data[i].cpu_precent);</span>            option2<span class="token punctuation">.</span>series<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cpus <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            option2<span class="token punctuation">.</span>xAxis<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>process<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// console.log(response.data.data.length);</span>        myChart2<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="2020/11/27/test/"/>
      <url>2020/11/27/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python自定义排序</title>
      <link href="2020/08/20/python-zi-ding-yi-pai-xu/"/>
      <url>2020/08/20/python-zi-ding-yi-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="Python自定义排序"><a href="#Python自定义排序" class="headerlink" title="Python自定义排序"></a>Python自定义排序</h1><p><code>functools.``cmp_to_key</code>(<em>func</em>)</p><p>将(旧式的)比较函数转换为新式的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-key-function">key function</a> . 在类似于 <a href="https://docs.python.org/zh-cn/3/library/functions.html#sorted"><code>sorted()</code></a> ， <a href="https://docs.python.org/zh-cn/3/library/functions.html#min"><code>min()</code></a> ， <a href="https://docs.python.org/zh-cn/3/library/functions.html#max"><code>max()</code></a> ， <a href="https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nlargest"><code>heapq.nlargest()</code></a> ， <a href="https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nsmallest"><code>heapq.nsmallest()</code></a> ， <a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.groupby"><code>itertools.groupby()</code></a> 等函数的 key 参数中使用。此函数主要用作将 Python 2 程序转换至新版的转换工具，以保持对比较函数的兼容。</p><p>比较函数意为一个可调用对象，该对象接受两个参数并比较它们，结果为小于则返回一个负数，相等则返回零，大于则返回一个正数。key function则是一个接受一个参数，并返回另一个用以排序的值的可调用对象。</p><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sorted</span><span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> key<span class="token operator">=</span>cmp_to_key<span class="token punctuation">(</span>locale<span class="token punctuation">.</span>strcoll<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># locale-aware sort order</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="自定义排序示例"><a href="#自定义排序示例" class="headerlink" title="自定义排序示例"></a>自定义排序示例</h2><p>现在定义整数的比较规则，对整数a和b进行组合，组成ab和ba的形式。如果ab&gt;ba,说明a优先级比较高，a应该比较大。针对这个问题排序不能够直接提取出一个key，那么就只能使用cmp_to_key函数进行转换。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    str1 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    str2 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">if</span> str1 <span class="token operator">&gt;</span> str2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">elif</span> str1 <span class="token operator">&lt;</span> str2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span>    nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>functools<span class="token punctuation">.</span>cmp_to_key<span class="token punctuation">(</span><span class="token builtin">cmp</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>         <span class="token comment"># [1, 15, 20, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cmp_to_key</span><span class="token punctuation">(</span>mycmp<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Convert a cmp= function into a key= function"""</span>    <span class="token keyword">class</span> <span class="token class-name">K</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        __slots__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'obj'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>obj <span class="token operator">=</span> obj        <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> mycmp<span class="token punctuation">(</span>self<span class="token punctuation">.</span>obj<span class="token punctuation">,</span> other<span class="token punctuation">.</span>obj<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">__gt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> mycmp<span class="token punctuation">(</span>self<span class="token punctuation">.</span>obj<span class="token punctuation">,</span> other<span class="token punctuation">.</span>obj<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> mycmp<span class="token punctuation">(</span>self<span class="token punctuation">.</span>obj<span class="token punctuation">,</span> other<span class="token punctuation">.</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">__le__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> mycmp<span class="token punctuation">(</span>self<span class="token punctuation">.</span>obj<span class="token punctuation">,</span> other<span class="token punctuation">.</span>obj<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">__ge__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> mycmp<span class="token punctuation">(</span>self<span class="token punctuation">.</span>obj<span class="token punctuation">,</span> other<span class="token punctuation">.</span>obj<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span>        __hash__ <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">return</span> K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在函数内部创建了一个class,并且返回了这个class,在这个class中调用了传入的cmp函数进行了运算符重载。这样使得两个class的对象就可以进行比较了。在sort函数中，如果传入了key函数，它会在比较两个对象的时候，将两个对象作为参数传到key函数里面，然后对key函数的结果进行比较，从而完成了排序。当这里返回一个class的时候，这个key函数实际上就是class的构造函数，实际上就是将要比较的对象作为参数创建了两个K的对象，这两个对象进行过运算符重载，是可以比较的，比较的规则就是传入的cmp所定义的规则。这样就实现了自定义排序规则了。</p><h2 id="例：拼接最大数字问题"><a href="#例：拼接最大数字问题" class="headerlink" title="例：拼接最大数字问题"></a>例：拼接最大数字问题</h2><p>有n个非非负整数,将其按照字符串串拼接的方方式拼接为一一个整数。<br>如何拼接可以使得得到的整数最大大?<br>例例:32,94,128,1286,6,71可以拼接除的最大大整数为<br>94716321286128</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> cmp_to_keyli <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">1286</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">xy_cmp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">+</span> y <span class="token operator">&lt;</span> y <span class="token operator">+</span> x<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">elif</span> x <span class="token operator">+</span> y <span class="token operator">&gt;</span> y <span class="token operator">+</span> x<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">numer_join</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    li <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> li<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>cmp_to_key<span class="token punctuation">(</span>xy_cmp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numer_join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'32'</span><span class="token punctuation">,</span> <span class="token string">'94'</span><span class="token punctuation">,</span> <span class="token string">'128'</span><span class="token punctuation">,</span> <span class="token string">'1286'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'71'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'94'</span><span class="token punctuation">,</span> <span class="token string">'71'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'32'</span><span class="token punctuation">,</span> <span class="token string">'1286'</span><span class="token punctuation">,</span> <span class="token string">'128'</span><span class="token punctuation">]</span><span class="token number">94716321286128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celery 笔记</title>
      <link href="2020/08/10/celery-bi-ji/"/>
      <url>2020/08/10/celery-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Celery-笔记"><a href="#Celery-笔记" class="headerlink" title="Celery 笔记"></a>Celery 笔记</h1><h2 id="一、什么是Celery"><a href="#一、什么是Celery" class="headerlink" title="一、什么是Celery"></a>一、什么是Celery</h2><h3 id="1-1、celery是什么"><a href="#1-1、celery是什么" class="headerlink" title="1.1、celery是什么"></a>1.1、celery是什么</h3><p>Celery是一个简单、灵活且可靠的，处理大量消息的分布式系统，专注于实时处理的异步任务队列，同时也支持任务调度。</p><p><img src="https://i.loli.net/2020/08/13/UBcQ6INAKHyZolS.png" alt="celery"></p><p>Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。</p><p><strong>消息中间件</strong></p><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p><p><strong>任务执行单元</strong></p><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><p><strong>任务结果存储</strong></p><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><p>另外， Celery还支持不同的并发和序列化的手段</p><ul><li>并发：Prefork, Eventlet, gevent, threads/single threaded</li><li>序列化：pickle, json, yaml, msgpack. zlib, bzip2 compression， Cryptographic message signing 等等</li></ul><h3 id="1-2、使用场景"><a href="#1-2、使用场景" class="headerlink" title="1.2、使用场景"></a>1.2、使用场景</h3><p>celery是一个强大的 <strong><em>分布式任务队列的异步处理框架</em></strong>，它可以让任务的执行完全脱离主程序，甚至可以被分配到其他主机上运行。我们通常使用它来实现<strong>异步任务</strong>（async task）和<strong>定时任务</strong>（crontab)。</p><p>异步任务：将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p><p>定时任务：定时执行某件事情，比如每天数据统计</p><h3 id="1-3、Celery具有以下优点"><a href="#1-3、Celery具有以下优点" class="headerlink" title="1.3、Celery具有以下优点"></a>1.3、Celery具有以下优点</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">Simple<span class="token punctuation">(</span>简单<span class="token punctuation">)</span>Celery 使用和维护都非常简单，并且不需要配置文件。Highly Available（高可用）woker和client会在网络连接丢失或者失败时，自动进行重试。并且有的brokers 也支持“双主”或者“主／从”的方式实现高可用。Fast（快速）单个的Celery进程每分钟可以处理百万级的任务，并且只需要毫秒级的往返延迟（使用 RabbitMQ<span class="token punctuation">,</span> librabbitmq<span class="token punctuation">,</span> 和优化设置时）Flexible（灵活）Celery几乎每个部分都可以扩展使用，自定义池实现、序列化、压缩方案、日志记录、调度器、消费者、生产者、broker传输等等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、Celery执行异步任务"><a href="#二、Celery执行异步任务" class="headerlink" title="二、Celery执行异步任务"></a>二、Celery执行异步任务</h2><h3 id="2-1、基本使用"><a href="#2-1、基本使用" class="headerlink" title="2.1、基本使用"></a>2.1、基本使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建异步任务执行文件celery_task:</span><span class="token keyword">import</span> celery<span class="token keyword">import</span> timebackend<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/1'</span>broker<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span>cel<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@cel<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">send_email</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"向%s发送邮件..."</span><span class="token operator">%</span>name<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"向%s发送邮件完成"</span><span class="token operator">%</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token comment"># 创建执行任务文件,produce_task.py:</span><span class="token keyword">from</span> celery_task <span class="token keyword">import</span> send_emailresult <span class="token operator">=</span> send_email<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token string">"lei"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> send_email<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token string">"xxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token comment"># 查看执行结果</span><span class="token keyword">from</span> celery<span class="token punctuation">.</span>result <span class="token keyword">import</span> AsyncResult<span class="token keyword">from</span> celery_task <span class="token keyword">import</span> celasync_result<span class="token operator">=</span>AsyncResult<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"08fde85b-f335-4b5c-9cbe-cc7c808d7a9b"</span><span class="token punctuation">,</span> app<span class="token operator">=</span>cel<span class="token punctuation">)</span><span class="token keyword">if</span> async_result<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> async_result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment"># result.forget() # 将结果删除</span><span class="token keyword">elif</span> async_result<span class="token punctuation">.</span>failed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行失败'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> async_result<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'PENDING'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务等待中被执行'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> async_result<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'RETRY'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务异常后正在重试'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> async_result<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'STARTED'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务已经开始被执行'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 异步任务文件命令执行：<code>celery worker -A celery_app_task -l info</code></p></blockquote><h3 id="2-2、多任务结构"><a href="#2-2、多任务结构" class="headerlink" title="2.2、多任务结构"></a>2.2、多任务结构</h3><p><img src="https://i.loli.net/2020/08/14/hwbyvHMC7IkgmFt.png" alt="多任务目录结构"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># celery.py:</span><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celerycel <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'celery_demo'</span><span class="token punctuation">,</span>             broker<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/1'</span><span class="token punctuation">,</span>             backend<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token punctuation">,</span>             <span class="token comment"># 包含以下两个任务文件，去相应的py文件中找任务，对多个任务做分类</span>             include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_tasks.task01'</span><span class="token punctuation">,</span>                      <span class="token string">'celery_tasks.task02'</span>                      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 时区</span>cel<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment"># 是否使用UTC</span>cel<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment">#task01</span><span class="token keyword">import</span> time<span class="token keyword">from</span> celery_tasks<span class="token punctuation">.</span>celery <span class="token keyword">import</span> cel<span class="token decorator annotation punctuation">@cel<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">send_email</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"完成向%s发送邮件任务"</span><span class="token operator">%</span>res<span class="token comment">#task02</span><span class="token keyword">import</span> time<span class="token keyword">from</span> celery_tasks<span class="token punctuation">.</span>celery <span class="token keyword">import</span> cel<span class="token decorator annotation punctuation">@cel<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">send_msg</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"完成向%s发送短信任务"</span><span class="token operator">%</span>name<span class="token comment"># produce_task.py</span><span class="token keyword">from</span> celery_tasks<span class="token punctuation">.</span>task01 <span class="token keyword">import</span> send_email<span class="token keyword">from</span> celery_tasks<span class="token punctuation">.</span>task02 <span class="token keyword">import</span> send_msg<span class="token comment"># 立即告知celery去执行test_celery任务，并传入一个参数</span>result <span class="token operator">=</span> send_email<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token string">'yuan'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>result <span class="token operator">=</span> send_msg<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token string">'yuan'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token comment">#　check_result.py</span><span class="token keyword">from</span> celery<span class="token punctuation">.</span>result <span class="token keyword">import</span> AsyncResult<span class="token keyword">from</span> celery_tasks<span class="token punctuation">.</span>celery <span class="token keyword">import</span> celasync_result <span class="token operator">=</span> AsyncResult<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"562834c6-e4be-46d2-908a-b102adbbf390"</span><span class="token punctuation">,</span> app<span class="token operator">=</span>cel<span class="token punctuation">)</span><span class="token keyword">if</span> async_result<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> async_result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment"># result.forget() # 将结果删除,执行完成，结果不会自动删除</span>    <span class="token comment"># async.revoke(terminate=True)  # 无论现在是什么时候，都要终止</span>    <span class="token comment"># async.revoke(terminate=False) # 如果任务还没有开始执行呢，那么就可以终止。</span><span class="token keyword">elif</span> async_result<span class="token punctuation">.</span>failed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行失败'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> async_result<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'PENDING'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务等待中被执行'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> async_result<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'RETRY'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务异常后正在重试'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> async_result<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'STARTED'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务已经开始被执行'</span><span class="token punctuation">)</span>        <span class="token comment">###</span><span class="token comment"># 开启work：celery worker -A celery_task -l info -P eventlet，添加任务（执行produce_task.py)，检查任务执行结果（执行check_result.py）</span><span class="token comment">###</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Celery执行定时任务"><a href="#三、Celery执行定时任务" class="headerlink" title="三、Celery执行定时任务"></a>三、Celery执行定时任务</h2><p> 设定时间让celery执行一个定时任务，produce_task.py:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> celery_task <span class="token keyword">import</span> send_email<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token comment"># 方式一</span><span class="token comment"># v1 = datetime(2020, 3, 11, 16, 19, 00)</span><span class="token comment"># print(v1)</span><span class="token comment"># v2 = datetime.utcfromtimestamp(v1.timestamp())</span><span class="token comment"># print(v2)</span><span class="token comment"># result = send_email.apply_async(args=["egon",], eta=v2)</span><span class="token comment"># print(result.id)</span><span class="token comment"># 方式二</span>ctime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 默认用utc时间</span>utc_ctime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcfromtimestamp<span class="token punctuation">(</span>ctime<span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltatime_delay <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>task_time <span class="token operator">=</span> utc_ctime <span class="token operator">+</span> time_delay<span class="token comment"># 使用apply_async并设定时间</span>result <span class="token operator">=</span> send_email<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"egon"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eta<span class="token operator">=</span>task_time<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多任务结构 修改celery.py：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabcel <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'tasks'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/1'</span><span class="token punctuation">,</span> backend<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token punctuation">,</span> include<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token string">'celery_tasks.task01'</span><span class="token punctuation">,</span>    <span class="token string">'celery_tasks.task02'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cel<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span>cel<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span>cel<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment"># 名字随意命名</span>    <span class="token string">'add-every-10-seconds'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment"># 执行tasks1下的test_celery函数</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_tasks.task01.send_email'</span><span class="token punctuation">,</span>        <span class="token comment"># 每隔2秒执行一次</span>        <span class="token comment"># 'schedule': 1.0,</span>        <span class="token comment"># 'schedule': crontab(minute="*/1"),</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 传递参数</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment"># 'add-every-12-seconds': {</span>    <span class="token comment">#     'task': 'celery_tasks.task01.send_email',</span>    <span class="token comment">#     每年4月11号，8点42分执行</span>    <span class="token comment">#     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),</span>    <span class="token comment">#     'args': ('张三',)</span>    <span class="token comment"># },</span><span class="token punctuation">}</span><span class="token triple-quoted-string string">'''# 启动 Beat 程序$ celery beat -A proj&lt;br&gt;# Celery Beat进程会读取配置文件的内容，周期性的将配置中到期需要执行的任务发送给任务队列 # 之后启动 worker 进程.$ celery -A proj worker -l info 或者$ celery -B -A proj worker -l info'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Django中使用celery"><a href="#四、Django中使用celery" class="headerlink" title="四、Django中使用celery"></a>四、Django中使用celery</h2><p><a href="https://github.com/lei025/leetcode/tree/master/djcelery">django_celery代码笔记</a></p><p><a href="https://github.com/lei025/leetcode/tree/master/Celery">celery笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> Celery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python list, tuple的底层细节</title>
      <link href="2020/08/10/pythonlistdict-de-di-ceng-xi-jie/"/>
      <url>2020/08/10/pythonlistdict-de-di-ceng-xi-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="列表和元组"><a href="#列表和元组" class="headerlink" title="列表和元组"></a>列表和元组</h2><p>列表和元组的区别是显然的：列表是动态的，其大小可以该标；</p><p>而元组是不可变的，一旦创建就不能修改。</p><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p><strong>在CPython中，列表被实现为长度可变的数组。</strong></p><p>从细节上看，Python中的列表是由<strong>对其它对象的引用组成的连续数组</strong>。指向这个数组的指针及其长度被保存在一个列表头结构中。这意味着，每次添加或删除一个元素时，由引用组成的数组需要该标大小（重新分配）。幸运的是，Python在创建这些数组时采用了指数过分配，所以并不是每次操作都需要改变数组的大小。但是，也因为这个原因添加或取出元素的平摊复杂度较低。</p><blockquote><p>利用 list.insert(i,item) 方法在任意位置插入一个元素——复杂度O(N)<br>利用 list.pop(i) 或 list.remove(value) 删除一个元素——复杂度O(N)</p></blockquote><p>可以采用时间复杂度来衡量：</p><p>index() O(1)<br>append O(1)<br>pop() O(1)<br>pop(i) O(n)<br>insert(i,item) O(n)<br>del operator O(n)<br>iteration O(n)<br>contains(in) O(n)<br>get slice[x:y] O(k)<br>del slice O(n)<br>set slice O(n+k)<br>reverse O(n)<br>concatenate O(k)<br>sort O(nlogn)<br>multiply O(nk)</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h5 id="列表和元组的区别是显然的："><a href="#列表和元组的区别是显然的：" class="headerlink" title="列表和元组的区别是显然的："></a>列表和元组的区别是显然的：</h5><p>list和tuple在c实现上是很相似的，对于元素数量大的时候，<br>都是一个数组指针，指针指向相应的对象，找不到tuple比list快的理由。<br>但对于小对象来说，tuple会有一个对象池，所以小的、重复的使用tuple还有益处的。</p><p>为什么要有tuple，还有很多的合理性。<br>实际情况中的确也有不少大小固定的列表结构，例如二维地理坐标等；<br>另外tuple也给元素天然地赋予了只读属性。</p><p><a href="https://blog.csdn.net/siyue0211/article/details/80560783">参考https://blog.csdn.net/siyue0211/article/details/80560783</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC 入门</title>
      <link href="2020/07/30/rpc-ru-men/"/>
      <url>2020/07/30/rpc-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是RPC"><a href="#一、什么是RPC" class="headerlink" title="一、什么是RPC"></a>一、什么是RPC</h1><p>RPC 的全称是 Remote Procedure Call ，是一种进程间通信方式。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即无论是调用本地接口/服务的还是远程的接口/服务，本质上编写的调用代码基本相同。</p><h1 id="二、-如何实现RPC"><a href="#二、-如何实现RPC" class="headerlink" title="二、 如何实现RPC"></a>二、 如何实现RPC</h1><h2 id="2-1-RPC实现原理"><a href="#2-1-RPC实现原理" class="headerlink" title="2.1 RPC实现原理"></a>2.1 RPC实现原理</h2><p>实际情况下，RPC很少用到http协议来进行数据传输，毕竟我只是想传输一下数据而已，何必动用到一个文本传输的应用层协议呢，所以一般会选择直接传输二进制数据</p><p>不管你用何种协议进行数据传输，一个完整的RPC过程，都可以用下面这张图来描述：</p><p><img src="https://i.loli.net/2020/08/12/MuSlDghOWTCd732.png" alt="img"></p><p>以左边的Client端为例，Application就是rpc的调用方，Client Stub就是我们上面说到的代理对象，也就是那个看起来像是Calculator的实现类，其实内部是通过rpc方式来进行远程调用的代理对象，至于Client Run-time Library，则是实现远程调用的工具包，比如python的socket模块，最后通过底层网络实现实现数据的传输。</p><p>这个过程中最重要的就是<strong>序列化</strong>和<strong>反序列化</strong>了，因为数据传输的数据包必须是二进制的，你直接丢一个python对象过去，人家可不认识，你必须把python对象序列化为二进制格式，传给Server端，Server端接收到之后，再反序列化为python对象。</p>]]></content>
      
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb 和 Redis 的区别</title>
      <link href="2020/07/30/mongodb-he-redis-de-qu-bie/"/>
      <url>2020/07/30/mongodb-he-redis-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="Mongodb-和-Redis-的区别"><a href="#Mongodb-和-Redis-的区别" class="headerlink" title="Mongodb 和 Redis 的区别"></a>Mongodb 和 Redis 的区别</h1><p>MongoDB和Redis都是NoSQL数据库，采用结构型数据存储，而MySQL、oracle等则属于传统的关系型数据库。</p><h3 id="NoSQL数据库与关系型数据库的优缺点"><a href="#NoSQL数据库与关系型数据库的优缺点" class="headerlink" title="NoSQL数据库与关系型数据库的优缺点**"></a>NoSQL数据库与关系型数据库的优缺点**</h3><ul><li><strong>关系型数据库</strong></li></ul><p>优点：以完善的关系代数理论为基础,有严格的标准,支持事务ACID四性,借助索引机制可以实现高效的查询。</p><blockquote><p>原子性、一致性、隔离性、持久性</p></blockquote><p>缺点：可扩展性差，无法较好地支持海量数据存储，数据模型过于死板，事务机制影响了系统的整体性能，全文搜索功能较弱。</p><ul><li><strong>NoSQL数据库</strong></li></ul><p>优点：数据之间无关系，易扩展。有非常高的读写性能，支持大量数据，性能高。有灵活的数据模型，无须事先为要存储的数据建立字段，随时可以存储自定义的数据格式。</p><p>缺点：复杂查询性能不高,一般都不能实现事务的强一致性。</p><h3 id="redis与mongoDB的区别"><a href="#redis与mongoDB的区别" class="headerlink" title="redis与mongoDB的区别"></a><strong>redis与mongoDB的区别</strong></h3><ul><li><strong>内存管理</strong></li></ul><p>Redis 数据全部存在内存，定期写入磁盘，当内存不够时，可以选择指定的 LRU 算法删除数据。</p><p>MongoDB 数据会优先存于内存，当内存不够时，只将热点数据放入内存，其他数据存在磁盘。</p><p><em>需要注意的是Redis 和mongoDB特别消耗内存，一般不建议将它们和别的服务部署在同一台服务器上。</em></p><ul><li><strong>数据结构</strong></li></ul><p>Redis 支持的数据结构丰富，包括hash、string、list、set、zset。</p><p>MongoDB 文件存储是BSON格式类似JSON，或自定义的二进制格式。数据结构比较单一，但是支持丰富的数据表达，索引，最类似关系型数据库，支持的查询语言非常丰富。</p><ul><li><p><strong>数据量和性能</strong></p><p>mongodb与redis性能都很依赖内存的大小，mongodb 有丰富的数据表达、索引；最类似于关系数据库，支持丰富的查询语言，redis数据丰富，较少的IO ，这方面mongodb优势明显。</p><p>mongodb对海量数据的访问效率提升，redis 较小数据量的性能及运算,这方面 mongodb性能优于redis .monbgodb 有mapredurce功能，提供数据分析，redis 没有 ，这方面 mongodb优于redis 。</p></li></ul><p>当物理内存够用的时候，性能，redis&gt;mongodb&gt;mysql</p><p>数据量，mysql&gt;mongodb&gt;redis</p><p><em>注意mongodb可以存储文件，适合存放大量的小文件，内置了GirdFS 的分布式文件系统。</em></p><ul><li><p><strong>可靠性</strong></p><p>mongodb不支持事物，靠客户端自身保证，redis支持事物，比较弱，仅能保证事物中的操作按顺序执行，这方面 redis优于mongodb。</p></li></ul><p>mongodb从1.8版本后，采用binlog方式（MySQL同样采用该方式）支持持久化，增加可靠性；</p><p>Redis依赖快照进行持久化；AOF增强可靠性；增强可靠性的同时，影响访问性能。</p><p>可靠性上MongoDB优于Redis。</p><p><img src="https://upload-images.jianshu.io/upload_images/11422128-575cd92e76caedea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/491/format/webp" alt="img"></p><p><strong>171. mysql 索引是怎么实现的？</strong></p><p>索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。</p><p>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</p><p><strong>175. 说一下 mysql 的行锁和表锁？</strong></p><p>MyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。</p><ul><li>表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。</li><li>行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。</li></ul><p><strong>178. 如何做 mysql 的性能优化？</strong></p><ul><li>为搜索字段创建索引。</li><li>避免使用 select *，列出需要查询的字段。</li><li>垂直分割分表。</li><li>选择正确的存储引擎。</li></ul><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&amp;mid=2651938577&amp;idx=2&amp;sn=4943c30f0c0f7be2184d0275378085fa&amp;chksm=8d0f305fba78b9493e45048af00f454e4352cb94181b637b1f6f93f94fa385ba3a6f092c0b25&amp;mpshare=1&amp;scene=1&amp;srcid=0813QGYaBHVpqL3TH9CCNevT&amp;sharer_sharetime=1597328200226&amp;sharer_shareid=b59d477b5eab6b4160165bc8bf143bf9&amp;key=281d398fa0af70c927b9b1f6d21582dafbb4795fb3495b5450a51a8f51a633404b6b8bf6337cd02db79ce62058ba7e2b18ede46e33e0636b21031f30a0783998c8db6529ae24083357f7024841e7f5ea&amp;ascene=1&amp;uin=MTY1NTEzNDEwMw==&amp;devicetype=Windows+XP&amp;version=62060841&amp;lang=zh_CN&amp;exportkey=AYA9K6fq8gpv9k+w3lHAlyU=&amp;pass_ticket=KF3ZYQGe69eA2wf6qHzvVf2iikdbBS4yxBkgWqlJFBWQx1nJTf21s0CRDuypaA8Q">引用mysql</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongodb </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 笔记</title>
      <link href="2020/07/30/redis-bi-ji/"/>
      <url>2020/07/30/redis-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis笔记"><a href="#Redis笔记" class="headerlink" title="Redis笔记"></a>Redis笔记</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">select</span> <span class="token number">1</span> <span class="token comment"># 切换到数据库1,范围是0~15。redis只能有16个db，不同mysql（mysql的database可以有无数个）</span><span class="token builtin class-name">help</span> <span class="token builtin class-name">set</span> <span class="token comment"># 查看set到帮助信息</span>save <span class="token comment"># 手动持久化</span>flushdb <span class="token comment"># 清空当前库</span>flushall <span class="token comment">#16个库的数据全删了</span>dbsize <span class="token comment"># 看看有多少个值info # 各个库的键值情况</span>keys * <span class="token comment"># 查看所有键，这是运维禁忌keys z*，keys k？ # 通配符匹配</span>exists key1 <span class="token comment"># 判断key1是否存在</span>move key1 <span class="token number">2</span> <span class="token comment"># 将key1从当前数据库移动到2号数据库</span>expire key1 <span class="token number">60</span> <span class="token comment"># 将key1设置为60秒后过期</span>ttl key1 <span class="token comment"># 查看key1还有多少秒过期</span><span class="token builtin class-name">type</span> key1 <span class="token comment"># 看看key1是什么类型</span>del key1 <span class="token comment">#删掉rename k1 k2 # 改名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串(string)"></a>字符串(string)</h3><p>string类型是二进制安全的，意思是可以包含任何数据，比如jpg图片或者序列化的对象。字符串value最多是512M</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">增<span class="token builtin class-name">set</span> k1 <span class="token string">'ddd'</span> ex <span class="token number">3</span> <span class="token comment"># 设置3秒之后过期</span>setex k1 <span class="token number">3</span> <span class="token string">'ddd'</span> <span class="token comment"># 同上，set with expire</span><span class="token builtin class-name">set</span> k1 <span class="token string">'ddd'</span> NX <span class="token comment"># 和字典的setdefault效果一样</span>setnx k1 ddd <span class="token comment"># 同上，set if not exist</span><span class="token builtin class-name">set</span> love <span class="token string">'ddd'</span> XX <span class="token comment"># 只有love这个key存在时这条命令才生效</span>getset k1 fuck <span class="token comment"># 先get再set</span>mset apple <span class="token number">12000</span> xiaomi <span class="token number">2000</span> oppo <span class="token number">3300</span> <span class="token comment"># 批量设置，{'apple':12000,'xiaomi':2000,'oppo':3300}</span>msetnx apple <span class="token number">12000</span> xiaomi <span class="token number">2000</span> <span class="token comment"># 只要有一个键存在，全体跪</span>查get k1 strlen k1 <span class="token comment"># 返回k1字符串的长度，注意是字节长度（汉字是三个字节）</span>切片getrange k1 <span class="token number">0</span> -1 <span class="token comment">#切片</span>setrange k1 <span class="token number">0</span> xxxxx <span class="token comment"># 这个注意，0代表设置字符的位置，多余的字符会覆盖掉后续已经存在的字符</span>数字加减incr count <span class="token comment"># count为数字类型的字符串变量，count++</span>decr count <span class="token comment"># count--</span>incrby count <span class="token number">20</span> <span class="token comment"># count+=20</span>decyby count <span class="token number">20</span> <span class="token comment"># count-=20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希(hash)"></a>哈希(hash)</h3><p>value是一个小字典，常用于存储一个对象的详细信息。例如存储用户的具体信息等<br>若嵌套的话，API方法会帮你将列表，字典转化为字符串，无论递归到多深也不怕</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">增hset info a <span class="token number">1</span> <span class="token comment"># {'info'：{'a':1}}</span>hmset info a <span class="token number">1</span> b <span class="token number">2</span> <span class="token comment"># {'info'：{'a':1,'b':2}},其实hset就可以批量设置</span>hsetnx info a <span class="token number">1</span> <span class="token comment"># set if not exist</span>查hgetall info <span class="token comment"># 获取hash的键值对元组</span>hkeys info <span class="token comment"># 取出所有键</span>hvals info <span class="token comment"># 取出所有值</span>hget info a  <span class="token comment"># {'info'：{'a':1,'b':2}},取value里面a键对应的值</span>hmget info a b <span class="token comment"># 批量取</span>删hdel info a <span class="token comment"># 删除info里面的a</span>数字操作hincrby info age <span class="token number">2</span> <span class="token comment"># 将age对应的value加2</span>hincrbyfloat info price <span class="token number">2.5</span> 将price对应的value加2.5通配符匹配指定key hscan info <span class="token number">0</span> match e* <span class="token comment"># 0代表全局匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列-list"><a href="#队列-list" class="headerlink" title="队列(list)"></a>队列(list)</h3><p>value是一个列表,底层其实是双向链表，有lpush，rpush<br>性能的话，由于是链表，头尾性能高，中间插入性能低</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">增lpush li a b c <span class="token comment"># {'li':['a','b','c']}</span>rpush li a <span class="token comment"># right push</span>rpoplpush 源列表 目的列表 <span class="token comment"># 将源列表的右边的(rpop)弹出的值，lpush进新的列表</span>删lpop <span class="token comment"># 左边弹出</span>rpop <span class="token comment"># 右边弹出</span>lrem li <span class="token number">2</span> <span class="token number">3</span> <span class="token comment"># 删除2个'3'</span>查lindex li <span class="token number">1</span> <span class="token comment"># 取出li[1]</span>llen li <span class="token comment"># 长度</span>改lset li <span class="token number">0</span> ff <span class="token comment"># li[0]='ff'</span>linsert li before/after a aa <span class="token comment"># 在元素a之前(之后)插入aa，注意，这里用的不是索引值而是元素</span>切片lrange li <span class="token number">0</span> -1 <span class="token comment"># 范围取值</span>ltrim key1 <span class="token number">0</span> <span class="token number">3</span> <span class="token comment"># 截取索引位置0～3多范围的值赋值给key1</span>数字操作hincrby info age <span class="token number">2</span> <span class="token comment"># 将age对应的value加2</span>hincrbyfloat info price <span class="token number">2.5</span> 将price对应的value加2.5通配符匹配指定key hscan info <span class="token number">0</span> match e* <span class="token comment"># 0代表全局匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h3><p>value是一个set</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">增sadd s <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token comment"># {'s':{'1','2','3','4'}}</span>smove s1 s2 val_of_s1 <span class="token comment"># 将s1中的val的val_of_s1移动到s2</span>查smembers s <span class="token comment"># 取出s的所有值</span>scard s1 <span class="token comment"># 获得s1集合里面元素个数</span>sismember s1 <span class="token number">2</span> <span class="token comment"># 判断2是否为s1的元素</span>删srem s1 fuck <span class="token comment"># 删除s1中的fuck</span>srandmember s1 <span class="token number">2</span> <span class="token comment"># 随机从s1删除2个元素</span>spop key <span class="token comment"># 随机删除一个元素</span>集合操作<span class="token function">sdiff</span> s1 s2 <span class="token comment">#差集 ，即s1-s2 ，s1有的，s2没有</span>sinter s1 s2 <span class="token comment">#交集 </span>sunion s1 s2 <span class="token comment">#并集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有序集合-zset"><a href="#有序集合-zset" class="headerlink" title="有序集合(zset)"></a>有序集合(zset)</h3><p>有序集合，按照指定的权重进行排序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">增zadd s1 <span class="token number">60</span> v1 <span class="token number">80</span> v2 <span class="token number">100</span> v3 <span class="token comment">#数字是权重（计算机术语中score代表的是权重）</span>查zcard s1 <span class="token comment">#返回val的数目</span>zcount s1 <span class="token number">60</span> <span class="token number">80</span> <span class="token comment">#统计权重60到80之间的数目</span>zrank s1 v3 <span class="token comment">#返回v3的下标,注意是类似数组的顺序</span>zrevrank s1 v3 <span class="token comment"># 逆序返回v3的下标</span>zscore s1 v3 <span class="token comment">#返回v3的权重值</span>zrange s1 <span class="token number">0</span> -1  withscores <span class="token comment"># 显示权重</span>zrange s1 <span class="token number">0</span> -1 <span class="token comment"># 只显示值，不显示权重。注意:0，-1是下标范围。不是像mysql limit一样的参数</span>zrevrange s1 <span class="token number">0</span> -1 <span class="token comment"># 只显示值，不显示权重。注意:0，-1是下标范围。</span>zrevrangebyscore s1 <span class="token number">90</span> <span class="token number">20</span> <span class="token comment"># 逆向显示权重范围的，注意参数1要大于参数2</span>zrangebyscore s1 <span class="token number">60</span> <span class="token number">80</span> <span class="token comment"># 显示指定权重范围的</span>zrangebyscore s1 <span class="token punctuation">(</span><span class="token number">60</span> <span class="token punctuation">(</span><span class="token number">80</span> <span class="token comment"># '('为不包含</span>zrangebyscore s1 <span class="token number">60</span> <span class="token number">80</span> limit <span class="token number">2</span> <span class="token number">2</span> <span class="token comment">#类似于mysql数据库</span>zrevrangebyscore s1 <span class="token number">90</span> <span class="token number">60</span> <span class="token comment">#由于是反转，权重是90到60</span>删zrem s1 v3 <span class="token comment">#删除v3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>既可以把redis理解为缓存技术，也可以理解为数据库，因为redis支持将内存中的数据周期性的写入磁盘或者把操作追加到记录文件中，这个过程称为redis的持久化。</p><p>redis支持两种方式的持久化，一种是快照方式（snapshotting）,也称RDB方式；</p><p>两一种是追加文件方式（append-only file），也称AOF方式。</p><p>RDB方式是redis默认的持久化方式。</p><p><strong>- RDB方式原理</strong><br>当redis需要做持久化时（执行SAVA或者BGSAVA命令，或者是达到配置条件时执行），redis会fork一个子进程，子进程将数据写到磁盘上一个临时RDB文件中，当子进程完成写临时文件后，将原来的RDB替换掉（默认文件名为dump.rdb）</p><p><strong>- RDB优缺点</strong><br>定时备份，Redis效率高，但是容易造成数据丢失，丢失的多少和备份策略有关，</p><p>例如：5分钟备份一次，但是第8分时宕机了，那么就丢失了后面的3分钟数据</p><p><strong>- AOF方式原理</strong><br>AOF就可以做到全程持久化，Redis每执行一个修改数据的命令，都会把这个命令添加到AOF文件中，当Redis重启时，将会读取AOF文件进行“重放”以恢复到 Redis关闭前的最后时刻。</p><p><strong>- AOF优缺点</strong></p><p>优点：AOF基本可以保证数据不丢失，数据完整性比rdb要高。<br>缺点： 1.AOF持久化文件会变的越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。<br>　　　2.频繁的IO和aof文件过大时的rewrite会带来系统波动，并且由于语句过多且不断变化，导致恢复数据速度慢于rdb，并且备份数据库可能会出bug。所以一般不单独使用（以防万一）</p><p><strong>- 如果一个系统里面，同时存在rdb和aof，它们是冲突还是协作？</strong><br>两者可以共存，先加载的是aof。如果aof错误，redis-server起不来</p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>主从复制主要用于容灾恢复（主机挂了，能迅速切换到从机，然后去修从机）和读写分离。<br>主从复制有延迟这个不可避免的缺点，但是不妨碍其成为流行的技术</p><p>**- 主从复制的特点<br>**一个主服务器可以有多个从服务器。不仅主服务器可以有从服务器， 从服务器也可以有自己的从服务器。</p><p>Redis 支持异步复制和部分复制（这两个特性从Redis 2.8开始），主从复制过程不会阻塞主服务器和从服务器。</p><p>Master Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据。</p><p>一般是主写从读。如让多个从服务器处理只读命令，使用复制功能来让主服务器免于频繁的执行持久化操作。即只有主机可以写，从机不可以写</p><p>Master可以将数据保存操作交给Slaves完成，从而避免了在Master中要有独立的进程来完成此操作。</p><p><a href="https://www.cnblogs.com/ziyide/p/9488564.html">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列-RabbitMQ</title>
      <link href="2020/07/25/xiao-xi-dui-lie-rabbitmq/"/>
      <url>2020/07/25/xiao-xi-dui-lie-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是消息队列"><a href="#一、什么是消息队列" class="headerlink" title="一、什么是消息队列"></a>一、什么是消息队列</h1><p>​        MQ全称为Message Queue 消息队列（MQ）是一种应用程序对应用程序的通信方法。MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取队列中的消息。这样发布者和使用者都不用知道对方的存在。</p><blockquote><p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p></blockquote><p><img src="https://i.loli.net/2020/08/12/aCX1Zi5bmFQxU86.png" alt="img"></p><blockquote><p>队列是一种先进先出的数据结构。<strong>FIFO</strong></p><p>消息队列可以简单理解为：把要传输的数据放在队列中。</p><p>低类聚，高耦合。</p></blockquote><h1 id="二、为什么要用消息队列"><a href="#二、为什么要用消息队列" class="headerlink" title="二、为什么要用消息队列"></a>二、为什么要用消息队列</h1><p>消息队列中间件是分布式系统中重要的组件，主要解决应用**<u>解耦，异步消息，流量削锋</u>**等问题，实现高性能，高可用，可伸缩和最终一致性架构。目前使用较多的消息队列有，ZeroMQ，Kafka，MetaMQ，RocketMQ。eg：</p><p><img src="https://i.loli.net/2020/08/12/m7D6FRaAGzqYbnl.png" alt="外卖系统"></p><h1 id="三、-RabbitMQ"><a href="#三、-RabbitMQ" class="headerlink" title="三、 RabbitMQ"></a>三、 RabbitMQ</h1><p><a href="https://www.rabbitmq.com/tutorials/tutorial-one-python.html">技术文档</a>   </p><p><a href="%5Bhttps://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159715947119195162519670%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=159715947119195162519670&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&amp;utm_term=ubuntu+rabbitmq%E5%AE%89%E8%A3%85&amp;spm=1018.2118.3001.4187%5D(https://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%7B%22request_id%22:%22159715947119195162519670%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=159715947119195162519670&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&amp;utm_term=ubuntu+rabbitmq%E5%AE%89%E8%A3%85&amp;spm=1018.2118.3001.4187)">RabbitMQ 安装和配置</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">简单模式生产者：<span class="token number">1</span>、连接rabbitmq<span class="token number">2</span>、创建队列<span class="token number">3</span>、向指定队列插入数据消费者：<span class="token number">1</span>、连接rabbitmq        <span class="token number">2</span>、监听模式        <span class="token number">3</span>、确定回调函数参数使用<span class="token number">1</span>、应答参数    <span class="token number">2</span>、持久化参数    <span class="token number">3</span>、分发参数    <span class="token operator">-</span> 轮询分发        <span class="token operator">-</span> 公平分发交换机模式<span class="token operator">-</span> 发布订阅模式   exchange_type<span class="token operator">=</span><span class="token string">'fanout'</span><span class="token operator">-</span> 关键字模式 exchange_type<span class="token operator">=</span><span class="token string">'direct'</span><span class="token operator">-</span> 模糊匹配模式exchange_type<span class="token operator">=</span><span class="token string">'topic'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1、简单模式"><a href="#1、简单模式" class="headerlink" title="1、简单模式"></a>1、简单模式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">###### 生产者 producer.py</span><span class="token keyword">import</span> pika<span class="token comment"># 连接rabbitmq</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建队列</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment"># 向指定队列插入数据</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token comment"># 简单模式</span>                      routing_key<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span>  <span class="token comment"># 指定队列</span>                      body<span class="token operator">=</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span>  <span class="token comment"># 插入数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [x] Sent 'Hello World!'"</span><span class="token punctuation">)</span><span class="token comment">###### 消费者 consumer.py</span><span class="token keyword">import</span> pikaconnection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建队列</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment"># 确定回调函数</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [x] Received %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span><span class="token comment"># 确定监听队列</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span>                      auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token comment"># 默认应答</span>                      on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' [*] Waiting for messages. To exit press CTRL+C'</span><span class="token punctuation">)</span><span class="token comment"># 正式监听</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、参数使用"><a href="#2、参数使用" class="headerlink" title="2、参数使用"></a>2、参数使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span>、应答参数auto_ack<span class="token operator">=</span><span class="token boolean">False</span>ch<span class="token punctuation">.</span>basic_ack<span class="token punctuation">(</span>delivery_tag<span class="token operator">=</span>method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">)</span><span class="token number">2</span>、持久化参数<span class="token comment">#声明queue</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello2'</span><span class="token punctuation">,</span> durable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 若声明过，则换一个名字</span> channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                      routing_key<span class="token operator">=</span><span class="token string">'hello2'</span><span class="token punctuation">,</span>                      body<span class="token operator">=</span><span class="token string">'Hello World!'</span><span class="token punctuation">,</span>                      properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>                          delivery_mode<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment"># make message persistent</span>                          <span class="token punctuation">)</span>                      <span class="token punctuation">)</span><span class="token number">3</span>、分发参数<span class="token triple-quoted-string string">"""有两个消费者同时监听一个的队列。其中一个线程sleep2秒，另一个消费者线程sleep1秒，但是处理的消息是一样多。这种方式叫轮询分发（round-robin）不管谁忙，都不会多给消息，总是你一个我一个。想要做到公平分发（fair dispatch），必须关闭自动应答ack，改成手动应答。使用basicQos(perfetch=1)限制每次只发送不超过1条消息到同一个消费者，消费者必须手动反馈告知队列，才会发送下一个。"""</span>channel<span class="token punctuation">.</span>basic_qos<span class="token punctuation">(</span>prefetch_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、交换机模式"><a href="#3、交换机模式" class="headerlink" title="3、交换机模式"></a>3、交换机模式</h2><ul><li><p>发布订阅模式       exchange_type=’fanout’<br><img src="https://i.loli.net/2020/08/12/q6C2o1iysAfcra8.png" alt="发布订阅模式"></p></li><li><p>关键字模式         exchange_type=’direct’<br><img src="https://i.loli.net/2020/08/12/2ajVSAnkNUleKmr.png" alt="关键字模式"></p></li><li><p>模糊匹配模式    exchange_type=’topic’</p><blockquote><p>通配符交换机”与之前的路由模式相比，它将信息的传输类型的key更加细化，以“key1.key2.keyN….”的模式来指定信息传输的key的大类型和大类型下面的小类型，让消费者可以更加精细的确认自己想要获取的信息类型。而在消费者一段，不用精确的指定具体到哪一个大类型下的小类型的key，而是可以使用类似正则表达式(但与正则表达式规则完全不同)的通配符在指定一定范围或符合某一个字符串匹配规则的key，来获取想要的信息。</p><p>“通配符交换机”（Topic Exchange）将路由键和某模式进行匹配。此时队列需要绑定在一个模式上。符号“#”匹配一个或多个词，符号“*”仅匹配一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.<em>”只会匹配到“audit.irs”。（这里与我们一般的正则表达式的“</em>”和“#”刚好相反，这里我们需要注意一下。）</p></blockquote><p><img src="https://i.loli.net/2020/08/12/oPBMjlCpHbaqNgf.png" alt="模糊匹配模式"></p></li></ul><blockquote><p>源码笔记：<a href="https://github.com/lei025/leetcode/tree/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">https://github.com/lei025/leetcode/tree/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97</a></p></blockquote><p><a href="https://www.sojson.com/blog/48.html">https://www.sojson.com/blog/48.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker笔记</title>
      <link href="2020/07/15/docker-bi-ji/"/>
      <url>2020/07/15/docker-bi-ji/</url>
      
        <content type="html"><![CDATA[<table bgcolor="#343a40">    <tbody><tr>        <td><img src="https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP"></td>  </tr>    </tbody></table>## 镜像的操作<h3 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">从中央仓库拉取镜像到本地docker pull 镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span><span class="token comment">#举个栗子:docker pull daocloud.io/library/tomcat:8.5.15-jre8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-查看本地全部镜像"><a href="#2-查看本地全部镜像" class="headerlink" title="2.查看本地全部镜像"></a>2.查看本地全部镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-删除本地镜像"><a href="#3-删除本地镜像" class="headerlink" title="3.删除本地镜像"></a>3.删除本地镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">镜像会占用磁盘空间，可以直接手动删除，标识通过查看获取docker rmi <span class="token comment">#镜像的标识</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-镜像的导入导出"><a href="#4-镜像的导入导出" class="headerlink" title="4.镜像的导入导出"></a>4.镜像的导入导出</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null，需要手动修改<span class="token comment">#将本地的镜像导出</span>docker save -o 导出的路径 镜像id<span class="token comment">#加载本地的镜像文件</span>docker load -i 镜像文件<span class="token comment">#修改镜像文件docker tag 镜像id 新镜像名称：版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容器的操作"><a href="#容器的操作" class="headerlink" title="容器的操作"></a>容器的操作</h2><h3 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1.运行容器"></a>1.运行容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#运行容器需要定制具体镜像，如果镜像不存在，会直接下载</span><span class="token comment">#简单操作</span>docker run 镜像的标识<span class="token operator">|</span>镜像的名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span><span class="token comment">#常用的参数</span>docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识<span class="token operator">|</span>镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span><span class="token comment">#-d:代表后台运行容器</span><span class="token comment">#-p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口</span><span class="token comment">#--name 容器名称:指定容器的名称</span><span class="token comment">### 例：运行MySQL容器</span>docker run -d -p <span class="token number">3306</span>:3306 --name mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root daocloud.io/library/mysql:5.7.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看正在运行的容器"><a href="#2-查看正在运行的容器" class="headerlink" title="2.查看正在运行的容器"></a>2.查看正在运行的容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看全部正在运行的容器信息docker <span class="token function">ps</span> <span class="token punctuation">[</span>-qa<span class="token punctuation">]</span><span class="token comment">#-a 查看全部的容器，包括没有运行</span><span class="token comment">#-q 只查看容器的标识</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查看容器日志"><a href="#3-查看容器日志" class="headerlink" title="3.查看容器日志"></a>3.查看容器日志</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看容器日志，以查看容器运行的信息docker logs -f 容器id<span class="token comment">#-f：可以滚动查看日志的最后几行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-进入容器的内部"><a href="#4-进入容器的内部" class="headerlink" title="4.进入容器的内部"></a>4.进入容器的内部</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">可以进入容器的内部进行操作docker <span class="token builtin class-name">exec</span> -it 容器id <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-复制内容到容器"><a href="#5-复制内容到容器" class="headerlink" title="5.复制内容到容器"></a>5.复制内容到容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">将宿主机的文件复制到容器内部的指定目录docker <span class="token function">cp</span> 文件名称 容器id:容器内部路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-重启-amp-启动-amp-停止-amp-删除容器"><a href="#6-重启-amp-启动-amp-停止-amp-删除容器" class="headerlink" title="6.重启&amp;启动&amp;停止&amp;删除容器"></a>6.重启&amp;启动&amp;停止&amp;删除容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">容器的启动，停止，删除等操作<span class="token comment">#重新启动容器</span>docker restart 容器id<span class="token comment">#启动停止运行的容器</span>docker start 容器id <span class="token comment">#停止指定的容器(删除容器前，需要先停止容器)</span>docker stop 容器id<span class="token comment">#停止全部容器</span>docker stop <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -qa<span class="token variable">)</span></span><span class="token comment">#删除指定容器</span>docker <span class="token function">rm</span> 容器id<span class="token comment">#删除全部容器</span>docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -qa<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷：将宿主机的一个目录映射到容器的一个目录中。</p><p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p><h3 id="1-创建数据卷"><a href="#1-创建数据卷" class="headerlink" title="1.创建数据卷"></a>1.创建数据卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建数据卷后，默认会存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data</span>docker volume create 数据卷名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-查看全部数据卷"><a href="#2-查看全部数据卷" class="headerlink" title="2.查看全部数据卷"></a>2.查看全部数据卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看全部数据卷信息</span>docker volume <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-查看数据卷详情"><a href="#3-查看数据卷详情" class="headerlink" title="3.查看数据卷详情"></a>3.查看数据卷详情</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看数据卷的详细信息，可以查询到存放的路径，创建时间等等</span>docker volume inspect 数据卷名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-删除数据卷"><a href="#4-删除数据卷" class="headerlink" title="4.删除数据卷"></a>4.删除数据卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除指定的数据卷</span>docker volume <span class="token function">rm</span> 数据卷名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-容器映射数据卷"><a href="#5-容器映射数据卷" class="headerlink" title="5.容器映射数据卷"></a>5.容器映射数据卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</span>docker run -d -p <span class="token number">8080</span>:8080 --name mysql -v 数据卷名称:容器内部的路径 镜像id <span class="token comment">#通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。</span>docker run -d -p <span class="token number">8080</span>:8080 --name mysql -v 路径<span class="token punctuation">(</span>/root/自己创建的文件夹<span class="token punctuation">)</span>:容器内部的路径 镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-Dockerfile"><a href="#Docker-Dockerfile" class="headerlink" title="Docker Dockerfile"></a>Docker Dockerfile</h2><h3 id="什么是-Dockerfile？"><a href="#什么是-Dockerfile？" class="headerlink" title="什么是 Dockerfile？"></a>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h3 id="使用-Dockerfile-定制镜像"><a href="#使用-Dockerfile-定制镜像" class="headerlink" title="使用 Dockerfile 定制镜像"></a>使用 Dockerfile 定制镜像</h3><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">创建自定义镜像就需要创建一个Dockerfiler,如下为Dockerfile的语言 from：指定当前自定义镜像依赖的环境copy：将相对路径下的内容复制到自定义镜像中workdir：声明镜像的默认工作目录run：执行的命令，可以编写多个cmd：需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准） <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p><p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM nginxRUN <span class="token builtin class-name">echo</span> <span class="token string">'这是一个本地构建的nginx镜像'</span> <span class="token operator">&gt;</span> /usr/share/nginx/html/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2、FROM 和 RUN 指令的作用</strong></p><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p><p>shell 格式：</p><pre class="line-numbers language-none"><code class="language-none">RUN &lt;命令行命令&gt;# &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exec 格式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">RUN <span class="token punctuation">[</span><span class="token string">"可执行文件"</span>, <span class="token string">"参数1"</span>, <span class="token string">"参数2"</span><span class="token punctuation">]</span><span class="token comment"># 例如：</span><span class="token comment"># RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大</p><h3 id="开始构建镜像"><a href="#开始构建镜像" class="headerlink" title="开始构建镜像"></a>开始构建镜像</h3><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p><p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。</p><p><strong>注</strong>：最后的 <strong>.</strong> 代表本次执行的上下文路径，下一节会介绍。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#编写完Dockerfile后需要通过命令将其制作为镜像，并且要在Dockerfile的当前目录下，之后即可在镜像中查看到指定的镜像信息，注意最后的 .</span>docker build -t 镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span> ./$ docker build -t nginx:test <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p><p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p><p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p><blockquote><p> <strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p></blockquote><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h3 id="Compose-简介"><a href="#Compose-简介" class="headerlink" title="Compose 简介"></a>Compose 简介</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><p>如果你还不了解 YML 文件配置，可以先阅读 <a href="https://www.runoob.com/w3cnote/yaml-intro.html">YAML 入门教程</a>。</p><p>Compose 使用的三个步骤：</p><ul><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li></ul><h3 id="1-下载并安装Docker-Compose"><a href="#1-下载并安装Docker-Compose" class="headerlink" title="1.下载并安装Docker-Compose"></a>1.下载并安装Docker-Compose</h3><h3 id="1-1下载Docker-Compose"><a href="#1-1下载Docker-Compose" class="headerlink" title="1.1下载Docker-Compose"></a>1.1下载Docker-Compose</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose下载路径：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2设置权限"><a href="#1-2设置权限" class="headerlink" title="1.2设置权限"></a>1.2设置权限</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#需要将DockerCompose文件的名称修改一下，给予DockerCompose文件一个可执行的权限</span><span class="token function">mv</span> docker-compose-Linux-x86_64 docker-compose<span class="token function">chmod</span> <span class="token number">777</span> docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3配置环境变量"><a href="#1-3配置环境变量" class="headerlink" title="1.3配置环境变量"></a>1.3配置环境变量</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方便后期操作，配置一个环境变量</span><span class="token comment">#将docker-compose文件移动到了/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到了PATH中 </span><span class="token function">mv</span> docker-compose /usr/local/bin<span class="token function">vi</span> /etc/profile<span class="token comment">#添加内容：export PATH=$JAVA_HOME:/usr/local/bin:$PATH</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4测试"><a href="#1-4测试" class="headerlink" title="1.4测试"></a>1.4测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在任意目录下输入docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-Docker-Compose管理MySQL和Tomcat容器"><a href="#2-Docker-Compose管理MySQL和Tomcat容器" class="headerlink" title="2.Docker-Compose管理MySQL和Tomcat容器"></a>2.Docker-Compose管理MySQL和Tomcat容器</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># yml文件以key:value方式来指定配置信息</span><span class="token comment"># 多个配置信息以换行+缩进的方式来区分</span><span class="token comment"># 在docker-compose.yml文件中，不要使用制表符 </span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">mysql</span><span class="token punctuation">:</span>           <span class="token comment"># 服务的名称    </span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always   <span class="token comment"># 代表只要docker启动，那么这个容器就跟着一起启动    </span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> daocloud.io/library/mysql<span class="token punctuation">:</span>5.7.4  <span class="token comment"># 指定镜像路径    </span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql  <span class="token comment"># 指定容器名称    </span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> 3306<span class="token punctuation">:</span><span class="token number">3306</span>   <span class="token comment">#  指定端口号的映射    </span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>            <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> root   <span class="token comment"># 指定MySQL的ROOT用户登录密码      </span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token comment"># 指定时区    </span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> /opt/docker_mysql_tomcat/mysql_data<span class="token punctuation">:</span>/var/lib/mysql   <span class="token comment"># 映射数据卷 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用docker-compose命令管理容器"><a href="#3-使用docker-compose命令管理容器" class="headerlink" title="3.使用docker-compose命令管理容器"></a>3.使用docker-compose命令管理容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在使用docker-compose的命令时，默认会在当前目录下找docker-compose.yml文件 <span class="token comment">#1.基于docker-compose.yml启动管理的容器</span>docker-compose up -d <span class="token comment">#2.关闭并删除容器</span>docker-compose down <span class="token comment">#3.开启|关闭|重启已经存在的由docker-compose维护的容器</span>docker-compose start<span class="token operator">|</span>stop<span class="token operator">|</span>restart <span class="token comment">#4.查看由docker-compose管理的容器</span>docker-compose <span class="token function">ps</span> <span class="token comment">#5.查看日志</span>docker-compose logs -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-docker-compose配合Dockerfile使用"><a href="#4-docker-compose配合Dockerfile使用" class="headerlink" title="4.docker-compose配合Dockerfile使用"></a>4.docker-compose配合Dockerfile使用</h3><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p><h2 id="CI、CD介绍及准备"><a href="#CI、CD介绍及准备" class="headerlink" title="CI、CD介绍及准备"></a>CI、CD介绍及准备<img src="https://i.loli.net/2020/08/08/apNKYu5iIt31cPS.jpg" alt="Screenshot_20200807_004021_tv.danmaku.bili"></h2><h3 id="CI（continuous-intergration）持续集成"><a href="#CI（continuous-intergration）持续集成" class="headerlink" title="CI（continuous intergration）持续集成"></a>CI（continuous intergration）持续集成</h3><p>持续集成：编写代码时，完成了一个功能后，立即提交代码到Git仓库中，将项目重新的构建并且测试。</p><p>1.快速发现错误。<br>2.防止代码偏离主分支。</p><p>实现CI，需要使用到Gitlab远程仓库，先通过Docker搭建Gitlab<br>创建一个全新的虚拟机，并且至少指定4G的运行内存，4G运行内存是Gitlab推荐的内存大小。<br>并且安装Docker以及Docker-Compose</p><h3 id="CD-持续交付-部署（Continuous-Delivery-Deployment）"><a href="#CD-持续交付-部署（Continuous-Delivery-Deployment）" class="headerlink" title="CD 持续交付/部署（Continuous Delivery / Deployment）"></a>CD 持续交付/部署（Continuous Delivery / Deployment）</h3><p>完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。</p><p>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。</p><p>对于一个成熟的 CI/CD 管道来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。由于在生产之前的管道阶段没有手动门控，因此持续部署在很大程度上都得依赖精心设计的测试自动化。</p><h1 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p><p>Docker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。</p><p>Docker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。</p><p>使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django小结</title>
      <link href="2020/07/01/django-xiao-jie/"/>
      <url>2020/07/01/django-xiao-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="django小结"><a href="#django小结" class="headerlink" title="django小结"></a>django小结</h1><p><img src="https://i.loli.net/2020/07/07/eyYNL7mpBqOAPtZ.png" alt="django小结"></p><h2 id="请求的生命周期"><a href="#请求的生命周期" class="headerlink" title="请求的生命周期"></a>请求的生命周期</h2><h3 id="wsgi-gt-请求中间件-gt-路由分配-gt-视图-gt-响应中间件-gt-wsgi"><a href="#wsgi-gt-请求中间件-gt-路由分配-gt-视图-gt-响应中间件-gt-wsgi" class="headerlink" title="wsgi -> 请求中间件 -> 路由分配 -> 视图 -> 响应中间件 -> wsgi"></a>wsgi -&gt; 请求中间件 -&gt; 路由分配 -&gt; 视图 -&gt; 响应中间件 -&gt; wsgi</h3><pre class="line-numbers language-none"><code class="language-none">1.请求发送到 wsgi ，wsgi 封装请求的相关数据（request）2.django 去匹配路径，根据路处理具体的业务逻辑3.执行函数， 函数中处理具体的业务逻辑4.函数返回响应， Django按照HTTP 协议的响应的格式进行返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器"><a href="#简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器" class="headerlink" title="简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器"></a>简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器</h3><h2 id="使用-orm-和原生-sql-的缺点"><a href="#使用-orm-和原生-sql-的缺点" class="headerlink" title="使用 orm 和原生 sql 的缺点"></a>使用 orm 和原生 sql 的缺点</h2><h3 id="orm-优点"><a href="#orm-优点" class="headerlink" title="orm 优点"></a>orm 优点</h3><ul><li>快速开发</li></ul><h3 id="orm-缺点"><a href="#orm-缺点" class="headerlink" title="orm 缺点"></a>orm 缺点</h3><ul><li>复杂查询可能会有性能问题</li></ul><h3 id="原生-sql-优点"><a href="#原生-sql-优点" class="headerlink" title="原生 sql 优点"></a>原生 sql 优点</h3><ul><li>运行复杂查询更加灵活</li></ul><h3 id="原生-sql-缺点"><a href="#原生-sql-缺点" class="headerlink" title="原生 sql 缺点"></a>原生 sql 缺点</h3><ul><li>编写需小心，防止 sql 注入</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="什么是-wsgi"><a href="#什么是-wsgi" class="headerlink" title="什么是 wsgi"></a>什么是 wsgi</h3><ul><li>web server 和 web application 通信的一种规范</li></ul><h3 id="什么是-FBV-和-CBV"><a href="#什么是-FBV-和-CBV" class="headerlink" title="什么是 FBV 和 CBV"></a>什么是 FBV 和 CBV</h3><ul><li><p>处理方式</p><ul><li>类处理方式（class base views）</li><li>函数处理方式（function base views）</li></ul></li></ul><h2 id="Django、Flask、Tornado-对比"><a href="#Django、Flask、Tornado-对比" class="headerlink" title="Django、Flask、Tornado 对比"></a>Django、Flask、Tornado 对比</h2><h3 id="Django-走的是大而全的方向，开发效率高。采用-MTV-设计模式，自带-ORM-组件，提高了开发效率"><a href="#Django-走的是大而全的方向，开发效率高。采用-MTV-设计模式，自带-ORM-组件，提高了开发效率" class="headerlink" title="Django 走的是大而全的方向，开发效率高。采用 MTV 设计模式，自带 ORM 组件，提高了开发效率"></a>Django 走的是大而全的方向，开发效率高。采用 MTV 设计模式，自带 ORM 组件，提高了开发效率</h3><h3 id="Flask-是轻量级的框架，自由、灵活、可扩展性强，核心基于-Werkzeug-和-Jinja2"><a href="#Flask-是轻量级的框架，自由、灵活、可扩展性强，核心基于-Werkzeug-和-Jinja2" class="headerlink" title="Flask 是轻量级的框架，自由、灵活、可扩展性强，核心基于 Werkzeug 和 Jinja2"></a>Flask 是轻量级的框架，自由、灵活、可扩展性强，核心基于 Werkzeug 和 Jinja2</h3><h3 id="Tornada-走的是少而精的方向，性能优越，最出名是异步非阻塞能力"><a href="#Tornada-走的是少而精的方向，性能优越，最出名是异步非阻塞能力" class="headerlink" title="Tornada 走的是少而精的方向，性能优越，最出名是异步非阻塞能力"></a>Tornada 走的是少而精的方向，性能优越，最出名是异步非阻塞能力</h3><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF (跨站请求伪造)"></a>CSRF (跨站请求伪造)</h3><ul><li>是一种挟制用户在当前已登录的 web 应用程序上执行非本意的操作攻击方式</li><li>令牌同步模式</li><li>检查 Referer 字段</li><li>添加 token</li></ul><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><ul><li>利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令到网页，使用用户加载并执行攻击者的恶意代码</li></ul><h2 id="django-中-csrf的实现机制"><a href="#django-中-csrf的实现机制" class="headerlink" title="django 中 csrf的实现机制"></a>django 中 csrf的实现机制</h2><h3 id="令牌同步模式"><a href="#令牌同步模式" class="headerlink" title="令牌同步模式"></a>令牌同步模式</h3><h2 id="session-和-cookie的区别"><a href="#session-和-cookie的区别" class="headerlink" title="session 和 cookie的区别"></a>session 和 cookie的区别</h2><h3 id="session-是以对象的形式保存在服务器中"><a href="#session-是以对象的形式保存在服务器中" class="headerlink" title="session 是以对象的形式保存在服务器中"></a>session 是以对象的形式保存在服务器中</h3><h3 id="cookie-是以字符串的形式保存在客户端"><a href="#cookie-是以字符串的形式保存在客户端" class="headerlink" title="cookie 是以字符串的形式保存在客户端"></a>cookie 是以字符串的形式保存在客户端</h3><h2 id="restful规范"><a href="#restful规范" class="headerlink" title="restful规范"></a>restful规范</h2><p><em>XMind - Trial Version</em></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python小结(七)</title>
      <link href="2020/06/29/python-xiao-jie-qi/"/>
      <url>2020/06/29/python-xiao-jie-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="python小结-七"><a href="#python小结-七" class="headerlink" title="python小结(七)"></a>python小结(七)</h1><h2 id="技术性问题"><a href="#技术性问题" class="headerlink" title="技术性问题"></a>技术性问题</h2><ol><li><p>简述函数式编程</p><blockquote><p>函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。 – wiki</p><p><a href="https://www.jianshu.com/p/856475c7fa01">https://www.jianshu.com/p/856475c7fa01</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080">https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080</a></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">概念：<span class="token number">1</span>、函数是一等公民。所谓“一等公民”，指的是函数与其他数据类型一样，处于平等地位，可以复制给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。<span class="token number">2</span>、不可改变量。在函数式编程中，我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式。这里说的‘变量’是不能被小改的。所有的变量只能被赋值一次初值<span class="token number">3</span>、<span class="token builtin">map</span> <span class="token operator">&amp;</span> <span class="token builtin">reduce</span> 他们是最常用的函数式编程<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token comment"># reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">25</span>特性：函数是 “一等公民”只用 “表达式”，不用 “语句”没有 “副作用”不修改状态引用透明（函数运行只靠参数）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>什么是匿名函数，有什么局限性</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lambda 表达式是 Python 中创建匿名函数的一个特殊语法. 我称 lambda 语法本身为 lambda 表达式，而它返回的函数我称之为 lambda 函数。或者称为匿名函数。Python 的 lambda 表达式允许在一行代码中创建一个函数并传递。<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>def square<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token builtin class-name">:</span>            <span class="token comment"># 计算平方数</span><span class="token punctuation">..</span>.     <span class="token builtin class-name">return</span> x ** <span class="token number">2</span><span class="token punctuation">..</span>. <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> map<span class="token punctuation">(</span>square, <span class="token punctuation">[</span><span class="token number">1,2</span>,3,4,5<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 计算列表各个元素的平方</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">4</span>, <span class="token number">9</span>, <span class="token number">16</span>, <span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> map<span class="token punctuation">(</span>lambda x: x ** <span class="token number">2</span>, <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 使用 lambda 匿名函数</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">4</span>, <span class="token number">9</span>, <span class="token number">16</span>, <span class="token number">25</span><span class="token punctuation">]</span> <span class="token comment"># 提供了两个列表，对相同位置的列表数据进行相加</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> map<span class="token punctuation">(</span>lambda x, y: x + y, <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">3</span>, <span class="token number">5</span>, <span class="token number">7</span>, <span class="token number">9</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">6</span>, <span class="token number">8</span>, <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">7</span>, <span class="token number">11</span>, <span class="token number">15</span>, <span class="token number">19</span><span class="token punctuation">]</span>lambda 表达式可以写出非常简练的代码，但是缺点也非常明显：难于理解，降低了可读性和性能。lamda优点：代码简洁不增加额外变量lambda 表达式与命名函数的主要不同点:可以立刻传递<span class="token punctuation">(</span>无需变量<span class="token punctuation">)</span>在内部只能包含一行代码自动返回结果既没有文档字符串, 也没有名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>如何捕捉异常，常用的异常处理机制有哪些</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">捕捉异常可以使用<span class="token keyword">try</span><span class="token operator">/</span><span class="token keyword">except</span>语句。<span class="token keyword">try</span><span class="token operator">/</span><span class="token keyword">except</span>语句用来检测<span class="token keyword">try</span>语句块中的错误，从而让<span class="token keyword">except</span>语句捕获异常信息并处理。如果你不想在异常发生时结束你的程序，只需在<span class="token keyword">try</span>里捕获它。<span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span>        <span class="token comment">#运行别的代码</span><span class="token keyword">except</span> <span class="token operator">&lt;</span>名字<span class="token operator">&gt;</span>：<span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span>        <span class="token comment">#如果在try部份引发了'name'异常</span><span class="token keyword">except</span> <span class="token operator">&lt;</span>名字<span class="token operator">&gt;</span>，<span class="token operator">&lt;</span>数据<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span>        <span class="token comment">#如果引发了'name'异常，获得附加的数据</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span>        <span class="token comment">#如果没有异常发生</span>sys模块获取异常        另一种获取异常信息的途径是通过sys模块中的exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span>函数。该函数回返回一个三元组<span class="token punctuation">:</span><span class="token punctuation">(</span>异常类，异常类的实例，跟中记录对象<span class="token punctuation">)</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>copy() 和 deepcopy() 的区别</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">浅复制：仅拷贝基本数据类型，字典 copy 方法和copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，也是浅复制；深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><p>函数装饰器有什么作用 **</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。<span class="token comment"># 测试代码运行时间的装饰器</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">cal_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s running time: %s secs.'</span><span class="token operator">%</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="6"><li><p>新式类和旧式类的区别，如何确保使用的是新式类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span>、新式类都从<span class="token builtin">object</span>继承，经典类不需要。<span class="token number">2</span>、新式类的MRO<span class="token punctuation">(</span>method resolution order 基类搜索顺序<span class="token punctuation">)</span>算法采用C3算法广度优先搜索，而旧式类的MRO算法是采用深度优先搜索<span class="token number">3</span>、新式类相同父类只执行一次构造函数，经典类重复执行多次。在Python <span class="token number">3.</span>x中取消了经典类，默认都是新式类，并且不必显式的继承<span class="token builtin">object</span>：<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>三种写法并无区别，推荐第一种<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="7"><li><p>简述Python的作用域以及Python搜索变量的顺序</p><pre class="line-numbers language-none"><code class="language-none">python中的作用域分4种情况：（1）L：local，局部作用域，即函数中定义的变量；（2）E：enclosing，嵌套的父级函数的局部作用域，即包含此函数的上级函数的局部作用域，但不是全局的；（3）G：globa，全局变量，就是模块级别定义的变量；（4）B：built-in，系统固定模块里面的变量，比如int, bytearray等。搜索变量的优先级顺序依次是：局部作用域&gt;外层作用域&gt;当前模块中的全局&gt;python内置作用域，也就是LEGB。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="8"><li><p>简述 <strong><strong>new</strong></strong> 和 ____init____的区别</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">__init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数<span class="token number">1</span>、__new__至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别<span class="token number">2</span>、__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以<span class="token keyword">return</span>父类（通过<span class="token builtin">super</span><span class="token punctuation">(</span>当前类名<span class="token punctuation">,</span> cls<span class="token punctuation">)</span>）__new__出来的实例，或者直接是<span class="token builtin">object</span>的__new__出来的实例<span class="token number">3</span>、__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值<span class="token number">4</span>、如果__new__创建的是当前类的实例，会自动调用__init__函数，通过<span class="token keyword">return</span>语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名，；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数。<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'this is init method'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'this is cls`s id'</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'this is new method'</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'this is Class A of id'</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># this is cls`s id 94331320742352</span><span class="token comment"># this is new method &lt;__main__.A object at 0x7efd147af100&gt;</span><span class="token comment"># this is init method &lt;__main__.A object at 0x7efd147af100&gt;</span><span class="token comment"># this is Class A of id 94331320742352</span>init 和 new中的 self 和 cls 返回值的地址都一样 返回值是对象cls 和 类<span class="token builtin">id</span> 一样，说明指向同一类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="9"><li><h4 id="Python的垃圾回收机制"><a href="#Python的垃圾回收机制" class="headerlink" title="Python的垃圾回收机制 **"></a>Python的垃圾回收机制 **</h4><h6 id="引用计数、标记清除、分代回收"><a href="#引用计数、标记清除、分代回收" class="headerlink" title="引用计数、标记清除、分代回收"></a>引用计数、标记清除、分代回收</h6><blockquote><p> 参考：<a href="http://coolpython.net/python_senior/memory/gc.html">http://coolpython.net/python_senior/memory/gc.html</a></p></blockquote><h5 id="1-引用计数"><a href="#1-引用计数" class="headerlink" title="1. 引用计数"></a>1. 引用计数</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Pyobj</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'对象被销毁'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>obj <span class="token operator">=</span> Pyobj<span class="token punctuation">(</span><span class="token punctuation">)</span>obj <span class="token operator">=</span> <span class="token number">6</span>   <span class="token comment"># 让变量obj指向其他对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 1</span><span class="token comment"># 对象被销毁</span><span class="token comment"># 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><ul><li>简单</li><li>实时性高，只要计数为0,对象就被销毁，内存被释放，回收内存的时间就会平摊到了平时</li></ul><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><pre><code>* 为了维护引用计数消耗了很多资源* 循环引用，会导致内存泄露</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 循环引用</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list2<span class="token punctuation">)</span>list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>list1 和 list2 的引用计数永远大于 0，除非手动操作，他们不可能被GC回收。</p><ol start="2"><li><h5 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h5></li></ol><ul><li><p>引用计数，并不能解决所有的问题，一旦出现了循环引用，那么，这些对象的引用次数永远都是大于0的，但是这些对象都是不可用的垃圾数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gc    <span class="token keyword">class</span> <span class="token class-name">DictA</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'DictA对象被销毁'</span><span class="token punctuation">)</span>      <span class="token keyword">class</span> <span class="token class-name">DictB</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'DictB对象被销毁'</span><span class="token punctuation">)</span>            a <span class="token operator">=</span> DictA<span class="token punctuation">(</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> DictB<span class="token punctuation">(</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> b      <span class="token comment"># 循环引用</span>  b<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> a    a <span class="token operator">=</span> <span class="token number">1</span>  b <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span>  <span class="token comment"># ok</span>  <span class="token comment"># DictA对象被销毁</span>  <span class="token comment"># DictB对象被销毁</span>    <span class="token comment"># 由于存在循环引用，因此，内存中DictA对象的引用计数是2，当a = 1被执行时，引用计数减少为1，但仍然大于0，不会被回收，DictB的对象同样如此</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="标记清除的原理"><a href="#标记清除的原理" class="headerlink" title="标记清除的原理"></a>标记清除的原理</h4><p>标记清除可以处理这种循环引用的情况，它分为两个阶段</p><h5 id="第1阶段，标记阶段"><a href="#第1阶段，标记阶段" class="headerlink" title="第1阶段，标记阶段"></a>第1阶段，标记阶段</h5><p>GC会把所有活动对象打上标记，这些活动的对象就如同一个点，他们之间的引用关系构成边，最终点和边构成了一个有向图，如下图所示</p><p><img src="http://coolpython.net/pictures/python_senior/memory/gc-1583239758-4.jpg" alt="标记清除"></p><h5 id="第2阶段，搜索清除阶段"><a href="#第2阶段，搜索清除阶段" class="headerlink" title="第2阶段，搜索清除阶段"></a>第2阶段，搜索清除阶段</h5><p>从根对象（root）出发，沿着有向边遍历整个图，不可达的对象就是需要清理的垃圾对象。这个根对象就是全局对象，调用栈，寄存器。</p><p>在上图中，从root出发后，可以到达 1 2 3 4，而5， 6， 7均不能到达，其中6和7互相引用，这3个对象都会被回收。</p></li></ul><ol start="3"><li><h4 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h4></li></ol><ul><li><p>分代回收建立标记清除的基础之上，是一种以空间换时间的操作方式。标记清除可以回收循环引用的垃圾，但是，回收的频次是需要控制的</p></li><li><p>分代回收，根据内存中对象的存活时间将他们分为3代，新生的对象放入到0代，如果一个对象能在第0代的垃圾回收过程中存活下来，GC就会将其放入到1代中，如果1代里的对象在第1代的垃圾回收过程中存活下来，则会进入到2代。</p><h5 id="分代回收的触发机制"><a href="#分代回收的触发机制" class="headerlink" title="分代回收的触发机制"></a>分代回收的触发机制</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gc<span class="token keyword">print</span><span class="token punctuation">(</span>gc<span class="token punctuation">.</span>get_threshold<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># (700, 10, 10)</span><span class="token triple-quoted-string string">'''当分配对象的个数减去释放对象的个数的差值大于700时，就会产生一次0代回收10次0代回收会导致一次1代回收10次1代回收会导致一次2代回收对于第0代的对象来说，他们很可能就被使用一次，因此需要经常被回收。经过一轮一轮的回收后，能够活着成为第2代的对象，必然是那些使用频繁的对象，而且他们已经存活很久的时间了，大概率的，还会存活很久，因此，2代回收的就不那么频繁，'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gcgc<span class="token punctuation">.</span>set_threshold<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gc<span class="token punctuation">.</span>get_threshold<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 经过了上面的设置，0代和2代的回收会更加频繁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ol start="10"><li><p>Python中的 @property 有什么作用？如何实现成员变量的只读属性？</p><ul><li><p>python的@property是python的一种装饰器，是用来修饰方法的</p></li><li><p>我们可以使用@property装饰器来创建只读属性，@property装饰器会将方法转换为相同名称的只读属性,可以与所定义的属性配合使用，这样可以防止属性被修改。</p></li></ul><h5 id="1-修饰方法，是方法可以像属性一样访问。"><a href="#1-修饰方法，是方法可以像属性一样访问。" class="headerlink" title="1.修饰方法，是方法可以像属性一样访问。"></a>1.修饰方法，是方法可以像属性一样访问。</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token decorator annotation punctuation">@property</span>  <span class="token keyword">def</span> <span class="token function">method_with_property</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">##含有@property</span>      <span class="token keyword">return</span> <span class="token number">15</span>  <span class="token keyword">def</span> <span class="token function">method_without_property</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">##不含@property</span>      <span class="token keyword">return</span> <span class="token number">15</span>l <span class="token operator">=</span> DataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>method_with_property<span class="token punctuation">)</span> <span class="token comment"># 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>method_without_property<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#没有加@property , 必须使用正常的调用方法的形式，即在后面加()</span><span class="token comment"># 15</span><span class="token comment"># 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-与所定义的属性配合使用，这样可以防止属性被修改。"><a href="#2-与所定义的属性配合使用，这样可以防止属性被修改。" class="headerlink" title="2.与所定义的属性配合使用，这样可以防止属性被修改。"></a>2.与所定义的属性配合使用，这样可以防止属性被修改。</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_images <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>_labels <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">#定义属性的名称</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">images</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#方法加入@property后，这个方法相当于一个属性，这个属性可以让用户进行使用，而且用户有没办法随意修改。</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_images     <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">labels</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_labelsl <span class="token operator">=</span> DataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#用户进行属性调用的时候，直接调用images即可，而不用知道属性名_images，因此用户无法更改属性，从而保护了类的属性。</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>images<span class="token punctuation">)</span> <span class="token comment"># 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。</span><span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="11"><li><p>*args 和 **kwargs 分别代表什么</p><pre class="line-numbers language-none"><code class="language-none">args和kwargs是python中的可变参数：args表示任意多个无名参数，返回一个tuple；kwargs表示关键字参数，返回一个dict。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="12"><li><p>有用过 with statement 吗？他的好处是什么？具体如何实现?</p><ul><li><p>with语句的作用是通过某种方式简化异常处理，它是所谓的上下文管理器的一种</p><blockquote><p><strong>with语句会在嵌套的代码执行之后，自动关闭文件</strong>。这种做法的还有另一个优势就是，<strong>无论嵌套的代码是以何种方式结束的，它都关闭文件</strong></p></blockquote></li></ul></li></ol><ol start="13"><li><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 因为数组是有序的 可以从数组左下角开始找 然后往上移动</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token comment"># array 二维列表</span>    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">==</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> target <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># len(array[0]) 表示小数组的长度</span>                    <span class="token keyword">if</span> target <span class="token operator">==</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span>s <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python小结(六)</title>
      <link href="2020/06/26/python-xiao-jie-liu/"/>
      <url>2020/06/26/python-xiao-jie-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="python小结-六"><a href="#python小结-六" class="headerlink" title="python小结(六)"></a>python小结(六)</h1><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 邮箱</span><span class="token string">'^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+&amp;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><h6 id="冒泡排序-O-n2"><a href="#冒泡排序-O-n2" class="headerlink" title="冒泡排序 (O(n2))"></a>冒泡排序 (O(n2))</h6><pre class="line-numbers language-none"><code class="language-none">def bubble_sort(li):    for i in range(len(li)-1):  #第i趟        exchange = False        for j in range(len(li)-i-1):            if li[j] &gt; li[j+1]:                li[j], li[j+1] = li[j+1], li[j]                exchange = True        if not exchange:            return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="选择排序-O-n2"><a href="#选择排序-O-n2" class="headerlink" title="选择排序 (O(n2))"></a>选择排序 (O(n2))</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort_simple</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    li_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_val <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>        li_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>min_val<span class="token punctuation">)</span>        li<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>min_val<span class="token punctuation">)</span>    <span class="token keyword">return</span> li_new<span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># i是第几趟</span>        min_loc <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_loc <span class="token operator">=</span> j        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> li<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="快速排序-O-nlogn"><a href="#快速排序-O-nlogn" class="headerlink" title="快速排序 (O(nlogn))"></a>快速排序 (O(nlogn))</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> tmp<span class="token punctuation">:</span> <span class="token comment">#从右面找比tmp小的数</span>            right <span class="token operator">-=</span> <span class="token number">1</span>      <span class="token comment"># 往左走一步</span>        li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token comment">#把右边的值写到左边空位上</span>        <span class="token comment"># print(li, 'right')</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token comment">#把左边的值写到右边空位上</span>        <span class="token comment"># print(li, 'left')</span>    li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> tmp      <span class="token comment"># 把tmp归位</span>    <span class="token keyword">return</span> left<span class="token keyword">def</span> <span class="token function">_quick_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>  <span class="token comment"># 至少两个元素</span>        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>        _quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        _quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token keyword">return</span> li<span class="token comment"># 方案二</span><span class="token keyword">def</span> <span class="token function">quick_sorts</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> li    <span class="token keyword">else</span><span class="token punctuation">:</span>        pivot <span class="token operator">=</span> li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        less <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">&lt;</span> pivot<span class="token punctuation">]</span>        greater <span class="token operator">=</span> <span class="token punctuation">[</span>j <span class="token keyword">for</span> j <span class="token keyword">in</span> li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> j <span class="token operator">&gt;</span> pivot<span class="token punctuation">]</span>        <span class="token keyword">return</span> quick_sorts<span class="token punctuation">(</span>less<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">+</span> quick_sorts<span class="token punctuation">(</span>greater<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><h6 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> ind<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> val<span class="token punctuation">:</span>            <span class="token keyword">return</span> ind    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>    left <span class="token operator">=</span> <span class="token number">0</span>    right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>           <span class="token comment"># 候选区有值</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">else</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> val<span class="token punctuation">:</span>      <span class="token comment"># 带查找的值在mid左侧</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>                  <span class="token comment"># 带查找的值在mid右侧</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python小结(五)</title>
      <link href="2020/06/25/python-xiao-jie-wu/"/>
      <url>2020/06/25/python-xiao-jie-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="python小结-五"><a href="#python小结-五" class="headerlink" title="python小结(五)"></a>python小结(五)</h1><h5 id="json序列化时，默认中文会变成unicode，如何避免"><a href="#json序列化时，默认中文会变成unicode，如何避免" class="headerlink" title="json序列化时，默认中文会变成unicode，如何避免"></a>json序列化时，默认中文会变成unicode，如何避免</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsonjson<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'dd'</span><span class="token punctuation">:</span><span class="token string">'你好'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>                     <span class="token comment"># '{"dd": "你好"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="python递归的最大层数？998"><a href="#python递归的最大层数？998" class="headerlink" title="python递归的最大层数？998"></a>python递归的最大层数？998</h5><p>系统堆栈深度有一定限度，防止无限递归造成Python溢出崩溃</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#修改深度</span><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="用一行代码实现数值交换："><a href="#用一行代码实现数值交换：" class="headerlink" title="用一行代码实现数值交换："></a>用一行代码实现数值交换：</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>c<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="文件操作时：xreadlines和readlines的区别？"><a href="#文件操作时：xreadlines和readlines的区别？" class="headerlink" title="文件操作时：xreadlines和readlines的区别？"></a>文件操作时：xreadlines和readlines的区别？</h5><pre class="line-numbers language-none"><code class="language-none">read()会读取整个文件，将读取到底的文件内容放到一个字符串变量，返回str类型readline()读取一行内容，放到一个字符串变量，返回str类型readlines()读取文件所有内容，按行为单位放到一个列表中，返回list类型xreadlines()返回一个生成器，来循环操作文件的每一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="arg和-kwarg作用"><a href="#arg和-kwarg作用" class="headerlink" title="*arg和**kwarg作用"></a>*arg和**kwarg作用</h5><pre class="line-numbers language-none"><code class="language-none">def function(required_arg,*arg,**kwarg):    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>*arg会把多出来的位置参数转化为tuple<br>**kwarg会把关键字参数(key=value)转化为dict</p><h5 id="is和-的区别"><a href="#is和-的区别" class="headerlink" title="is和==的区别"></a>is和==的区别</h5><pre class="line-numbers language-none"><code class="language-none">对象：id(身份标识)、type(数据类型)和value(值)is判断对象所有信息，==比较值只有数值型和字符串型的情况下，a is b才为True，当a和b是tuple，list，dict或set型时，a is b为False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="简述Python的深浅拷贝以及应用场景？"><a href="#简述Python的深浅拷贝以及应用场景？" class="headerlink" title="简述Python的深浅拷贝以及应用场景？"></a>简述Python的深浅拷贝以及应用场景？</h5><pre class="line-numbers language-none"><code class="language-none">浅复制：仅拷贝基本数据类型，字典 copy 方法和copy.copy()方法，也是浅复制；深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="logging模块的作用？以及应用场景？"><a href="#logging模块的作用？以及应用场景？" class="headerlink" title="logging模块的作用？以及应用场景？"></a>logging模块的作用？以及应用场景？</h5><pre class="line-numbers language-none"><code class="language-none">logging模块定义的函数和类为应用程序和库的开发实现了一个灵活的事件日志系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="简述容器、生成器、迭代器、可迭代对象-以及应用场景？"><a href="#简述容器、生成器、迭代器、可迭代对象-以及应用场景？" class="headerlink" title="简述容器、生成器、迭代器、可迭代对象 以及应用场景？"></a>简述容器、生成器、迭代器、可迭代对象 以及应用场景？</h5><p>容器：多元素组织的数据结构，可逐个迭代地获取，通常数据结构把元素存储在内存中（迭代器和生成器对象不放在内存）。<br>可迭代对象：很多容器都是可迭代对象，实现了iter方法，还有打开状态的files、sockets可以返回一个迭代器的对象，。<br>迭代器：带状态的对象，可以通过调用实现<strong>iter</strong>和<strong>next</strong>的对象都是迭代器，iter返回自身，next返回容器的下一个值。<br>生成器：生成器是一类特殊的迭代器，不需要iter和next方法，直接使用yield返回，生成器一定是迭代器，生成器以一种懒加载的模式生成值。可以利用更少地中间变量写流式代码，相比其它容器对象更加节约内存和CPU<br>生成器表达式：列表推导式，返回一个生成器对象。</p><h5 id="谈谈你对闭包的理解？"><a href="#谈谈你对闭包的理解？" class="headerlink" title="谈谈你对闭包的理解？"></a>谈谈你对闭包的理解？</h5><p>闭包使得局部变量在函数外被访问成为可能，函数作为函数的值返回，闭包本质上是一个特殊的函数，闭包将变量的值始终保存在函数中。闭包避免了使用全局变量，此外，闭包允许将函数与其所操作的某些数据（环境）关连起来。这一点与面向对象编程是非常类似的，在面向对象编程中，对象允许我们将某些数据（对象的属性）与一个或者多个方法相关联。当对象中只有一个方法时，这时使用闭包是更好的选择。所有函数都有一个 <strong>closure</strong>属性，如果这个函数是一个闭包的话，那么它返回的是一个由 cell 对象 组成的元组对象。cell 对象的cell_contents 属性就是闭包中的自由变量。</p><h5 id="Python-垃圾回收机制？"><a href="#Python-垃圾回收机制？" class="headerlink" title="Python 垃圾回收机制？"></a>Python 垃圾回收机制？</h5><p>72.魔法函数 <strong>call</strong>怎么使用?</p><p>73.如何判断一个对象是函数还是方法？</p><p>74.@classmethod 和@staticmethod 用法和区别</p><p>75.Python 中的接口如何实现？</p><p>76.Python 中的反射了解么?</p><p>77.metaclass 作用？以及应用场景？</p><p>78.hasattr() getattr() setattr()的用法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># https://www.cnblogs.com/lizm166/p/10267858.html</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'python'</span>    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Hello world'</span><span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token builtin">setattr</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token comment"># 结果：20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>79.请列举你知道的 Python 的魔法方法及用途。</p><p>80.如何知道一个 Python 对象的类型？</p><p>81.Python 的传参是传值还是传址？</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python小结(四)</title>
      <link href="2020/06/24/python-xiao-jie-si/"/>
      <url>2020/06/24/python-xiao-jie-si/</url>
      
        <content type="html"><![CDATA[<h1 id="python小结-四"><a href="#python小结-四" class="headerlink" title="python小结(四)"></a>python小结(四)</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="1-已知-AList-1-2-3-1-2-对-AList-列表元素去重，写出具体过程。"><a href="#1-已知-AList-1-2-3-1-2-对-AList-列表元素去重，写出具体过程。" class="headerlink" title="1.已知 AList = [1,2,3,1,2],对 AList 列表元素去重，写出具体过程。"></a>1.已知 AList = [1,2,3,1,2],对 AList 列表元素去重，写出具体过程。</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">AList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>BList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> AList<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> BList<span class="token punctuation">:</span>        BList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>BList<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-如何实现-“1-2-3”-变成-“1”-”2”-”3”"><a href="#2-如何实现-“1-2-3”-变成-“1”-”2”-”3”" class="headerlink" title="2.如何实现 “1,2,3” 变成 [“1”,”2”,”3”]"></a>2.如何实现 “1,2,3” 变成 [“1”,”2”,”3”]</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">'1,2,3'</span>                                                                  In <span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>                                                                 Out<span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-给定两个-list，A-和-B，找出相同元素和不同元素"><a href="#3-给定两个-list，A-和-B，找出相同元素和不同元素" class="headerlink" title="3.给定两个 list，A 和 B，找出相同元素和不同元素"></a>3.给定两个 list，A 和 B，找出相同元素和不同元素</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">165</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>                                                               In <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> In <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>                                                           Out<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>                                                           Out<span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token comment"># 使用列表推导式    </span>In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> a <span class="token keyword">if</span> x <span class="token keyword">in</span> b<span class="token punctuation">]</span>                                                     Out<span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6"><a href="#4-1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6" class="headerlink" title="4. [[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]"></a>4. [[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># [j for i in a for j in i]</span><span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span>  a<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">:</span>        <span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-合并列表-1-5-7-9-和-2-2-6-8"><a href="#5-合并列表-1-5-7-9-和-2-2-6-8" class="headerlink" title="5.合并列表[1,5,7,9]和[2,2,6,8]"></a>5.合并列表[1,5,7,9]和[2,2,6,8]</h3><pre class="line-numbers language-none"><code class="language-none">In [194]: a = [1, 5, 7, 9]                                                             In [195]: b = [2, 4, 6, 8]In [196]: a.extend(b)                                                                  In [197]: a                                                                            Out[197]: [1, 5, 7, 9, 2, 4, 6, 8]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-如何打乱一个列表的元素？"><a href="#6-如何打乱一个列表的元素？" class="headerlink" title="6.如何打乱一个列表的元素？"></a>6.如何打乱一个列表的元素？</h3><pre class="line-numbers language-none"><code class="language-none">In [201]: import random                                                                In [202]: a = list(range(10))                                                          In [203]: a                                                                            Out[203]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]In [204]: random.shuffle(a)                                                            In [205]: a                                                                            Out[205]: [9, 6, 1, 3, 0, 2, 5, 4, 7, 8]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="7-字典操作中-del-和-pop-有什么区别"><a href="#7-字典操作中-del-和-pop-有什么区别" class="headerlink" title="7.字典操作中 del 和 pop 有什么区别"></a>7.字典操作中 del 和 pop 有什么区别</h3><pre class="line-numbers language-none"><code class="language-none">dict.pop(key[, default])如果字典中存在键，则dict.pop（）从字典中删除具有给定键的元素并返回其值。如果字典中不存在给定的键，则它将返回给定的默认值。如果字典中不存在给定键，并且没有将默认值传递给pop（），它将抛出KeyErrordel key          # 删除键dict.clear()     # 清空字典del dict         # 删除字典<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-按照字典的内的值进行排序"><a href="#8-按照字典的内的值进行排序" class="headerlink" title="8.按照字典的内的值进行排序"></a>8.按照字典的内的值进行排序</h3><pre class="line-numbers language-pythob" data-language="pythob"><code class="language-pythob">In [237]: z = {'a':24, 's':52, 'd':12, 'f':33}  In [240]: sorted(z.keys())                                                             Out[240]: ['a', 'd', 'f', 's']In [239]: sorted(z.items(), key=lambda x:x[1])                                         Out[239]: [('d', 12), ('a', 24), ('f', 33), ('s', 52)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-请合并下面两个字典-a-“A”-1-”B”-2-b-“C”-3-”D”-4"><a href="#9-请合并下面两个字典-a-“A”-1-”B”-2-b-“C”-3-”D”-4" class="headerlink" title="9.请合并下面两个字典 a = {“A”:1,”B”:2},b = {“C”:3,”D”:4}"></a>9.请合并下面两个字典 a = {“A”:1,”B”:2},b = {“C”:3,”D”:4}</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-如何使用生成式的方式生成一个字典，写一段功能代码。"><a href="#10-如何使用生成式的方式生成一个字典，写一段功能代码。" class="headerlink" title="10.如何使用生成式的方式生成一个字典，写一段功能代码。"></a>10.如何使用生成式的方式生成一个字典，写一段功能代码。</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>k<span class="token punctuation">:</span>v <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> a<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                                            <span class="token comment"># {'A': 1, 'B': 2, 'C': 3, 'D': 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11-如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”-1-”b”-2"><a href="#11-如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”-1-”b”-2" class="headerlink" title="11.如何把元组(“a”,”b”)和元组(1,2)，变为字典{“a”:1,”b”:2}"></a>11.如何把元组(“a”,”b”)和元组(1,2)，变为字典{“a”:1,”b”:2}</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># {"a":1,"b":2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何实现-‘1’-’2’-’3’-变成-1-2-3"><a href="#如何实现-‘1’-’2’-’3’-变成-1-2-3" class="headerlink" title="如何实现[‘1’,’2’,’3’]变成[1,2,3] ?"></a>如何实现[‘1’,’2’,’3’]变成[1,2,3] ?</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span>，<span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python小结(三)</title>
      <link href="2020/06/22/python-xiao-jie-san/"/>
      <url>2020/06/22/python-xiao-jie-san/</url>
      
        <content type="html"><![CDATA[<h1 id="python小结-三"><a href="#python小结-三" class="headerlink" title="python小结(三)"></a>python小结(三)</h1><h1 id="字符串相关操作"><a href="#字符串相关操作" class="headerlink" title="字符串相关操作"></a>字符串相关操作</h1><ul><li><p>in ,not , is</p></li><li><p>串取值方法：可以通过下标进行取值，切片</p></li><li><p>endswith、startswith、isalnum、isalpha方法：</p><p> #isalnum判断输入的字符串是否包含数字和字母 </p><p> #isalpha判断输入的字符串是否是英文字母，返回结果为布尔值</p></li><li><p>判断输入的字符串是否为数字：isdigit()</p></li><li><p>#去除空格： strip()</p></li><li><p>字符串的join方法:  </p><p>#join是用来通过 某个字符串 拼接 一个可迭代对象的每个元素—&gt;join(可迭代对象参数类型)  </p><p>#另一种方法将列表转换为字符串</p></li><li><p>替换replace字符串</p></li><li><p>查找find，index字符串</p></li><li><p>切割字符串spilt,返回结果类型为list</p></li><li><p>字符串随机生成大小写字母、数字 :   # import string</p></li><li><p>count  计数</p></li><li><p>字符串中大小写字母的判断与转换 #islower() isupper()</p></li></ul><h2 id="1-如何python的可变与不可变数据类型"><a href="#1-如何python的可变与不可变数据类型" class="headerlink" title="1. 如何python的可变与不可变数据类型"></a>1. 如何python的可变与不可变数据类型</h2><p>​        python中的不可变数据类型，<strong>不允许变量的值发生变化</strong>，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象，内部会有一个引用计数来记录有多少个变量引用这个对象；</p><p>​        可变数据类型，<strong>允许变量的值发生变化</strong>，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。</p><h2 id="2-将”hello-world”转换为首字母大写”Hello-World”"><a href="#2-将”hello-world”转换为首字母大写”Hello-World”" class="headerlink" title="2. 将”hello world”转换为首字母大写”Hello World”"></a>2. 将”hello world”转换为首字母大写”Hello World”</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'hello world'</span>a<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-如何检测字符串中只含有数字"><a href="#3-如何检测字符串中只含有数字" class="headerlink" title="3. 如何检测字符串中只含有数字"></a>3. 如何检测字符串中只含有数字</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token string">'1231413354'</span>                                                              In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d <span class="token operator">=</span> <span class="token string">'3213dasd'</span>                                                                In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                   Out<span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span>In <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                   Out<span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">False</span>In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                   Out<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-将字符串”ilovechina”进行反转"><a href="#4-将字符串”ilovechina”进行反转" class="headerlink" title="4. 将字符串”ilovechina”进行反转"></a>4. 将字符串”ilovechina”进行反转</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">'ilovechina'</span>                                                              In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                                                                       Out<span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'anihcevoli'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Python-中的字符串格式化方式"><a href="#5-Python-中的字符串格式化方式" class="headerlink" title="5. Python 中的字符串格式化方式"></a>5. Python 中的字符串格式化方式</h2><pre class="line-numbers language-none"><code class="language-none">%  和 format()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-有一个字符串开头和末尾都有空格，比如“-adabdw-”-要求写一个函数把这个字符串的前后空格都去掉。"><a href="#6-有一个字符串开头和末尾都有空格，比如“-adabdw-”-要求写一个函数把这个字符串的前后空格都去掉。" class="headerlink" title="6. 有一个字符串开头和末尾都有空格，比如“ adabdw ”,要求写一个函数把这个字符串的前后空格都去掉。"></a>6. 有一个字符串开头和末尾都有空格，比如“ adabdw ”,要求写一个函数把这个字符串的前后空格都去掉。</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">' adabdw '</span>                                                                In <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                     Out<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'adabdw'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-获取字符串”123456“最后的两个字符"><a href="#7-获取字符串”123456“最后的两个字符" class="headerlink" title="7. 获取字符串”123456“最后的两个字符"></a>7. 获取字符串”123456“最后的两个字符</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">'123456'</span>                                                                  In <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                                                                        Out<span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'56'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作"><a href="#8-一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作" class="headerlink" title="8. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作"></a>8. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作</h2><p><img src="https://img-blog.csdn.net/20160629145559498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="utf-8/ gbk/ unicode"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token string">'你好'</span>                                                                   In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>                                                              Out<span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">b'\xc4\xe3\xba\xc3'</span>  <span class="token comment"># 发现是4个字符，说明gbk是用两个字节表示一个汉字</span>In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>                                                Out<span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'你好'</span>In <span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>AttributeError                            Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">138</span><span class="token operator">-</span><span class="token number">036e9cb0ee35</span><span class="token operator">&gt;</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span> s<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'str'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'decode'</span><span class="token comment"># 无法解码出来，说明中文的默认解码方式是utf-8' </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><em>\</em>硬盘中一般编码都是uft-8\</strong>，而在内存中采用*<em>unicode*</em>编码方式。**</p><p><strong>python中的str其实显示的就是读取unicode,str的内存格式就是unicode，所以理解为str就是unicode,unicode就是str。</strong></p><p><strong>另外而utf-8与unicode编码中的字符部分的编码方式是一样的，所以英文显示没有区别。</strong></p></blockquote><h2 id="9-s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-，-a-“你好-中国-“，去除多余空格只留一个空格。"><a href="#9-s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-，-a-“你好-中国-“，去除多余空格只留一个空格。" class="headerlink" title="9.  s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]， a = “你好 中国 “，去除多余空格只留一个空格。"></a>9.  s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]， a = “你好 中国 “，去除多余空格只留一个空格。</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s                                                                            Out<span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'info：xiaoZhang 33 shandong'</span>    In <span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[^:\s]+'</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>                                                      Out<span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'info：xiaoZhang'</span><span class="token punctuation">,</span> <span class="token string">'33'</span><span class="token punctuation">,</span> <span class="token string">'shandong'</span><span class="token punctuation">]</span>     <span class="token comment"># \s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</span>In <span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[a-zA-Z0-9]+'</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>                                                 Out<span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">,</span> <span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span> <span class="token string">'33'</span><span class="token punctuation">,</span> <span class="token string">'shandong'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python小结(二)</title>
      <link href="2020/06/21/python-xiao-jie-er/"/>
      <url>2020/06/21/python-xiao-jie-er/</url>
      
        <content type="html"><![CDATA[<h1 id="python小结-二"><a href="#python小结-二" class="headerlink" title="python小结(二)"></a>python小结(二)</h1><h1 id="语言特性和编码规范"><a href="#语言特性和编码规范" class="headerlink" title="语言特性和编码规范"></a>语言特性和编码规范</h1><h2 id="1-简述解释型和编译型编程语言"><a href="#1-简述解释型和编译型编程语言" class="headerlink" title="1. 简述解释型和编译型编程语言"></a>1. 简述解释型和编译型编程语言</h2><pre class="line-numbers language-none"><code class="language-none">解释型:就是边解释边执行编译性:编译后再执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Python3-和-2-之间的区别"><a href="#2-Python3-和-2-之间的区别" class="headerlink" title="2. Python3 和 2 之间的区别"></a>2. Python3 和 2 之间的区别</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">print</span>函数<span class="token punctuation">:</span>（Python3中<span class="token keyword">print</span>为一个函数，必须用括号括起来；Python2中<span class="token keyword">print</span>为<span class="token keyword">class</span>）<span class="token number">2</span><span class="token punctuation">.</span>通过<span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>解析用户的输入：（Python3中<span class="token builtin">input</span>得到的为<span class="token builtin">str</span>；Python2的<span class="token builtin">input</span>的到的为<span class="token builtin">int</span>型，Python2的<span class="token builtin">raw_input</span>得到的为<span class="token builtin">str</span>类型）<span class="token number">3</span><span class="token punctuation">.</span>整数：Python3中<span class="token operator">/</span>表示真除，<span class="token operator">%</span>表示取余，<span class="token operator">//</span>结果取整；Python2中带上小数点<span class="token operator">/</span>表示真除，<span class="token operator">%</span>表示取余，<span class="token operator">//</span>结果取整<span class="token number">4</span><span class="token punctuation">.</span><span class="token builtin">xrange</span>模块改为<span class="token builtin">range</span><span class="token number">5</span><span class="token punctuation">.</span>比较操作符区别：Python2中任意两个对象都可以比较，Python3中只有同一数据类型的对象可以比较<span class="token number">6</span><span class="token punctuation">.</span>编码：Python2中使用 ASCII 码作为默认编码方式，Python3默认使用utf<span class="token operator">-</span><span class="token number">8</span>编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-range和-xrange-的区别"><a href="#3-range和-xrange-的区别" class="headerlink" title="3. range和 xrange 的区别"></a>3. range和 xrange 的区别</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span><span class="token builtin">range</span>返回的是一个<span class="token builtin">list</span>对象，而<span class="token builtin">xrange</span>返回的是一个生成器对象<span class="token punctuation">(</span><span class="token builtin">xrange</span> <span class="token builtin">object</span><span class="token punctuation">)</span>。<span class="token number">2</span><span class="token punctuation">.</span><span class="token builtin">xrange</span>则不会直接生成一个<span class="token builtin">list</span>，而是每次调用返回其中的一个值，内存空间使用极少，因而性能非常好。python3 取消了<span class="token builtin">xrange</span>（）函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-什么是PEP8"><a href="#4-什么是PEP8" class="headerlink" title="4. 什么是PEP8"></a>4. 什么是PEP8</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">《Python Enhancement Proposal <span class="token comment">#8》（8 号 Python 增强提案）又叫 PEP8，他针对的 Python 代码格式而编订的风格指南。</span><span class="token number">1</span><span class="token punctuation">.</span>缩进。<span class="token number">4</span>个空格的缩进（编辑器都可以完成此功能），不使用Tab，更不能混合使用Tab和空格。<span class="token number">2</span><span class="token punctuation">.</span>每行最大长度<span class="token number">79</span>，换行可以使用反斜杠，最好使用圆括号。换行点要在操作符的后边敲回车。<span class="token number">3</span><span class="token punctuation">.</span>类和top<span class="token operator">-</span>level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。<span class="token number">4</span><span class="token punctuation">.</span>模块导入的顺序：按标准、三方和自己编写顺序依次导入，之间空一行。<span class="token number">5</span><span class="token punctuation">.</span>不要在一句<span class="token keyword">import</span>中写多个库，比如<span class="token keyword">import</span> os<span class="token punctuation">,</span> sys不推荐<span class="token number">6</span><span class="token punctuation">.</span>避免不必要的空格<span class="token number">7</span><span class="token punctuation">.</span>注释必须要有<span class="token number">8</span><span class="token punctuation">.</span>函数命名要遵循规范<span class="token number">9</span><span class="token punctuation">.</span>尽可能使用‘<span class="token keyword">is</span>’‘<span class="token keyword">is</span> <span class="token keyword">not</span>’取代‘<span class="token operator">==</span>’，比如<span class="token keyword">if</span> x <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> 要优于<span class="token keyword">if</span> x。<span class="token number">10</span><span class="token punctuation">.</span>使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。<span class="token number">11</span><span class="token punctuation">.</span>异常中<span class="token keyword">try</span>的代码尽可能少。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-类型注释"><a href="#5-类型注释" class="headerlink" title="5. 类型注释"></a>5. 类型注释</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello '</span> <span class="token operator">+</span> name<span class="token comment"># python3.6后增加了类型注解</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">123</span>b<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token comment"># 更进一步，如果你需要指明一个全部由整数组成的列表：</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> Listl<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在函数 <code>greeting</code> 中，参数 <code>name</code> 预期是 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str"><code>str</code></a> 类型，并且返回 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str"><code>str</code></a> 类型。子类型允许作为参数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python小结(一)</title>
      <link href="2020/06/20/python-xiao-jie-yi/"/>
      <url>2020/06/20/python-xiao-jie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="python小结-一"><a href="#python小结-一" class="headerlink" title="python小结(一)"></a>python小结(一)</h1><h2 id="1-列出几个常用Python标准库"><a href="#1-列出几个常用Python标准库" class="headerlink" title="1. 列出几个常用Python标准库"></a>1. 列出几个常用Python标准库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">os, math, random, time, datetime,re, copy, csv, logging, json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-python-内建数据类型有哪些"><a href="#2-python-内建数据类型有哪些" class="headerlink" title="2. python 内建数据类型有哪些"></a>2. python 内建数据类型有哪些</h2><ol><li><strong>Booleans［布尔型］</strong> 或为 <code>True［真］</code> 或为 <code>False［假］</code>。</li><li><strong>Numbers［数值型］</strong> 可以是 Integers［整数］（<code>1</code> 和 <code>2</code>）、Floats［浮点数］（<code>1.1</code> 和 <code>1.2</code>）、Fractions［分数］（<code>1/2</code> 和 <code>2/3</code>）；甚至是 <a href="http://en.wikipedia.org/wiki/Complex_number">Complex Number［复数］</a>。</li><li><strong>Strings［字符串型］</strong> 是 Unicode 字符序列，<em>例如：</em> 一份 html 文档。</li><li><strong>Bytes［字节］</strong> 和 <strong>Byte Arrays［字节数组］</strong>， <em>例如:</em> 一份 jpeg 图像文件。</li><li><strong>Lists［列表］</strong> 是值的有序序列。</li><li><strong>Tuples［元组］</strong> 是有序而不可变的值序列。</li><li><strong>Sets［集合］</strong> 是装满无序值的包裹。</li><li><strong>Dictionaries［字典］</strong> 是键值对的无序包裹。</li></ol><h2 id="3-简述-with-方法打开处理文件帮我们做了什么"><a href="#3-简述-with-方法打开处理文件帮我们做了什么" class="headerlink" title="3. 简述 with 方法打开处理文件帮我们做了什么"></a>3. 简述 with 方法打开处理文件帮我们做了什么</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># with方法相当于以上代码finally中的file.close()操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-列出-Python-中可变数据类型和不可变数据类型，为什么"><a href="#4-列出-Python-中可变数据类型和不可变数据类型，为什么" class="headerlink" title="4. 列出 Python 中可变数据类型和不可变数据类型，为什么"></a>4. 列出 Python 中可变数据类型和不可变数据类型，为什么</h2><blockquote><p>不可变数据：Number（数字）、String（字符串）、Tuple（元组）；<br>可变数据：List（列表）、Dictionary（字典）、Sets（集合）</p></blockquote><table><thead><tr><th align="center"></th><th>list</th><th>tuple</th><th>set</th><th>dict</th></tr></thead><tbody><tr><td align="center">可否读写</td><td>读写</td><td>只读</td><td>读写</td><td>读写</td></tr><tr><td align="center">可否重复</td><td>是</td><td>是</td><td>否</td><td>是</td></tr><tr><td align="center">存储方式</td><td>值</td><td>值</td><td>键(不能重复)</td><td>键值对(键不能重复)</td></tr><tr><td align="center">是否有序</td><td>有序</td><td>有序</td><td>无序</td><td>无序，自动正序</td></tr><tr><td align="center"></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="5-Python-获取当前日期"><a href="#5-Python-获取当前日期" class="headerlink" title="5. Python 获取当前日期"></a>5. Python 获取当前日期</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timenow <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S %A"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-统计字符串每个单词出现的次数"><a href="#6-统计字符串每个单词出现的次数" class="headerlink" title="6. 统计字符串每个单词出现的次数"></a>6. 统计字符串每个单词出现的次数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    count_words <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    count_word <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> count_words<span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> count_word<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            count_word<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            count_word<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> count_word<span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">(</span><span class="token string">'I can because i think i can'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># {'i': 3, 'can': 2, 'because': 1, 'think': 1}</span><span class="token comment"># 方法二</span><span class="token comment"># from collections import Counter</span><span class="token comment"># str = 'I can because i think i can'</span><span class="token comment"># counts = Counter(str.lower().split())</span><span class="token comment"># print(counts, type(counts), help(counts))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-用-Python-删除文件和用-Linux-命令删除文件的方法"><a href="#7-用-Python-删除文件和用-Linux-命令删除文件的方法" class="headerlink" title="7. 用 Python 删除文件和用 Linux 命令删除文件的方法"></a>7. 用 Python 删除文件和用 Linux 命令删除文件的方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># python删除文件</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment"># python删除目录</span>os<span class="token punctuation">.</span>removedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件选项说明：-f　　　　-force　　　　　　忽略不存在的文件，强制删除，无任何提示-i　　　　--interactive　　　 进行交互式地删除-r <span class="token operator">|</span> -R　　--recursive　　　  递归式地删除列出的目录下的所有目录和文件-v　　　   --verbose　　　　详细显示进行的步骤<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-举例说明异常模块中-try-except-else-finally-的相关意义"><a href="#8-举例说明异常模块中-try-except-else-finally-的相关意义" class="headerlink" title="8. 举例说明异常模块中 try except else finally 的相关意义"></a>8. 举例说明异常模块中 try except else finally 的相关意义</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>code<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span> <span class="token comment"># 抛出异常之后将会执行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 没有异常将会执行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'no Exception'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>  <span class="token comment"># 有没有异常都会执行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'execute is finish'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-遇到报错如何处理"><a href="#9-遇到报错如何处理" class="headerlink" title="9. 遇到报错如何处理"></a>9. 遇到报错如何处理</h2><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">查看报错行和错误类型，debug找出问题所在进行处理。常见错误类型有以下几种：1. TypeError: cannot concatenate 'str' and 'int' objects      不能连接str和int对象2. IndexError: list index out of range    索引错误:列表索引超出范围3. IndentationError: expected an indented block    缩进错误:预期一个缩进快(意思需要一个缩进块)4. IndentationError: unexpected indent    缩进错误:意外缩进(这里不应缩进)5. TypeError: 'tuple' object does not support item assignment    类型错误：元组对象不支持元素值重新分配，也就是不能尝试去修改元组中的任一个元素的值6. SyntaxError: invalid syntax    语法错误 非法的语法7. AttributeError: 'tuple' object has no attribute 'remove'    attribute 属性 object对象8. KeyError: 'XXX'    key键错误，没有指定的键值'XXX'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-在浏览器输入-URL，按下回车后的流程"><a href="#10-在浏览器输入-URL，按下回车后的流程" class="headerlink" title="10. 在浏览器输入 URL，按下回车后的流程"></a>10. 在浏览器输入 URL，按下回车后的流程</h2><blockquote><ol><li>URL 解析</li><li>DNS 查询</li><li>TCP 连接</li><li>处理请求</li><li>接受响应</li><li>渲染页面</li></ol></blockquote><pre><code>1. 浏览器向 DNS 服务器请求解析该 URL 中域名对应的 IP 地址；2. 解析出 IP 地址之后，根据该 IP 地址和端口，和服务器建立 TCP 连接；3. 浏览器发出读取文件(URL 中域名和后面部分对应的文件)的HTTP 请求，该请求报文作为TCP 三次握手的第三个报文的数据发送给服务器；4. 服务器对浏览器的请求作出响应，并把对应的html文本发送给浏览器；5. 释放 TCP连接；6. 浏览器将html文本渲染显示内容。</code></pre><p>1、首先进行缓存查找、如果找不到就进行DNS解析，解析出对应的IP地址</p><p>2、建立TCP连接，也就是三次握手</p><p>3、客户端向服务器发送http请求（协议版本号、目标主机地址、请求资源目录等）</p><p>4、服务器处理请求（对收到的http请求进行解析，做出相应的处理（包括：响应类型、响应描述信息、响应结果等））</p><p>5、浏览器解析网页（对收到的响应进行解析）</p><p>6、保持或释放连接</p><h5 id="小结TCP与UDP的区别："><a href="#小结TCP与UDP的区别：" class="headerlink" title="\小结TCP与UDP的区别：**"></a><strong><em>\</em>小结TCP与UDP的区别：**</strong></h5><p>1.基于连接与无连接；<br>2.对系统资源的要求（TCP较多，UDP少）；<br>3.UDP程序结构较简单；<br>4.流模式与数据报模式 ；<br>5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。</p><p>三次握手</p><p><img src="https://i.loli.net/2020/08/18/ty39nKZ6HzuT4vN.png" alt="三次握手"></p><p>四次挥手</p><p><img src="https://i.loli.net/2020/08/18/hSQbi5rINZc4KoO.png" alt="四次挥手"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用云开发 Cloudbase 开发邮件发送功能</title>
      <link href="2020/06/18/shi-yong-yun-kai-fa-cloudbase-kai-fa-you-jian-fa-song-gong-neng/"/>
      <url>2020/06/18/shi-yong-yun-kai-fa-cloudbase-kai-fa-you-jian-fa-song-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="使用云开发-Cloudbase-开发邮件发送功能"><a href="#使用云开发-Cloudbase-开发邮件发送功能" class="headerlink" title="使用云开发 Cloudbase 开发邮件发送功能"></a>使用云开发 Cloudbase 开发邮件发送功能</h1><blockquote><p>借助于第三方模块<code>Nodemailer</code>，我们可以实现使用云函数来发邮件。我们可以通过发送邮件通知用户一些重要的活动信息。</p><p>技术文档：<a href="https://nodemailer.com/about/">Nodemailer官方文档</a></p></blockquote><h2 id="1-准备一个邮箱并开启SMTP服务"><a href="#1-准备一个邮箱并开启SMTP服务" class="headerlink" title="1.准备一个邮箱并开启SMTP服务"></a>1.准备一个邮箱并开启SMTP服务</h2><p>​        我们可以借助QQ邮箱、网易邮箱、Gmail等邮件系统开启<strong>IMAP/SMTP服务</strong>，<code>IMAP</code>是互联网邮件访问协议，通过这种协议可以从邮件服务器获取邮件的信息、下载邮件，也就是接收邮件；<code>SMTP</code>也就是简单邮件传输协议，通过它可以控制邮件的中转方式，帮助计算机在发送或中转信件时找到下一个目的地，也就是发送邮件。本文示例使用qq邮箱。</p><p>​        不同的邮件系统有着不同的smtp发送邮件服务器，端口号也会有所不同，这些都可以去相应的邮箱的设置里看到相关的说明的，QQ邮箱的发送邮件服务器：smtp.qq.com，使用SSL，端口号465或587。</p><p>163邮箱：smtp.163.com，端口号25。用记事本保存自己的授权码，后续会使用。</p><p><img src="https://i.loli.net/2020/06/18/sbIUfGoOFaXWjKL.png" alt="image-20200618004854702"></p><h2 id="2-初始化云函数，创建一个发送邮件的云函数"><a href="#2-初始化云函数，创建一个发送邮件的云函数" class="headerlink" title="2.初始化云函数，创建一个发送邮件的云函数"></a>2.初始化云函数，创建一个发送邮件的云函数</h2><p>创建一个云函数，如sendemail，然后在终端中打开，首先<code>npm install</code>，作用是安装wx-server-sdk，然后就是安装我们所需的发送邮件的模块<code>npm install nodemailer</code></p><p>接下来在index.js里输入以下代码，根据实际情况修改相关参数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 云函数入口文件</span><span class="token keyword">const</span> cloud <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'wx-server-sdk'</span><span class="token punctuation">)</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//引入发送邮件的类库</span><span class="token keyword">var</span> nodemailer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nodemailer'</span><span class="token punctuation">)</span><span class="token comment">// 创建一个SMTP客户端配置</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  host<span class="token operator">:</span> <span class="token string">'smtp.qq.com'</span><span class="token punctuation">,</span> <span class="token comment">//网易163邮箱 smtp.163.com</span>  port<span class="token operator">:</span> <span class="token number">465</span><span class="token punctuation">,</span> <span class="token comment">//网易邮箱端口 25</span>  auth<span class="token operator">:</span> <span class="token punctuation">{</span>    user<span class="token operator">:</span> <span class="token string">'你的邮箱'</span><span class="token punctuation">,</span> <span class="token comment">//邮箱账号</span>    pass<span class="token operator">:</span> <span class="token string">'你的邮箱授权码'</span> <span class="token comment">//邮箱的授权码</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 创建一个SMTP客户端对象</span><span class="token keyword">var</span> transporter <span class="token operator">=</span> nodemailer<span class="token punctuation">.</span><span class="token function">createTransport</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 云函数入口函数</span>exports<span class="token punctuation">.</span><span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 创建一个邮件对象</span>  <span class="token keyword">var</span> mail <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 发件人</span>    <span class="token keyword">from</span><span class="token operator">:</span> <span class="token string">'来自云函数测试邮件 &lt;23*****78@qq.com&gt;'</span><span class="token punctuation">,</span>    <span class="token comment">// 主题</span>    subject<span class="token operator">:</span> <span class="token string">'云函数sendemail'</span><span class="token punctuation">,</span>    <span class="token comment">// 收件人</span>    to<span class="token operator">:</span> <span class="token string">'收件人的邮箱'</span><span class="token punctuation">,</span>    <span class="token comment">// 邮件内容，text或者html格式</span>    text<span class="token operator">:</span> <span class="token string">'测试云函数发送邮件'</span> <span class="token comment">//可以是链接，也可以是验证码</span>    html<span class="token operator">:</span> <span class="token string">"&lt;b&gt;Hello world?&lt;/b&gt;"</span><span class="token punctuation">,</span> <span class="token comment">// html </span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> transporter<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span>mail<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署上传云函数之后，就可以在小程序端<code>本地调试</code>，测试云函数，接下来，收件人的邮箱就会收到你发送的邮件了。<img src="https://i.loli.net/2020/06/18/hX3NzIeLiR2VAFy.png" alt="image-20200618011159710"> 同时可以在控制台查看相关打印信息。</p><p><img src="https://i.loli.net/2020/06/18/zGj8XS9Y6RtHiEp.png" alt="2020-06-18 00-21-21 的屏幕截图"></p><p>这个只是定向给某个邮箱发送邮件，实际应用场景应加以改变。</p><h2 id="邮箱功能的拓展与应用"><a href="#邮箱功能的拓展与应用" class="headerlink" title="邮箱功能的拓展与应用"></a>邮箱功能的拓展与应用</h2><ul><li><p>结合云数据库给指定的人发送邮件</p><p>一般我们可以遇到的场景就是在于登录注册及找回密码时，向用户发送提示邮件，当用户A给用户B写的文章或留言评论时可以给B发邮件，当用户参与活动需要通知时，管理员可以给目标用户发邮件等。不同的业务场景接收邮件的人也会不同，邮件里面的内容根据业务的需求也会有所不同，因此在邮件发送的过程中，数据库扮演着非常重要的角色。</p></li><li><p>实现密码校验与邮件的定时发送</p><p>当用户在个人资料里绑定自己的邮箱时，可以发送邮件以及校验码，校验码可以是数据库的一个字段，它的值可以是一些随机生成的字符串，但是有一定的生命周期，比如半个小时之后会失效，这个自动失效的操作则需要使用到定时触发器；邮件也可以是周报、日报的周期性定时发送，在每天或每周的某个时间点，批量收集当天或当周的数据自动发送给用户，这个也是依赖定时触发器，这个我们会在后面定时触发器的章节进行说明。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux查找文件</title>
      <link href="2020/06/10/linux-cha-zhao-wen-jian/"/>
      <url>2020/06/10/linux-cha-zhao-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-grep"><a href="#1-grep" class="headerlink" title="1.grep"></a>1.grep</h1><p>  grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。<br>  参考：<a href="https://man.linuxde.net/grep">https://man.linuxde.net/grep</a></p><h2 id="grep常用用法"><a href="#grep常用用法" class="headerlink" title="grep常用用法"></a>grep常用用法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># grep [-acinv] [--color=auto] '搜寻字符串' filename</span>选项与参数：-a ：将 binary 文件以 text 文件的方式搜寻数据-c ：计算找到 <span class="token string">'搜寻字符串'</span> 的次数-i ：忽略大小写的不同，所以大小写视为相同-n ：顺便输出行号-v ：反向选择，亦即显示出没有 <span class="token string">'搜寻字符串'</span> 内容的那一行！--color<span class="token operator">=</span>auto ：可以将找到的关键词部分加上颜色的显示喔！grep命令常见用法在文件中搜索一个单词，命令会返回一个包含“match_pattern”的文本行：<span class="token function">grep</span> match_pattern file_name<span class="token function">grep</span> <span class="token string">"match_pattern"</span> file_name在多个文件中查找：<span class="token function">grep</span> <span class="token string">"match_pattern"</span> file_1 file_2 file_3 <span class="token punctuation">..</span>.输出除之外的所有行 -v 选项：<span class="token function">grep</span> -v <span class="token string">"match_pattern"</span> file_name标记匹配颜色 --color<span class="token operator">=</span>auto 选项：<span class="token function">grep</span> <span class="token string">"match_pattern"</span> file_name --color<span class="token operator">=</span>auto使用正则表达式 -E 选项：<span class="token function">grep</span> -E <span class="token string">"[1-9]+"</span>或<span class="token function">egrep</span> <span class="token string">"[1-9]+"</span>只输出文件中匹配到的部分 -o 选项：<span class="token builtin class-name">echo</span> this is a <span class="token builtin class-name">test</span> line. <span class="token operator">|</span> <span class="token function">grep</span> -o -E <span class="token string">"[a-z]+\."</span>line.<span class="token builtin class-name">echo</span> this is a <span class="token builtin class-name">test</span> line. <span class="token operator">|</span> <span class="token function">egrep</span> -o <span class="token string">"[a-z]+\."</span>line.统计文件或者文本中包含匹配字符串的行数 -c 选项：<span class="token function">grep</span> -c <span class="token string">"text"</span> file_name输出包含匹配字符串的行数 -n 选项：<span class="token function">grep</span> <span class="token string">"text"</span> -n file_name或<span class="token function">cat</span> file_name <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"text"</span> -n<span class="token comment">#多个文件</span><span class="token function">grep</span> <span class="token string">"text"</span> -n file_1 file_2打印样式匹配所位于的字符或字节偏移：<span class="token builtin class-name">echo</span> gun is not unix <span class="token operator">|</span> <span class="token function">grep</span> -b -o <span class="token string">"not"</span><span class="token number">7</span>:not<span class="token comment">#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项 -b -o 一般总是配合使用。</span>搜索多个文件并查找匹配文本在哪些文件中：<span class="token function">grep</span> -l <span class="token string">"text"</span> file1 file2 file3<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示目录中的可执行文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ll <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"*"</span>   <span class="token comment"># 添加-v可显示非可执行文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>grep递归搜索文件<br>在多级目录中对文本进行递归搜索：</p><p>grep “text” . -r -n</p><p>忽略匹配样式中的字符大小写：</p><p>echo “hello world” | grep -i “HELLO”<br>hello</p><h1 id="2-find"><a href="#2-find" class="headerlink" title="2.find"></a>2.find</h1><blockquote><p>在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。</p><p>参考：<a href="https://blog.csdn.net/qq_35246620/article/details/79104520">https://blog.csdn.net/qq_35246620/article/details/79104520</a></p></blockquote><p>在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。</p><p>语法：find + 目标目录(路径) + &lt;选项&gt; + 参数</p><h3 id="常用选项列表"><a href="#常用选项列表" class="headerlink" title="常用选项列表"></a>常用选项列表</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-perm &lt;权限数值&gt;</td><td>查找符合指定的权限数值的文件或目录</td></tr><tr><td>-type &lt;文件类型&gt;</td><td>只寻找符合指定的文件类型的文件</td></tr><tr><td>-name &lt;范本样式&gt;</td><td>指定字符串作为寻找文件或目录的范本样式</td></tr><tr><td>-expty</td><td>寻找文件大小为 0 Byte 的文件，或目录下没有任何子目录或文件的空目录</td></tr><tr><td>-ls</td><td>假设find指令的回传值为ture，就将文件或目录名称列出到标准输出</td></tr><tr><td>-maxdepth &lt;目录层级&gt;</td><td>设置最大目录层级</td></tr><tr><td>-mindepth &lt;目录层级&gt;</td><td>设置最小目录层级</td></tr><tr><td>-exec &lt;执行指令&gt;</td><td>假设find指令的回传值为true，就执行该指令</td></tr><tr><td>-ok &lt;执行指令&gt;</td><td>此参数的效果和指定-exec类似，但在执行指令之前会先询问用户，若回答y或Y，则放弃执行命令</td></tr></tbody></table><h3 id="文件类型参数列表"><a href="#文件类型参数列表" class="headerlink" title="文件类型参数列表"></a>文件类型参数列表</h3><table><thead><tr><th>文件类型参数</th><th>含义</th></tr></thead><tbody><tr><td><code>f</code></td><td>普通文件</td></tr><tr><td><code>l</code></td><td>符号连接</td></tr><tr><td><code>d</code></td><td>目录</td></tr><tr><td><code>c</code></td><td>字符设备</td></tr><tr><td><code>b</code></td><td>块设备</td></tr><tr><td><code>s</code></td><td>套接字</td></tr><tr><td><code>p</code></td><td>Fifo</td></tr></tbody></table><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次小程序引入Vant组件</title>
      <link href="2020/06/06/ji-yi-ci-xiao-cheng-xu-yin-ru-vant-zu-jian/"/>
      <url>2020/06/06/ji-yi-ci-xiao-cheng-xu-yin-ru-vant-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Vant组件"><a href="#Vant组件" class="headerlink" title="Vant组件"></a>Vant组件</h1><blockquote><p><a href="https://youzan.github.io/vant-weapp/#/intro">https://youzan.github.io/vant-weapp/#/intro</a></p></blockquote><h2 id="引入vant"><a href="#引入vant" class="headerlink" title="引入vant"></a>引入vant</h2><ol><li>通过 npm 安装<blockquote><p>需要注意的是 package.json 和 node_modules 必须在 miniprogram 目录下， 若miniprogram里没有package.json,需执行<code>npm init</code></p></blockquote></li></ol><p><code>npm i @vant/weapp -S --production</code><br>2. 构建 npm 包</p><pre><code>打开微信开发者工具，点击 工具 -&gt; 构建 npm，并勾选 使用 npm 模块 选项，构建完成后，即可引入组件</code></pre><ol start="3"><li><p>修改 app.json<br>将 app.json 中的 “style”: “v2” 去除，小程序的新版基础组件强行加上了许多样式，难以去除，不关闭将造成部分组件样式混乱。</p><h1 id="正确引入toast"><a href="#正确引入toast" class="headerlink" title="正确引入toast"></a>正确引入toast</h1><p>json页面<br><code>"usingComponents": { "van-toast": "@vant/weapp/toast/index" }</code></p></li></ol><p>js页面<br> <code>import Toast from '../../miniprogram_npm/@vant/weapp/toast/toast' </code></p><p>wxml页面<br><code>&lt;van-toast id="custom-selector" /&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> B站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu20 mysql8.0</title>
      <link href="2020/05/29/ubuntu20-mysql8-0/"/>
      <url>2020/05/29/ubuntu20-mysql8-0/</url>
      
        <content type="html"><![CDATA[<h1 id="通过apt-安装MySQL服务"><a href="#通过apt-安装MySQL服务" class="headerlink" title="通过apt 安装MySQL服务"></a>通过apt 安装MySQL服务</h1><blockquote><p>记一次新机安装笔记</p></blockquote><h2 id="1-安装mysql"><a href="#1-安装mysql" class="headerlink" title="1.安装mysql"></a>1.安装mysql</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#命令1 更新源</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token comment">#命令2 安装mysql服务</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-初始化配置"><a href="#2-初始化配置" class="headerlink" title="2.初始化配置"></a>2.初始化配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1</span>VALIDATE PASSWORD PLUGIN can be used to <span class="token builtin class-name">test</span> passwords<span class="token punctuation">..</span>.Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No: N <span class="token punctuation">(</span>选择N ,不会进行密码的强校验<span class="token punctuation">)</span><span class="token comment">#2</span>Please <span class="token builtin class-name">set</span> the password <span class="token keyword">for</span> root here<span class="token punctuation">..</span>.New password: <span class="token punctuation">(</span>输入密码<span class="token punctuation">)</span>Re-enter new password: <span class="token punctuation">(</span>重复输入<span class="token punctuation">)</span><span class="token comment">#3</span>By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created <span class="token keyword">for</span> them<span class="token punctuation">..</span>.Remove anonymous users? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> N <span class="token punctuation">(</span>选择N，不删除匿名用户<span class="token punctuation">)</span><span class="token comment">#4</span>Normally, root should only be allowed to connect from<span class="token string">'localhost'</span><span class="token builtin class-name">.</span> This ensures that someone cannot guess atthe root password from the network<span class="token punctuation">..</span>.Disallow root login remotely? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> N <span class="token punctuation">(</span>选择N，允许root远程连接<span class="token punctuation">)</span><span class="token comment">#5</span>By default, MySQL comes with a database named <span class="token string">'test'</span> thatanyone can access<span class="token punctuation">..</span>.Remove <span class="token builtin class-name">test</span> database and access to it? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> N <span class="token punctuation">(</span>选择N，不删除test数据库<span class="token punctuation">)</span><span class="token comment">#6</span>Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Y <span class="token punctuation">(</span>选择Y，修改权限立即生效<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-检查mysql服务状态"><a href="#3-检查mysql服务状态" class="headerlink" title="3.检查mysql服务状态"></a>3.检查mysql服务状态</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> mysql status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-配置远程访问"><a href="#4-配置远程访问" class="headerlink" title="4.配置远程访问"></a>4.配置远程访问</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/mysql/mysql.conf.d/mysqld.cnf <span class="token comment">#找到 bind-address 修改值为 0.0.0.0(如果需要远程访问)</span><span class="token function">sudo</span> <span class="token function">service</span> mysql restart <span class="token comment">#重启mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换数据库</span>mysql<span class="token operator">&gt;</span>use mysql<span class="token punctuation">;</span><span class="token comment">#查询用户表命令：</span>mysql<span class="token operator">&gt;</span>select User,authentication_string,Host from user<span class="token punctuation">;</span><span class="token comment">#查看状态</span><span class="token keyword">select</span> host,user,plugin from user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置权限与密码</span>mysql<span class="token operator">&gt;</span> ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'密码'</span><span class="token punctuation">;</span> <span class="token comment">#使用mysql_native_password修改加密规则</span>mysql<span class="token operator">&gt;</span> ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'密码'</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span> <span class="token comment">#更新一下用户的密码</span>mysql<span class="token operator">&gt;</span> UPDATE user SET <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">'%'</span> WHERE user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span> <span class="token comment">#允许远程访问</span><span class="token comment">#刷新cache中配置 刷新权限</span>mysql<span class="token operator">&gt;</span>flush privileges<span class="token punctuation">;</span> mysql<span class="token operator">&gt;</span>quit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改密码<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alter user <span class="token string">'root'</span>@<span class="token string">'%'</span> identified with mysql_native_password by <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>新增用户赋权并设置远程访问<blockquote><p>mysql8和原来的版本有点不一样，8的安全级别更高，所以在创建远程连接用户的时候，<br>不能用原来的命令（同时创建用户和赋权）:</p></blockquote></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#必须先创建用户（密码规则：mysql8.0以上密码策略限制必须要大小写加数字特殊符号）</span>mysql<span class="token operator">&gt;</span> CREATE <span class="token environment constant">USER</span> <span class="token string">'sammy'</span>@<span class="token string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'password'</span><span class="token punctuation">;</span><span class="token comment">#赋权</span>mysql<span class="token operator">&gt;</span> GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'sammy'</span>@<span class="token string">'%'</span> WITH GRANT OPTION<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><h3 id="卸载mysql"><a href="#卸载mysql" class="headerlink" title="卸载mysql"></a>卸载mysql</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg --list<span class="token operator">|</span><span class="token function">grep</span> mysql        <span class="token comment">#在终端中查看MySQL的依赖项</span><span class="token function">sudo</span> <span class="token function">apt-get</span> remove mysql-common  <span class="token comment">#卸载</span><span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove --purge mysql-server-8.0<span class="token comment">##sudo apt-get autoremove --purge mysqlxxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="清理残留数据"><a href="#清理残留数据" class="headerlink" title="清理残留数据"></a>清理残留数据</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg -l <span class="token operator">|</span><span class="token function">grep</span> ^rc<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span><span class="token function">sudo</span> <span class="token function">xargs</span> dpkg -P<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="再次查看MySQL的剩余依赖项："><a href="#再次查看MySQL的剩余依赖项：" class="headerlink" title="再次查看MySQL的剩余依赖项："></a>再次查看MySQL的剩余依赖项：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg --list<span class="token operator">|</span><span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="继续删除剩余依赖项，如："><a href="#继续删除剩余依赖项，如：" class="headerlink" title="继续删除剩余依赖项，如："></a>继续删除剩余依赖项，如：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove --purge mysql-apt-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除原先配置文件"><a href="#删除原先配置文件" class="headerlink" title="删除原先配置文件"></a>删除原先配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /etc/mysql/ /var/lib/mysql<span class="token function">sudo</span> <span class="token function">apt</span> autoremove<span class="token function">sudo</span> <span class="token function">apt</span> autoreclean <span class="token comment"># (如果提示指令有误，就把reclean改成clean)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装MongoDB</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装Redis</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考：<a href="https://blog.csdn.net/weixin_38924500/article/details/106261971">https://blog.csdn.net/weixin_38924500/article/details/106261971</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程线程协程</title>
      <link href="2020/05/21/jin-cheng-xian-cheng-xie-cheng/"/>
      <url>2020/05/21/jin-cheng-xian-cheng-xie-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="进程-线程-协程-并发与并行-同步与异步-阻塞与非阻塞"><a href="#进程-线程-协程-并发与并行-同步与异步-阻塞与非阻塞" class="headerlink" title="进程 线程 协程 并发与并行 同步与异步 阻塞与非阻塞"></a>进程 线程 协程 并发与并行 <strong>同步与异步</strong> 阻塞与非阻塞</h1><p><img src="https://i.loli.net/2020/05/21/hDtAFyrIbxn89VX.jpg" alt="进程、线程与协程"></p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote><p>进程是系统资源分配的最小单位, 系统由一个个进程(程序)组成,<strong>进程的出现是为了更好的利用CPU资源使到并发成为可能。</strong></p></blockquote><ul><li><p>第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。</p></li><li><p>第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行时），它才能成为一个活动的实体，我们称其为进程。</p></li></ul><p>进程是抢占式的争夺CPU运行自身,而CPU单核的情况下同一时间只能执行一个进程的代码,但是多进程的实现则是通过CPU飞快的切换不同进程,因此使得看上去就像是多个进程在同时进行.</p><blockquote><p>通信问题:   由于进程间是隔离的,各自拥有自己的内存内存资源, <em>因此相对于线程比较安全</em>, 所以不同进程之间的数据只能通过 <em>IPC(Inter-Process Communication)</em> 进行通信共享.</p></blockquote><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><strong>线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能。</strong></p><blockquote><ul><li>线程属于进程</li><li>线程共享进程的内存地址空间</li><li>线程几乎不占有系统资源<br>通信问题:  进程相当于一个容器,而线程而是运行在容器里面的,因此对于容器内的东西,线程是共同享有的,因此线程间的通信可以直接通过全局变量进行通信,但是由此带来的例如多个线程读写同一个地址变量的时候则将带来不可预期的后果,因此这时候引入了各种锁的作用,例如互斥锁等。</li></ul></blockquote><p>假设，一个文本程序，需要接受键盘输入，将内容显示在屏幕上，还需要保存信息到硬盘中。若只有一个进程，势必造成同一时间只能干一样事的尴尬（当保存时，就不能通过键盘输入内容）。若有多个进程，每个进程负责一个任务，进程A负责接收键盘输入的任务，进程B负责将内容显示在屏幕上的任务，进程C负责保存内容到硬盘中的任务。这里进程A，B，C间的协作涉及到了进程通信问题，而且有共同都需要拥有的东西——-文本内容，不停的切换造成性能上的损失。若有一种机制，可以使任务A，B，C共享资源，这样上下文切换所需要保存和恢复的内容就少了，同时又可以减少通信所带来的性能损耗，那就好了。是的，这种机制就是线程。<strong>线程共享进程的大部分资源，并参与CPU的调度, 当然线程自己也是拥有自己的资源的，例如，栈，寄存器等等。</strong>  此时，进程同时也是线程的容器。线程也是有着自己的缺陷的，例如健壮性差，若一个线程挂掉了，整一个进程也挂掉了，这意味着其它线程也挂掉了，进程却没有这个问题，一个进程挂掉，另外的进程还是活着。</p><ul><li><strong><em>进程是系统分配资源的最小单位\</em></strong></li><li><strong><em>线程是CPU调度的最小单位\</em></strong></li><li><em>由于默认进程内只有一个线程,所以多核CPU处理多进程就像是一个进程一个核心</em></li></ul><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p><strong>协程通过在线程中实现调度，避免了陷入内核级别的上下文切换造成的性能损失，进而突破了线程在IO上的性能瓶颈。</strong></p><blockquote><ul><li>协程是属于线程的。协程程序是在线程里面跑的，因此协程又称微线程和纤程等</li><li>协程没有线程的上下文切换消耗。协程的调度切换是用户(程序员)手动切换的,因此更加灵活,因此又叫用户空间线程.</li><li>原子操作性。由于协程是用户调度的，所以不会出现执行一半的代码片段被强制中断了，因此无需原子操作锁。</li></ul></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>进程和线程的关系：</p><ul><li><p>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</p></li><li><p>资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源</p></li><li><p>cpu分配给线程，即真正在cpu上运行的是线程</p></li><li><p>线程是最小的执行单元，进程是最小的资源管理单元</p></li></ul></blockquote><p>进程，线程，协程不断突破，更高效的处理阻塞，不断地提高CPU的利用率。但是并不是说，线程就一定比进程快，而协程就不一定不线程要快。具体还是要看应用场景。可以简单粗暴的把应用分为IO密集型应用以及CPU密集型应用。</p><p><strong>多核CPU，CPU密集型应用</strong><br> 此时多线程的效率是最高的，多线程可以使到全部CPU核心满载，又避免了协程间切换造成性能损失。当CPU密集型任务时，CPU一直在利用着，切换反而会造成性能损失，即便协程上下文切换消耗最小，但也还是有消耗的。</p><p><strong>多核CPU，IO密集型应用</strong><br> 此时采用多线程多协程效率最高，多线程可以使到全部CPU核心满载，而一个线程多协程，则更好的提高了CPU的利用率。</p><p><strong>单核CPU，CPU密集型应用</strong><br> 单进程效率是最高，此时单个进程已经使到CPU满载了。</p><p><strong>单核CPU，IO密集型应用</strong><br> 多协程，效率最高。例如，看了上面应该也是知道的了</p><h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><p><img src="https://i.loli.net/2020/05/21/WDaPQO6CweJU5kb.png" alt="并行和并发"></p><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>并行就是指同一时刻有两个或两个以上的“工作单位”在同时执行，从硬件的角度上来看就是同一时刻有两条或两条以上的指令处于执行阶段。所以，多核是并行的前提，单线程永远无法达到并行状态。可以利用多线程和多进程到达并行状态。另外的，Python的多线程由于GIL的存在，对于Python来说无法通过多线程到达并行状态。</p><p><strong>并行的动机</strong>：用更多的CPU核心更快的完成任务. 就像一个团队, 一个脑袋不够用了, 一个团队来一起处理一个任务。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>对于并发的理解，要从两方面去理解，1.并发设计 2.并发执行。先说并发设计，当说一个程序是并发的，更多的是指这个程序采取了并发设计。</p><p><strong>并发的动机</strong>：在计算能力恒定的情况下处理更多的任务, 就像我们的大脑, 计算能力相对恒定, 要在一天中处理更多的问题, 我们就必须具备多任务的能力. 现实工作中有很多事情可能会中断你的当前任务, 处理这种多任务的能力就是你的并发能力。</p><p>并发设计的标准：<strong>使多个操作可以在重叠的时间段内进行</strong> ，这里的重点在于<strong>重叠的时间内</strong>， 重叠时间可以理解为一段时间内。例如：<strong>在时间1s秒内</strong>,  具有IO操作的task1和task2都完成，这就可以说是并发执行。所以呢，单线程也是可以做到并发运行的。当然啦，并行肯定是并发的。一个程序能否并发执行，<strong>取决于设计，也取决于部署方式</strong>。例如, 当给程序开一个线程（协程是不开的），它不可能是并发的，因为在重叠时间内根本就没有两个task在运行。当一个程序被设计成完成一个任务再去完成下一个任务的时候，即便部署是多线程多协程的也是无法达到并发运行的。</p><p><strong>并行与并发的关系</strong>: <strong>并发的设计使到并发执行成为可能，而并行是并发执行的其中一种模式</strong>。</p><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a><strong>同步与异步</strong></h2><p>同步和异步关注的是<strong>消息通信机制</strong>(synchronous communication/ asynchronous communication)<br>所谓同步，就是在发出一个<em>调用</em>时，在没有得到结果之前，该<em>调用</em>就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由<em>调用者</em>主动等待这个<em>调用</em>的结果。</p><p>而异步则是相反，*<strong>调用*在发出之后，这个调用就直接返回了，所以没有返回结果</strong>。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p><h2 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h2><p>阻塞和非阻塞关注的是<strong>程序在等待调用结果（消息，返回值）时的状态.</strong></p><p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。<br>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之禅</title>
      <link href="2020/05/20/python-zhi-shan/"/>
      <url>2020/05/20/python-zhi-shan/</url>
      
        <content type="html"><![CDATA[<h2 id="Zen-of-Python（Python之禅）"><a href="#Zen-of-Python（Python之禅）" class="headerlink" title="Zen of Python（Python之禅）"></a>Zen of Python（Python之禅）</h2><p>Beautiful is better than ugly. （优美比丑陋好）<br>Explicit is better than implicit.（清晰比晦涩好）<br>Simple is better than complex.（简单比复杂好）<br>Complex is better than complicated.（复杂比错综复杂好）<br>Flat is better than nested.（扁平比嵌套好）<br>Sparse is better than dense.（稀疏比密集好）<br>Readability counts.（可读性很重要）<br>Special cases aren’t special enough to break the rules.（特殊情况也不应该违反这些规则）<br>Although practicality beats purity.（但现实往往并不那么完美）<br>Errors should never pass silently.（异常不应该被静默处理）<br>Unless explicitly silenced.（除非你希望如此）<br>In the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测）<br>There should be one– and preferably only one –obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案）<br>Although that way may not be obvious at first unless you’re Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人^这里指的是Python之父Guido^）<br>Now is better than never.（现在开始做比不做好）<br>Although never is often better than *right* now.（不做比盲目去做好^极限编程中的YAGNI原则^）<br>If the implementation is hard to explain, it’s a bad idea.（如果一个实现方案难于理解，它就不是一个好的方案）<br>If the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案）<br>Namespaces are one honking great idea – let’s do more of those!（命名空间非常有用，我们应当多加利用）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux crontab命令</title>
      <link href="2020/05/19/linux-crontab-ming-ling/"/>
      <url>2020/05/19/linux-crontab-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-crontab-命令"><a href="#Linux-crontab-命令" class="headerlink" title="Linux crontab 命令"></a>Linux crontab 命令</h1><p>Linux crontab是用来定期执行程序的命令。</p><p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p><p>crond 命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p><p><strong>注意：</strong>新创建的 cron 任务，不会马上执行，至少要过 2 分钟后才可以，当然你可以重启 cron 来马上执行。</p><p>而 linux 任务调度的工作主要分为以下两类：</p><ul><li>1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li><li>2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">crontab [ -u user ] file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">crontab [ -u user ] { -l | -r | -e }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明：</strong></p><p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p><p>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。</p><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a><strong>参数说明</strong>：</h4><ul><li><p>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</p></li><li><p>-r : 删除目前的时程表</p></li><li><p>-l : 列出目前的时程表</p></li></ul><p>时间格式如下：</p><pre class="line-numbers language-none"><code class="language-none">f1 f2 f3 f4 f5 program<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li><li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li><li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li><li>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</li><li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推</li></ul><blockquote><p> 使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定执行时间。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>每月每天每小时的第 0 分钟执行一次 /bin/ls</p><pre class="line-numbers language-none"><code class="language-none">0 * * * * /bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</p><pre class="line-numbers language-none"><code class="language-none">0 6-12/3 * 12 * /usr/bin/backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>周一到周五每天下午 5:00 寄一封信给 <a href="mailto:alex@domain.name">alex@domain.name</a></p><pre class="line-numbers language-none"><code class="language-none">0 17 * * 1-5 mail -s "hi" alex@domain.name &lt; /tmp/maildata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”</p><pre class="line-numbers language-none"><code class="language-none">20 0-23/2 * * * echo "haha"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面再看看几个具体的例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache 50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 00 03 * * 1-5 find /home "*.xxx" -mtime +4 -exec rm {} \;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装MySql</title>
      <link href="2020/05/06/docker-an-zhuang-mysql/"/>
      <url>2020/05/06/docker-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装MySql"><a href="#Docker安装MySql" class="headerlink" title="Docker安装MySql"></a>Docker安装MySql</h1><h3 id="1、查看可用的-MySQL-版本"><a href="#1、查看可用的-MySQL-版本" class="headerlink" title="1、查看可用的 MySQL 版本"></a>1、查看可用的 MySQL 版本</h3><p>访问 MySQL 镜像库地址：<a href="https://hub.docker.com/_/mysql?tab=tags">https://hub.docker.com/_/mysql?tab=tags</a> 。</p><p>可以通过 Sort by 查看其他版本的 MySQL，默认是最新版本 <strong>mysql:latest</strong> 。</p><p>可以用 <strong>docker search mysql</strong> 命令来查看可用版本</p><h3 id="2、拉取-MySQL-镜像"><a href="#2、拉取-MySQL-镜像" class="headerlink" title="2、拉取 MySQL 镜像"></a>2、拉取 MySQL 镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker pull mysql:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、查看本地镜像"><a href="#3、查看本地镜像" class="headerlink" title="3、查看本地镜像"></a>3、查看本地镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、运行容器"><a href="#4、运行容器" class="headerlink" title="4、运行容器"></a>4、运行容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>-p 3306:3306</strong> ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 <strong>宿主机ip:3306</strong> 访问到 MySQL 的服务。</li><li><strong>MYSQL_ROOT_PASSWORD=123456</strong>：设置 MySQL 服务 root 用户的密码。</li></ul><h3 id="5、安装成功"><a href="#5、安装成功" class="headerlink" title="5、安装成功"></a>5、安装成功</h3><p>通过 <strong>docker ps</strong> 命令查看是否安装成功：</p><p>本机可以通过 root 和密码 123456 访问 MySQL 服务。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mysql -h localhost -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下docker实践</title>
      <link href="2020/05/05/ubuntu-xia-docker-shi-jian/"/>
      <url>2020/05/05/ubuntu-xia-docker-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu18-下docker实践"><a href="#Ubuntu18-下docker实践" class="headerlink" title="Ubuntu18 下docker实践"></a>Ubuntu18 下docker实践</h1><table bgcolor="#343a40">    <tbody><tr>        <td><img src="https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP"></td>  </tr>    </tbody></table><p>1.更新索引</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.安装需要的包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> apt-transport-https ca-certificates software-properties-common <span class="token function">curl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.添加 GPG 密钥，并添加 Docker-ce 软件源</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token function">sudo</span> add-apt-repository   <span class="token string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \<span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lei@lei:~$ <span class="token function">sudo</span> apt-key fingerprint 0EBFCD88pub   rsa4096 <span class="token number">2017</span>-02-22 <span class="token punctuation">[</span>SCEA<span class="token punctuation">]</span>      9DC8 <span class="token number">5822</span> 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88uid           <span class="token punctuation">[</span> 未知 <span class="token punctuation">]</span> Docker Release <span class="token punctuation">(</span>CE deb<span class="token punctuation">)</span> <span class="token operator">&lt;</span>docker@docker.com<span class="token operator">&gt;</span>sub   rsa4096 <span class="token number">2017</span>-02-22 <span class="token punctuation">[</span>S<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.添加成功后更新软件包缓存</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.安装 Docker-ce</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.设置开机自启动并启动 Docker-ce（安装成功后默认已设置并启动，可忽略）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker<span class="token function">sudo</span> systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7.测试运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker -v<span class="token function">sudo</span> docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>8.添加当前用户到 docker 用户组，可以不用 sudo 运行 docker（可选）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">groupadd</span> docker<span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token environment constant">$USER</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9.测试添加用户组（可选）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Docker-镜像加速"><a href="#Docker-镜像加速" class="headerlink" title="Docker 镜像加速"></a>Docker 镜像加速</h1><p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。</p><ul><li>网易：<strong><a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com/</a></strong></li><li>阿里云：<strong>https://&lt;你的ID&gt;.mirror.aliyuncs.com</strong></li><li>七牛云加速器：<strong><a href="https://reg-mirror.qiniu.com/">https://reg-mirror.qiniu.com</a></strong></li></ul><p>阿里云镜像获取地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h2 id="1-安装／升级Docker客户端"><a href="#1-安装／升级Docker客户端" class="headerlink" title="1. 安装／升级Docker客户端"></a>1. 安装／升级Docker客户端</h2><p>推荐安装1.10.0以上版本的Docker客户端，参考文档 <a href="https://yq.aliyun.com/articles/110806">docker-ce</a></p><h2 id="2-配置镜像加速器"><a href="#2-配置镜像加速器" class="headerlink" title="2. 配置镜像加速器"></a>2. 配置镜像加速器</h2><p>针对Docker客户端版本大于 1.10.0 的用户</p><p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'{  "registry-mirrors": ["https://klq9hjzs.mirror.aliyuncs.com"]}EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Docker-Hello-World"><a href="#Docker-Hello-World" class="headerlink" title="Docker Hello World"></a>Docker Hello World</h1><p>Docker 允许你在容器内运行应用程序， 使用 <strong>docker run</strong> 命令来在容器内运行一个应用程序。</p><p>输出Hello world</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">runoob@runoob:~$ docker run ubuntu:15.10 /bin/echo <span class="token string">"Hello world"</span>Hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果报错</p><pre class="line-numbers language-none"><code class="language-none">”Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/json: dial unix /var/run/docker.sock: connect: permission denied“<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大概的意思就是：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">groupadd</span> docker     <span class="token comment">#添加docker用户组</span><span class="token function">sudo</span> gpasswd -a <span class="token environment constant">$USER</span> docker     <span class="token comment">#将登陆用户加入到docker用户组中</span>newgrp docker     <span class="token comment">#更新用户组</span>docker <span class="token function">ps</span>    <span class="token comment">#测试docker命令是否可以使用sudo正常使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>各个参数解析：</p><ul><li><strong>docker:</strong> Docker 的二进制执行文件。</li><li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li><li><strong>ubuntu:15.10</strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li><li><strong>/bin/echo “Hello world”:</strong> 在启动的容器里执行的命令</li></ul><p>以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。</p><h2 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a>运行交互式的容器</h2><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**”对话”**的能力</p><h2 id="启动容器（后台模式）"><a href="#启动容器（后台模式）" class="headerlink" title="启动容器（后台模式）"></a>启动容器（后台模式）</h2><p>使用以下命令创建一个以进程方式运行的容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lei@lei:~$ docker run -d ubuntu:15.10 /bin/sh -c <span class="token string">"while true; do echo hello world; sleep 1; done"</span>30a4768775a6716d84e226a7930aa886095506ea9ec11b424c1104323b5b6d18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在宿主主机内使用 <strong>docker logs</strong> 命令，查看容器内的标准输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lei@lei:~$ docker logs 30a4768775a6hello worldhello worldhello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p>我们使用 <strong>docker stop</strong> 命令来停止容器:</p><pre class="line-numbers language-none"><code class="language-none">lei@lei:~$ docker stop 30a4768775a630a4768775a6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取一个新的镜像"><a href="#获取一个新的镜像" class="headerlink" title="获取一个新的镜像"></a>获取一个新的镜像</h2><p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p><h2 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h2><p>我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <strong><a href="https://hub.docker.com/">https://hub.docker.com/</a></strong></p><p>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。</p><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>镜像删除使用 <strong>docker rmi</strong> 命令，比如我们删除 hello-world 镜像：</p><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。</p><ul><li>1、从已经创建的容器中更新镜像，并且提交这个镜像</li><li>2、使用 Dockerfile 指令来创建一个新的镜像</li></ul><h1 id="Docker-容器连接"><a href="#Docker-容器连接" class="headerlink" title="Docker 容器连接"></a>Docker 容器连接</h1><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <strong>-P</strong> 或 <strong>-p</strong> 参数来指定端口映射。</p><h2 id="网络端口映射"><a href="#网络端口映射" class="headerlink" title="网络端口映射"></a>网络端口映射</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lei@lei:~$ docker run -d -P training/webapp python app.py4385e6f8006cc161d3e41744f1e7bf283a9a1be66a785b08b9092e5f375aee3b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们使用 <strong>-P</strong> 参数创建一个容器，使用 <strong>docker ps</strong> 可以看到容器端口 5000 绑定主机端口 32768。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lei@lei:~$ docker <span class="token function">ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES4385e6f8006c        training/webapp     <span class="token string">"python app.py"</span>     <span class="token number">13</span> seconds ago      Up <span class="token number">8</span> seconds        <span class="token number">0.0</span>.0.0:32768-<span class="token operator">&gt;</span><span class="token number">5000</span>/tcp   fervent_haibt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们也可以使用 <strong>-p</strong> 标识来指定容器端口绑定到主机端口。</p><p>两种方式的区别是:</p><ul><li><strong>-P :**是容器内部端口</strong>随机**映射到主机的高端口。</li><li><strong>-p :</strong> 是容器内部端口绑定到<strong>指定</strong>的主机端口。</li></ul><p>我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lei@lei:~$ docker run -d -p <span class="token number">127.0</span>.0.1:5001:5000 training/webapp python app.py8239a7e1c7b14a9ca04de7ce7fc526bf77cdb5443b8278f7bbbd745b4dcf713c^<span class="token punctuation">[</span><span class="token punctuation">[</span>Alei@leidocker <span class="token function">ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES8239a7e1c7b1        training/webapp     <span class="token string">"python app.py"</span>     <span class="token number">6</span> seconds ago       Up <span class="token number">4</span> seconds        <span class="token number">127.0</span>.0.1:5001-<span class="token operator">&gt;</span><span class="token number">5000</span>/tcp   admiring_maxwella56e5e9a438c        training/webapp     <span class="token string">"python app.py"</span>     <span class="token number">48</span> seconds ago      Up <span class="token number">45</span> seconds       <span class="token number">0.0</span>.0.0:5000-<span class="token operator">&gt;</span><span class="token number">5000</span>/tcp     admiring_wing4385e6f8006c        training/webapp     <span class="token string">"python app.py"</span>     <span class="token number">2</span> minutes ago       Up <span class="token number">2</span> minutes        <span class="token number">0.0</span>.0.0:32768-<span class="token operator">&gt;</span><span class="token number">5000</span>/tcp    fervent_haibt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Docker-Dockerfile"><a href="#Docker-Dockerfile" class="headerlink" title="Docker Dockerfile"></a>Docker Dockerfile</h1><h3 id="什么是-Dockerfile？"><a href="#什么是-Dockerfile？" class="headerlink" title="什么是 Dockerfile？"></a>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h3 id="使用-Dockerfile-定制镜像"><a href="#使用-Dockerfile-定制镜像" class="headerlink" title="使用 Dockerfile 定制镜像"></a>使用 Dockerfile 定制镜像</h3><p><strong>1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p><p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM nginxRUN <span class="token builtin class-name">echo</span> <span class="token string">'这是一个本地构建的nginx镜像'</span> <span class="token operator">&gt;</span> /usr/share/nginx/html/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2、FROM 和 RUN 指令的作用</strong></p><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p><p>shell 格式：</p><pre class="line-numbers language-none"><code class="language-none">RUN &lt;命令行命令&gt;# &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exec 格式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">RUN <span class="token punctuation">[</span><span class="token string">"可执行文件"</span>, <span class="token string">"参数1"</span>, <span class="token string">"参数2"</span><span class="token punctuation">]</span><span class="token comment"># 例如：</span><span class="token comment"># RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大</p><h3 id="开始构建镜像"><a href="#开始构建镜像" class="headerlink" title="开始构建镜像"></a>开始构建镜像</h3><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p><p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。</p><p><strong>注</strong>：最后的 <strong>.</strong> 代表本次执行的上下文路径，下一节会介绍。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker build -t nginx:test <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p><p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p><p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p><blockquote><p> <strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p></blockquote><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h3 id="Compose-简介"><a href="#Compose-简介" class="headerlink" title="Compose 简介"></a>Compose 简介</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><p>如果你还不了解 YML 文件配置，可以先阅读 <a href="https://www.runoob.com/w3cnote/yaml-intro.html">YAML 入门教程</a>。</p><p>Compose 使用的三个步骤：</p><ul><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li></ul><h1 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p><p>Docker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。</p><p>Docker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。</p><p>使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云开发资料</title>
      <link href="2020/05/01/yun-kai-fa-zi-liao/"/>
      <url>2020/05/01/yun-kai-fa-zi-liao/</url>
      
        <content type="html"><![CDATA[<h1 id="云开发学习视频"><a href="#云开发学习视频" class="headerlink" title="云开发学习视频"></a>云开发学习视频</h1><p><a href="https://developers.weixin.qq.com/minigame/dev/wxcloud/basis/getting-started.html">云开发官方文档</a></p><p><a href="https://club.cloudbase.net/handbook/tcb/1101.html">用云函数实现后端能力</a></p><p>~从 0 到 1 玩转云调用订阅消息<br><a href="https://cloud.tencent.com/edu/learning/course-2415">https://cloud.tencent.com/edu/learning/course-2415</a><br>从 0 到 1 玩转小程序地图<br><a href="https://cloud.tencent.com/edu/learning/course-2416">https://cloud.tencent.com/edu/learning/course-2416</a><br>从 0 到 1 玩转小程序内容安全<br><a href="https://cloud.tencent.com/edu/learning/course-2417">https://cloud.tencent.com/edu/learning/course-2417</a><br>从 0 到 1 玩转小程序图像处理<br><a href="https://cloud.tencent.com/edu/learning/course-2418">https://cloud.tencent.com/edu/learning/course-2418</a><br>从 0 到 1 玩转小程序服务市场<br><a href="https://cloud.tencent.com/edu/learning/course-2419">https://cloud.tencent.com/edu/learning/course-2419</a><br>使用 uni-app 开发电影推荐小程序实战<br><a href="https://cloud.tencent.com/edu/learning/course-2420">https://cloud.tencent.com/edu/learning/course-2420</a><br>使用 WePy 开发企业门户小程序<br><a href="https://cloud.tencent.com/edu/learning/course-2421">https://cloud.tencent.com/edu/learning/course-2421</a><br>使用 Vue.js 语法开发答题小程序<br><a href="https://cloud.tencent.com/edu/learning/course-2422">https://cloud.tencent.com/edu/learning/course-2422</a><br>使用 Chameleon 开发教育培训小程序<br><a href="https://cloud.tencent.com/edu/learning/course-2423">https://cloud.tencent.com/edu/learning/course-2423</a><br>云开发数据库命令全解<br><a href="https://cloud.tencent.com/edu/learning/course-2424">https://cloud.tencent.com/edu/learning/course-2424</a><br>云开发数据库聚合全解<br><a href="https://cloud.tencent.com/edu/learning/course-2425">https://cloud.tencent.com/edu/learning/course-2425</a><br>云开发数据库事务全解<br><a href="https://cloud.tencent.com/edu/learning/course-2426">https://cloud.tencent.com/edu/learning/course-2426</a><br>云开发数据库安全规则全解<br><a href="https://cloud.tencent.com/edu/learning/course-2427">https://cloud.tencent.com/edu/learning/course-2427</a><br>云函数开发与日志调试<br><a href="https://cloud.tencent.com/edu/learning/course-2428">https://cloud.tencent.com/edu/learning/course-2428</a><br>云开发监控与告警<br><a href="https://cloud.tencent.com/edu/learning/course-2429">https://cloud.tencent.com/edu/learning/course-2429</a><br>云调用能力全解<br><a href="https://cloud.tencent.com/edu/learning/course-2430">https://cloud.tencent.com/edu/learning/course-2430</a><br>云数据库实时数据推送<br><a href="https://cloud.tencent.com/edu/learning/course-2431">https://cloud.tencent.com/edu/learning/course-2431</a><br>小程序·云开发实战——30分钟搭建个人相册小程序<br><a href="https://cloud.tencent.com/edu/learning/course-2432">https://cloud.tencent.com/edu/learning/course-2432</a><br>小程序·云开发实战：定制化客服小程序<br><a href="https://cloud.tencent.com/edu/learning/course-2433">https://cloud.tencent.com/edu/learning/course-2433</a></p><p><a href="https://www.wxmarkdown.com/">微信辅助工具</a></p><blockquote><p>搬运工</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 云开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 同时上传项目至github和gitee</title>
      <link href="2020/04/27/git-tong-shi-shang-chuan-xiang-mu-zhi-github-he-gitee/"/>
      <url>2020/04/27/git-tong-shi-shang-chuan-xiang-mu-zhi-github-he-gitee/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-同时上传项目至github和gitee"><a href="#Git-同时上传项目至github和gitee" class="headerlink" title="Git 同时上传项目至github和gitee"></a>Git 同时上传项目至github和gitee</h1><h2 id="1-删除本地项目git默认远程库名称"><a href="#1-删除本地项目git默认远程库名称" class="headerlink" title="1. 删除本地项目git默认远程库名称"></a>1. 删除本地项目git默认远程库名称</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">//git默认远程库名称为origin git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-自定义关联github和gitee并设置名称"><a href="#2-自定义关联github和gitee并设置名称" class="headerlink" title="2. 自定义关联github和gitee并设置名称"></a>2. 自定义关联github和gitee并设置名称</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">//关联github并设置别名为github$ git remote add github git@github.com:lei025/tcb-hackthon-secondHand.git//关联gitee并设置别名为gitee$ git remote add gitee git@gitee.com:leidb/tcb-hackthon-secondHand.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-推送到远程仓库"><a href="#3-推送到远程仓库" class="headerlink" title="3. 推送到远程仓库"></a>3. 推送到远程仓库</h2><ul><li><p>推送到github</p><p><code>git push github master</code></p></li><li><p>推送到gitee</p><p><code>git push gitee master</code></p></li></ul><p>由此，本地库就可以同时与多个远程库相互同步代码了。</p><p><a href="https://blog.csdn.net/xukai0110/article/details/80637902">Git使用方法（精心整理，绝对够用）</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布道云开发-B站易物小程序</title>
      <link href="2020/04/24/bu-dao-yun-kai-fa-b-zhan-yi-wu-xiao-cheng-xu/"/>
      <url>2020/04/24/bu-dao-yun-kai-fa-b-zhan-yi-wu-xiao-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="记录B站视频"><a href="#记录B站视频" class="headerlink" title="记录B站视频"></a>记录B站视频</h1><p><a href="https://www.bilibili.com/video/BV1Sa4y1v7o2">https://www.bilibili.com/video/BV1Sa4y1v7o2</a></p>]]></content>
      
      
      <categories>
          
          <category> B站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东评论词云</title>
      <link href="2020/04/14/jing-dong-gu-tai-a400-ping-lun-pa-chong/"/>
      <url>2020/04/14/jing-dong-gu-tai-a400-ping-lun-pa-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="京东评论词云"><a href="#京东评论词云" class="headerlink" title="京东评论词云"></a>京东评论词云</h1><h2 id="爬取评论"><a href="#爬取评论" class="headerlink" title="爬取评论"></a>爬取评论</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">import</span> json<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdcontent_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在爬取第{}页'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://club.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98&amp;productId=4311178&amp;score=0&amp;sortType=5&amp;page={}&amp;pageSize=50&amp;isShadowSku=0&amp;fold=1'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            i<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text        datas <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'comments":(.*)\}'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'"content":"(.*?)"'</span><span class="token punctuation">,</span> datas<span class="token punctuation">)</span>        content_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'本页爬取失败'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'评论'</span><span class="token punctuation">]</span> <span class="token operator">=</span> content_listdf<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'A400.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="生成词云图"><a href="#生成词云图" class="headerlink" title="生成词云图"></a>生成词云图</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jieba <span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plttext <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'A400.txt'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>mylist <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>word_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> mylist<span class="token punctuation">]</span>new_text <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>word_list<span class="token punctuation">)</span>wordcloud <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>font_path<span class="token operator">=</span><span class="token string">'./simhei.ttf'</span><span class="token punctuation">,</span> background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>generate<span class="token punctuation">(</span>new_text<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wordcloud<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Building prefix dict from the default dictionary ...Loading model from cache /tmp/jieba.cacheLoading model cost 1.083 seconds.Prefix dict has been built successfully.</code></pre><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gdzebbtpksj309p051ac0.jpg" alt="output_2_1.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 根据词频</span><span class="token keyword">import</span> jieba<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud<span class="token punctuation">,</span> STOPWORDS<span class="token comment"># from scipy.misc import imread</span><span class="token keyword">import</span> imageio<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> collections <span class="token keyword">import</span> Countertext <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'A400.txt'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>mylist <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>word_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> mylist<span class="token punctuation">]</span>new_text <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>word_list<span class="token punctuation">)</span>con_words <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>new_text<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token punctuation">]</span>frequencies <span class="token operator">=</span> Counter<span class="token punctuation">(</span>con_words<span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span>frequencies <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>frequencies<span class="token punctuation">)</span><span class="token comment"># pck_mask = imageio.imread('./apchong.png')</span>pac_mask <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./apchong.png'</span><span class="token punctuation">)</span>pac <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>pac_mask<span class="token punctuation">)</span>wordcloud <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>font_path<span class="token operator">=</span><span class="token string">'./simhei.ttf'</span><span class="token punctuation">,</span>                      background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>                       max_words<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span>                      mask<span class="token operator">=</span>pac<span class="token punctuation">)</span><span class="token punctuation">.</span>fit_words<span class="token punctuation">(</span>frequencies<span class="token punctuation">)</span>  <span class="token comment">#generate_from_text</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>dpi<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wordcloud<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># wordcloud.to_file('wcnh2.png')</span><span class="token comment"># plt.imshow(wordcloud)</span><span class="token comment"># plt.axis("off")</span><span class="token comment"># plt.figure()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gdzeguf306j30m80gognx.jpg" alt="wcnh2.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
          <category> 词云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词云 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>武院二手交易</title>
      <link href="2020/04/07/wu-yuan-er-shou-jiao-yi/"/>
      <url>2020/04/07/wu-yuan-er-shou-jiao-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="项目名称：易物小程序"><a href="#项目名称：易物小程序" class="headerlink" title="项目名称：易物小程序"></a>项目名称：易物小程序</h2><blockquote><h4 id="本程序完全开源-https-gitee-com-leidb-tcb-hackthon-secondHand"><a href="#本程序完全开源-https-gitee-com-leidb-tcb-hackthon-secondHand" class="headerlink" title="本程序完全开源[https://gitee.com/leidb/tcb-hackthon-secondHand]"></a>本程序完全开源[<a href="https://gitee.com/leidb/tcb-hackthon-secondHand]">https://gitee.com/leidb/tcb-hackthon-secondHand]</a></h4></blockquote><p>欢迎使用该小程序，基于小程序和<a href="https://cloud.tencent.com/product/tcb?from=10680">云开发</a>搭建。</p><p>因为小程序的云开发不需要额外部署服务器，大大降低了开发者的开发成本。</p><p>是本人参与腾讯布道师培训完成的一个项目，主要在于解决校园二手物品的问题，数据存储使用小程序云开发功能，全套程序已开源在<a href="https://gitee.com/leidb/tcb-hackthon-secondHand/">gitee</a>主页。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>此小程序主要是服务于当前大学生，解决大学生在校园存在资源冗余问题，将学生二手资源买卖给学生，实行C2C模式，降低学生的生活成本。例如：师兄师姐毕业时要处理的课本，已经经历过考研、考公务员、考资格证的学生的学习资料，学生疯狂网购买了很多用不到的物品等。</p><h2 id="三大优势"><a href="#三大优势" class="headerlink" title="三大优势"></a>三大优势</h2><ul><li><p>充分利用冗余资源，推崇绿色消费。</p></li><li><p>方便快捷，可以去掉物流这以一环节，直接联系卖家获取商品即可。</p></li><li><p>安全性高：通过校园认证，确认身份，保证学生交易的安全性。</p></li></ul><p>对于书籍类二手物品可以通过扫一扫一维码即可展示商品信息，操作简单。具有商品分类功能，帮助学生快速找到有需求的物品，注重用户体验。</p><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><p>一开始就决定基于小程序和云开发搭建。</p><p>小程序本身的即用即走以及订阅通知机制非常适合我的应用场景。</p><p>而云开发所倡导的 serverless 也是我一直非常感兴趣和愿意尝试的，在这种轻量级应用中非常合适。</p><h1 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a><strong>技术架构</strong></h1><h2 id="小程序框架"><a href="#小程序框架" class="headerlink" title="小程序框架"></a><strong>小程序框架</strong></h2><p>采用云开发加云储存加云数据库模式。</p><h2 id="小程序ui"><a href="#小程序ui" class="headerlink" title="小程序ui"></a><strong>小程序ui</strong></h2><p>采用了Vant Weapp 轻量、可靠的小程序 UI 组件库。</p><p>Vant Weapp 是移动端 Vue 组件库<a href="https://github.com/youzan/vant">Vant</a>的小程序版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用。</p><h1 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a><strong>结果展示</strong></h1><p>用户首次进入小程序会进行学号认证登录，然后注册小程序才能发布信息，商品列表点击联系ta，会直接换起用户电话程序，一键联系对方，最为果断的一个功能，遇见心仪的就联系ta。</p><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1ger9s5xfs1j30af0k0jub.jpg" alt="index.png"><br><img src="http://ww1.sinaimg.cn/large/005W6BOngy1ger9vel4zjj30u01s6q64.jpg" alt="微信图片_20200406224833.jpg"><br><img src="http://ww1.sinaimg.cn/large/005W6BOngy1ger9vkpg1jj30u01s6dh6.jpg" alt="微信图片_20200406224942.jpg"><br><img src="http://ww1.sinaimg.cn/large/005W6BOngy1ger9vutg2yj30u01s6gmu.jpg" alt="微信图片_20200406225020.jpg"><br><img src="http://ww1.sinaimg.cn/large/005W6BOngy1ger9w2hhe1j30u01s6ta9.jpg" alt="微信图片_20200406225030.jpg"><br><img src="http://ww1.sinaimg.cn/large/005W6BOngy1ger9wao5i8j30u01s6wfi.jpg" alt="微信图片_20200406225038.jpg"><br><img src="http://ww1.sinaimg.cn/large/005W6BOngy1ger9wg8p34j30u01s6jsa.jpg" alt="微信图片_20200406225102.jpg"><br><img src="http://ww1.sinaimg.cn/large/005W6BOngy1ger9wmwqvgj30u01s6wfu.jpg" alt="微信图片_20200406225111.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私人书柜小程序项目</title>
      <link href="2020/04/03/si-ren-shu-ju-xiao-cheng-xu-xiang-mu/"/>
      <url>2020/04/03/si-ren-shu-ju-xiao-cheng-xu-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="小程序-云开发"><a href="#小程序-云开发" class="headerlink" title="小程序-云开发"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">小程序-云开发</a></h1><h2 id="私房书柜项目"><a href="#私房书柜项目" class="headerlink" title="私房书柜项目"></a>私房书柜项目</h2><p>通过调用微信的二维码扫描云函数，获取图书的ISBN。调用API查询图书的详细信息，由于豆瓣图书的API失效，所以在github上找一个提到的API<a href="https://github.com/qiaohaoforever/DoubanBook">DouBanBook</a></p><h2 id="图书名称查询"><a href="#图书名称查询" class="headerlink" title="图书名称查询"></a>图书名称查询</h2><p>调用地址：<a href="https://book.feelyou.top/search/">https://book.feelyou.top/search/</a></p><p>请求方式：GET</p><p>返回类型：JSON</p><p>请求示例：<a href="https://book.feelyou.top/search/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0">https://book.feelyou.top/search/深度学习</a></p><h4 id="请求参数（Query）"><a href="#请求参数（Query）" class="headerlink" title="请求参数（Query）"></a>请求参数（Query）</h4><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>书名</td><td>STRING</td><td>必选</td><td>图书名称</td></tr></tbody></table><h4 id="返回参数"><a href="#返回参数" class="headerlink" title="返回参数"></a>返回参数</h4><p>图书信息列表为list格式，每一本书对应一个json。</p><h2 id="ISBN图书查询"><a href="#ISBN图书查询" class="headerlink" title="ISBN图书查询"></a>ISBN图书查询</h2><h4 id="ISBN图书查询接口说明"><a href="#ISBN图书查询接口说明" class="headerlink" title="ISBN图书查询接口说明"></a>ISBN图书查询接口说明</h4><p>调用地址：<a href="http://book.feelyou.top/isbn/ISBN">http://book.feelyou.top/isbn/ISBN</a></p><p>请求方式：GET</p><p>返回类型：JSON</p><p>请求示例：<a href="http://book.feelyou.top/isbn/9787506380263">http://book.feelyou.top/isbn/9787506380263</a></p><h4 id="请求参数（Query）-1"><a href="#请求参数（Query）-1" class="headerlink" title="请求参数（Query）"></a>请求参数（Query）</h4><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>ISBN</td><td>STRING</td><td>必选</td><td>10-13位ISBN码</td></tr></tbody></table><p>云函数调用API</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> rq <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request-promise'</span><span class="token punctuation">)</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 云函数入口函数</span>exports<span class="token punctuation">.</span><span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">rq</span><span class="token punctuation">(</span><span class="token string">'https://book.feelyou.top/isbn/'</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>isbn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">html</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> html<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// console.log(event);</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gdgopds6ctj314s0qe7c7.jpg" alt="2020-04-03 16-59-16屏幕截图.png"></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯犀牛鸟云开发校园技术布道师养成计划第九天</title>
      <link href="2020/03/25/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-jiu-tian/"/>
      <url>2020/03/25/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-jiu-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><p><strong>课程学习资料</strong></p><h2 id="第1天"><a href="#第1天" class="headerlink" title="第1天"></a><strong>第1天</strong></h2><p><a href="https://tencentcloudbase.github.io/handbook/tcb01.html">https://tencentcloudbase.github.io/handbook/tcb01.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb02.html">https://tencentcloudbase.github.io/handbook/tcb02.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb03.html">https://tencentcloudbase.github.io/handbook/tcb03.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb04.html">https://tencentcloudbase.github.io/handbook/tcb04.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb05.html">https://tencentcloudbase.github.io/handbook/tcb05.html</a></p><h2 id="第2天"><a href="#第2天" class="headerlink" title="第2天"></a><strong>第2天</strong></h2><p><a href="https://tencentcloudbase.github.io/handbook/tcb06.html">https://tencentcloudbase.github.io/handbook/tcb06.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb07.html">https://tencentcloudbase.github.io/handbook/tcb07.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb08.html">https://tencentcloudbase.github.io/handbook/tcb08.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb09.html">https://tencentcloudbase.github.io/handbook/tcb09.html</a></p><h2 id="第3天"><a href="#第3天" class="headerlink" title="第3天"></a><strong>第3天</strong></h2><p><a href="https://tencentcloudbase.github.io/handbook/tcb11.html">https://tencentcloudbase.github.io/handbook/tcb11.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb12.html">https://tencentcloudbase.github.io/handbook/tcb12.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb13.html">https://tencentcloudbase.github.io/handbook/tcb13.html</a></p><h2 id="第4天"><a href="#第4天" class="headerlink" title="第4天"></a><strong>第4天</strong></h2><p><a href="https://tencentcloudbase.github.io/handbook/tcb14.html">https://tencentcloudbase.github.io/handbook/tcb14.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb15.html">https://tencentcloudbase.github.io/handbook/tcb15.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb16.html">https://tencentcloudbase.github.io/handbook/tcb16.html</a></p><h2 id="第5天"><a href="#第5天" class="headerlink" title="第5天"></a><strong>第5天</strong></h2><p><a href="https://tencentcloudbase.github.io/handbook/tcb17.html">https://tencentcloudbase.github.io/handbook/tcb17.html</a></p><h2 id="第6天"><a href="#第6天" class="headerlink" title="第6天"></a><strong>第6天</strong></h2><p><a href="https://tencentcloudbase.github.io/handbook/tcb21.html">https://tencentcloudbase.github.io/handbook/tcb21.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb22.html">https://tencentcloudbase.github.io/handbook/tcb22.html</a></p><h2 id="第7天"><a href="#第7天" class="headerlink" title="第7天"></a><strong>第7天</strong></h2><p><a href="https://tencentcloudbase.github.io/handbook/tcb23.html">https://tencentcloudbase.github.io/handbook/tcb23.html</a></p><p><a href="https://tencentcloudbase.github.io/handbook/tcb24.html">https://tencentcloudbase.github.io/handbook/tcb24.html</a></p><h2 id="第8天"><a href="#第8天" class="headerlink" title="第8天"></a><strong>第8天</strong></h2><p><a href="https://tencentcloudbase.github.io/handbook/tcb25.html">https://tencentcloudbase.github.io/handbook/tcb25.html</a></p><p><a href="https://www.bilibili.com/video/av62282070">https://www.bilibili.com/video/av62282070</a></p><h2 id="第9天"><a href="#第9天" class="headerlink" title="第9天"></a><strong>第9天</strong></h2><p><a href="https://www.bilibili.com/video/av62284946">https://www.bilibili.com/video/av62284946</a></p><p><a href="https://www.bilibili.com/video/av62283612">https://www.bilibili.com/video/av62283612</a></p><h2 id="第10天"><a href="#第10天" class="headerlink" title="第10天"></a><strong>第10天</strong></h2><p><a href="https://www.bilibili.com/video/av71282296">https://www.bilibili.com/video/av71282296</a></p><p><a href="https://www.bilibili.com/video/av69118468">https://www.bilibili.com/video/av69118468</a></p><h2 id="第11天"><a href="#第11天" class="headerlink" title="第11天"></a><strong>第11天</strong></h2><p><a href="https://www.bilibili.com/video/av65691671">https://www.bilibili.com/video/av65691671</a></p><h2 id="第12天"><a href="#第12天" class="headerlink" title="第12天"></a><strong>第12天</strong></h2><p><a href="https://www.bilibili.com/video/av62286458">https://www.bilibili.com/video/av62286458</a></p><h2 id="第13天"><a href="#第13天" class="headerlink" title="第13天"></a><strong>第13天</strong></h2><p><a href="https://www.bilibili.com/video/av61840827">https://www.bilibili.com/video/av61840827</a></p><h2 id="第14天"><a href="#第14天" class="headerlink" title="第14天"></a><strong>第14天</strong></h2><p><a href="https://www.bilibili.com/video/av61837039">https://www.bilibili.com/video/av61837039</a></p><h2 id="第15天"><a href="#第15天" class="headerlink" title="第15天"></a><strong>第15天</strong></h2><p><a href="https://www.bilibili.com/video/av61836472">https://www.bilibili.com/video/av61836472</a></p><p><a href="https://www.bilibili.com/video/av60337065">https://www.bilibili.com/video/av60337065</a></p><h2 id="第16天"><a href="#第16天" class="headerlink" title="第16天"></a><strong>第16天</strong></h2><p><a href="https://tencentcloudbase.github.io/2020-02-14-init/#%E6%A6%82%E8%BF%B0">https://tencentcloudbase.github.io/2020-02-14-init/#%E6%A6%82%E8%BF%B0</a></p><p><a href="https://tencentcloudbase.github.io/2020-02-14-prepare/">https://tencentcloudbase.github.io/2020-02-14-prepare/</a></p><p><a href="https://tencentcloudbase.github.io/2020-02-14-WebDemo-files/">https://tencentcloudbase.github.io/2020-02-14-WebDemo-files/</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯犀牛鸟云开发校园技术布道师养成计划第八天</title>
      <link href="2020/03/24/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-ba-tian/"/>
      <url>2020/03/24/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-ba-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="云开发与Nodejs"><a href="#云开发与Nodejs" class="headerlink" title="云开发与Nodejs"></a>云开发与Nodejs</h1><p>云函数的运行环境是 Node.js，我们可以在云函数中使用Nodejs内置模块以及使用 npm 安装第三方依赖来帮助我们更快的开发。借助于一些优秀的开源项目，避免了我们重复造轮子，相比于小程序端，能够大大扩展云函数的使用</p><h4 id="云函数与Nodejs"><a href="#云函数与Nodejs" class="headerlink" title="云函数与Nodejs"></a>云函数与Nodejs</h4><p><strong>技术文档：</strong><a href="http://nodejs.cn/api/">Nodejs API 中文技术文档</a></p><p><strong>Nodejs的内置模块</strong></p><p>Nodejs的常用内置模块以及功能如下所示，这些模块都是可以在云函数里直接使用的：</p><ul><li><strong>fs 模块</strong>：文件目录的创建、删除、查询以及文件的读取和写入，下面的createReadStream方法类似于读取文件，</li><li><strong>path 模块：</strong>提供了一些用于处理文件路径的API</li><li><strong>url模块：</strong>用于处理与解析 URL</li><li><strong>http模块：</strong>用于创建一个能够处理和响应 http 响应的服务</li><li><strong>querystring模块：</strong>解析查询字符串</li><li><strong>until模块</strong> ：提供用于解析和格式化 URL 查询字符串的实用工具；</li><li><strong>net模块：</strong>用于创建基于流的 TCP 或 IPC 的服务器</li><li><strong>crypto模块：</strong>提供加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装</li></ul><blockquote><p>在云函数中使用HTTP请求访问第三方服务可以不受域名限制，即不需要像小程序端一样，要将域名添加到request合法域名里；也不受http和https的限制，没有域名只有IP都是可以的，所以云函数可以应用的场景非常多，即能方便的调用第三方服务，也能够充当一个功能复杂的完整应用的后端。不过需要注意的是，云函数是部署在云端，有些局域网等终端通信的业务只能在小程序里进行。</p></blockquote><p><strong>常用变量</strong></p><p>module、exports、require</p><p>require用于引入模块、 JSON、或本地文件。 可以从 node_modules 引入模块，可以使用相对路径（例如 ./、）引入本地模块或 JSON 文件，路径会根据 <a href="http://nodejs.cn/s/etUQhi">__dirname</a> 定义的目录名或当前工作目录进行处理。</p><p>node模块化遵循的是commonjs规范，CommonJs定义的模块分为: 模块标识(module)、模块导出(exports) 、模块引用(require)。</p><p>在node中，一个文件即一个模块，使用exports和require来进行处理。</p><h4 id="Lodash实用工具库"><a href="#Lodash实用工具库" class="headerlink" title="Lodash实用工具库"></a>Lodash实用工具库</h4><p>Lodash是一个一致性、模块化、高性能的 JavaScript <strong>实用工具库</strong>，通过降低 array、number、objects、string 等数据类型的使用难度从而让 JavaScript 变得更简单。Lodash 的模块化方法非常适用于：遍历 array、object 和 string；对值进行操作和检测；创建符合功能的函数。</p><p><strong>技术文档：</strong><a href="https://lodash.com/">Lodash官方文档</a>、<a href="https://www.lodashjs.com/">Lodash中文文档</a></p><h4 id="moment时间处理"><a href="#moment时间处理" class="headerlink" title="moment时间处理"></a>moment时间处理</h4><p>开发小程序时经常需要格式化时间、处理相对时间、日历时间以及时间的多语言问题，这个时候就可以使用比较流行的momentjs了。</p><p><strong>技术文档：</strong><a href="https://momentjs.com/">moment官方文档</a>、<a href="http://momentjs.cn/">moment中文文档</a></p><h4 id="获取公网IP"><a href="#获取公网IP" class="headerlink" title="获取公网IP"></a>获取公网IP</h4><p>有时我们希望能够获取到服务器的公网IP，比如用于IP地址的白名单，或者想根据IP查询到服务器所在的地址，ipify就是一个免费好用的依赖，通过它我们也可以获取到云函数所在服务器的公网IP。</p><p><strong>技术文档：</strong><a href="https://github.com/sindresorhus/ipify">ipify Github地址</a></p><h4 id="Buffer文件流"><a href="#Buffer文件流" class="headerlink" title="Buffer文件流"></a>Buffer文件流</h4><h4 id="图像处理sharp"><a href="#图像处理sharp" class="headerlink" title="图像处理sharp"></a>图像处理sharp</h4><p>sharp是一个高速图像处理库，可以很方便的实现图片编辑操作，如裁剪、格式转换、旋转变换、滤镜添加、图片合成（如添加水印）、图片拼接等，支持JPEG, PNG, WebP, TIFF, GIF 和 SVG格式。在云函数端使用sharp来处理图片，而云存储则可以作为服务端和小程序端来传递图片的桥梁。</p><p><strong>技术文档：</strong><a href="https://sharp.pixelplumbing.com/en/stable/">sharp官方技术文档</a></p><h4 id="连接数据库MySQL"><a href="#连接数据库MySQL" class="headerlink" title="连接数据库MySQL"></a>连接数据库MySQL</h4><p><strong>公网连接数据库MySQL</strong></p><p>技术文档：<a href="https://sequelize.org/master/">Sequelize</a></p><p><strong>私有网络连接MySQL</strong></p><p>默认情况下，云开发的函数部署在<strong>公共网络</strong>中，只可以访问公网。如果开发者需要访问腾讯云的 <strong>Redis、TencentDB、CVM、Kafka</strong> 等资源，需要建立<strong>私有网络</strong>来确保<strong>数据安全及连接安全</strong>。</p><p><strong>连接数据库Redis</strong></p><h4 id="二维码qrcode"><a href="#二维码qrcode" class="headerlink" title="二维码qrcode"></a>二维码qrcode</h4><p><strong>技术文档：</strong><a href="https://github.com/soldair/node-qrcode">node-qrcode Github地址</a></p><h4 id="邮件处理"><a href="#邮件处理" class="headerlink" title="邮件处理"></a>邮件处理</h4><p>技术文档：<a href="https://github.com/nodemailer/nodemailer">Nodemailer Github地址</a>、<a href="https://nodemailer.com/about/">Nodemailer官方文档</a></p><h4 id="Excel文档处理"><a href="#Excel文档处理" class="headerlink" title="Excel文档处理"></a>Excel文档处理</h4><p>Excel是存储数据比较常见的格式，那如何让云函数拥有读写Excel文件的能力呢？我们可以在Github上搜索关键词“Node Excel”，去筛选Star比较多，条件比较契合的。</p><p>Github地址：<a href="https://github.com/mgcrea/node-xlsx">node-xlsx</a></p><p><strong>读取云存储的Excel文件</strong></p><p>将数据库里的数据保存为CSV</p><p><strong>技术文档：</strong><a href="https://github.com/zemirco/json2csv">json2CSV</a></p><h4 id="HTTP处理"><a href="#HTTP处理" class="headerlink" title="HTTP处理"></a>HTTP处理</h4><p>got、superagent、request、axios、request-promise</p><blockquote><p>尽管云函数的Nodejs版本比较低（目前为8.9），但绝大多数模块我们都可以使用Nodejs 12或13的环境来测试，不过有时候也要留意有些模块不支持8.9，比如got 10.0.1以上的版本。</p></blockquote><p>node中，http模块也可作为客户端使用（发送请求），第三方模块request对其使用方法进行了封装，操作更方便！所以来介绍一下request模块</p><p><strong>get请求</strong></p><p><strong>post请求</strong></p><p><strong>结合文件流</strong></p><h4 id="加解密Crypto"><a href="#加解密Crypto" class="headerlink" title="加解密Crypto"></a>加解密Crypto</h4><p>crypto模块是nodejs的核心模块之一，它提供了安全相关的功能，包含对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。由于crypto模块是内置模块，我们引入它是无需下载，就可以直接引入。</p><h4 id="发短信"><a href="#发短信" class="headerlink" title="发短信"></a>发短信</h4><p>“qcloudsms_js”: “^0.1.1”</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯犀牛鸟云开发校园技术布道师养成计划第七天</title>
      <link href="2020/03/24/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-qi-tian/"/>
      <url>2020/03/24/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-qi-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="云数据库入门"><a href="#云数据库入门" class="headerlink" title="云数据库入门"></a>云数据库入门</h1><p><strong>任何</strong>一个大型的应用程序和服务，都<strong>必须</strong>会使用到<strong>高性能的</strong>数据存储解决方案，用来<strong>准确</strong>（ACID,原子性Atomicity、一致性Consistency、隔离性Isolation、持久性Durability，可以拓展了解一下）、<strong>快速</strong>、<strong>可靠</strong>地<strong>存储和检索</strong>用户的账户信息、商品以及商品交易信息、产品数据、资讯文章等等等等，而云开发就自带高性能、高可用、高拓展性且安全的数据库。</p><h4 id="云数据库的基础知识"><a href="#云数据库的基础知识" class="headerlink" title="云数据库的基础知识"></a>云数据库的基础知识</h4><blockquote><p>在操作数据库时，我们要对<strong>数据库database</strong>、<strong>集合collection</strong>、<strong>记录doc</strong>以及<strong>字段field</strong>要有一定的了解，首先要<strong>记住这些对应的英文单词</strong>，当你要操作某个记录doc的字段内容时，就像投送快递一样，要先搞清楚它到底在哪个数据库、在哪个集合、在哪个记录里，一级一级的去找。操作数据库通常都是对数据库、集合、记录、字段进行<strong>增、删、改、查</strong>，当你清楚了这些，操作数据库就不会迷糊了。</p></blockquote><p><strong>云数据库与Excel、MySQL的对应理解</strong></p><p>我们可以结合Excel以及MySQL（之前没有接触过MySQL也没有关系，只看与Excel的对应就行）来理解云开发的数据库。</p><table><thead><tr><th align="center">云数据库</th><th><strong>MySQL数据库</strong></th><th><strong>Excel文件</strong></th></tr></thead><tbody><tr><td align="center">数据库database</td><td>数据库 <strong>database</strong></td><td>工作簿</td></tr><tr><td align="center">集合 collection</td><td>表 <strong>table</strong></td><td>工作表</td></tr><tr><td align="center">字段field</td><td>数据列<strong>column</strong></td><td>数据表的每一列</td></tr><tr><td align="center">记录 record/doc</td><td>记录<strong>row</strong></td><td>数据表除开第一行的每一行</td></tr></tbody></table><p><strong>集合的创建与数据类型</strong></p><h4 id="数据库的权限控制与安全规则"><a href="#数据库的权限控制与安全规则" class="headerlink" title="数据库的权限控制与安全规则"></a>数据库的权限控制与安全规则</h4><p>在数据库创建之后，我们需要在云开发控制台-数据库-集合的权限设置标签对数据库进行<strong>权限设置</strong>。<strong>数据库的权限分为**</strong>小程序端**<strong>和**</strong>服务端**<strong>（云函数、云开发控制台</strong>）。服务端拥有读写所有数据的读写权限，所以这里的权限设置<strong>只是在设置小程序端的用户对数据库的操作权限</strong>。权限控制分简易权限控制和自定义权限（也就是安全规则），<strong>建议开发者用安全规则取代简易的权限控制</strong>。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/permission.html">权限控制</a></p><h4 id="一窥数据查询的全貌"><a href="#一窥数据查询的全貌" class="headerlink" title="一窥数据查询的全貌"></a><strong>一窥数据查询的全貌</strong></h4><p><strong>查询集合collection里的记录</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> db <span class="token operator">=</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取数据库的引用</span><span class="token keyword">const</span> _ <span class="token operator">=</span> db<span class="token punctuation">.</span>command     <span class="token comment">//获取数据库查询及更新指令</span>db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">)</span>  <span class="token comment">//获取集合china的引用</span>  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              <span class="token comment">//查询的条件指令where</span>    gdp<span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>     <span class="token comment">//查询筛选条件，gt表示字段需大于指定值。</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             <span class="token comment">//显示哪些字段</span>    _id<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment">//默认显示_id，这个隐藏</span>    city<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    province<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    gdp<span class="token operator">:</span><span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">'gdp'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">)</span>  <span class="token comment">//排序方式，降序排列</span>  <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token comment">//跳过多少个记录（常用于分页），0表示这里不跳过</span>  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>               <span class="token comment">//限制显示多少条记录，这里为10</span>   <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment">//获取根据查询条件筛选后的集合数据  </span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>大家可以留意一下数据查询的<strong>链式写法</strong>， wx.cloud.database().collection(‘数据库名’).where().get().then().catch()，前半部分是数据查询时对对象的引用和方法的调用；后半部分是Promise对象的方法，Promise对象是get的返回值。写的时候为了让结构更加清晰，我们做了换行处理，写在同一行也是可以的。</p></blockquote><h4 id="构建查询条件的5个方法"><a href="#构建查询条件的5个方法" class="headerlink" title="构建查询条件的5个方法"></a>构建查询条件的5个方法</h4><p>在上面的案例中，就包含了构建查询条件的五个方法： Collection.where()、 Collection.field()、 Collection.orderBy()、 Collection.skip()、 Collection.limit()，这五个方法是可以单独拆开使用的，比如只使用where或只使用field、limit，也可以从这5个中抽几个组合在一起使用，还可以一次查询里写多个相同的方法，比如orderBy、where可以写多次相同的。</p><ul><li><strong>指令查询条件 where，</strong>注意在后面我们会介绍的<strong>command查询指令</strong>比如筛选字段大于/小于/不等于某个值的比较指令，同时满足多个筛选条件的逻辑指令等，以及<strong>模糊查询的正则</strong>都是写在where内；</li></ul><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.where.html">Collection.where</a></p><ul><li><strong>指定返回哪些字段field，</strong>查询时只需要传入 true|false（或 1|-1）就可以返回或不返回哪些字段，在上面的案例里我们就只返回city、province、gdp三个字段的值：</li></ul><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.field.html">Collection.field</a></p><ul><li><strong>数据排序orderBy，</strong>排序的语法如下，里面为排序的条件，这里的字段名可不受field的限制（不在field内，没有显示，但是还是会起作用）： orderBy(‘字段名’, ‘排序方式’)。<br>排序方式只支持<strong>desc降序</strong>、<strong>asc升序</strong>这两种方式，如果字段里面的值时数字就按照大小，如果是字母就按照先后顺序，<strong>不支持中文的排序方式</strong>。排序支持按多个字段排序，多次调用 orderBy 即可，多字段排序时的顺序会按照 orderBy 调用顺序先后对多个字段排序。如果需要对嵌套字段排序，可以使用点表示法，比如上面的books根据出版年份year从旧到新排序，可以写为 orderBy(‘publishInfo.year’, ‘asc’)。</li></ul><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.orderBy.html">Collection.orderBy</a></p><ul><li><strong>分页显示skip，</strong>skip常与limit一起用于分页，比如商品列表一页只显示20个商品，第1页显示整个数据的0~20个，那么第2页我们用skip(20)可以跳过第一页的20条数据，第3页则跳过40个数据，第N页则是skip((n-1)*20)个数据：</li></ul><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.skip.html">Collection.skip</a></p><ul><li><strong>限制数量上限的limit，</strong>集合数据查询的数量上限limit在小程序端最大数量为20，在服务端为100，比如limit(30)在小程序端还是只会显示20条数据，更多数据则需要我们结合分页skip与javascript进行编程处理。</li></ul><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.limit.html">Collection.limit</a></p><blockquote><p>小程序查询数据显示的结果虽然有数量限制，比如服务端为100个，但是排序仍然是基于整个集合的数据进行排序的，并不是只针对这100个数据。</p></blockquote><h4 id="匹配查询"><a href="#匹配查询" class="headerlink" title="匹配查询"></a><strong>匹配查询</strong></h4><p>传入的对象的每个 &lt;key, value&gt; 构成一个筛选条件，有多个 &lt;key, value&gt; 则表示需同时满足这些条件，是 与的关系，如果需要 或关系，可使用 <a href="(Command.or)">command.or</a></p><h4 id="查询指令Command"><a href="#查询指令Command" class="headerlink" title="查询指令Command"></a>查询指令Command</h4><p><strong>指令用于查询时，都会写在where内</strong>，主要对字段的值进行比较和逻辑的筛选判断。数据库 API 提供了大于、小于等多种查询指令，这些指令都暴露在 db.command 对象上。</p><p><strong>比较操作符和逻辑操作符</strong></p><p>下面我们把查询指令的比较操作符和逻辑操作符整理成了一张表格，并附上相应的技术文档，方便大家对它们有一个清晰而整体的认识。</p><table><thead><tr><th align="center">查询指令之比较</th><th></th><th></th><th></th></tr></thead><tbody><tr><td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gt.html">gt</a></td><td>大于</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lt.html">lt</a></td><td>小于</td></tr><tr><td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.eq.html">eq</a></td><td>等于</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.neq.html">neq</a></td><td>不等于</td></tr><tr><td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lte.html">lte</a></td><td>小于或等于</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gte.html">gte</a></td><td>大于或等于</td></tr><tr><td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.in.html">in</a></td><td>在数组中</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nin.html">nin</a></td><td>不在数组中</td></tr><tr><td align="center">查询指令之逻辑</td><td></td><td></td><td></td></tr><tr><td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.and.html">and</a></td><td>条件与</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.or.html">or</a></td><td>条件或</td></tr><tr><td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.not.html">not</a></td><td>条件非</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nor.html">nor</a></td><td>都不</td></tr></tbody></table><p><strong>字段内的逻辑指令</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    province<span class="token operator">:</span>_<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"广东"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gdp<span class="token operator">:</span>_<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>跨字段的逻辑指令</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span>   gdp<span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   resident_pop<span class="token operator">:</span>_<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  _<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>   builtup_area<span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正则查询db-RegExp"><a href="#正则查询db-RegExp" class="headerlink" title="正则查询db.RegExp"></a>正则查询db.RegExp</h4><p><strong>正则查询也是写在where字段的条件筛选里。</strong></p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Database.RegExp.html">Database.RegExp</a></p><p><strong>字段字符串的模糊查询</strong></p><h4 id="在小程序端新增记录和统计记录"><a href="#在小程序端新增记录和统计记录" class="headerlink" title="在小程序端新增记录和统计记录"></a>在小程序端新增记录和统计记录</h4><p><strong>统计记录Collection.count</strong></p><blockquote><p>field、orderBy、skip、limit对count是无效的，只有where才会影响count的结果，count只会返回记录数，不会返回查询到的数据</p></blockquote><p><strong>新增记录Collection.add</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">addDaily</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'zhihu_daily'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      data<span class="token operator">:</span> <span class="token punctuation">{</span>        _id<span class="token operator">:</span><span class="token string">"daily9718005"</span><span class="token punctuation">,</span>        title<span class="token operator">:</span> <span class="token string">"元素，生生不息的宇宙诸子"</span><span class="token punctuation">,</span>        images<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://pic4.zhimg.com/v2-3c5d866701650615f50ff4016b2f521b.jpg"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>        id<span class="token operator">:</span> <span class="token number">9718005</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">"https://daily.zhihu.com/story/9718005"</span><span class="token punctuation">,</span>        image<span class="token operator">:</span> <span class="token string">"https://pic2.zhimg.com/v2-c6a33965175cf81a1b6e2d0af633490d.jpg"</span><span class="token punctuation">,</span>        share_url<span class="token operator">:</span> <span class="token string">"http://daily.zhihu.com/story/9718005"</span><span class="token punctuation">,</span>        body<span class="token operator">:</span><span class="token string">"&lt;p&gt;&lt;strong&gt;&lt;strong&gt;谨以此文，纪念元素周期表发布 150 周年。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;\r\n&lt;p&gt;地球，世界，和生活在这里的芸芸众生从何而来，这是每个人都曾有意无意思考过的问题。&lt;/p&gt;\r\n&lt;p&gt;科幻小说家道格拉斯·亚当斯给了一个无厘头的答案，42；宗教也给出了诸神创世的虚构场景；&lt;/p&gt;\r\n&lt;p&gt;最为恢弘的画面，则是由科学给出的，另一个意义上的&lt;strong&gt;生死轮回，一场属于元素的生死轮回&lt;/strong&gt;。&lt;/p&gt;"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>_openid与集合权限</strong></p><h4 id="云函数端操作集合内记录"><a href="#云函数端操作集合内记录" class="headerlink" title="云函数端操作集合内记录"></a>云函数端操作集合内记录</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> db <span class="token operator">=</span> cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> _ <span class="token operator">=</span> db<span class="token punctuation">.</span>command<span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>               gdp<span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">{</span>               _id<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>     city<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    province<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    gdp<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">'gdp'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>try/catch async错误处理</strong></p><p>当 async 函数中只要一个 await 出现 reject 状态，则后面的 await 都不会被执行。如果有多个 await 则可以将其都放在 try/catch 中。</p></blockquote><p><strong>删除多条数据记录</strong></p><p><strong>更新多条记录Collection.update</strong></p><h4 id="操作单个记录doc的字段值"><a href="#操作单个记录doc的字段值" class="headerlink" title="操作单个记录doc的字段值"></a>操作单个记录doc的字段值</h4><blockquote><p>查询集合collection里的记录常用于获取文章、资讯、商品、产品等等的<strong>列表</strong>；而查询单个记录doc的字段值则常用于这些列表里的<strong>详情</strong>内容。如果你在开发中需要增删改查某个记录的字段值，为了方便让程序可以根据_id找到对应的记录，建议在创建记录的时候_id用程序有规则的生成。</p></blockquote><p><strong>查询单个记录doc的字段值</strong></p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.get.html">获取单个记录数据Document.get()</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'zhihu_daily'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">"daily9718006"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'单个记录的值'</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除单条记录</strong></p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.remove.html">删除单个记录Document.remove()</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">removeDaily</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'zhihu_daily'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">"daily9718006"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>更新单条记录</strong></p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.update.html">更新单个记录Document.update()</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">updateDaily</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'zhihu_daily'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">"daily9718006"</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       data<span class="token operator">:</span><span class="token punctuation">{</span>         title<span class="token operator">:</span> <span class="token string">"【知乎日报】元素，生生不息的宇宙诸子"</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>替换更新记录</strong></p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.set.html">替换更新单个记录Document.set()</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setDaily</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'zhihu_daily'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">"daily9718006"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      data<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"为什么狗会如此亲近人类?"</span><span class="token punctuation">,</span>        <span class="token string">"images"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"https://pic4.zhimg.com/v2-4cab2fbf4fe9d487910a6f2c54ab3ed3.jpg"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">9717547</span><span class="token punctuation">,</span>        <span class="token string">"url"</span><span class="token operator">:</span> <span class="token string">"https://daily.zhihu.com/story/9717547"</span><span class="token punctuation">,</span>        <span class="token string">"image"</span><span class="token operator">:</span> <span class="token string">"https://pic4.zhimg.com/v2-60f220ee6c5bf035d0eaf2dd4736342b.jpg"</span><span class="token punctuation">,</span>        <span class="token string">"share_url"</span><span class="token operator">:</span> <span class="token string">"http://daily.zhihu.com/story/9717547"</span><span class="token punctuation">,</span>        <span class="token string">"body"</span><span class="token operator">:</span>  <span class="token string">"&lt;p&gt;让狗从凶猛的野兽变成忠实的爱宠，涉及了宏观与微观上的两层故事：我们如何在宏观上驯养了它们，以及这些驯养在生理层面究竟意味着什么。&lt;/p&gt;\r\n&lt;p&gt;&lt;img class=\"content-image\" src=\"http://pic1.zhimg.com/70/v2-4147c4b02bf97e95d8a9f00727d4c184_b.jpg\" alt=\"\"&gt;&lt;/p&gt;\r\n&lt;p&gt;狗是灰狼（Canis lupus）被人类驯养后形成的亚种，至少可以追溯到 1 万多年以前，是人类成功驯化的第一种动物。在这漫长的岁月里，人类的定向选择强烈改变了这个驯化亚种的基因频率，使它呈现出极高的多样性，尤其体现在生理形态上。&lt;/p&gt;"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="存储、数组、对象"><a href="#存储、数组、对象" class="headerlink" title="存储、数组、对象"></a>存储、数组、对象</h1><p>在实际开发中<strong>云存储里的文件链接需要被记录在数据库里才方便调用</strong>.</p><p><strong>如何操作数据库的数组和对象等复杂数据类型的增删改查</strong>。</p><h4 id="云存储与数据库的关系"><a href="#云存储与数据库的关系" class="headerlink" title="云存储与数据库的关系"></a>云存储与数据库的关系</h4><p><strong>数据库的设计与结构</strong></p><p>和Excel表、关系型数据库（如MySQL）以行和列、多表关系来设计表结构不同的是，云开发的数据库是基于文档的。我们可以在一个记录里嵌套多层数组和对象，把每个文档所需要的数据都嵌入到一个文档里，而不是分散到多个不同的集合。</p><p><strong>fileID是存储与数据库的纽带</strong></p><p>云存储与数据库就是<strong>通过fileID来取得联系</strong>的，数据库<strong>只记录文件在云存储的fileID</strong>，我们可以访问数据库相应的fileID属性进行记录的增删改查操作，与此同时调用云存储的上传文件、下载文件、删除文件等API，这样云存储就被数据库给管理起来了。</p><h4 id="建立用户与数据的关系"><a href="#建立用户与数据的关系" class="headerlink" title="建立用户与数据的关系"></a>建立用户与数据的关系</h4><p><strong>openid与云开发</strong></p><p><strong>_id与云开发</strong></p><p><strong>判断用户是否存在并创建记录</strong></p><h4 id="async-await的使用说明"><a href="#async-await的使用说明" class="headerlink" title="async/await的使用说明"></a>async/await的使用说明</h4><p>async 是“异步”的简写，async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成，await 只能出现在 async 函数中。await 在 async 函数中才会有效。假设一个业务需要分步完成，每个步骤都是异步的，而且依赖上一步的执行结果，甚至依赖之前每一步的结果，就可以使用Async Await来完成</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯犀牛鸟云开发校园技术布道师养成计划第六天</title>
      <link href="2020/03/22/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-liu-tian/"/>
      <url>2020/03/22/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-liu-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="云开发快速入门"><a href="#云开发快速入门" class="headerlink" title="云开发快速入门"></a>云开发快速入门</h1><p>如果你想免费、快速的开发出一个完整的项目，用小程序的云开发可能是最好的选择。小程序的云开发所用到的主要是前端开发的知识。</p><h4 id="技术文档：云开发官方文档"><a href="#技术文档：云开发官方文档" class="headerlink" title="技术文档：云开发官方文档"></a><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html">云开发官方文档</a></h4><h4 id="开通云开发服务"><a href="#开通云开发服务" class="headerlink" title="开通云开发服务"></a>开通云开发服务</h4><h4 id="下载Nodejs"><a href="#下载Nodejs" class="headerlink" title="下载Nodejs"></a>下载Nodejs</h4><p><strong>NodeJS</strong>是在服务端运行JavaScript的运行环境，云开发所使用的服务端环境就是NodeJS。<strong>npm</strong>是Node包管理器，通过npm，我们可以非常方便的安装云开发所需要的依赖包。</p><h4 id="部署并上传云函数"><a href="#部署并上传云函数" class="headerlink" title="部署并上传云函数"></a>部署并上传云函数</h4><p><strong>部署并上传云函数</strong></p><p><strong>cloudfuntions文件夹</strong>图标里有朵小云，表示这就是<strong>云函数根目录</strong>。展开cloudfunctions，我们可以看到里面有login、openapi、callback、echo文件夹，这些就是<strong>云函数目录</strong>。而<strong>miniprogram文件夹</strong>则放置的是小程序的页面文件。</p><blockquote><p>cloudfunctions里放的是云函数，miniprogram放的是小程序的页面，这并不是一成不变的，也就是说你也可以修改这些文件夹的名称，这取决于项目配置文件project.config.json里的如下配置项：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"miniprogramRoot"</span><span class="token operator">:</span> <span class="token string">"miniprogram/"</span><span class="token punctuation">,</span><span class="token string">"cloudfunctionRoot"</span><span class="token operator">:</span> <span class="token string">"cloudfunctions/"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是你最好是让放小程序页面的文件夹以及放云函数的文件夹处于平级关系且都在项目的根目录下，便于管理。</p></blockquote><p><strong>上传所有云函数</strong></p><p>接下来我们按照这样的流程把<strong>其他所有云函数</strong>（如openapi）都部署都上传，也就是要执行和上面相同的步骤，总结如下：</p><ol><li>右键云函数目录，选择在终端中打开，输入 npm install命令下载依赖文件；</li><li>然后再右键云函数目录，点击“<strong>创建并部署：所有文件</strong>”</li><li>在云开发控制台–云函数–<strong>云函数列表</strong>查看云函数是否部署成功。</li></ol><h4 id="npm包管理器与依赖模块"><a href="#npm包管理器与依赖模块" class="headerlink" title="npm包管理器与依赖模块"></a>npm包管理器与依赖模块</h4><p>npm install会下载云函数目录下的配置文件<strong>package.json</strong>里的<strong>dependencies</strong>，它表示的是当前云函数需要依赖的模块。package.json在哪里，就在哪里执行npm install，没有package.json，没有dependencies，就没法下载.</p><p>执行npm install命令下载的依赖模块会放在<strong>node_modules</strong>文件夹里，</p><h4 id="获取openid与云函数login"><a href="#获取openid与云函数login" class="headerlink" title="获取openid与云函数login"></a>获取openid与云函数login</h4><p>当我们把<strong>云函数login</strong>部署上传成功后，就可以在模拟器以及手机（需要重新点击<strong>预览</strong>图标并扫描二维码）里<strong>点击获取openid</strong>了。</p><p><strong>点击获取openid</strong></p><p>openid是小程序用户的唯一标识，也就是每一个小程序用户都有一个唯一的openid。点击“<strong>点击获取openid</strong>”，在<strong>用户管理指引</strong>页面如果显示“用户id获取成功”以及一串字母+数字，那么表示你login云函数部署并上传成功啦。<strong>如果获取openid失败，你则需要解决login云函数的部署上传，才能进行下面的步骤哦</strong>。</p><p><strong>调用云函数的解读</strong></p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/functions/callFunction.html">调用云函数wx.cloud.callFunction</a></p><p>调用云函数的方法很简单，只需要填写云函数的名称name（这里为login），以及需要传递的参数（这里并没有上传参数），就可以进行调用。在success回调函数里添加以下代码<strong>打印res对象</strong>：</p><p>再点击“<strong>点击获取openid</strong>”按钮，就能看到完整的res对象，res对象有三个参数：</p><ul><li><strong>requestID</strong>：云函数执行 ID，可用于在<strong>云开发控制台</strong>查找日志，打开云开发控制台–云函数–日志，可以在这里根据云函数函数名以及requestID来筛选查看云函数的调用日志（含返回结果）；</li><li><strong>result：**</strong>云函数返回的结果**，login云函数返回的结果里包含appid、event对象，我们可以通过res.result.appid以及res.result.event访问它们；</li><li>errMsg：显示云函数是否调用成功</li></ul><p>事件处理函数onGetOpenid调用云函数成功之后，干了三件事情：</p><ul><li>使用console.log打印openid，可以在点击按钮触发云函数在控制台看到该打印结果；</li><li>把获取到的appid赋值给app.js文件里的globalData全局对象；</li><li>跳转到userConsole页面；</li></ul><p>保存之后，右键点击index.js文件，选择<strong>云函数增量上传:（更新文件）</strong>，更新login云函数，</p><p>打开<strong>云开发控制台</strong>–<strong>云函数</strong>–<strong>日志</strong>，<strong>按函数名筛选</strong>，选择login云函数，可以看到云函数被调用的日志记录，我们可以在日志里发现：</p><ul><li><strong>event对象</strong>包含程序用户的 openid 和小程序的 appid，而openid就相当于用户的身份证，我们可以根据openid获取到用户的昵称、头像等信息（后面会说明）；</li><li>而<strong>context对象</strong>则是云函数的调用信息和运行状态。</li><li>在<strong>返回结果</strong>里我们可以看到return返回的数据</li></ul><blockquote><p>云函数的打印日志会显示<strong>在云开发控制台的日志里面</strong>，这一点非常重要，要多加利用。只要是打印日志，无论是显示在开发者工具控制台还是显示在云开发控制台的就没有不重要的。</p></blockquote><p><strong>getWXContext()</strong></p><p>getWXContext()API是云开发服务端的工具类API，会返回小程序用户的openid、小程序appid、小程序用户的unionid等。说这么多不如直接打印，在下面添加一行打印信息：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> wxContext <span class="token operator">=</span> cloud<span class="token punctuation">.</span><span class="token function">getWXContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getWXContext返回的结果'</span><span class="token punctuation">,</span>wxContext<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/utils/getWXContext.html">getWXContext()</a></p><p><strong>eturn</strong></p><p>return语句是终止函数的执行，并返回一个指定的值给<strong>函数调用者</strong>。</p><h4 id="新建云函数"><a href="#新建云函数" class="headerlink" title="新建云函数"></a>新建云函数</h4><h4 id="体验上传图片"><a href="#体验上传图片" class="headerlink" title="体验上传图片"></a>体验上传图片</h4><p><strong>上传图片到云存储</strong></p><h4 id="体验云调用之服务端调用"><a href="#体验云调用之服务端调用" class="headerlink" title="体验云调用之服务端调用"></a>体验云调用之服务端调用</h4><h4 id="体验前端操作数据库"><a href="#体验前端操作数据库" class="headerlink" title="体验前端操作数据库"></a>体验前端操作数据库</h4><p><strong>前端操作数据库的页面逻辑</strong></p><p>以上的函数是在小程序的前端页面来操作数据库，点击开发者工具模拟器云开发QuickStart里的前端操作数据库，</p><ul><li>在第1步（数据库指引有标注），我们会获取到用户的openid，也就是说你没有获取到openid是没法通过小程序的前端来操作数据库的哦</li><li>第2步，需要我们在<strong>云开发控制台</strong>里的<strong>数据库管理页</strong>创建一个<strong>counters</strong>的集合（不需添加数据）；</li><li>第3步，点击按钮页面的按钮“<strong>新增记录</strong>”（按钮就在这个页面的第4条与第5条之间，看起来不是那么明显），这时会调用 onAdd方法，往<strong>counters集合</strong>新增一个记录（之前手动添加有木有很辛苦？），我们可以去云开发控制台的<strong>数据库管理页</strong>查看一下counters集合是不是有了一条记录；大家可以多点击几下<strong>新增记录</strong>按钮，然后去云开发控制台看数据库又有什么变化。也就是小程序前端页面通过 onAdd方法，在数据库新增了记录。</li><li>第4步，点击按钮<strong>查询记录</strong>，这时调用的是 onQuery方法就能在小程序里<strong>获取到</strong>第3步我们存储到数据库里的数据啦</li><li>第5步，点击计数器按钮+号和-号，可以更新count的值，点击+号按钮会调用 onCounterInc方法，而点击-号 onCounterDec方法，比如我们点击加号到7，再去<strong>数据库管理页</strong>查看最新的一条记录（也就是最后一条），它的count由原来的1更新到了7（<strong>先点刷新按钮</strong>），我们再点击-号按钮到5，再来数据库管理页查看有什么变化变化（<strong>先点刷新按钮</strong>）</li><li>第6步，点击<strong>删除记录</strong>按钮，会调用 onRemove方法，这时会删掉数据库里最新的记录（也就是第5步里的那一条记录）。</li></ul><p>通过实战我们了解到，databaseGuide.js文件里的 onAdd、 onQuery、 onCounterInc、 onCounterDec、 onRemove可以实现小程序的前端页面来操作数据库。</p><blockquote><p>在前面JavaScript的章节里我们了解到数据以及数据的存储是非常重要的，而有了数据库，用函数生成的数据能够比缓存存储的更加持久，而且在上面我们实现了对数据进行增(添加)、删(删除)、改(修改、更新)、查(查询并渲染到页面)，不仅如此，缓存的容量也比较有限，最多不过10M，而数据库可以存几百G以上，可见它的重要性。</p></blockquote><p>当新建了并配置了云函数根目录为cloudfunctions文件夹之后，云函数根目录里并没有云函数，我们可以右键点击云函数根目录cloudfunctions文件夹选择<strong>同步云函数列表</strong>，可以把所有云端的云函数列表都列举出来（这只是列举了列表），而要修改云函数里面的内容，我们可以右键点击其中的一个云函数目录选择<strong>下载云函数</strong>即可。</p><p>除此之外，我们需要小程序的app.js的生命周期函数onLaunch里使用wx.cloud.init()来初始化云开发能力：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wx<span class="token punctuation">.</span>cloud<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请使用 2.2.3 或以上的基础库以使用云能力'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      env<span class="token operator">:</span> <span class="token string">'你的环境ID'</span><span class="token punctuation">,</span>      traceUser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>云开发能力全局只需要初始化一次即可，这里的traceUser属性设置为true，会将用户访问记录到用户管理中，在云开发控制台的<strong>运营分析</strong>—<strong>用户访问</strong>里可以看到访问记录。</p><h4 id="基础库与wx-cloud"><a href="#基础库与wx-cloud" class="headerlink" title="基础库与wx.cloud"></a>基础库与wx.cloud</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">CloudID<span class="token operator">:</span> <span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//用于云调用获取开放数据</span>callFunction<span class="token operator">:</span> <span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//调用云函数</span>database<span class="token operator">:</span> <span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取数据库的引用</span>deleteFile<span class="token operator">:</span> <span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//从云存储空间删除文件</span>downloadFile<span class="token operator">:</span> <span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//从云存储空间下载文件</span>getTempFileURL<span class="token operator">:</span> <span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//用云文件 ID 换取真实链接</span>init<span class="token operator">:</span> <span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//初始化云开发能力</span>uploadFile<span class="token operator">:</span> <span class="token function">ƒ</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//上传文件至云存储空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="云开发能力"><a href="#云开发能力" class="headerlink" title="云开发能力"></a>云开发能力</h1><p>通过云开发的能力进行调用云函数、上传图片、操作数据库以及使用小程序的一些开放接口，下面来进一步了解和使用云开发能力，并加强对<strong>云端测试</strong>、<strong>本地调试</strong>以及<strong>本地Console日志打印</strong>，<strong>云端日志打印</strong>的理解。</p><h4 id="本地调试与云端测试"><a href="#本地调试与云端测试" class="headerlink" title="本地调试与云端测试"></a>本地调试与云端测试</h4><p><strong>第一步：新建云函数</strong></p><p><strong>第二步：本地调试云函数是否正确</strong></p><p><strong>第三步：云端测试云函数是否正确</strong></p><h4 id="小程序端与服务端"><a href="#小程序端与服务端" class="headerlink" title="小程序端与服务端"></a>小程序端与服务端</h4><p><strong>小程序端与云端的初始化</strong></p><p>小程序默认可以创建两个环境，这两个环境都有云函数配置、数据库、云存储且独立隔离，开发上会存在两个环境切换的情况（一个用于生产环境，一个用于测试环境），而<strong>区别这两个环境的就是它们的环境ID</strong>，小程序端与云端的初始化时要注意。</p><p>云函数中的API调用的环境也可以使用初始化来设置。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  env<span class="token operator">:</span> cloud<span class="token punctuation">.</span><span class="token constant">DYNAMIC_CURRENT_ENV</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>cloud.DYNAMIC_CURRENT_ENV</strong>设置 API 默认环境等于当前所在环境<strong>。</strong>建议所有的云函数都使用以上方式来初始化，也就是配置env的值为cloud.DYNAMIC_CURRENT_ENV或使用你的环境ID，不要为空**。</p><p><strong>关于wx-server-sdk</strong></p><p>每一个云函数都会用到wx-server-sdk这个Node包，而要使用这个包都需要有Nodejs环境，小程序端的本地需要我们自己下载Nodejs（前面已下载），而云端则自带Nodejs环境。</p><p><strong>async与await</strong></p><p>在wx-server-sdk中不再兼容success、fail、complete回调，只会返回Promise。在云函数中也经常会需要处理一些异步操作，在异步操作完成后再返回结果给到调用方，我们可以通过在云函数中返回一个 Promise 的方法来实现。Promise表示异步操作返回的结果。在新建的云函数里会看到下面这样的一个语句（有 async）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span><span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>async表示函数里有异步操作，async函数的返回值是一个 Promise 对象。在后面还会遇到 await，表示紧跟在它后面的表达式需要等待结果；以及promise对象的<strong>then()方法</strong>（有点类似于success回调函数），和<strong>catch()方法</strong>（有点类似于fail回调函数）</p><blockquote><p><strong>云函数的注意事项</strong></p><ul><li>在云函数部署并上传到云端之后，更新里面的文件比如index.js、config.json，建议右键点击更新好的文件（不是云函数目录）选择<strong>云函数增量上传：更新文件</strong>，<strong>不建议通过上传并部署所有文件的方式</strong>，否则在几分钟内会出现云函数调用失败的情况；</li><li>删除一个云函数之后，<strong>不建议再新建一个同名的云函数并上传部署</strong>，否则在十多分钟内会出现云函数调用失败的情况，建议换一个云函数名，比如login换成user，在小程序端使用 wx.cloud.callFunction({name: ‘’})调用云函数时把name的值换成user就可以了</li><li>调用云函数时，我们还可以在开发者工具调试面板的NetWork标签查看调用云函数的情况。</li></ul></blockquote><h4 id="获取用户信息和登录"><a href="#获取用户信息和登录" class="headerlink" title="获取用户信息和登录"></a>获取用户信息和登录</h4><blockquote><p>使用open-type=”getUserInfo” 来获取用户信息的作用和 wx.getUserInfo API基本效果是一样的，区别在于wx.getUserInfo 这种方式最好是在用户允许获取公开信息（也就是res.authSetting[‘scope.userInfo’]的值为true）之后再调用，如果用户拒绝了授权就不会再有弹窗（除非用户删掉了你的小程序再使用），调用就会失败，而使用组件的方式是用户主动点击，用户即使拒绝了，再点击仍会弹出授权弹窗。所以推荐先使用组件来获取用户授权，然后再来使用wx.getUserInfo来获取用户信息。</p></blockquote><p><strong>通过button获取用户信息</strong></p><p><strong>获取用户高清头像</strong></p><p>我们发现获取到的头像不是很清晰，这是因为默认的头像大小为132<em>132（<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/UserInfo.html">UserInfo用户头像说明</a>），如果把avatarUrl链接后面的132修改为0就能获取到640</em>640大小的头像了：</p><p><strong>页面加载时就显示用户信息</strong></p><p><strong>openid、用户信息与登录</strong></p><p>尽管我们已经获取到了用户的头像、昵称等信息，但是这不能称之为真正意义的登录，只有获取到了用户身份的唯一ID也就是<strong>openid</strong>，我们才能把用户行为比如点赞、评论、发布文章、收藏等与用户挂钩，用户这些行为都与数据库有关，而<strong>能够确定点赞、评论、文章、收藏这些数据与用户关系的就是openid</strong>，也就是说<strong>只要获取到了openid就意味着用户已经登录</strong>，而获取用户信息（如头像、昵称）不过是一个附加服务，这两个是可以完全独立的。没有openid，我们也无法把用户信息给存储到数据库，也就没法让用户自定义用户信息。无论是用户行为，还是用户的信息，openid都是一个重要的桥梁。</p><blockquote><p>通过前面的login云函数，我们就已经可以获取到用户的openid。无需维护复杂的鉴权机制，即可获取天然可信任的用户登录态（openid），是云开发的一个重要优势。无论是云存储还是云数据库，openid都扮演着一个重要的角色。</p></blockquote><h4 id="小程序端上传图片到云存储"><a href="#小程序端上传图片到云存储" class="headerlink" title="小程序端上传图片到云存储"></a>小程序端上传图片到云存储</h4><p>要把图片上传到云存储，会使用到wx.cloud.uploadFile，<strong>这个API是小程序端的API</strong>，它是把<strong>本地资源也就是临时文件里的文件</strong>上传到云存储里。在前面《<strong>图片、缓存与文件</strong>》章节里我们已经了解到如何把图片上传到小程序的临时文件，而要把临时文件上传到云存储，则需要调用wx.cloud.uploadFile API。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html">wx.cloud.uploadFile</a></p><p>在wx.cloud.uploadFile技术文档里，可以看到要调用API，需要获取图片的<strong>filePath</strong>，在小程序里为临时文件的路径，也就是要把上传到小程序的临时文件路径赋值给它；还有一个<strong>cloudPath</strong>，这个为文件的云存储路径，这个是<strong>我们可以任意设置的</strong>。</p><p><strong>文件名与后缀的处理</strong></p><p>我们知道一个文件由<strong>文件名称</strong>和<strong>文件后缀</strong>构成，比如tcb.jpg和cloudbase.png，jpeg说明图片的格式是JPG格式，而png说明图片是PNG格式，文件名称相同<strong>且</strong>格式相同就是出现覆盖，如果我们随意更改了<strong>文件的后缀</strong>，大多数文件就会打不开。所以要把<strong>cloudPath云存储的路径</strong>需要我们把文件名和后缀给处理好。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> cloudPath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> filePath<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.[^.]+?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给文件名加上时间戳和一个随机数，时间戳是以毫秒计算，而随机数是以1000内的正整数，除非1秒钟（1秒=1000毫秒）上传几十万张照片，不然文件名是不会重复的。</p><blockquote><p><strong>上传图片到云存储是无法直接获取到图片的下载地址的</strong></p></blockquote><p><strong>云存储的二级目录</strong></p><p><strong>渲染云存储图片到组件</strong></p><blockquote><blockquote><p>在云开发控制台的存储里，我们可以看到每张图片的详细信息都有<strong>上传者 Open ID</strong>，无论你是使用开发者工具在模拟器的小程序里上传还是预览在手机的小程序里上传，只要你用的是同一个微信账号，这个上传者openid都是一致的，<strong>云存储会自动记录上传者的openid</strong>。</p></blockquote><blockquote></blockquote></blockquote><h4 id="云函数上传图片到云存储"><a href="#云函数上传图片到云存储" class="headerlink" title="云函数上传图片到云存储"></a>云函数上传图片到云存储</h4><p>云开发不仅在小程序端可以上传文件到云存储，还可以通过云函数也就是云端上传图片到云存储（这里会涉及到一点Nodejs的知识）。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/storage/uploadFile.html">uploadFile</a></p><p>注意<strong>云函数上传图片的API属于服务端API，与wx.cloud.uploadFile是小程序端API不同</strong>。</p><p>由于<strong>云端测试无法获取用户登陆态信息</strong>，所以我们不能在云端测试里把图片上传到云存储，需要在小程序端调用，使用开发者工具在login.wxml输入以下代码，也就是新建一个绑定uploadimg事件处理函数的button用于触发：</p><blockquote><p>注意，通过这种方式上传到云存储的图片，是<strong>没有上传者 Open ID</strong>的，在云存储里查看这张图片的详细信息，就可以了解到。</p></blockquote><h4 id="调用数据库"><a href="#调用数据库" class="headerlink" title="调用数据库"></a>调用数据库</h4><p><strong>数据库的导入</strong></p><p>打开云开发控制台，在数据库里新建一个集合<strong>zhihu_daily</strong>，导入该json文件，导入时会有冲突模式选择，看下面的介绍，推荐大家使用upsert：</p><ul><li>Insert：总是插入新记录</li><li>Upsert：如果记录存在则更新，否则插入新记录</li></ul><p>导入后，发现数据库自动给每一条数据（记录）都加了唯一的标识<strong>_id</strong>。</p><p><strong>小程序端调用数据库</strong></p><p>在小程序端调用数据库的方式很简单，我们可以把下面的代码写到一个事件处理函数里，然后点击组件触发事件处理函数来调用；也可以直接写到页面的生命周期函数里面；还可以把它写到app.js小程序的生命周期函数里面。</p><p>使用开发者工具，将下面的代码写到login.js的onLoad函数里面，我们</p><ul><li>先使用<strong>wx.cloud.database()**获取</strong>数据库**的引用（相当于连接数据库）;</li><li>再使用**db.collection()**获取集合的引用；</li><li>再通过Collection.get来获取集合里的记录.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> db <span class="token operator">=</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'zhihu_daily'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果没有指定 limit，则默认最多取 20 条记录</p></blockquote><p><strong>云函数调用数据库</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> cloud <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'wx-server-sdk'</span><span class="token punctuation">)</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  env<span class="token operator">:</span> cloud<span class="token punctuation">.</span><span class="token constant">DYNAMIC_CURRENT_ENV</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> db <span class="token operator">=</span> cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>exports<span class="token punctuation">.</span><span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'zhihu_daily'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>openid与数据库</strong></p><p>在云开发控制台的数据库标签里，打开上一节内容里的counters集合，在这个集合里我们可以看到每条记录除了有_id字段以外，还有一个<strong>_openid字段</strong>用来标志每条记录的创建者（也就是小程序的用户）。</p><p>我们可以自定义 _id（也就是给数据添加一个_id字段并填入任意值），但不可自定义和修改 _openid 。 _openid 是在文档创建时由系统根据小程序用户默认创建的，可以用来标识和定位文档。和云存储一样，数据库的记录也和openid有着紧密的联系。</p><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gd4wn77wgjj31hc0u014r.jpg" alt="2020-03-24 12-26-54屏幕截图.png"></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯犀牛鸟云开发校园技术布道师养成计划第五天</title>
      <link href="2020/03/21/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-wu-tian/"/>
      <url>2020/03/21/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-wu-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="网络API"><a href="#网络API" class="headerlink" title="网络API"></a>网络API</h1><p>数据和文件是小程序开发非常重要的元素，在前面的章节里，数据和文件等的存储都是在小程序的页面进行渲染、或是页面间传递或与本地手机交互。</p><h4 id="数据API"><a href="#数据API" class="headerlink" title="数据API"></a>数据API</h4><p>小程序以及很多程序的API是<strong>预先就已经写好的函数</strong>，使我们不需要对底层有太多了解，只需要按照技术文档进行传递参数就能调用出非常复杂的功能。而还有一类API则侧重于把<strong>数据资源</strong>给开放出来，我们可以通过<strong>HTTP的方式</strong>来使用这些数据。</p><p><strong>了解网络数据API</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//知乎日报的最新话题https://news-at.zhihu.com/api/4/news/latest //知乎日报某一个话题的内容https://news-at.zhihu.com/api/4/news/9714883 //v2ex论坛的最新主题https://www.v2ex.com/api/topics/latest.json //CNode论坛的最新话题https://cnodejs.org/api/v1/topics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练手API资源推荐</strong></p><ul><li><a href="https://www.juhe.cn/">聚合API</a>：一个比较全面的综合性API服务平台</li><li><a href="https://www.jisuapi.com/">即速API</a>：也是提供一些综合性的API服务</li><li><a href="https://www.v2ex.com/p/7v9TEc53">V2EX API</a>：v2ex论坛是很多程序员经常会光顾的综合性技术论坛</li><li><a href="https://cnodejs.org/api/">CNode API</a>：Nodejs交流论坛</li><li><a href="https://www.heweather.com/">和风天气</a>：含天气预报、空气质量、实况天气等数据</li><li><a href="https://developer.github.com/v3/">Github API</a>：Github是所有程序员都（必须）会使用的网站</li><li><a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90">知乎日报API</a>：知乎日报API分析</li></ul><h4 id="渲染网络数据到页面"><a href="#渲染网络数据到页面" class="headerlink" title="渲染网络数据到页面"></a>渲染网络数据到页面</h4><p>要渲染从API里获取到的数据，首先我们需要对API里的字段（属性）到底是干什么的要有一定的了解。</p><p><strong>获取网络数据</strong></p><p><strong>域名校验与白名单</strong></p><p><strong>res对象和res.data对象</strong></p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html">wx.request网络数据请求</a></p><ul><li><strong>statusCode：</strong>开发者服务器返回的 <strong>HTTP 状态码</strong>，也就是指示HTTP请求是否成功，其中<strong>200为请求成功</strong>，<strong>404请求失败</strong>，更多状态码的知识可以查阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">MDN HTTP响应代码</a></li><li><strong>header：</strong>开发者服务器返回的 HTTP消息头，其中Content-Type为服务器文档的<strong>MIME 类型</strong>，API的MIME类型通常为 “application/json; charset=UTF-8”，建议服务器返回值使用 <strong>UTF-8</strong> 编码（如果你有服务器的话）。</li><li>wx.request只能发起 HTTPS 请求，默认超时时间为60s，最大并发限制为10个</li></ul><h4 id="将数据渲染到页面"><a href="#将数据渲染到页面" class="headerlink" title="将数据渲染到页面"></a>将数据渲染到页面</h4><p><strong>简单的知乎日报首页</strong></p><blockquote><p>打开开发者工具调试工具栏的AppData标签页，就能看到从网络API里获取到的数据。也可以在此处编辑数据，并及时地反馈到界面上。如果AppData里有数据，可以确认页面已经取得res里的data数据，如果数据没有渲染到页面，说明列表渲染可能有误。通过这种方式可以诊断页面渲染问题所在。</p></blockquote><p><strong>详情页数据渲染</strong></p><p><strong>HTML标签解析rich-text</strong></p><p>只需要将富文本对象放在rich-text的nodes里，就能将富文本解析出来了，比如将上面的替换成以下代码。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rich-text</span> <span class="token attr-name">nodes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{body}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rich-text</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>跨页面数据渲染</strong></p><p><strong>解构赋值</strong></p><p>解构赋值也就是从数组Array和对象Object中提取值，按照对照的位置，对变量进行赋值,简写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> title<span class="token punctuation">,</span> body<span class="token punctuation">,</span> image<span class="token punctuation">,</span> share_url<span class="token punctuation">}</span><span class="token operator">=</span>res<span class="token punctuation">.</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="历史上的今天"><a href="#历史上的今天" class="headerlink" title="历史上的今天"></a>历史上的今天</h4><p><strong>注册历史上的今天的服务</strong></p><p>注册<a href="https://www.juhe.cn/">聚合API</a>并认证，认证之后可以申请开通<strong>历史上的今天</strong>、图书电商数据等免费的API服务，并找到你的与之<strong>对应的AppKey</strong>。</p><p>替换下面链接<strong>你的历史上的今天对应的key</strong>（直接输AppKey就行），然后在浏览器打开链接（下面这个是1.0版）</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">http://api.juheapi.com/japi/toh?month=9&amp;day=15&amp;key=d68ed793a10607f864d31744f986e8d6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>将一些通用的数据、函数单独拿出来存放在globalData里或进行模块化，是在实际开发中会经常使用到的一种方法，它可以让数据、函数更容易管理以及可以重复利用，使得代码更加精简。</p></blockquote><p><strong>wx.request请求数据</strong></p><p>wx.request里的data就是要传入的参数，我们把month、day、key传入到请求的链接里。它等价于以下链接（注意把data里的属性值，以免传两次参数）</p><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gd1wpezewtj31hc0u0wph.jpg" alt="2020-03-21 21-04-34 的屏幕截图.png"></p><h4 id="天气API"><a href="#天气API" class="headerlink" title="天气API"></a>天气API</h4><p><strong>技术文档：</strong><a href="https://dev.heweather.com/docs/api/weather">和风常规天气数据API</a></p><h4 id="encodeURI与decodeURI"><a href="#encodeURI与decodeURI" class="headerlink" title="encodeURI与decodeURI"></a>encodeURI与decodeURI</h4><p>在浏览网页的时候我们经常看到汉字或一些字符变成了一个“乱码”，原因就在于链接进行了编码处理。encodeURI() 函数可把字符串作为 URI 进行编码，而decodeURI()函数则可以进行解码。</p><h4 id="腾讯地图LBS"><a href="#腾讯地图LBS" class="headerlink" title="腾讯地图LBS"></a>腾讯地图LBS</h4><p>如果想在小程序中调用地图的POI检索（POI，即兴趣点Point of Interest，区域内搜索酒店、学校、ATM等）、 关键词输入提示、地址解析、逆地址解析、行政区划、距离计算、路径规划等数据服务，这时候就需要使用到地图类相关的API。</p><p><strong>地图API：</strong><a href="https://lbs.qq.com/index.html">腾讯LBS位置服务</a></p><p><strong>md5加密算法</strong></p><p>在<a href="https://lbs.qq.com/FAQ/key_faq.html#4">WebServiceAPI Key配置中签名校验</a>里提到我们使用WebServiceAPI的方法需要对请求路径+”?”+请求参数+SK进行拼接，并计算拼接后字符串<strong>md5值</strong>，即为签名(sig)。MD5是计算机安全领域广泛使用到的一种加密算法，主要用于确保消息传输的完整一致。</p><p><strong>md5依赖：</strong><a href="https://github.com/blueimp/JavaScript-MD5/archive/master.zip">md5开源项目下载链接</a></p><p><strong>坐标逆解析</strong></p><p>坐标的逆解析就是坐标(latitude,longitude)转化为详细的地址名。</p><p>小程序使用腾讯地图位置服务，还有一种更加简单的方法，具体可以阅读《<a href="https://lbs.qq.com/product/miniapp/guide/">微信小程序：个性地图使用指南</a>》</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯犀牛鸟云开发校园技术布道师养成计划第四天</title>
      <link href="2020/03/20/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-si-tian/"/>
      <url>2020/03/20/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-si-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>函数可以操作（增删改查）数据（包括字符串、数组、对象、Boolean等所有数据类型），组件拥有了属性数据，也就拥有了被编程的能力，可见携带数据的重要性（id、class、style甚至点击事件都是组件携带的数据，都可以用来编程）。</p><h4 id="链接携带数据"><a href="#链接携带数据" class="headerlink" title="链接携带数据"></a>链接携带数据</h4><p><strong>URL链接的特殊字符</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=云开发&amp;rsv_pq=81ee270400007011&amp;rsv_t=ed834wm24xdJRGRsfv7bxPKX%2FXGlLt6fqh%2BiB9x5g0EUQjyxdCDbTXHbSFE&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=20&amp;rsv_sug1=19&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;inputT=5035&amp;rsv_sug4=6227<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这些链接通常包括以下特殊字符，以及都有着基本相同的含义，通过这些特殊字符，链接就被塞进了很多数据信息，其中?、&amp;、=是我们接下来关注的重点。</p><ul><li>/ 分隔目录和子目录</li><li>? 分隔实际的URL和参数</li><li>&amp; URL中指定的参数间的分隔符</li><li>= URL中指定的参数的值</li><li># 同一个页面的位置标识符，类似于页面的书签；</li></ul><p><strong>获取URL链接的数据</strong></p><p><strong>获取url参数的生命周期函数onload</strong></p><p>onload是Page页面的生命周期函数，当页面加载时触发。一个页面只会调用一次，可以在 onLoad 函数的参数中获取打开当前页面路径中的参数。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token string">"lesson"</span><span class="token punctuation">,</span> uid<span class="token operator">:</span> <span class="token string">"tcb"</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token string">"tap"</span><span class="token punctuation">,</span> ENV<span class="token operator">:</span> <span class="token string">"weapp"</span><span class="token punctuation">,</span> frompage<span class="token operator">:</span> <span class="token string">"lifecycle"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相信大家会这样的数据类型非常熟悉，它就是一个对象Object，我们可以通过点表示法，获取到对象里具体的属性，比如options.id就能显示我们在lifecycle点击的组件的id。</p><p><strong>数据跨页面</strong></p><p><strong>跨页面数据渲染</strong></p><p>当然我们也可以继续把数据使用setData渲染到detail页面，为方便我们仅渲染图片信息</p><blockquote><p>不过使用链接url传递参数有字节限制以及只能在跨页面中使用，但是可以用来传递比如页面链接来源，可以追踪用户来自于什么设备、什么App、通过什么方式以及来自哪个朋友的邀请链接；还可以用于一些网页链接的API必备的id、key等。跨多个页面以及传递更多参数、数据等，可以使用公共数据存储app.globalData（本节会介绍）、数据缓存（后面章节会介绍）、数据库（云开发部分会介绍）以及新增的页面间通信接口<a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html">getOpenerEventChannel</a>（这里不多介绍）</p></blockquote><h4 id="组件携带数据dataset"><a href="#组件携带数据dataset" class="headerlink" title="组件携带数据dataset"></a>组件携带数据dataset</h4><p>组件有公有属性和私有属性，这些属性都是数据，事件处理函数可以修改这些属性，从而让组件有丰富的表现形式。不仅如此，在组件节点中还可以<strong>附加一些自定义数据</strong>。在事件中可以获取这些自定义的节点数据，用于事件的逻辑处理，从而让组件变成相当复杂且强大的编程对象。</p><p><strong>使用JavaScript代替Navigator组件</strong></p><p>当我们点击lifecycle页面的图片时，clickImage会收到一个事件对象，打印出来的结果里包含着target和currentTarget两个属性，currentTarget指向事件所绑定的元素，而target始终指向事件发生时的元素。由于这个案例事件绑定的元素和事件发生时的元素都是imageclick，所以它们的值相同，它们里面都包含了<strong>当前组件</strong>的id，以及dataset</p><blockquote><p>值得强调的是很多童鞋以为只有点击Navigator组件、button组件才能进行链接跳转，这是思维定势的误区，通过bindtap，组件被赋予了一定的编程能力，尽管没有url属性，使用wx.navigateTo也能具备这种能力。</p></blockquote><blockquote><p>我们点击的是图片image组件，却分别触发了绑定在image组件以及image的父级（上一级）组件view的事件处理函数，我们称这为<strong>事件冒泡</strong>。</p></blockquote><p><strong>点击组件显示当前组件其他数据</strong> </p><p>通过事件对象我们不仅可以明确知道点击了什么组件，而且还可以获取当前组件的自定义数据。</p><h4 id="小程序和页面的生命周期"><a href="#小程序和页面的生命周期" class="headerlink" title="小程序和页面的生命周期"></a>小程序和页面的生命周期</h4><p><strong>小程序构造器：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">App(Object object)</a></p><p><strong>页面构造器：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html">Page(Object object)</a></p><p><strong>打印日志了解生命周期</strong></p><p>对小程序和页面的生命周期，我们可以通过打印日志的方式来了解生命周期函数具体的执行顺序和情况，使用开发者工具在app.js里给onLaunch、onShow、onHide添加一些打印日志。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onLaunch监听小程序初始化。'</span><span class="token punctuation">,</span>opts<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onShow监听小程序启动或切前台'</span><span class="token punctuation">,</span>opts<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onHide监听小程序切后台'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>有的参数写的options，有的写的却是opts；前面事件对象有的写的是event，有的则用的是e，这个参数都是可以自定义的</p></blockquote><p><strong>小程序打开场景值</strong></p><p>在 App 的 onLaunch 和 onShow打印的对象里有一个scene为1001，这个是场景值。场景值用来描述用户进入小程序的路径方式。用户进入你的小程序的方式有很多，比如有的是扫描二维码、有的是长按图片识别二维码，有的是通过微信群进入的小程序，有的是朋友单聊进入的小程序，有的是通过公众号进入的小程序等等，这些就是场景值，而具体的场景值，可以看技术文档，场景值对产品、运营来说非常重要。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html">场景值列表</a></p><p><strong>onLaunch与onShow</strong></p><p>onLaunch是监听小程序的初始化，初始化完成时触发，<strong>全局只会触发一次</strong>，所以在这里我们可以用来执行获取用户登录信息的函数等一些非常核心的数据，如果onLaunch的函数过多，会影响小程序的启动速度。</p><p>onShow是在小程序启动，或从后台进入前台显示时触发，也就是<strong>它会触发很多次</strong>，在这里就不大适合放获取用户登录信息的函数啦。这两者的区别要注意。</p><h4 id="用户登录与信息获取"><a href="#用户登录与信息获取" class="headerlink" title="用户登录与信息获取"></a>用户登录与信息获取</h4><p>小程序用户登录和获取用户信息相对来说比较复杂</p><p><strong>了解wx.login、wx.getSetting</strong></p><p>从控制台可以看到wx.login会得到errMsg和code，这个code是用户的登录凭证。而wx.getSetting则会得到errMsg和用户当前的<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/AuthSetting.html">权限设置authSetting</a>，包含是否允许获取用户信息，是否允许获取用户位置，是否允许使用手机相册等权限。我们可以根据打印的结果结合技术文档来深入理解。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html">获取用户登录凭证wx.login</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html">获取用户当前权限设置wx.getSetting</a></p><p><strong>获取用户信息wx.getUserInfo</strong></p><p>我们要获取用户信息，首先需要判断用户是否允许，可以从authSetting对象里看scope.userInfo属性是否为true，如果为true，那我们可以调用wx.getUserInfo()接口来获取用户信息。</p><p><strong>globalData</strong></p><p>globalData对象通常用来存放整个小程序都会使用到的数据，比如我们可以把用户信息赋值给globalData的任意自定义属性。</p><p><strong>that与this</strong></p><p>this的指向情况非常复杂，尽管<strong>哪个对象调用函数，函数里面的this就指向哪个对象</strong>，说起来非常简单，但是场景太多，大家在开发时不必强行理解，死记硬背，把this打印出来即可。</p><p><strong>getApp()</strong></p><p>那我们如何在页面的js里调用globalData呢，这个时候就需要用到getApp()函数啦。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/getApp.html">getApp()</a></p><h4 id="通过button来获取用户信息"><a href="#通过button来获取用户信息" class="headerlink" title="通过button来获取用户信息"></a>通过button来获取用户信息</h4><p><strong>将用户信息写进app.js</strong></p><p>这种方式只能在user页面才能获取到用户信息，限制非常大，那我们应该怎么做呢？我们要把获取到的用户信息写到app.js成为页面的公共信息，以后可以跨页面只需在user页面点击一次按钮即可。</p><p>在getUserInfomation将获取到的用户信息传给globalData的userInfo属性：</p><blockquote><p>获取用户信息还有一种方式，就是通过组件<a href="https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html">open-data</a>来展示，比较简单</p></blockquote><h1 id="数据表单"><a href="#数据表单" class="headerlink" title="数据表单"></a>数据表单</h1><p>所用到的数据大多都是我们在js的data里写好的,无论是计算器、用户注册、表单收集、发表文章、评论等等，这些都是对用户提交数据的获取。</p><h4 id="设置导航栏标题"><a href="#设置导航栏标题" class="headerlink" title="设置导航栏标题"></a>设置导航栏标题</h4><p>动态设置导航栏标题是一个非常简单的API，在技术文档里面可以了解到，只要给wx.setNavigationBarTitle()的title对象赋值，就能改变小程序页面的标题。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html">wx.setNavigationBarTitle()</a></p><p><strong>onLoad调用API</strong></p><p><strong>button调用API</strong></p><p><strong>使用表单修改标题</strong></p><p>小程序一个<strong>完整的数据表单</strong>收集通常包含<strong>一个form组件</strong>，<strong>一个输入框或选择器组件</strong>（比如input组件），<strong>一个button组件</strong>。</p><p>数据表单涉及到的组件多（至少三个），参数以及参数的类型也比较多，上面有几个非常重要的点，大家可以结合上面的代码来理解：</p><ul><li>表单最核心的在于表单组件form，输入框组件input和button组件要在<form></form>内，form也会收集内部组件提交的数据；</li><li>绑定事件处理函数的不再是button，而是form，form的bindsubmit与button的 formType=”submit”是一对，点击button，就会执行bindsubmit的事件处理函数；</li><li>input是输入框，用户可以在里面添加信息；name是input组件的名称，与表单数据一起提交。</li></ul><blockquote><p>对数据表单来说，使用console.log打印事件对象可以让我们对表单提交的数据有一个非常清晰的了解；而使用赋值以及setData可以有效的把表单收集到的数据渲染到页面。</p></blockquote><h4 id="文本输入框input"><a href="#文本输入框input" class="headerlink" title="文本输入框input"></a>文本输入框input</h4><p>小程序的输入框input主要用来处理<strong>文本和数字</strong>的输入，下面我们就来结合实战与技术文档，来了解一下文本输入框input的type、name、placeholder等属性。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input技术文档</a></p><p>使用开发者工具在form.wxml里输入以下代码，一个form组件里面可以包含多个选择器或文本输入框组件，提交数据时，会提交form里面填写的所有数据：</p><p>input输入框会因为属性的类型的不同，<strong>手机键盘外观会有比较大的差异</strong>，所以需要点击预览，用微信扫描二维码在手机上体验（也可以启用真机调试）。</p><ul><li>input输入框支持的type值有文本输入text、数字输入number、身份证输入idcard、小数点输入digit，当type不同时，<strong>注意手机键盘外观的不同</strong>；</li><li>placeholder:输入框为空时的占位符（也就是默认值）；maxlength：最大输入长度；password和disabled都是boolean值，使用方法和之前的video组件里面的boolean属性一样。</li></ul><p>在开发者工具的控制台我们可以看到打印的事件对象里的value对象，属性名即为input的name名，值即为我们输入的数据。如果没有name。</p><h4 id="表单组件组合"><a href="#表单组件组合" class="headerlink" title="表单组件组合"></a>表单组件组合</h4><p>一个完整的数据收集表单，除了可以提交input文本框里面的数据，还可以提交开关选择器按钮switch、滑动选择器按钮slider、单选按钮radio、多选按钮checkbox等组件里面的数据。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/component/switch.html">switch开关选择</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/component/slider.html">Slider滑动选择</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/component/radio.html">Radio单选</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/component/checkbox.html">checkbox多选</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/component/form.html">form表单</a></p><p>表单组件提交的数据都存储在事件对象e的detail属性下的value里.</p><ul><li><p><strong>switch属性：</strong>记录switch开关选择的值，这是一个boolean值，ture为开，false为关；</p></li><li><p><strong>sex属性：</strong>记录name名为sex的单选按钮的值，它只记录单选选择的那一项的值；</p></li><li><p>process属性：</p><p> 记录name名为process的滑动选择器的值，</p><p>show-value为boolean值，显示当前value值，数据类型为number；</p></li><li><p><strong>textinput属性：</strong>记录name名为textinput的input文本输入框的值；</p></li><li><p><strong>gamecheck属性：</strong>记录name名为gamecheck的多选组件的值，<strong>数据类型为数组Array</strong>。</p></li></ul><p>点击<strong>重置按钮</strong>，即会重置表单，并不需要formReset事件处理函数做额外的处理。</p><blockquote><p>我们发现上面button属性，有时用的是form-type，有时用的是formType(注意两者的大小写)，这两种写法都可以。我们也可以删掉重置的事件处理函数formReset，以及form组件的 bindreset=”formReset”，只需要将button的form-type设置为reset，也就是</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">form-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以达到重置的效果，绑定事件处理函数bindreset</p></blockquote><p><strong>数组的扩展运算符</strong></p><p>在这里我们先来介绍一下<strong>扩展运算符</strong>的概念，它的写法很简单，就是三个点 <code>...</code>。</p><p>从控制台可以看到直接打印gamecheck，它是一个数组Array，中括号[ ]就可以看出来，展开也有index值；而使用扩展运算符打印gamecheck，是<strong>将数组里的值都遍历了出来</strong>。这就是扩展运算符…的作用</p><h4 id="添加手机联系人"><a href="#添加手机联系人" class="headerlink" title="添加手机联系人"></a>添加手机联系人</h4><p>尽管我们提交了数据，但是当小程序重新编译之后，所有的数据都会被重置，也就是提交的数据并没有保存起来。小程序存储数据有三种方式，一是保存在本地手机上；二是存储到缓存里；三是存储到数据库。</p><p><strong>添加手机通讯录联系人：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.addPhoneContact.html">wx.addPhoneContact()</a></p><p><strong>对象的扩展运算符</strong></p><p>对象的扩展运算符 …也有类型的作用，它可以取出对象里所有可遍历的属性，拷贝到新的对象中。</p><h4 id="input绑定事件处理函数"><a href="#input绑定事件处理函数" class="headerlink" title="input绑定事件处理函数"></a>input绑定事件处理函数</h4><p>在form表单里，尽管表单里也有input组件，但是绑定事件处理函数的是form组件，input组件只提供value值，而input文本输入组件本身也是可以绑定事件处理函数的。从技术文档里我们了解到input可以绑定事件处理函数的属性有：bindinput，键盘输入时触发；bindfocus，输入框聚焦时触发；bindblur，输入框失焦时触发等等</p><p><strong>bindinput响应式数据渲染</strong></p><p><strong>剪贴板</strong></p><p>本节前面的添加手机联系人是把收集到的数据存储到<strong>本地手机</strong>的通讯录里，而剪切板则是把数据存储到<strong>本地手机</strong>的剪切板里。</p><p>技术文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.setClipboardData.html">设置剪切板内容wx.setClipboardData()</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.getClipboardData.html">获取剪切板内容wx.getClipboardData()</a></p><h4 id="slider响应设置颜色"><a href="#slider响应设置颜色" class="headerlink" title="slider响应设置颜色"></a>slider响应设置颜色</h4><p>slider滑动选择器也可以绑定事件处理函数，有：bindchange完成一次拖动后触发的事件以及bindchanging拖动过程中触发的事件。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/component/slider.html">滑动选择器slider</a></p><p>我们要先回顾一下事件对象里<strong>data-*携带的数据</strong>和<strong>表单组件携带的数据：</strong>首先组件data-*属性的数据会存储在事件对象里的currentTarget下的dataset里的属性名里，也就是data-color的值会存储在 e.currentTarget.dataset.color里；而表单组件的数据则是存储在事件对象的detail里，也就是e.detail.value里。</p><h4 id="picker组件"><a href="#picker组件" class="headerlink" title="picker组件"></a>picker组件</h4><p>picker滚动选择器看起来样式非常复杂，不过小程序已经帮我们封装好了，我们只需要用几行简单的代码就可以做一个非常复杂而且类别多样的滚动选择器。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/component/picker.html">滚动选择器picker</a></p><p>使用开发者工具在form.wxm里输入以下代码，只需要下面几行代码，就能从底部弹起一个日期的滚动选择器。而里面的文字可以任意填写，类似于button、navigator组件里的字，点击即可执行相应的事件。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picker</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{pickerdate}}<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2017-09-01<span class="token punctuation">"</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2022-09-01<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bindDateChange<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>选择的日期为：{{pickerdate}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picker</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>mode属性：滚动选择器有几种模式，不同的模式可以弹出不同类型的滚动选择器，这里的是date日期选择，其他模式大体相似；</li><li>start和end属性：这是日期选择器特有的属性，为有效日期的开始和结束，我们可以滚动试下，超出这个范围就没法滚动了;</li><li><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gd0s88um3rj31hc0u0ak3.jpg" alt="2020-03-20 21-31-30 的屏幕截图.png"></li></ul><h1 id="图片、缓存与文件"><a href="#图片、缓存与文件" class="headerlink" title="图片、缓存与文件"></a>图片、缓存与文件</h1><p>获取手机相册里的图片和手机相机拍照的照片、手机的定位以及获取手机里的缓存、文件，并使用JavaScript操作图片、操作缓存和操作文件等。</p><h4 id="获取手机相册或拍照的图片"><a href="#获取手机相册或拍照的图片" class="headerlink" title="获取手机相册或拍照的图片"></a>获取手机相册或拍照的图片</h4><p>用小程序来获取手机相册里的图片和拍照的照片听起来好像挺复杂的，不过因为有了API，我们只需要结合前面的点击事件、事件处理函数以及调用API、传入指定的参数就能很容易做到。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html">wx.chooseImage()</a></p><p><strong>上传一张照片</strong></p><ul><li><strong>count</strong>：可以选择的照片数量，默认为9张（由于imgurl声明的是字符串，多张照片需为数组Array，后面有上传多张图片的案例）</li><li><strong>sourceType</strong>：选择图片的来源，album就是图片可以来自手机相册；而camera是可以来自手机拍照，两个都写就是来自相册或拍照都可以；</li><li><strong>sizeType：</strong>所选的图片的尺寸，original为原图，compressed为压缩图，为了减轻服务器压力，建议为压缩图；</li><li><strong>tempFilePaths</strong>为临时文件的<strong>路径列表</strong>，<strong>tempFiles</strong>为临时<strong>文件列表</strong>，注意这两个值都为数组。</li></ul><p><strong>空值的处理</strong></p><p>我们可以看到由于imgurl为空值，image组件有默认宽度300px、高度225px（会随css而改变大小），所以显示<strong>上传的图片</strong>会与<strong>选择图片</strong>的button有一段空白，处理的方法有三种：</p><p><strong>方法一：</strong>我们可以给imgurl弄一张初始图片的链接，为了让界面更加美观、交互性更好，通常都会设置一个默认的图片，比如默认的头像，当用户上传时，setData就会取代初始图片；</p><p><strong>方法二：</strong>判断imgurl是否有内容，比如我们可以加一层逻辑判断，当Page()里的data下的imgurl属性非空时，组件才会显示；空时就不显示。</p><p><strong>方法三：</strong>这个方法和方法二类似，设置一个逻辑判断</p><p><strong>上传多张照片</strong></p><p>如果上传的是多张照片，那么imgurl的初始值就不能是字符串了，而是一个数组Array，</p><h4 id="操作图片"><a href="#操作图片" class="headerlink" title="操作图片"></a>操作图片</h4><p>使用小程序图片API不仅可以上传图片，还可以对上传的图片进行一定的操作，比如获取图片信息、预览图片、保存图片、压缩图片等等。</p><p><strong>获取图片信息</strong></p><p>无论是存储在小程序本地，还是存储在临时文件、缓存、网络上的图片，使用wx.getImageInfo() 都可以获取到该图片的宽度、高度、路径、格式以及拍照方向。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html">wx.getImageInfo()</a></p><blockquote><p><strong>回调函数</strong></p><p>经过之前的学习，相信大家对回调函数success、fail有了一定的认识，那什么是回调函数呢？简单一点说就是：<strong>回调Callback是指在另一个函数执行完成之后被调用的函数</strong>。success、fail就都是在小程序的API函数执行完成之后，才会被调用，而success和fail它们本身也是函数，也能返回数据。而复杂一点说，就是回调函数本身就是函数，但是它们却被其他函数给调用，而调用函数的函数被称为<strong>高阶函数</strong>。这些大家只需要粗略了解就可以了。</p><p><strong>异步与同步</strong></p><p>我们前面也提及过异步，那什么会有异步呢？因为JavaScript是单线程的编程语言，就是从上到下、一行一行去执行代码，类似于排队一样一个个处理，第一个不处理完，就不会处理后面的。但是遇到网络请求、I/O操作（比如上面的读取图片信息）以及定时函数（后面会涉及）以及类似于成功反馈的情况，等这些不可预知时间的任务都执行完再处理后面的任务，肯定不行，于是就有了<strong>异步处理</strong>。</p><p>把要等待其他函数执行完之后，才能执行的函数（比如读取图片信息）放到回调函数里，先不处理，等图片上传成功之后再来处理，这就是异步。比如wx.showToast()消息提示框，可以放到回调函数里，当API调用成功之后再来显示提示消息。回调函数相当于是异步的一个解决方案。</p></blockquote><p><strong>预览所有上传的图片</strong></p><p>预览图片就是在新页面里全屏打开图片，预览的过程中用户可以进行保存图片、发送给朋友等操作。可以预览一张照片或者多张照片。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html">wx.previewImage()</a></p><blockquote><p>这个场景主要用于让用户可以<strong>预览、保存或分享图片</strong>，毕竟image组件是不支持图片的放大预览、保存到本地、转发给好友，现在微信还支持预览小程序码，长按就可以打开小程序，这个API主要是为了增强用户的交互体验的。</p></blockquote><p><strong>保存图片到相册</strong></p><p>小程序<strong>不支持直接将网络图片</strong>保存到本地手机的系统相册，支持临时文件路径和小程序本地路径。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html">wx.saveImageToPhotosAlbum()</a></p><blockquote><p>当然永久链接实际开发用得不会太多，使用最多的场景是把<strong>网络图片下载到临时链接（因为不能直接保存网络图片），再将临时链接的图片保存到相册</strong>，只需把上面的永久链接换成临时链接就可以了.</p></blockquote><p><strong>压缩图片</strong></p><p>小程序是有压缩图片的API的<a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.compressImage.html">wx.compressImage()</a>，尤其是在上传图片时，为了减轻存储服务器的压力，不能让用户上传分辨率过高的照片。</p><ul><li>可以先让用户上传图片；</li><li>图片上传成功之后（也就是在上传图片的<strong>success回调函数</strong>里）再来获取图片的信息；</li><li>获取信息成功后（也就是在获取图片信息的<strong>success回调函数</strong>里）判断宽度或高度是否过大，如果图片过大，就压缩图片，</li><li>压缩图片成功后（也就是在压缩图片的<strong>success回调函数</strong>里），再把压缩好的图片上传到服务器</li></ul><p>上传图片、获取图片信息、压缩图片、上传图片到服务器，每一步都依赖上一步，所以会不断在success回调函数里写函数，实际开发涉及的业务会更复杂，就会不断回调，这被称之为<strong>回调地狱</strong>。</p><blockquote><p>由于压缩图片使用到的场景不算太多，毕竟我们在上传照片时可以不支持上传原图original，只支持压缩compressed就能保证上传图片的大小了</p></blockquote><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>小程序不仅支持上传图片image，还支持上传视频、Excel、PDF、音频等等其他文件格式，但是我们只能从<strong>客户端会话</strong>里（也就是微信单聊、群聊的聊天记录里）选择其他格式的文件。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html">wx.chooseMessageFile()</a></p><h4 id="上传地理位置"><a href="#上传地理位置" class="headerlink" title="上传地理位置"></a>上传地理位置</h4><p>除了可以上传图片、音视频以及各种文件格式以外，小程序还支持上传地理位置。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html">wx.chooseLocation()</a></p><h4 id="模块化与格式化"><a href="#模块化与格式化" class="headerlink" title="模块化与格式化"></a>模块化与格式化</h4><p>在新建模板小程序里（不使用云开发服务），有一个日志logs页面，这个日志logs虽然简单，但是包含着非常复杂的JavaScript知识，是一个非常好的学习参考案例，这里我们来对它进行一一解读。</p><p><strong>模块化与引入模块</strong></p><p>在实际开发中，日期、时间的处理经常会使用到，但是使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">Date对象</a>所获取到的时间格式与我们想要展现的形式是有非常大的差异的。这时我们可以把时间的处理抽离成为一个单独的 js 文件比如<strong>util.js</strong>（util是utility的缩写，表示程序集，通用程序等意思），作为一个模块。</p><blockquote><p>把通用的模块放在util.js或者common.js，把util.js放在utils文件夹里等就跟把css放在style文件夹，把页面放在pages文件夹，把图片放在images文件夹里是一样的道理，尽管文件夹或文件的名称你可以任意修改，但是为了代码的可读性，文件结构的清晰，推荐大家采用这种一看就懂的方式。</p></blockquote><h4 id="数据缓存Storage"><a href="#数据缓存Storage" class="headerlink" title="数据缓存Storage"></a>数据缓存Storage</h4><p>logs页面还涉及到数据缓存Storage方面的知识。通过前面的学习，我们了解到<strong>点击事件生成的事件对象</strong>也好，使用<strong>数据表单提交的数据</strong>也好，还是<strong>上传的图片、文件</strong>也好，只要我们重新编译小程序，这些数据都会消失。前面我们也提到存储数据、文件的方式有三种，一是保存到本地手机、二就是缓存，三是上传到服务器</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html">wx.setStorageSync()</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html">wx.getStorageSync()</a></p><p><strong>保存文件</strong></p><blockquote><p><strong>注意：</strong>尽管上传图片和上传文件都是把图片或文件先上传到临时文件里，但是<strong>保存图片wx.saveImageToPhotosAlbum()**和</strong>保存文件wx.saveFile()**是完全不同的概念，保存图片是把图片保存到手机本地相册；而保存文件则是把图片由临时文件移动到本地存储里，而本地存储每个小程序用户只有10M的空间。</p></blockquote><p><strong>保存文件技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFile.html">wx.saveFile()</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>腾讯犀牛鸟云开发校园技术布道师养成计划第二天</title>
      <link href="2020/03/18/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-er-tian/"/>
      <url>2020/03/18/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-er-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="渐变与动画"><a href="#渐变与动画" class="headerlink" title="渐变与动画"></a>渐变与动画</h1><p>​        CSS是编程科技与设计艺术结合得最为完美的一项技术，编程的优雅在于代码的<strong>清晰可读</strong>，而设计的优雅在于能够结合技术为用户带来一场<strong>视觉和交互的盛宴</strong>。借助于CSS，不仅可以做出平面设计师常用的滤镜、渐变等设计效果，还可以设计出一些交互动画，增强用户的体验。</p><h4 id="CSS的渐变Gradient"><a href="#CSS的渐变Gradient" class="headerlink" title="CSS的渐变Gradient"></a>CSS的渐变Gradient</h4><p>颜色渐变是设计师必不可少的，CSS linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* pages/list/gradient/gradient.wxss */</span><span class="token selector">.gradient-display</span><span class="token punctuation">{</span>  <span class="token comment">/* background-image:linear-gradient(red, blue); */</span>  <span class="token comment">/* background-image: linear-gradient(45deg, blue, red); */</span><span class="token comment">/* 渐变轴为45度，从蓝色渐变到红色 */</span><span class="token comment">/* background-image:linear-gradient(to left top, blue, red); */</span><span class="token comment">/* 从右下到左上、从蓝色渐变到红色 */</span><span class="token comment">/* background-image:linear-gradient(0deg, blue, green 40%, red); */</span><span class="token comment">/* 从下到上（渐变轴为0度），从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>19deg<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>33<span class="token punctuation">,</span> 212<span class="token punctuation">,</span> 253<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>183<span class="token punctuation">,</span> 33<span class="token punctuation">,</span> 255<span class="token punctuation">)</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 颜色百分比 */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Filter滤镜"><a href="#Filter滤镜" class="headerlink" title="Filter滤镜"></a>Filter滤镜</h4><p>滤镜对于设计师来说一定不会陌生，CSS也有滤镜filter属性，可以对图片进行高斯模糊、调整对比度、转换为灰度图像、色相旋转、图片透明等操作。</p><blockquote><p>相比于Photoshop等工具的滤镜效果来说，使用CSS可以批量化处理图片滤镜效果，而且通过编程的手段不仅可以叠加各种效果，而且还能与交互相结合。</p></blockquote><p>这里我们主要介绍用的最多的三个滤镜效果，高斯模糊blur，图片变灰grayscale(<em>%</em>)，图片透明opacity(<em>%</em>)，其他滤镜效果大家以后可以阅读技术文档。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filter-display<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>blur高斯模糊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blur<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>grayscale图片变灰<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grayscale<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>opacity图片透明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opacity<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>多个滤镜叠加，注意css的写法即可<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.filter-display img</span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.blur</span><span class="token punctuation">{</span>      <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>8px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.grayscale</span><span class="token punctuation">{</span>      <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>90%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.opacity</span><span class="token punctuation">{</span>      <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">opacity</span><span class="token punctuation">(</span>25%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.multiple</span><span class="token punctuation">{</span>      <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>8px<span class="token punctuation">)</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>90%<span class="token punctuation">)</span> <span class="token function">opacity</span><span class="token punctuation">(</span>25%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>图片由灰色变为彩色</strong></p><p>有时我们还会给这些变灰的图片添加一个交互特效，那就是当鼠标悬停在图片上时，图片会由灰色变为彩色。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filter-display<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">&gt;</span></span>将鼠标悬停（模拟器）或手指（手机微信）按住或放开图片查看效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grayscale<span class="token punctuation">"</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grayscale-hover<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">filter-display image</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.grayscale</span><span class="token punctuation">{</span>  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>90%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.grayscale-hover</span><span class="token punctuation">{</span>  <span class="token property">filter</span><span class="token punctuation">:</span>grayscal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变形属性Transform"><a href="#变形属性Transform" class="headerlink" title="变形属性Transform"></a>变形属性Transform</h4><p>CSS transform属性能通过修改CSS视觉格式化模型的坐标空间旋转、缩放、倾斜或平移给定的组件。</p><h4 id="过渡属性Transition"><a href="#过渡属性Transition" class="headerlink" title="过渡属性Transition"></a>过渡属性Transition</h4><p><strong>CSS transitions</strong> 可以控制组件从一个属性状态切换为另外一个属性状态时的过渡效果。</p><p>transition的语法如下，语法比较复杂</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.selector</span> <span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> [transition-property] [transition-duration] [transition-timing-function] [transition-delay]<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>transition-property</strong>，应用过渡的 CSS 或动画属性的名称；</li><li><strong>transition-duration</strong>，整个过渡效果持续的时间，默认时间为0秒，所以要有过渡效果这个是必须定义的；</li><li><strong>transition-timing-function</strong>，规定过渡效果的时间曲线，默认为ease；</li><li><strong>transition-delay</strong>，过渡效果延迟多久，或者说何时开始，默认为0秒，不定义的话也就是直接开始；</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">box</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.bg-color</span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.bg-color-hover</span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> background-color 5s ease-out 3s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动画是需要触发的，这里我们使用的是<strong>悬停hover-class</strong>来触发效果，把鼠标放在元素上8秒以上，看一下正方形的背景颜色有什么变化。</p><p>了解了效果之后，我们再来结合实际案例理解语法：</p><ul><li><p>因为我们是用hover来触发的，所以transition要写在元素的hover-class里，盒子之前的背景是绿色green，悬停的背景是黄色yellow；</p></li><li><p>因为我们改变的是盒子background-color，所以transition需要过渡的CSS属性名称，就是background-color；</p></li><li><p>动画过渡持续的时间，我们设置的是5秒，也就是背景由绿色变为黄色的时间；</p></li><li><p>这里的ease-out（慢速结束）是颜色过渡的时间曲线效果。还可以有linear（匀速）、ease-in（慢速开始）、ease-in-out（慢速开始和慢速结束）。持续的时间很短的情况下，这几个时间曲线效果差别是及其细微的，<strong>需要设计师对动画足够敏感了</strong>。</p></li><li><p>动画延迟的时间是3秒，也就是说3秒之后动画才开始。</p></li></ul><h4 id="动画属性Animation"><a href="#动画属性Animation" class="headerlink" title="动画属性Animation"></a>动画属性Animation</h4><p><strong>CSS animations</strong> 使得可以将从一个CSS样式配置转换到另一个CSS样式配置。动画包括两个部分:描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。</p><p><strong>CSS3 动画库 Animate.css</strong></p><p>Animate.css是一个有趣的，跨浏览器的css3动画库，只需要你引入一个CSS文件，就能够给指定的元素添加动画样式。</p><p>它预设了抖动（shake）、闪烁（flash）、弹跳（bounce）、翻转（flip）、旋转（rotateIn/rotateOut）、淡入淡出（fadeIn/fadeOut）等多达 80种动画效果，几乎包含了所有常见的动画效果。</p><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gcydh6m2caj31hc0u07cl.jpg" alt="2020-03-18 20-49-15 的屏幕截图.png"></p><h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><p>数据绑定就是把WXML 中的一些动态数据分离出来放到对应的js文件的 Page 的 data里。</p><h4 id="把数据分离出来"><a href="#把数据分离出来" class="headerlink" title="把数据分离出来"></a>把数据分离出来</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{username}}，您已登录，欢迎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在wxml文件里，只需要用双大括号把变量名包起来，就能把data里面的变量给渲染出来。</p></blockquote><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>WXML 中的动态数据均来自对应 Page 的 data。 data 是小程序的页面第一次渲染使用的<strong>初始数据</strong>。小程序的页面加载时， data 将会以 JSON字符串的形式由逻辑层传至渲染层，因此 data中的数据必须是可以转成 JSON的类型：字符串String，数字Number，布尔值Boolean，对象Object，数组Array。</p><ul><li><strong>字符串String</strong>，用于存储和处理文本，可以结合Excel单元格格式里的文本格式来理解；</li><li><strong>数字Number</strong>，这个很好理解，比如233这个数，它的数字格式和文本格式是有很大不同的，学Excel一定不会陌生；</li><li><strong>布尔值Boolean</strong>，就是true和false，虽然只有两个值，但是它代表着两种选择，两种不同的条件，两种不同的结果；</li><li><strong>对象Object</strong>，结合之前所学，我们再来回顾一下：对象由大括号{}分隔，在大括号{}内部，对象的属性以名称和值对的形式 name : value来定义，属性由逗号,分隔</li><li><strong>数组Array</strong>，结合之前所学，我们再来回顾一下：数组由中括号[ ]来分割，有点类似于列表；</li></ul><h4 id="组件属性的渲染"><a href="#组件属性的渲染" class="headerlink" title="组件属性的渲染"></a>组件属性的渲染</h4><p>通过数据绑定，我们还可以把 style、class 、id等属性分离出来来控制组件的样式等信息。</p><h4 id="字符串与数字"><a href="#字符串与数字" class="headerlink" title="字符串与数字"></a>字符串与数字</h4><p>数字格式的数字相加和四则运算的加法是一致的，而字符串与字符串的相加是<strong>拼接</strong>。+ 加号在JavaScript里既可以扮演四则运算符的角色，也可以进行拼接，取决于数据的格式.</p><h4 id="渲染数组里的单条数据"><a href="#渲染数组里的单条数据" class="headerlink" title="渲染数组里的单条数据"></a>渲染数组里的单条数据</h4><p>在前面我们就已经接触过数组，比如<strong>pages配置项</strong>就是小程序里所有页面的一个列表。数组Array是值的<strong>有序</strong>集合，每个值叫做一个元素，而每个元素在数组中有一个位置，以数字表示，称为<strong>索引</strong>。这个索引是从0开始的非负整数，也就是0，1，2，3，4，5…..</p><h4 id="渲染对象类型的数据"><a href="#渲染对象类型的数据" class="headerlink" title="渲染对象类型的数据"></a>渲染对象类型的数据</h4><p>对象（object）是 JavaScript 语言的核心概念，也是<strong>最重要的数据类型</strong>。对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的<strong>属性</strong>和<strong>方法</strong>）。</p><p>有的时候一个对象有多个属性，就拿电影来说，就有电影名称，国家，发行时间、票价、评价等等无数个属性,在双大括号里，输入变量movie+点+属性名即可，这就是<strong>对象的点表示法</strong>。</p><h4 id="复杂的数据嵌套"><a href="#复杂的数据嵌套" class="headerlink" title="复杂的数据嵌套"></a>复杂的数据嵌套</h4><p>对象是可以嵌套的，也就是一个对象可以作为另外一个对象的值，除了对象里套对象，数组里也可以套对象，对象里也可以套数组。把现实生活中的事物转化成错综复杂的数据，是非常重要的数据思维。</p><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gcyflj04ktj31hc0u0qgi.jpg" alt="2020-03-18 22-04-38 的屏幕截图.png"></p><h1 id="列表渲染与条件渲染"><a href="#列表渲染与条件渲染" class="headerlink" title="列表渲染与条件渲染"></a>列表渲染与条件渲染</h1><p>如果是要输出整个列表,这个时候就需要用到列表渲染啦。</p><h4 id="渲染数组里的所有数据"><a href="#渲染数组里的所有数据" class="headerlink" title="渲染数组里的所有数据"></a>渲染数组里的所有数据</h4><p><strong>相同的结构是列表渲染的前提</strong></p><p>在实际的开发场景里，商品、新闻、股票、收藏、书架列表等都会有几千上万条的数据，他们都有一个共同的特征就是数据的结构相同，这也是我们可以批量化渲染的前提。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{newstitle}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*this<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  {{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里wx:for=””，也就是在数组newstitle里进行循环，*this代表在 for 循环中的 item 本身，而的item是默认的。也可以使用如下方法：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for-items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{newstitle}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*this<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  {{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item；<br>使用 wx:for-item 可以指定数组当前元素的变量名，使用 wx:for-index 可以指定数组当前下标的变量名。</p></blockquote><p><strong>图片样式</strong></p><p>我们发现电影列表里面的图片是变形的，技术文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html">image组件文档</a></p><p>在技术文档里，我们发现如果我们不写图片的模式mode，图片的模式默认为scaleToFill，也就是不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素。</p><p>那我们希望图片保持宽度不变，高度自动变化，保持原图宽高比不变，那就需要用到widthFix的模式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;image class="weui-media-box__thumb" mode="widthFix" src="{{movies.img}}"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Grid九宫格样式参考"><a href="#Grid九宫格样式参考" class="headerlink" title="Grid九宫格样式参考"></a>Grid九宫格样式参考</h4><p>大家经常会在App里看到一些分类都是以九宫格的方式来布局的.</p><h4 id="List样式参考"><a href="#List样式参考" class="headerlink" title="List样式参考"></a>List样式参考</h4><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gcyfmg8g9ej31hc0u0k1f.jpg" alt="2020-03-18 22-04-58 的屏幕截图.png"></p><h1 id="小程序组件"><a href="#小程序组件" class="headerlink" title="小程序组件"></a>小程序组件</h1><h4 id="组件的属性"><a href="#组件的属性" class="headerlink" title="组件的属性"></a>组件的属性</h4><p>公共属性是指小程序所有的组件都有的属性，比如id、class、style等，而不同属性的值就是数据，有数据就有数据类型。</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/component.html">小程序组件</a></p><blockquote><p>主要了解<text>组件、<img>组件、<view>组件、<navigator>组件有哪些私有属性</navigator></view></text></p></blockquote><h4 id="轮播效果"><a href="#轮播效果" class="headerlink" title="轮播效果"></a>轮播效果</h4><p>很多App和小程序的页面顶部都有一个图片的轮播，小程序有专门的轮播组件swiper。</p><p>要构成一个完整的轮播，除了配置<strong>相同尺寸规格的图片</strong>以外，还可以配置轮播时的面板指示点、动画效果、是否自动播放等。</p><h4 id="audio组件"><a href="#audio组件" class="headerlink" title="audio组件"></a>audio组件</h4><p>audio组件是音频组件</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/component/audio.html">audio组件技术文档</a></p><ul><li>src：要播放音频的资源地址</li><li>poster：默认控件上的音频封面的图片资源地址</li><li>name：默认控件上的音频名字</li><li>author：默认控件上的作者名字</li></ul><p>可能由于audio组件使用的场景和频次都非常低，audio组件以后就要被抛弃了，需要用到小程序的API来创建音乐播放。</p><h4 id="video组件"><a href="#video组件" class="headerlink" title="video组件"></a>video组件</h4><p>video组件用来表示视频</p><p><strong>技术文档：</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/component/video.html">video组件技术文档</a></p><p>大家可以结合实际效果和技术文档来理解以下属性，把上面案例的autoplay或者某个属性删掉查看一下具体效果，加深自己对组件属性的理解。</p><ul><li>autoplay：是否自动播放</li><li>loop：是否循环播放</li><li>muted：是否静音播放</li><li>inital-time：指定视频初始播放位置，单位是秒</li><li>controls：是否显示默认播放控件</li></ul><h4 id="cover效果"><a href="#cover效果" class="headerlink" title="cover效果"></a>cover效果</h4><p>我们也可以把view、图片组件覆盖在地图map或视频video组件之上。比如我们希望在视频的左上角显示视频的标题以及在右上角显示商家的logo，就可以使用cover效果。</p><h4 id="地图组件"><a href="#地图组件" class="headerlink" title="地图组件"></a>地图组件</h4><p>要想在地图上标记一个地点，首先我们需要知道该地点的经纬度，这个时候就需要使用到坐标拾取器的工具。</p><p><strong>经纬度获取：</strong><a href="https://lbs.qq.com/tool/getpoint/index.html">腾讯地图坐标拾取器</a></p><p>在搜索框里我们可以搜索“深圳腾讯大厦”，得到纬度为22.540503，经度为113.934528。</p><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gcyh4td1qlj31hc0u0wrz.jpg" alt="2020-03-18 22-19-58 的屏幕截图.png"></p><h1 id="优化与部署上线"><a href="#优化与部署上线" class="headerlink" title="优化与部署上线"></a>优化与部署上线</h1><h4 id="开发者工具的使用"><a href="#开发者工具的使用" class="headerlink" title="开发者工具的使用"></a>开发者工具的使用</h4><p><strong>缩进与缩进设置</strong></p><p><strong>快捷键</strong></p><ul><li>批量注释快捷键：windows 是Ctrl+/</li><li>代码块的缩进：windows是代码左缩进ctrl + [、代码右缩进ctrl + ]</li><li>格式化代码：Windows为shift + alt + F</li></ul><p><strong>报错提醒</strong></p><p><strong>wxml代码查看</strong></p><p><strong>自动补全与代码提示</strong></p><h4 id="小程序的转发功能"><a href="#小程序的转发功能" class="headerlink" title="小程序的转发功能"></a>小程序的转发功能</h4><p>我们只需要在小程序每个页面的js文件下的Page(） 里面，添加以下代码，我们的小程序就有转发功能了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">onShareAppMessage</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>from <span class="token operator">===</span> <span class="token string">'button'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 来自页面内转发按钮</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>target<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>          title<span class="token operator">:</span> <span class="token string">'云开发技术训练营'</span><span class="token punctuation">,</span>          path<span class="token operator">:</span> "pages<span class="token operator">/</span>home<span class="token operator">/</span>home<span class="token punctuation">,</span>          imageUrl<span class="token operator">:</span><span class="token string">"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/weapp.jpg"</span><span class="token punctuation">,</span>          <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 转发成功</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 转发失败</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>title为转发的标题，如果不填，默认为当前小程序的名称；</li><li>path为当前页面路径，也可以为其他页面的路径，如果路径写错的话会显示“当前页面不存在”哦。</li><li>imageUrl为自定义图片路径，可以是本地文件路径或网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4。如果不填写会取当前页面，从顶部开始，高度为 80% 屏幕宽度的图像作为转发图片</li></ul><h4 id="小程序配置的细节"><a href="#小程序配置的细节" class="headerlink" title="小程序配置的细节"></a>小程序配置的细节</h4><p><strong>没有tabBar的小程序</strong></p><p>有时候我们不希望我们的小程序底部有tabBar，那我们该怎么处理呢？我们可以删掉app.json的tabBar配置项即可。</p><p><strong>下拉小程序不出现空白</strong></p><p>当我们下拉很多小程序的时候，都会出现一个白色的空白，很影响美观，但是如果我们在windows的配置项里把<strong>backgroundColor</strong>和<strong>navigationBarBackgroundColor</strong>的颜色配置成一样，下拉就不会有空白啦，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"window"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token string">"backgroundTextStyle"</span><span class="token operator">:</span><span class="token string">"light"</span><span class="token punctuation">,</span>    <span class="token string">"navigationBarBackgroundColor"</span><span class="token operator">:</span> <span class="token string">"#1772cb"</span><span class="token punctuation">,</span>    <span class="token string">"navigationBarTitleText"</span><span class="token operator">:</span> <span class="token string">"HackWork技术工坊"</span><span class="token punctuation">,</span>    <span class="token string">"navigationBarTextStyle"</span><span class="token operator">:</span><span class="token string">"white"</span><span class="token punctuation">,</span>    <span class="token string">"backgroundColor"</span><span class="token operator">:</span> <span class="token string">"#1772cb"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>让整个页面背景变色</strong></p><p>小程序的页面背景的颜色默认为为白色，我们希望整个小程序的页面背景变成其他颜色应该怎么处理呢？</p><p>我们可以可以通过直接设置page的样式来设置，在该页面的wxss文件里添加如下样式，如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">page</span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #1772cb<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>禁止页面下拉</strong></p><p>有的时候我们的页面做得比较短，为了增强用户体验，不希望用户可以下拉页面，因为下拉页面会有种页面松动的感觉，可以在该页面的json文件里配置，比如</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"window"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"disableScroll"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义顶部导航栏"><a href="#自定义顶部导航栏" class="headerlink" title="自定义顶部导航栏"></a>自定义顶部导航栏</h4><p>官方默认的导航栏只能对背景颜色进行更改，对于想要在导航栏添加一些比较酷炫的效果则需要通过自定义导航栏实现。通过设置 app.json中页面配置的 navigationStyle(导航栏样式)配置项的值为 custom，即可实现自定义导航：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"window"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"navigationStyle"</span><span class="token operator">:</span><span class="token string">"custom"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>比如我们给小程序的页面配一个好看的壁纸，比如在home.wxss里添加以下样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">page</span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/background.jpg<span class="token punctuation">)</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p><strong>静态的页面片段</strong></p><p>比如使用开发者工具在小程序的pages页面新建一个common文件夹，在common里新建一个foot.wxml,在要引入的页面比如home.wxml的顶部，使用<strong>import</strong>引入这个模板</p><h4 id="小程序的客服"><a href="#小程序的客服" class="headerlink" title="小程序的客服"></a>小程序的客服</h4>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯犀牛鸟云开发校园技术布道师养成计划第一天</title>
      <link href="2020/03/10/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-yi-tian/"/>
      <url>2020/03/10/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-yi-tian/</url>
      
        <content type="html"><![CDATA[<h2 id="文件结构与页面组成"><a href="#文件结构与页面组成" class="headerlink" title="文件结构与页面组成"></a>文件结构与页面组成</h2><h3 id="小程序的文件结构"><a href="#小程序的文件结构" class="headerlink" title="小程序的文件结构"></a>小程序的文件结构</h3><pre><code>    在开发者工具的编辑器里可以看到小程序源文件的根目录下有app.js、app.json和app.wxss，这是小程序必不可少的三个主体文件</code></pre><ul><li><code>app.json</code>：小程序的<code>公共设置</code>，可以对小程序进行全局配置，决定页面文件的路径、窗口表现、设置多 tab 等</li><li><code>app.wxss</code>：小程序的<code>公共样式表</code>，可以配置整个小程序的文字的字体、颜色、背景，图片的大小等<code>样式</code></li><li><code>app.js</code>：小程序的逻辑</li><li><code>pages文件夹</code>：这里存放着小程序的所有页面，展开pages文56565件夹就可以看到有index和logs两个<code>页面文件夹</code>；</li></ul><h3 id="小程序的页面组成"><a href="#小程序的页面组成" class="headerlink" title="小程序的页面组成"></a>小程序的页面组成</h3><pre><code>    在每一个页面文件夹里都有四个文件，这四个文件的名称都是一样的，它们分别为：</code></pre><ul><li><code>json文件</code>，和上面的app.json作用基本相同，只是app.json控制的是整个小程序的设置，而页面的json文件只控制单个页面的配置（因为有时候全局配置就够用了，所以页面配置有时候是空的）；</li><li><code>wxml文件</code>，小程序的页面结构，文字、图片、音乐、视频、地图、轮播等组件都会放在这里；</li><li><code>wxss文件</code>，小程序的页面样式，和app.wxss一样是控制样式，而页面的wxss文件是控制单个页面的样式；</li><li><code>js文件</code>，这个是控制小程序页面的逻辑<h3 id="配置tabBar配置项"><a href="#配置tabBar配置项" class="headerlink" title="配置tabBar配置项"></a>配置tabBar配置项</h3>icon资源：<a href="https://www.iconfont.cn/">iconfont阿里巴巴矢量图标库</a><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"tabBar"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"#7A7E83"</span><span class="token punctuation">,</span>    <span class="token property">"selectedColor"</span><span class="token operator">:</span> <span class="token string">"#13227a"</span><span class="token punctuation">,</span>    <span class="token property">"backgroundColor"</span><span class="token operator">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span>    <span class="token property">"list"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/home/home"</span><span class="token punctuation">,</span>        <span class="token property">"iconPath"</span><span class="token operator">:</span> <span class="token string">"image/icon-tab1.png"</span><span class="token punctuation">,</span>        <span class="token property">"selectedIconPath"</span><span class="token operator">:</span> <span class="token string">"image/icon-tab1-active.png"</span><span class="token punctuation">,</span>        <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"首页"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​        这里有一个比较重要的属性就是<code>list</code>，它是一个<strong>数组</strong>，决定了tabBar上面的文字、icon、以及点击之后的跳转链接。</p><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gcp06enxiuj30xa0lxwij.jpg" alt="2020-03-10 18-16-31屏幕截图.png"><br>[^关于此处的报错，应该是由于开发者工具不是最新版]</p><h2 id="WXML与WXSS"><a href="#WXML与WXSS" class="headerlink" title="WXML与WXSS"></a>WXML与WXSS</h2><p> [^类似于html与css]</p><p>view组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>WXML 模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 HTML 是用来描述当前这个页面的结构，CSS 用来描述页面的样子，JS 通常是用来处理这个页面和用户的交互。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>em是相对于当前字体尺寸而言的单位，如果当前你的字体大小为16px，那1em为16px；如果当前你的字体大小为18px，那1em为18px。</li><li></li></ul><table><thead><tr><th align="center">边框属性</th><th></th></tr></thead><tbody><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_border.asp">border</a></td><td>在一个声明中设置所有的边框属性。比如border:1px solid #ccc;</td></tr><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_border-top.asp">border-top</a></td><td>在一个声明中设置所有的上边框属性。</td></tr><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_border-right.asp">border-right</a></td><td>在一个声明中设置所有的右边框属性。</td></tr><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_border-bottom.asp">border-bottom</a></td><td>在一个声明中设置所有的下边框属性。</td></tr><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_border-left.asp">border-left</a></td><td>在一个声明中设置所有的左边框属性。</td></tr><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_border-width.asp">border-width</a></td><td>设置四条边框的宽度。</td></tr><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_border-style.asp">border-style</a></td><td>设置四条边框的样式。</td></tr><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_border-color.asp">border-color</a></td><td>设置四条边框的颜色。</td></tr><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_border-radius.asp">border-radius</a></td><td>简写属性，设置所有四个 border-*-radius 属性。</td></tr><tr><td align="center"><a href="http://www.w3school.com.cn/cssref/pr_box-shadow.asp">box-shadow</a></td><td>向方框添加一个或多个阴影。</td></tr></tbody></table><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gcp3z1dmllj30xf0t8gsw.jpg" alt="image.png"></p><h2 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h2><h3 id="navigator组件"><a href="#navigator组件" class="headerlink" title="navigator组件"></a>navigator组件</h3><blockquote><p>在小程序里，我们是通过navigator组件来给页面添加链接的。有些页面在我们打开小程序的时候就可以看得到，还有些则需要我们通过点击链接进行页面切换才可以看得到，这些我们可以称之为二级页面。</p><blockquote><p>为了让二级页面与tabBar的页面有更加清晰的结构关系，我们可以在tabBar对应的页面文件夹下面新建要跳转的页面。比如我们的第一个tabBar是home，凡是home会跳转的二级页面，我们都建在home文件夹里。</p></blockquote></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">"pages/home/home","pages/home/imgshow/imgshow",<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="image组件"><a href="#image组件" class="headerlink" title="image组件"></a>image组件</h3><blockquote><p>如果我们不对图片的样式比如高度和宽度进行处理，图片显示就会变形。这是因为小程序会给图片增加一个默认的宽度和高度，宽度为300px，高度为225px。</p></blockquote><h3 id="尺寸单位rpx"><a href="#尺寸单位rpx" class="headerlink" title="尺寸单位rpx"></a>尺寸单位rpx</h3><p>在小程序里，所有的手机屏幕的宽度都为750rpx，我们可以把图片等比缩小。比如给图片添加样式:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.imglist .imgitem</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 700rpx<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 415rpx<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 20rpx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片的裁剪"><a href="#图片的裁剪" class="headerlink" title="图片的裁剪"></a>图片的裁剪</h3><blockquote><p>由于我们的图片可能尺寸大小不一，或者由于iPhone、安卓手机的尺寸大小不一以及我们对图片显示的要求不一，为了让我们的图片显示正常，小程序需要对图片进行一些裁剪。</p></blockquote><p>我们可以给image组件添加一个widthFix模式：<strong>宽度不变，高度自动变化，保持原图宽高比不变。</strong></p><pre class="line-numbers language-html+css" data-language="html+css"><code class="language-html+css">&lt;view class="imglist"&gt;    &lt;image class="imgitem" mode="widthFix" src="https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/weapp.jpg"&gt;&lt;/image&gt;&lt;/view&gt;.imglist .imgitem{  width: 100%;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说设置图片的宽度为百分比样式，而高度则自动变化，保持原图宽高比不变</p><h3 id="图片的边框美化"><a href="#图片的边框美化" class="headerlink" title="图片的边框美化"></a>图片的边框美化</h3><blockquote><p>很多图片它有圆角或者阴影，这些效果是通过css的边框属性来实现的.</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.imglist .img</span><span class="token punctuation">{</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 5px 8px 30px <span class="token function">rgba</span><span class="token punctuation">(</span>53<span class="token punctuation">,</span>178<span class="token punctuation">,</span>225<span class="token punctuation">,</span>0.26<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里用到了一个颜色就是rgba颜色值。RGB前面我们要求大家查过，RGBA(R,G,B,A)的R是红色值，G是绿色值，B是蓝色值，R,G,B的值取值范围是0<del>255，A是Alpha透明度，取值0</del>1之间，越靠近0越透明。</p></blockquote><p>除了圆角，我们经常会有把图片做成圆形的需求，我们来看具体的例子。首先在wxml文件里输入以下代码，添加一个logo图片，</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imglist<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/logo.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在与之对应的wxss文件里添加相应的css样式，</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.imglist .circle</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>     <span class="token property">border-radius</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是我们只需要定义了图片长宽之后，再来定义一下border-radius为100%即可把图片做成圆形。<br><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gcx9yw76zdj31hc0u07im.jpg" alt="2020-03-17 21-52-35 的屏幕截图.png"></p><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gcx9upu3itj31hc0u0qe4.jpg" alt="2020-03-17 21-52-59 的屏幕截图.png"></p><h2 id="WeUI框架"><a href="#WeUI框架" class="headerlink" title="WeUI框架"></a>WeUI框架</h2><p>WeUI是一套小程序的UI框架，所谓UI框架就是一套<strong>界面设计</strong>方案。有了组件，我们可以用它来拼接出一个内容丰富的小程序，而有了一个UI框架，就能让我们的小程序变得更加美观。</p><h3 id="WeUI的使用"><a href="#WeUI的使用" class="headerlink" title="WeUI的使用"></a>WeUI的使用</h3><blockquote><p>WeUI的核心文件是<strong>weui.wxss</strong></p><p>在<strong>模板小程序</strong>的根目录（<strong>注意是在第一节建好的模板小程序里</strong>）下新建一个style的文件夹，然后把weui小程序dist/style目录下的weui.wxss文件粘贴到style的文件夹里。</p></blockquote><p>使用开发者工具打开模板小程序的app.wxss文件的第二行添加以下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">@import 'style/weui.wxss';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样weui的css样式就被引入到我们的小程序中了</p><h3 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h3><blockquote><p>布局也是一种样式，也属于css方面的知识哦，所以大家应该知道该在哪里给组件添加布局样式啦<del>没错，就是在wxss文件里</del></p></blockquote><p>小程序的布局采用的是Flex布局。Flex是Flexible Box的缩写，意为”<strong>弹性布局</strong>”，用来为盒状模型提供最大的灵活性。</p><p>** 让组件变成左右关系**</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.flex-box</span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p> 我们给外层（也可以叫做父级）的view组件添加display:flex之后，这三个项目就成了左右结构的布局</p></blockquote><p>让组件的宽度均分**</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.list-item</span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>flex是弹性布局，flex:1这个样式是一个相对概念，这里的相对是指这每个list-item的宽度之比都为1</p></blockquote><p><strong>让组件内的内容垂直居中</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.list-item</span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token comment">/*垂直居中*/</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment">/*水平居中*/</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局样式与局部样式"><a href="#全局样式与局部样式" class="headerlink" title="全局样式与局部样式"></a>全局样式与局部样式</h3><blockquote><p>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p></blockquote><p>也就是说我们在app.wxss引入了weui.wxss，我们新建的所有的二级页面，都会自动拥有weui的样式</p><h4 id="使用WeUI美化文章排版"><a href="#使用WeUI美化文章排版" class="headerlink" title="使用WeUI美化文章排版"></a>使用WeUI美化文章排版</h4><h4 id="WeUI框架的核心与延伸"><a href="#WeUI框架的核心与延伸" class="headerlink" title="WeUI框架的核心与延伸"></a>WeUI框架的核心与延伸</h4><blockquote><p>使用WeUI框架的核心在于使用它写好了样式的选择器，结构与形式不完全受限制</p></blockquote><p>我们只需要给view组件添加weui-article的class，view组件就有了这个写好了的样式啦。weui-article__h3，weui-article__p也是如此。</p><p>如果想给weui-article__h3这个小标题换一个颜色，该怎么处理呢？通常我们不推荐直接修改weui.wxss（除非你希望所有的小标题颜色都替换掉）。我们可以给要替换颜色的view组件再增加一个class选择器，再来添加样式即可</p><p>一个view组件可以有多个class，这样就非常方便我们定向给某个组件添加一个特定的样式啦。</p><h4 id="模板样式的更改"><a href="#模板样式的更改" class="headerlink" title="模板样式的更改"></a>模板样式的更改</h4><p>数据分离有个好处就是我们可以不用修改数据本身，而直接修改wxml里的排版即可。修改排版样式的核心在wxss，也就是修改css样式。</p><p>我们想让图文结构是上下结构，我们可以删掉weui框架所特有的一些选择器，也就是删掉一些class，比如weui-media-box__hd_in-appmsg，weui-media-box__thumb等等，然后添加一些选择器，也就是加入一些自己命令的id和class。</p><p><img src="http://ww1.sinaimg.cn/large/005W6BOngy1gcxayjmmo6j31hc0u0k59.jpg" alt="2020-03-17 22-38-59 的屏幕截图.png"></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PEP8风格指南</title>
      <link href="2020/03/10/pep8-feng-ge-zhi-nan/"/>
      <url>2020/03/10/pep8-feng-ge-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="PEP-8风格指南"><a href="#PEP-8风格指南" class="headerlink" title="PEP 8风格指南"></a>PEP 8风格指南</h2><p>PEP是Python Enhancement Proposal的缩写，通常翻译为“Python增强提案”。每个PEP都是一份为Python社区提供的指导Python往更好的方向发展的技术文档，其中的第8号增强提案（PEP 8）是针对Python语言编订的代码风格指南。尽管我们可以在保证语法没有问题的前提下随意书写Python代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。我们可以从Python官方网站的<a href="https://www.python.org/dev/peps/pep-0008/">PEP 8链接</a>中找到该文档，下面我们对该文档的关键部分做一个简单的总结。</p><h3 id="空格的使用"><a href="#空格的使用" class="headerlink" title="空格的使用"></a>空格的使用</h3><ol><li><u>使用空格来表示缩进而不要用制表符（Tab）。</u>这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道Python并没有像C/C++或Java那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此Python代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，Tab的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用Tab来表示缩进对Python代码来说可能是一场灾难。</li><li><u>和语法相关的每一层缩进都用4个空格来表示。</u></li><li><u>每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。</u></li><li><u>函数和类的定义，代码前后都要用两个空行进行分隔。</u></li><li><u>在同一个类中，各个方法之间应该用一个空行进行分隔。</u></li><li><u>二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。</u></li></ol><h3 id="标识符命名"><a href="#标识符命名" class="headerlink" title="标识符命名"></a>标识符命名</h3><p>PEP 8倡导用不同的命名风格来命名Python中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在Python中扮演了怎样的角色（在这一点上，Python自己的内置模块以及某些第三方模块都做得并不是很好）。</p><ol><li><u>变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。</u></li><li><u>类中受保护的实例属性，应该以一个下划线开头。</u></li><li><u>类中私有的实例属性，应该以两个下划线开头。</u></li><li><u>类和异常的命名，应该每个单词首字母大写。</u></li><li><u>模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。</u></li><li><u>类的实例方法，应该把第一个参数命名为<code>self</code>以表示对象自身。</u></li><li><u>类的类方法，应该把第一个参数命名为<code>cls</code>以表示该类自身。</u></li></ol><h3 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h3><p>在Python之禅（可以使用<code>import this</code>查看）中有这么一句名言：“There should be one– and preferably only one –obvious way to do it.”，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在PEP 8中也是无处不在的。</p><ol><li><u>采用内联形式的否定词，而不要把否定词放在整个表达式的前面。</u>例如<code>if a is not b</code>就比<code>if not a is b</code>更容易让人理解。</li><li>不要用检查长度的方式来判断字符串、列表等是否为<code>None</code>或者没有元素，应该用<code>if not x</code>这样的写法来检查它。</li><li><u>就算<code>if</code>分支、<code>for</code>循环、<code>except</code>异常捕获等中只有一行代码，也不要将代码和<code>if</code>、<code>for</code>、<code>except</code>等写在一起，分开写才会让代码更清晰。</u></li><li><u><code>import</code>语句总是放在文件开头的地方。</u></li><li><u>引入模块的时候，<code>from math import sqrt</code>比<code>import math</code>更好。</u></li><li><u>如果有多个<code>import</code>语句，应该将其分为三部分，从上到下分别是Python<strong>标准模块</strong>、<strong>第三方模块</strong>和<strong>自定义模块</strong>，每个部分内部应该按照模块名称的<strong>字母表顺序</strong>来排列。</u></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="2020/03/07/markdown/"/>
      <url>2020/03/07/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-学习笔记"><a href="#Markdown-学习笔记" class="headerlink" title="Markdown 学习笔记"></a>Markdown 学习笔记</h1><img src="/2020/03/07/markdown/wechat.jpg" class="" title="WeChat"><blockquote><p>2019.8.18</p><p><a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a></p></blockquote><h2 id="1、Markdown标题"><a href="#1、Markdown标题" class="headerlink" title="1、Markdown标题"></a>1、Markdown标题</h2><h3 id="使用-号标记-使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号，以此类推。"><a href="#使用-号标记-使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号，以此类推。" class="headerlink" title="使用 # 号标记,使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。"></a>使用 # 号标记,使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2、Markdown-段落"><a href="#2、Markdown-段落" class="headerlink" title="2、Markdown 段落"></a>2、Markdown 段落</h2><h3 id="Markdown-段落没有特殊的格式，直接编写文字就好，-段落的换行是使用两个以上空格加上回车。"><a href="#Markdown-段落没有特殊的格式，直接编写文字就好，-段落的换行是使用两个以上空格加上回车。" class="headerlink" title="Markdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车。"></a>Markdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车。</h3><h3 id="当然也可以在段落后面使用一个空行来表示重新开始一个段落"><a href="#当然也可以在段落后面使用一个空行来表示重新开始一个段落" class="headerlink" title="当然也可以在段落后面使用一个空行来表示重新开始一个段落"></a>当然也可以在段落后面使用一个空行来表示重新开始一个段落</h3><h3 id="字体："><a href="#字体：" class="headerlink" title="字体："></a><style color="red">字体</style>：</h3><h4 id="Markdown-可以使用以下几种字体"><a href="#Markdown-可以使用以下几种字体" class="headerlink" title="Markdown 可以使用以下几种字体"></a>Markdown 可以使用以下几种字体</h4><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong>  </p><h3 id="分隔线："><a href="#分隔线：" class="headerlink" title="分隔线："></a>分隔线：</h3><h4 id="你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线："><a href="#你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：" class="headerlink" title="你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线："></a>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</h4><hr><hr><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p><p>RUNOOB.COM<br>GOOGLE.COM<br><del>BAIDU.COM</del></p><p>Markdown 教程</p><p><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程</a><a href="https://www.runoob.com/markdown/md-title.html">Markdown 标题</a><a href="https://www.runoob.com/markdown/md-paragraph.html">Markdown 段落格式</a><a href="https://www.runoob.com/markdown/md-lists.html">Markdown 列表</a><a href="https://www.runoob.com/markdown/md-block.html">Markdown 区块</a><a href="https://www.runoob.com/markdown/md-code.html">Markdown 代码</a><a href="https://www.runoob.com/markdown/md-link.html">Markdown 链接</a><a href="https://www.runoob.com/markdown/md-image.html">Markdown 图片</a><a href="https://www.runoob.com/markdown/md-table.html">Markdown 表格</a><a href="https://www.runoob.com/markdown/md-advance.html">Markdown 高级技巧</a></p><p> <a href="https://www.runoob.com/markdown/md-title.html">Markdown 标题</a></p><p><a href="https://www.runoob.com/markdown/md-lists.html">Markdown 列表</a> </p><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg" alt="img"></p><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg" alt="img"></p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><pre class="line-numbers language-none"><code class="language-none">*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果如下所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/md3.gif" alt="img"></p><hr><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre class="line-numbers language-none"><code class="language-none">**** * ******- - -----------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除线-1"><a href="#删除线-1" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p><pre class="line-numbers language-none"><code class="language-none">RUNOOB.COMGOOGLE.COM~~BAIDU.COM~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 <strong><u></u></strong><u> 标签来实现：</u></p><u><p>Markdown 教程<br>Markdown 教程<br>Markdown 标题<br>Markdown 段落格式<br>Markdown 列表<br>Markdown 区块<br>Markdown 代码<br>Markdown 链接<br>Markdown 图片<br>Markdown 表格<br>Markdown 高级技巧<br> Markdown 标题 Markdown 列表<br>Markdown 段落<br>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><p>字体<br>Markdown 可以使用以下几种字体：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong><br>显示效果如下所示：</p><p>分隔线<br>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><hr><hr><hr><hr><hr><p>显示效果如下所示：</p><p>删除线<br>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p><p>RUNOOB.COM<br>GOOGLE.COM<br><del>BAIDU.COM</del><br>显示效果如下所示：</p><p>下划线<br>下划线可以通过 HTML 的 <u> 标签来实现：<br><u>带下划线文本</u></u></p><u><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:[^要注明的文本]<br>[^要注明的文本]</p><h1 id="4、Markdown-列表"><a href="#4、Markdown-列表" class="headerlink" title="4、Markdown 列表"></a>4、Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(*<strong>**)、加号(</strong>+<strong>)或是减号(</strong>-**)作为列表标记：</p><p><strong>**</strong> 第一项<br><strong>**</strong> 第二项<br><strong>**</strong> 第三项</p><p><strong>+</strong>  第一项<br><strong>+</strong>   第二项<br><strong>+</strong>  第三项</p><p><strong>-</strong> 第一项<br><strong>-</strong> 第二项<br><strong>-</strong> 第三项  </p><ol><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第三项  </p></li></ol><p>1.第一项：<br>    - 第一项嵌套的第一个元素<br>        - 第一项嵌套的第二个元素</p><p>2.第二项：<br>    - 第二项嵌套的第一个元素<br>    - 第二项嵌套的第一个元素</p><h1 id="5、Markdown-区块"><a href="#5、Markdown-区块" class="headerlink" title="5、Markdown 区块"></a>5、Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><blockquote><p>块区引用    </p></blockquote><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p><p>区块中使用列表实例如下：</p><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h1 id="6、Markdown-代码"><a href="#6、Markdown-代码" class="headerlink" title="6、Markdown 代码"></a>6、Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：</p><p><code>print()</code>函数</p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p><p>实例如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7、Markdown-链接"><a href="#7、Markdown-链接" class="headerlink" title="7、Markdown 链接"></a>7、Markdown 链接</h2><p>链接使用方法如下：</p><pre class="line-numbers language-none"><code class="language-none">[链接名称](链接地址)或者&lt;链接地址&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="这是一个链接-菜鸟教程"><a href="#这是一个链接-菜鸟教程" class="headerlink" title="这是一个链接 菜鸟教程"></a>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a></h4><pre class="line-numbers language-none"><code class="language-none">&lt;https://www.runoob.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><pre class="line-numbers language-none"><code class="language-none">链接也可以用变量来代替，文档末尾附带变量地址：这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址）  [1]: http://www.google.com/  [runoob]: http://www.runoob.com/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链接也可以用变量来代替，文档末尾附带变量地址：<br>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">![alt 属性文本](图片地址)![alt 属性文本](图片地址 "可选标题")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p>使用实例：</p><pre class="line-numbers language-none"><code class="language-none">![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png "RUNOOB")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p>当然，你也可以像网址那样对图片网址使用变量:</p><pre class="line-numbers language-none"><code class="language-none">这个链接用 1 作为网址变量 [RUNOOB][1].然后在文档的结尾位变量赋值（网址）[1]: http://static.runoob.com/images/runoob-logo.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">RUNOOB</a>.<br>然后在文档的结尾位变量赋值（网址）</p><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src="http://static.runoob.com/images/runoob-logo.png" width="50%"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>对齐方式</p><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><pre class="line-numbers language-none"><code class="language-none">| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="8、Markdown-高级技巧"><a href="#8、Markdown-高级技巧" class="headerlink" title="8、Markdown 高级技巧"></a>8、Markdown 高级技巧</h1><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><pre class="line-numbers language-none"><code class="language-none">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠<code>\</code>转义特殊字符：</p><pre class="line-numbers language-none"><code class="language-none">**文本加粗** \*\* 正常显示星号 \*\*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre class="line-numbers language-none"><code class="language-none">\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><pre class="line-numbers language-Math" data-language="Math"><code class="language-Math">$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\\end{vmatrix}$$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p></u></u>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>标签测试</title>
      <link href="2020/03/06/git-jian-dan-shi-yong/"/>
      <url>2020/03/06/git-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="git简单的使用方法"><a href="#git简单的使用方法" class="headerlink" title="git简单的使用方法:"></a>git简单的使用方法:</h4><p><code>1、  cd ~/.ssh/</code>    如果没有对应的文件夹，则执行  <code>mkdir  ./.ssh</code></p><p><code>2、git config --global user.name "lilei"</code></p><p><code>3、git config --global user.email "849078367@qq.com"</code></p><p><code>4、ssh-keygen -t rsa -C "849078367@qq.com"</code></p><p>执行上面命令后在home目录生成了<code>id_rsa.pub</code>秘钥文件</p><p> <code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9zTKWSeYAGIREZDUrvEX9JCoK1Th2ME7Mu/RbRg6o+MJqlrhi5w1DTl+VOkbwKJEGPwdMV3pl3cCF74ksFT0MrvHxOlqV1TQAHVN85Lp/JALPPO27eJsKtgkeHN0nreJEyEteJdqrDmeyhOdDKp1iC0Ec+9H3apaSRPCiB5hghMCucxoRabRgqOt04Yn0XxYsYXw6Oe3cWAMvkrlSwCk1SXQLqoyCdEX7KW0+gFnYivbo4Rnmjh7FiVrtqtlgJJ3siE4EnA7H9fpzpDo1cp0Yd0rQIbLjuib0TNCUHkToWe9EaApfCVfdTkhr42vwwJPyPk0qz4DxaiwXEcvoVTnv 849078367@qq.com</code><br> 把秘钥复制到gitlib&gt;&gt;setings&gt;&gt;SSH Keys<code>http://124.204.65.84:12463/profile/keys</code></p><p>![](/home/lei/TJ/note/2019-07-11 15-41-30屏幕截图.png)</p><p>创建项目文件目录，然后执行<code>git init</code>   ````````````````````````</p><p>添加远程仓库：<code>git remote add origin http://124.204.65.84:12463/spider/datacrawl.git</code></p><p>克隆远程仓库：<code>git clone http://gitlab.example.com/spider/datacrawl.git</code></p><p>拉取远程仓库代码：<code>git pull origin feature/additional</code></p><p><code>feature/additional</code>这个是我们所在的分支</p><p>推送本地代码到远程仓库：<code>git push origin feature/additional</code>或<code>git push</code>（ps:之后每次上传代码可以用这命令）</p><p>配置文件在当前项目目录 为隐藏文件夹 .<code>git</code>下面的config</p><p>修改<code>config文件</code>示例：</p><p>``</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">  1 [core]  2         repositoryformatversion = 0  3         filemode = true  4         bare = false  5         logallrefupdates = true  6 [remote "origin"]  7         url = http://124.204.65.84:12463/spider/datacrawl.git  8         fetch = +refs/heads/*:refs/remotes/origin/*  9 [branch "feature/additional"] 10         remote = origin 11         merge = refs/heads/feature/additional 12 [branch "develop"] 13         remote = origin 14         merge =  refs/heads/develop 15 [user] 16         name = maolei 17         email = 849078367@qq.com 18 [credential] 19         helper = store~                                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次会输入用户名和密码，之后就不会了，</p><h4 id="推送本地代码到远程仓库："><a href="#推送本地代码到远程仓库：" class="headerlink" title="推送本地代码到远程仓库："></a>推送本地代码到远程仓库：</h4><p><code>git add .</code>提交所有文件到暂存区</p><p><code>git commot -m "对本次提交的描述"</code></p><p><code>git status</code> 查看当前状态</p><p><code>git push</code>把刚刚提交到暂存区的文件推送到远程仓库</p><p>每次推送之前一个<code>git pull</code>一下，避免和远程更新发生冲突，会提示 <code>git pull</code></p><p><strong>其他的一些用法可以参考廖雪峰的git教程</strong><a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p><p>保留当前活动  <code>git stash</code><br><code>切换分支</code>  <code>git checkout feature/additional</code> </p><h1 id="git本地版本回退与远端版本回退-回滚"><a href="#git本地版本回退与远端版本回退-回滚" class="headerlink" title="git本地版本回退与远端版本回退(回滚)"></a>git本地版本回退与远端版本回退(回滚)</h1><blockquote><p>一个commit对应这一个版本，有一个commit id，40位的16进制数字，通过SHA1计算得到，不同的文件计算出来的SHA1值不同(有很小的几率相同，可忽略)，这样每一个提交都有其独特的id。每提交一个新版本，实际上Git就会把它们自动串成一条时间线。<br>在Git中，HEAD表示当前版本，也就是e620a6ff0940a8dff…，HEAD^表示上一个版本，HEAD^^表示上上一个版本，往上100个版本可以写成HEAD加连续100个^，也可以写成：HEAD~100。</p></blockquote><p><strong>git log：</strong>该命令显示从最近到最远的提交日志。</p><p><strong>git log –pretty=oneline：</strong>将只会显示提交的commit id号和对应的注释。(这里是两个-，Markdown显示两个-为一个-)</p><p><strong>git reset –hard commit_id 或则是 git reset –hard HEAD^</strong></p><pre class="line-numbers language-none"><code class="language-none">git reset --hard HEAD^   # hard选项，表示彻底将工作区、暂存区和版本库记录恢复到指定的版本库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用git reset –hard 进行版本回退之后，在本地查看README.md，里面已经变为版本2对应的内容了。</p><p>##　<strong>如果你在本地做了错误提交，那么回退版本的方法很简单</strong><br>1.先用下面命令找到要回退的版本的commit id：</p><pre class="line-numbers language-none"><code class="language-none">git reflog 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.接着回退版本:</p><pre class="line-numbers language-none"><code class="language-none">git reset --hard a7e1d279<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>a7e1d279就是你要回退的版本的commit id的前面几位。</p><h2 id="远程分支版本回退的方法"><a href="#远程分支版本回退的方法" class="headerlink" title="远程分支版本回退的方法"></a>远程分支版本回退的方法</h2><p>如果你的错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。<br>1.首先要回退本地分支：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> reflog<span class="token function">git</span> reset --hard Obfafd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.紧接着强制推送到远程分支：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> push -f origin master <span class="token comment">## 这里假设只有一个master分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>origin就是一个名字，它是在你clone一个托管在Github上代码库时，git为你默认创建的指向这个远程代码库的标签，origin指向的是repository，master只是这个repository中默认创建的第一个branch。当你git push的时候因为origin和master都是默认创建的，所以可以这样省略。</p><blockquote><p>注意：本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支，否则无法推送到远程分支</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="2020/02/16/sort-algorithms/"/>
      <url>2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【算法码上来】，每日算法干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/02/01/hello-world/"/>
      <url>2020/02/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
