{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/uploads/qizhi.jpg","path":"uploads/qizhi.jpg","modified":1,"renderable":0},{"_id":"source/uploads/xxml.jpg","path":"uploads/xxml.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661436725395},{"_id":"source/404.md","hash":"0113417ebad4d4841bd288e8f12ca4a935e34587","modified":1661436725395},{"_id":"source/_data/friends.json","hash":"8bad85631a6ec11cf7611790fca23fc70aed0cb3","modified":1661436725396},{"_id":"source/_data/musics.json","hash":"32bc061f34721b4ff55f880de1d0ec5787acd2f9","modified":1661436725396},{"_id":"source/contact/index.md","hash":"09e6d5aea68552f99757371acbeffc2a14d90596","modified":1661436725402},{"_id":"source/about/index.md","hash":"2e526da60968df1e0eb663d16beed4d094d48ee5","modified":1661436725402},{"_id":"source/friends/index.md","hash":"879814e03c30a0302bf69fdadb35f623dc7b3b00","modified":1661436725402},{"_id":"source/_posts/Celery笔记.md","hash":"b7dc737d2fe4c60e105082e66d51446113e3d86e","modified":1661436725396},{"_id":"source/_posts/Docker安装MySql.md","hash":"ff2fbdd0d880c02dfd528ef11c8c3072bca12044","modified":1661436725396},{"_id":"source/.DS_Store","hash":"cdf0fd11fa17db370a43c722014c9e34bfa27bf8","modified":1663472945890},{"_id":"source/_posts/Git-同时上传项目至github和gitee.md","hash":"f21b6bed17d8437e20f80a032678028764acc71a","modified":1661436725397},{"_id":"source/_posts/Linux查找文件.md","hash":"25afd8c2cce0196401f0bedc85ea80707ca15fb9","modified":1661436725397},{"_id":"source/_posts/GoByExample-变量.md","hash":"433a49c970bcd9e15747f40ebdced5ee584926e1","modified":1661436725397},{"_id":"source/_posts/Linux-crontab命令.md","hash":"f23363368892d097399b1ff786a33bafb2f0cef3","modified":1661436725397},{"_id":"source/_posts/Kubernetets核心对象和控制器模式.md","hash":"68ac1e7ceaee9c14f742e899205ffbff92d2b52f","modified":1663472989455},{"_id":"source/_posts/Python之禅.md","hash":"161220c9f9d06c34c7ac0a2492a4ba5aab1e358d","modified":1661436725397},{"_id":"source/_posts/PEP8风格指南.md","hash":"b64785bc30d608034e2dffb9af83fc626bca1c28","modified":1661436725397},{"_id":"source/_posts/.DS_Store","hash":"fa82d49ceb34b7246e36b81fd60087c714357375","modified":1663163117057},{"_id":"source/_posts/RPC入门.md","hash":"75cc72769b851691f708f2adce136606b5a1abff","modified":1661436725397},{"_id":"source/_posts/Schedule-Python周期性任务调度工具.md","hash":"3b2d99e5924e3f4e30e9258c4c1d9bd89d0be525","modified":1661436725397},{"_id":"source/_posts/collections模块的高效数据类型.md","hash":"22f3636df3bf7cb7791e6ec2848091016af8d68d","modified":1661436725397},{"_id":"source/_posts/demo.md","hash":"7a1ab07d2df7bb7ba5c315aef17b73b2d57436f2","modified":1661436725397},{"_id":"source/_posts/hello-world.md","hash":"3c28eafd980f0aed648694144a4681b59a197f56","modified":1661436725398},{"_id":"source/_posts/django小结.md","hash":"ed5852f9652003dbe76cd81229dc6e3171dc2705","modified":1661436725398},{"_id":"source/_posts/git简单使用.md","hash":"1c68223236d938b3cd3b99e3ea5665fb877c95c1","modified":1661436725398},{"_id":"source/_posts/Kubernetets的核心架构原则.md","hash":"2211616cb65a58dd3ac191c0e3f4f30bfce96aa0","modified":1663472436219},{"_id":"source/_posts/jupyter实践.md","hash":"906ade604087ad760d933469d79a360a370cf333","modified":1661436725398},{"_id":"source/_posts/docker笔记.md","hash":"a1aeff3b56ff25454652f7734f360ff5ee2233ae","modified":1661436725398},{"_id":"source/_posts/markdown.md","hash":"594b67e464965c613e363a3e05b9a7155d06083d","modified":1661436725398},{"_id":"source/_posts/new_install_ubuntu.md","hash":"753bf8af88e5c6f3d73f017e9ef6423c79a4b64e","modified":1661436725398},{"_id":"source/_posts/Ubuntu下docker实践.md","hash":"fd45ff69bfcb588ca1e21cd56668d2919979bd27","modified":1663470431449},{"_id":"source/_posts/mongodb和redis的区别.md","hash":"8f12e46dcc714163d881a2cfd6440a22c1bfd1df","modified":1661436725398},{"_id":"source/_posts/pythonlistdict的底层细节.md","hash":"4cc2177f0523412cccf4b54127871d28c80c827a","modified":1661436725399},{"_id":"source/_posts/python小结(一).md","hash":"a971ac98e44d6b2b1cbd627997ea27bc9a793b54","modified":1661436725399},{"_id":"source/_posts/python小结(五).md","hash":"c4e2ff9de589ecb3dc33c45adbe8f9af5131d60c","modified":1661436725399},{"_id":"source/_posts/python小结(二).md","hash":"4096ffe363c585faccc2b3042ae36975ee2d4b48","modified":1661436725399},{"_id":"source/_posts/python小结(三).md","hash":"29aaf3adaae141266c1b9beea6a867d0b3be2cfd","modified":1661436725399},{"_id":"source/_posts/python小结(七).md","hash":"ec59c7a508b2652b1a6cdf019a8857485ef215f4","modified":1661436725399},{"_id":"source/_posts/python小结(六).md","hash":"0f617515ef6a08af59bb7e8720bd536fd868eafe","modified":1661436725399},{"_id":"source/_posts/redis笔记.md","hash":"c352f61063471cf3c2d6244199571c014c3c2fa9","modified":1661436725399},{"_id":"source/_posts/python小结(四).md","hash":"0cc31b45af688ca0492cd24fd6a68fccb02e2fb7","modified":1661436725399},{"_id":"source/_posts/python自定义排序.md","hash":"f54c9b3e600434ce87102b4a8a33f946236f7be8","modified":1661436725399},{"_id":"source/_posts/test.md","hash":"518e5ca7b6c8c0e3bac0d6eac89a3f5514d30f93","modified":1661436725400},{"_id":"source/_posts/云开发资料.md","hash":"52a69fbdaf75d3b53f72f618ddedab0688363ea8","modified":1661436725400},{"_id":"source/_posts/sort-algorithms.md","hash":"39acbecd44892f6e2a3c42f1d4e7013c66beb8ba","modified":1663162267705},{"_id":"source/_posts/使用云开发 Cloudbase 开发邮件发送功能.md","hash":"0207e09342c068e93f4b6e3fcb459e68b49e44ef","modified":1661436725400},{"_id":"source/_posts/京东固态A400评论爬虫.md","hash":"e4d0a33553b6eae2e26a3d72ad0aa833eb8843cc","modified":1661436725400},{"_id":"source/_posts/ubuntu20-mysql8-0.md","hash":"c5dda192798f4141119e192d57774d23b2d6ebbd","modified":1661436725400},{"_id":"source/_posts/动态规划.md","hash":"eb2477a2d94182fd3371735eddb02baabb09cc1c","modified":1661436725400},{"_id":"source/_posts/私人书柜小程序项目.md","hash":"2cf67fbf091455990b7fd3ec9bad056b56917042","modified":1661436725400},{"_id":"source/_posts/武院二手交易.md","hash":"78cd278bce6fca4d52800aa66470395e7e59010d","modified":1661436725400},{"_id":"source/_posts/容器核心技术.md","hash":"f832376160fc6943b2bf63a6ed4e66eaa65e8d30","modified":1663406596132},{"_id":"source/_posts/布道云开发-B站易物小程序.md","hash":"cc566a765a8306ae46266f3f763c23bf2ed3fa76","modified":1661436725400},{"_id":"source/_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第九天.md","hash":"4526f2a65c8ffdfdaf0ad65e1b3310e30048b835","modified":1661436725401},{"_id":"source/_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第一天.md","hash":"f5e4b1fe3b5c41727db90777e8bd0db611b344cf","modified":1661436725400},{"_id":"source/_posts/消息队列-RabbitMQ.md","hash":"a9e6f2066ffa4c5674b1beb4dbd09af1a668dc62","modified":1661436725400},{"_id":"source/_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第七天.md","hash":"a830e6a3a2ed882c7e43bbf36383a88df1b07f62","modified":1661436725401},{"_id":"source/_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第三天.md","hash":"8f70b9c07a57324fbf7f172274a4e114d92dc270","modified":1661436725401},{"_id":"source/_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第二天.md","hash":"58848e39baf6ea23c1776f19bb4a70ed70d85bb3","modified":1661436725401},{"_id":"source/_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第四天.md","hash":"6ea61fac863742c01f036c6cd438a18e9188850d","modified":1661436725401},{"_id":"source/_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第八天.md","hash":"0089f5b443b3f6e76ae3119ce0840ec5534c620e","modified":1661436725401},{"_id":"source/_posts/进程线程协程.md","hash":"71e2a53f30b1731665d2339d05249f3a445af01d","modified":1661436725402},{"_id":"source/_posts/记一次小程序引入Vant组件.md","hash":"9a13e4740c37723c84235b7e042459f7b154d51e","modified":1661436725401},{"_id":"source/categories/index.md","hash":"358ac63c46d412620fbd3c0dbc69c322f8989880","modified":1661436725402},{"_id":"source/archives/index.md","hash":"85221ad556e47cf5404e9cddd30d9786acde19a0","modified":1661436725402},{"_id":"source/tags/index.md","hash":"7c905f13a1e33e96d1a29cfe6a37c74195a44c5b","modified":1661436725402},{"_id":"source/uploads/qizhi.jpg","hash":"f220bec53ed1a956e43e5192b1a9ce6ffa795998","modified":1661436725403},{"_id":"source/_posts/CloudNativate/InfluxDB1.x_vs_2.x.md","hash":"4dc28a8ed5c25a198ad323382249ed6856e01fd7","modified":1661436725396},{"_id":"source/_posts/CloudNativate/Influxdb2.md","hash":"f97cab6387a51213f8355d9201c3f06fea893138","modified":1661436725396},{"_id":"source/_posts/CloudNativate/influx_vs_vm_cluster_version.md","hash":"e1b1f1b75e6cfb2d9bae8da8aefb6b6c30115830","modified":1661436725396},{"_id":"source/_posts/CloudNativate/influx2.x.md","hash":"eba29685c512de5d08c6a126809cf947120f68cd","modified":1661436725396},{"_id":"source/_posts/CloudNativate/influx_vs_vm_single_version.md","hash":"6fb36d9f46dbd895c8fa8cf046adea7befe5fc08","modified":1661436725396},{"_id":"source/_posts/CloudNativate/influx原理.md","hash":"311e55d8e166a5e5a90c764340e9309148fb64f6","modified":1661436725396},{"_id":"source/_posts/CloudNativate/minicube.md","hash":"9ee061a89b7fb89d55970d824e5fda76a2cd88d9","modified":1661436725396},{"_id":"source/_posts/CloudNativate/install_Prometheus.md","hash":"b48693e2097c50d791f475de7651404a636ddeee","modified":1661436725396},{"_id":"source/_posts/CloudNativate/single_version.md","hash":"b5f19bd660e0ffdbff27ade6e0804e764034780e","modified":1661436725396},{"_id":"source/_posts/markdown/wechat.jpg","hash":"25de1b77d33730469583cd71f2e525c44e9f97cf","modified":1661436725398},{"_id":"source/_posts/sort-algorithms/1.png","hash":"cb9865eb782b293168e69406b212a0f3097b82a4","modified":1661436725400},{"_id":"source/_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第五天.md","hash":"7b4d6be9ac05fbff7f9def1f256ae574e1d8d89d","modified":1661436725401},{"_id":"source/_posts/CloudNativate/vm_vs_tdengine_single_version.md","hash":"2dce5e2539436b839d38a1d565dda2ab56d8152d","modified":1661436725396},{"_id":"source/_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第六天.md","hash":"12366051eae56f404315df28ac8fbcd479a532a3","modified":1661436725401},{"_id":"source/uploads/xxml.jpg","hash":"f2d6c337725da7e7ddab61e1aa88810a4a01d520","modified":1661436725403},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1661436725403},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1661436725404},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1661436725403},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1661436725403},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1661436725404},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"473c5ebf71d968246280bbd5dbdc83ae4626aeb6","modified":1661436725404},{"_id":"themes/hexo-theme-matery/README.md","hash":"ddaf6310154e314385d63041da61c418055314f6","modified":1661436725403},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a2267aed16d52f4adeb13f555d36d076855387af","modified":1661436725403},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1661436725404},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1661436725404},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1661436725408},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1661436725408},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1661436725408},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"851531e78e90a2dc923d6b5d98d3548d37e0cb7a","modified":1661436725408},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1661436725408},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"13ea3aabb9181f5b765a535e24e7540f1f8f66fd","modified":1661436725408},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1661436725408},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1661436725408},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1661436725408},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1661436725407},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1661436725404},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1661436725404},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"acd18121108659b3dd7a94c10943e5f6a4938239","modified":1661436725404},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1661436725404},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1661436725404},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1661436725404},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1661436725404},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"7c87e0eb2cf662c2a9b9b0e1e5d228b0fac2622e","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"60a65b6b181bc77febf71e572e884a61aed91fc8","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"bf96ff47df2d81bf2edb2a8c6737e36b8b08aca3","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"a10df7abc9bcac399bcabf727c8491294430dfb0","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1661436725405},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1661436725406},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1661436725406},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1661436725410},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1661436725410},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1661436725410},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1661436725410},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1661436725408},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1661436725408},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1661436725408},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1661436725408},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1661436725408},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"4b7de8e423c366ce3dc4535a537ea4eafe0f1681","modified":1661436725408},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1661436725409},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1661436725489},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1661436725410},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1661436725475},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1661436725410},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1661436725411},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1661436725411},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1661436725427},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1661436725427},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1661436725411},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1661436725428},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1661436725411},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1661436725427},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1661436725428},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1661436725428},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1661436725428},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1661436725428},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1661436725428},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1661436725428},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1661436725434},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1661436725433},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1661436725438},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1661436725437},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1661436725439},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1661436725438},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1661436725438},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1661436725439},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1661436725440},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1661436725453},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1661436725459},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1661436725459},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1661436725459},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1661436725459},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1661436725461},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1661436725461},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1661436725464},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1661436725475},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1661436725475},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1661436725475},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1661436725475},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1661436725480},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1661436725478},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1661436725481},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1661436725481},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1661436725485},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1661436725484},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1661436725487},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1661436725488},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1661436725487},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1661436725485},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1661436725488},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1661436725489},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"62b186e23749a64dcbcd423eb23b19fd037eead2","modified":1661436725500},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"a57ee68d11601b0fd8e5037fc241ff65a754473c","modified":1661436725412},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1661436725419},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1661436725420},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1661436725420},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1661436725420},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1661436725439},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1661436725440},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1661436725439},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1661436725439},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1661436725439},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1661436725440},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1661436725440},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1661436725440},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1661436725461},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1661436725440},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1661436725461},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1661436725460},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1661436725461},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"f2d6c337725da7e7ddab61e1aa88810a4a01d520","modified":1661436725467},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1661436725433},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1661436725438},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1661436725439},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1661436725464},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1661436725468},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1661436725473},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1661436725472},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1661436725479},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1661436725478},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1661436725478},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1661436725479},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1661436725481},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1661436725480},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1661436725482},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1661436725482},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1661436725487},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1661436725484},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1661436725488},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"8a4a55db46c5dbfef9c6703fa2d04e89cbfcf633","modified":1661436725412},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1661436725489},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"40d0f61bf2aa57963606ed3020b567cf82e1f705","modified":1661436725500},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1661436725419},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1661436725418},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1661436725427},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1661436725427},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"c8132dc301db2591fe2bdc5a69858ebe177fbddc","modified":1661436725410},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"c8132dc301db2591fe2bdc5a69858ebe177fbddc","modified":1661436725499},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1661436725429},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1661436725476},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1661436725441},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1661436725441},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1661436725472},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1661436725467},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1661436725466},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1661436725474},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1661436725475},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1661436725496},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1661436725413},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1661436725417},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"326e1d8f0b23f6df95cd6784fdf330bc6414ecd0","modified":1661436725419},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1661436725410},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1661436725421},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1661436725427},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1661436725474},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1661436725499},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1661436725464},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1661436725493},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1661436725433},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1661436725437},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"907bfbbe295332750575900984a00136de0f0e90","modified":1661436725416},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1661436725459},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"d92687d30fa0d43f9ae71009398507bf813a6875","modified":1661436725425},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1661436725453},{"_id":"public/baidu_urls.txt","hash":"48e35681fefb7b9f349a69f8524ea69ca699bc94","modified":1663473167801},{"_id":"public/baidusitemap.xml","hash":"4bcdb1ea7a7ab0816927fae9a6cecedfc903580a","modified":1663473167801},{"_id":"public/search.xml","hash":"0ef539e79f0eb6d330eee7876df3a3b3970ab937","modified":1663473167801},{"_id":"public/sitemap.xml","hash":"26fc4c166f0785401180b84b69616fab6816826b","modified":1663473167801},{"_id":"public/atom.xml","hash":"1b2de44dda55ee8a6846332f5b3eb57c9dc4a15d","modified":1663473167801},{"_id":"public/about/index.html","hash":"d772983db9865d5b5f3d216ffa8fb6a3acf1ae4f","modified":1663473167801},{"_id":"public/contact/index.html","hash":"8596eac29937e7220c2062c10a98815aca28c063","modified":1663473167801},{"_id":"public/categories/index.html","hash":"df5b6eaeaec6f1efb1747e413789fc4ff66ddb63","modified":1663473167801},{"_id":"public/friends/index.html","hash":"63dcb31e509fd22a2dd20262dd972cb03d490d90","modified":1663473167801},{"_id":"public/tags/index.html","hash":"31548543670676173c9e7f2fa1fdc20248d591d5","modified":1663473167801},{"_id":"public/archives/index.html","hash":"78c4c144a698f83ce8d70aa2e843567d75c327a4","modified":1663473167801},{"_id":"public/2022/09/06/kubernetets-he-xin-dui-xiang-he-kong-zhi-qi-mo-shi/index.html","hash":"b543083145652a880ea2732b5df9fe4907d70cd2","modified":1663473167801},{"_id":"public/2022/09/06/kubernetets-de-he-xin-jia-gou-yuan-ze/index.html","hash":"58909c7125291f0c6a31025ac1b3ecd314cc16a8","modified":1663473167801},{"_id":"public/404.html","hash":"5b2695aa68bf75bb4da9de55232c75afd4355d43","modified":1663473167801},{"_id":"public/2022/09/05/rong-qi-he-xin-ji-zhu/index.html","hash":"ed99deb5643d66662dce433037389c75ab97d0cf","modified":1663473167801},{"_id":"public/2022/08/08/cloudnativate/vm-vs-tdengine-single-version/index.html","hash":"2a21baf71014ff73842549cec09f9e374403f875","modified":1663473167801},{"_id":"public/2022/07/28/cloudnativate/influxdb1.x-vs-2.x/index.html","hash":"74029c161247baed3e9a0a250aea4aa7eec4152c","modified":1663473167801},{"_id":"public/2022/07/28/cloudnativate/influxdb2/index.html","hash":"5a5ab445a7dade62aaa8f3f3ed335815e8e911ff","modified":1663473167801},{"_id":"public/2022/07/27/cloudnativate/influx-yuan-li/index.html","hash":"9046e5d4639ef243cba94e9417792208ca067d03","modified":1663473167801},{"_id":"public/2022/07/26/cloudnativate/influx2.x/index.html","hash":"c42de886db3eca74da27cbf1e9863df48aaefbc7","modified":1663473167801},{"_id":"public/2022/07/25/cloudnativate/influx-vs-vm-single-version/index.html","hash":"ee5eb0f4eee6568be2d424fcf6d28c5e40bf8634","modified":1663473167801},{"_id":"public/2022/07/24/gobyexample-bian-liang/index.html","hash":"341dfdd9a6e3fa1169e778776e3494e6d4c76094","modified":1663473167801},{"_id":"public/2022/07/24/cloudnativate/influx-vs-vm-cluster-version/index.html","hash":"4ea0b2c35db4e394b5697de5ea1c8ddcdf0ebd68","modified":1663473167801},{"_id":"public/2022/07/18/cloudnativate/single-version/index.html","hash":"3d2b4bd031dbafcdc8ba445d866030c9ccee3e04","modified":1663473167801},{"_id":"public/2022/07/01/cloudnativate/install-prometheus/index.html","hash":"8c59738ba004cd9627e0ef36d5f9d387eb9d8996","modified":1663473167801},{"_id":"public/2022/06/24/cloudnativate/minicube/index.html","hash":"185326ccc1852ede04a220b14611f16274e263b5","modified":1663473167801},{"_id":"public/2022/01/25/schedule-python-zhou-qi-xing-ren-wu-diao-du-gong-ju/index.html","hash":"096892f82d09ac21be52b0e919d9ae8c904c8ecb","modified":1663473167801},{"_id":"public/2022/01/25/collections-mo-kuai-de-gao-xiao-shu-ju-lei-xing/index.html","hash":"d2e8cc0185d76b07177b711dc2a8116515842894","modified":1663473167801},{"_id":"public/2022/01/01/new-install-ubuntu/index.html","hash":"33487c939f6cd44720e6b527cc279140d534834a","modified":1663473167801},{"_id":"public/2021/06/06/dong-tai-gui-hua/index.html","hash":"71100ec8fe4c836ee1911b9c27d15de75ae0f465","modified":1663473167801},{"_id":"public/2020/12/31/demo/index.html","hash":"06a259f16eeea8c3389aeddd8fa3f0a19ccdeaf5","modified":1663473167801},{"_id":"public/2020/11/27/test/index.html","hash":"96ef818dad4a0598241df5dac2735728107c931e","modified":1663473167801},{"_id":"public/2020/08/20/python-zi-ding-yi-pai-xu/index.html","hash":"9cc11bb38ad387c022964b2694893e9e95b40593","modified":1663473167801},{"_id":"public/2020/08/10/celery-bi-ji/index.html","hash":"d4d7b4609e64e9046b9660feb98491115fef1d63","modified":1663473167801},{"_id":"public/2020/08/10/pythonlistdict-de-di-ceng-xi-jie/index.html","hash":"0dcc03dd0b53a9841c8f156592dde989d7b3038a","modified":1663473167801},{"_id":"public/2020/07/30/rpc-ru-men/index.html","hash":"2345474c58800178770c2ce15ff708165943047d","modified":1663473167801},{"_id":"public/2020/07/30/mongodb-he-redis-de-qu-bie/index.html","hash":"76b577226b6d544f4246490816e5aac8cca0f336","modified":1663473167801},{"_id":"public/2020/07/30/redis-bi-ji/index.html","hash":"f02a0fddb3073d455b77a7ddc0c72b1d095b8f1d","modified":1663473167801},{"_id":"public/2020/07/25/xiao-xi-dui-lie-rabbitmq/index.html","hash":"f693ea5ae9a4c3f79749e00179ca75ce11eb2d42","modified":1663473167801},{"_id":"public/2020/07/15/docker-bi-ji/index.html","hash":"9d7874f2169fc29378cb23f77db5e786531872ac","modified":1663473167801},{"_id":"public/2020/07/01/django-xiao-jie/index.html","hash":"434d0dd489e8699ee2f86f91fdf05e4e8e3455bf","modified":1663473167801},{"_id":"public/2020/06/29/python-xiao-jie-qi/index.html","hash":"8b26aa4f01468309fd8db251f8da3526289b9efd","modified":1663473167801},{"_id":"public/2020/06/26/python-xiao-jie-liu/index.html","hash":"1fdbc552f0ac12cec18d39c3e3b34207e7b461e6","modified":1663473167801},{"_id":"public/2020/06/25/python-xiao-jie-wu/index.html","hash":"3ab3ee6db1c2d9ba3bbc779dd57d12254759dfcb","modified":1663473167801},{"_id":"public/2020/06/24/python-xiao-jie-si/index.html","hash":"394ea76de046d97eeb133424328a3e662f9f5b1a","modified":1663473167801},{"_id":"public/2020/06/22/python-xiao-jie-san/index.html","hash":"aa2bf8a91f1bf9a9b4a0b9a92daaab386f7de43d","modified":1663473167801},{"_id":"public/2020/06/21/python-xiao-jie-er/index.html","hash":"2a3533371ec4454cb74881dd237276f916eea57d","modified":1663473167801},{"_id":"public/2020/06/20/python-xiao-jie-yi/index.html","hash":"3f6c38a32671803de377693be3b776ea587af486","modified":1663473167801},{"_id":"public/2020/06/18/shi-yong-yun-kai-fa-cloudbase-kai-fa-you-jian-fa-song-gong-neng/index.html","hash":"3d06d5b63ecf1db18b40e6ed45072e5b0db778f5","modified":1663473167801},{"_id":"public/2020/06/10/linux-cha-zhao-wen-jian/index.html","hash":"809ab978d3ec7cbbf9214680d77b5ea5e0a7b547","modified":1663473167801},{"_id":"public/2020/06/06/ji-yi-ci-xiao-cheng-xu-yin-ru-vant-zu-jian/index.html","hash":"e6cef11e024b5bb5d737fc880e2b3dd91d2d1b25","modified":1663473167801},{"_id":"public/2020/05/29/ubuntu20-mysql8-0/index.html","hash":"560fa17c4b256434fcee606f7a25ec37d2ba04e6","modified":1663473167801},{"_id":"public/2020/05/21/jin-cheng-xian-cheng-xie-cheng/index.html","hash":"5c696bb50b8ba502244b84642e5642ac18d2e6ea","modified":1663473167801},{"_id":"public/2020/05/20/python-zhi-shan/index.html","hash":"dd42856a5de707b67e8dd855e333ce6043388ccc","modified":1663473167801},{"_id":"public/2020/05/19/linux-crontab-ming-ling/index.html","hash":"8b254857678d5d8e8efc309dcc9c940c9a97920f","modified":1663473167801},{"_id":"public/2020/05/06/docker-an-zhuang-mysql/index.html","hash":"938467899daf8b5e6ca855c1c98fc79ed1d5d949","modified":1663473167801},{"_id":"public/2020/05/05/ubuntu-xia-docker-shi-jian/index.html","hash":"a33bd05fe58d652469c2f2cf5464cd6188257017","modified":1663473167801},{"_id":"public/2020/05/01/yun-kai-fa-zi-liao/index.html","hash":"e3aa55adc64f1bddfdd073a70ce05919f2a6b9b1","modified":1663473167801},{"_id":"public/2020/04/27/git-tong-shi-shang-chuan-xiang-mu-zhi-github-he-gitee/index.html","hash":"ff07c95346400f0a3085efe1dfff579633bc5dae","modified":1663473167801},{"_id":"public/2020/04/24/bu-dao-yun-kai-fa-b-zhan-yi-wu-xiao-cheng-xu/index.html","hash":"1583250f1a88b17e13f8865b9c41408d5f9d3e9d","modified":1663473167801},{"_id":"public/2020/04/14/jing-dong-gu-tai-a400-ping-lun-pa-chong/index.html","hash":"4ad2fd6a51411e5274e3d2b346f9cf786ab9d7ca","modified":1663473167801},{"_id":"public/2020/04/07/wu-yuan-er-shou-jiao-yi/index.html","hash":"4c3c17db5f934451f6714a4c7323d33a280056c3","modified":1663473167801},{"_id":"public/2020/04/03/si-ren-shu-ju-xiao-cheng-xu-xiang-mu/index.html","hash":"565ca0f3101462c72ddfd1e4460e8049e2267da6","modified":1663473167801},{"_id":"public/2020/03/25/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-jiu-tian/index.html","hash":"ee1190cad7f2f234452610664994040305ad9340","modified":1663473167801},{"_id":"public/2020/03/24/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-ba-tian/index.html","hash":"906e87a31a2187d5815e4842950a2baee35afac4","modified":1663473167801},{"_id":"public/2020/03/24/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-qi-tian/index.html","hash":"bc94059ae681195bae2b67f2ca13ff8318f31bf7","modified":1663473167801},{"_id":"public/2020/03/22/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-liu-tian/index.html","hash":"fc1f8832466494f5b0dc10b2e1e78253ae9bcea6","modified":1663473167801},{"_id":"public/2020/03/21/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-wu-tian/index.html","hash":"f574d61e641077e730cfbeb6ad078757dc7e2feb","modified":1663473167801},{"_id":"public/2020/03/20/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-si-tian/index.html","hash":"f83b7a155cfb69d4c32fee0258824e5b0a3b0809","modified":1663473167801},{"_id":"public/2020/03/19/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-san-tian/index.html","hash":"5da381063b651bc7a314cf9167f060ac1466d138","modified":1663473167801},{"_id":"public/2020/03/18/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-er-tian/index.html","hash":"c60257e9d318743912120feab2d6183ed859800d","modified":1663473167801},{"_id":"public/2020/03/10/teng-xun-xi-niu-niao-yun-kai-fa-xiao-yuan-ji-zhu-bu-dao-shi-yang-cheng-ji-hua-di-yi-tian/index.html","hash":"74ddba32d8f56310f878fd2ea7cb5898ae3dce99","modified":1663473167801},{"_id":"public/2020/03/10/pep8-feng-ge-zhi-nan/index.html","hash":"f280a0029c8fa8405cc3df18a5cddbf5c9d133da","modified":1663473167801},{"_id":"public/2020/03/07/markdown/index.html","hash":"07bf3cb93f60c1bf97c6b174a2f251d3c431c5fd","modified":1663473167801},{"_id":"public/2020/03/06/git-jian-dan-shi-yong/index.html","hash":"7f64745d649048dae7c861753ec3bdba17eaafd5","modified":1663473167801},{"_id":"public/2020/02/16/sort-algorithms/index.html","hash":"c9d8709e47d150633ed8082b70a332a15ba707fe","modified":1663473167801},{"_id":"public/2020/02/01/hello-world/index.html","hash":"3e215ad1acb2752183f6be569b642a64d4ae53e2","modified":1663473167801},{"_id":"public/archives/page/2/index.html","hash":"58906eae0ecbe09d00e2780805d051c6b9ff930e","modified":1663473167801},{"_id":"public/archives/page/3/index.html","hash":"d76559abe713749de77a2c33106c81a0f443535d","modified":1663473167801},{"_id":"public/archives/page/4/index.html","hash":"7e31f9dda9411aa6cd2250bae1a247df64e7f08a","modified":1663473167801},{"_id":"public/archives/page/5/index.html","hash":"2fa43b671c77087c847ad30cbe3219c5c73a9a86","modified":1663473167801},{"_id":"public/archives/page/6/index.html","hash":"0ec7356a3933147ac16b5ca4104a5b7c5f536b89","modified":1663473167801},{"_id":"public/archives/2020/index.html","hash":"52803910354dac5fb3d721a2aa6a22bd01636b9b","modified":1663473167801},{"_id":"public/archives/2020/page/2/index.html","hash":"1e14aa9927ac5079f818e779e280d76413deea51","modified":1663473167801},{"_id":"public/archives/2020/page/3/index.html","hash":"baa082823d423ecbbebd21c3cb0c4f4a2e74deaf","modified":1663473167801},{"_id":"public/archives/2020/page/4/index.html","hash":"ab327216361fc6d6b5c4f2dbc3cb8ac3f8844899","modified":1663473167801},{"_id":"public/archives/2020/02/index.html","hash":"6f4dea585ff32708c24dc88beea01ecbd2fd3dcc","modified":1663473167801},{"_id":"public/archives/2020/03/index.html","hash":"63b4fd1935c80e487eafcfab51213080aa8e4ccc","modified":1663473167801},{"_id":"public/archives/2020/04/index.html","hash":"904f0a3ff02236eaecc89b54290190b3b3935b01","modified":1663473167801},{"_id":"public/archives/2020/05/index.html","hash":"8d3d7cad49107854f758e67f6583096fc85cd4d0","modified":1663473167801},{"_id":"public/archives/2020/06/index.html","hash":"09bbf7eeb0e5e9c16f08e127fe588d970d94463e","modified":1663473167801},{"_id":"public/archives/2020/07/index.html","hash":"dc97b135535f465fa2e217e7c8955af042ea3f4f","modified":1663473167801},{"_id":"public/archives/2020/08/index.html","hash":"8ddf852ff9c7f88d13c0d188171f0d06d7e280df","modified":1663473167801},{"_id":"public/archives/2020/11/index.html","hash":"21b8fb4b335a527335ddb17650b51c1b564100d9","modified":1663473167801},{"_id":"public/archives/2020/12/index.html","hash":"1be91b3dc4d6db1b740f4c3440bb5bfeab3da94c","modified":1663473167801},{"_id":"public/archives/2021/index.html","hash":"12693719d42ecbc284168d0bae730de46cba7a2f","modified":1663473167801},{"_id":"public/archives/2021/06/index.html","hash":"5016c5ab1ff05204dac73b1c7efff20299b9de58","modified":1663473167801},{"_id":"public/archives/2022/index.html","hash":"ee86b1983c8f1d3943eebac8459f4a5ad529a3c7","modified":1663473167801},{"_id":"public/archives/2022/page/2/index.html","hash":"7400214136243b83c2946bf24da513f1810f9319","modified":1663473167801},{"_id":"public/archives/2022/01/index.html","hash":"dd30dce391c5a876b2716c83e1c1e02a9079f6b1","modified":1663473167801},{"_id":"public/archives/2022/06/index.html","hash":"dee36b95abf130233a5c7df911ea0256f1eea2c7","modified":1663473167801},{"_id":"public/archives/2022/07/index.html","hash":"2fd16f5cadf5c6b48b75247cdfb685d466fa0563","modified":1663473167801},{"_id":"public/archives/2022/08/index.html","hash":"80e62bd6ee82ec3a2d44f0b478b35959b5a62c92","modified":1663473167801},{"_id":"public/archives/2022/09/index.html","hash":"50a6c9e6e6e80f58adfba63e9fa676da214922a8","modified":1663473167801},{"_id":"public/categories/Docker/index.html","hash":"c73506007f36f8b3b8c306b64cab4e5ac1b1ddc2","modified":1663473167801},{"_id":"public/categories/Go/index.html","hash":"cc4b0e7b33db5c1d740c71d8d100408220174758","modified":1663473167801},{"_id":"public/categories/Celery/index.html","hash":"ab3db92ff38e23dd4687d34039c7097361b2bf11","modified":1663473167801},{"_id":"public/categories/Git/index.html","hash":"d543e969133602c580f6fc9f91f0273f78bc66a7","modified":1663473167801},{"_id":"public/categories/Docker/Kubernetets/index.html","hash":"2ebc7ce5b298365b7d3e9874316dabfa55d4794d","modified":1663473167801},{"_id":"public/categories/Linux/index.html","hash":"a5c6fb88afeb32cd7307fa2a24296e0dabf38df5","modified":1663473167801},{"_id":"public/categories/Python/index.html","hash":"21f38acb03d5e001cb259e2cd48553675c18d030","modified":1663473167801},{"_id":"public/categories/Python/page/2/index.html","hash":"9007a154e22dad0b1e9d4f0feb5f48bb07747575","modified":1663473167801},{"_id":"public/categories/RPC/index.html","hash":"ef789b05421fae1263bad01682249ad2174d168e","modified":1663473167801},{"_id":"public/categories/编程/index.html","hash":"e7b430c1dcf01f997cf6538d982047ab6e99409d","modified":1663473167801},{"_id":"public/categories/Python/工具/index.html","hash":"7a257638f3990b676f9eb112840ec5ffeff71246","modified":1663473167801},{"_id":"public/categories/数据库/index.html","hash":"59747732ece2cb0a13f1f56884634af69ec06f98","modified":1663473167801},{"_id":"public/categories/编程算法/index.html","hash":"eb2ca07798dd99645135089f69108cb48a558e6c","modified":1663473167801},{"_id":"public/categories/云开发/index.html","hash":"b0d434a61919eae27418d40c2b7416dfc9d147c9","modified":1663473167801},{"_id":"public/categories/Python/爬虫/index.html","hash":"1000ae76c5319d479f95034cf6c7e2176d1b221d","modified":1663473167801},{"_id":"public/categories/微信小程序/index.html","hash":"2b32644bd2466fc21b02363599b9f8bbf02176cb","modified":1663473167801},{"_id":"public/categories/B站/index.html","hash":"ac2443c832ff70e8310fe99dfee79111ca4c508c","modified":1663473167801},{"_id":"public/categories/Python/爬虫/词云/index.html","hash":"4b2cc8d935ba1978bc3b93897e7fd3a50e793ebf","modified":1663473167801},{"_id":"public/categories/消息队列/index.html","hash":"f4108cdf9505f84bddc2cc6d989bdae6f3e9bfdb","modified":1663473167801},{"_id":"public/categories/操作系统/index.html","hash":"2e80d6e0664c475fbabf27c7cf6e8dfed5931911","modified":1663473167801},{"_id":"public/categories/tsdb/index.html","hash":"9c882e7842c32a799117b07ecff47c1043a52b7f","modified":1663473167801},{"_id":"public/categories/k8s/index.html","hash":"4c3d0e078d2732decae4c50f15f4a19ec81f68cc","modified":1663473167801},{"_id":"public/index.html","hash":"0b0173bffe541839ead512ff851115b89708b69d","modified":1663473167801},{"_id":"public/page/2/index.html","hash":"32436fef0494fe6f43f5adb7697f57757fd7b0d7","modified":1663473167801},{"_id":"public/page/3/index.html","hash":"92f40d9ed99802ead5f2d0f2e4c00a01b5f1dc2b","modified":1663473167801},{"_id":"public/page/4/index.html","hash":"1f83520e0753fc4e82593d4ddc14edbc54ae1e84","modified":1663473167801},{"_id":"public/page/5/index.html","hash":"d2953b68206f2cec9bd18c6e236f640051d54190","modified":1663473167801},{"_id":"public/page/6/index.html","hash":"ee048ee698964f944586260925f68fc868a380ae","modified":1663473167801},{"_id":"public/tags/Docker/index.html","hash":"44c4cecf42e519065bfa189036c266e045cc7baf","modified":1663473167801},{"_id":"public/tags/Go/index.html","hash":"cf300edb66ae60e007d609c4888999b8e1c45a0b","modified":1663473167801},{"_id":"public/tags/GoByExamble/index.html","hash":"c40d78ac7bce45afa719a1a79f23a6e8e91f4267","modified":1663473167801},{"_id":"public/tags/Celery/index.html","hash":"c154da2823f5814b3f4231a957b2f9cff52ed5fe","modified":1663473167801},{"_id":"public/tags/Git/index.html","hash":"716cb83a535186967c36a6191c5b4a0f5af9d670","modified":1663473167801},{"_id":"public/tags/容器/index.html","hash":"6f5d7646fce1c61ede1445fb5da45e16274b6c57","modified":1663473167801},{"_id":"public/tags/K8s/index.html","hash":"1c94fd06ec947f9f187e1b7243fed241a4f087b9","modified":1663473167801},{"_id":"public/tags/Kubernetets/index.html","hash":"6035a2fcc2a474a6e9218c4f5847935f354d1382","modified":1663473167801},{"_id":"public/tags/Linux/index.html","hash":"3ab4594626fa7fc815f4acde3345f3b9e68b84e2","modified":1663473167801},{"_id":"public/tags/Python/index.html","hash":"c3c00d1bd103bb5b3ad3aa21daed8c1c5731ea72","modified":1663473167801},{"_id":"public/tags/Python/page/2/index.html","hash":"f954d0295a038986e75aafe9a7eee229a69c6234","modified":1663473167801},{"_id":"public/tags/RPC/index.html","hash":"720a6215b34de08eb3b679cb666b09336bc53ea9","modified":1663473167801},{"_id":"public/tags/Schedule/index.html","hash":"f316aab55c3aa2edb713fd7b70a540d7fb2f96c8","modified":1663473167801},{"_id":"public/tags/Collections/index.html","hash":"11649695706a3d4f74bdb45cc08f312f1f7cec64","modified":1663473167801},{"_id":"public/tags/Django/index.html","hash":"f3b20c312ea3e25090fbd217f65b2a7a3291e517","modified":1663473167801},{"_id":"public/tags/Mongodb/index.html","hash":"96ded0dda5a78deb2e9e2f68668089414f113c74","modified":1663473167801},{"_id":"public/tags/Redis/index.html","hash":"f7261b8d098d1adbb00641bf8ab9c2c59b986f3e","modified":1663473167801},{"_id":"public/tags/Ununtu/index.html","hash":"f629707df46b5a2f0188a8385683c89fdc210f5e","modified":1663473167801},{"_id":"public/tags/Mysql/index.html","hash":"e5e88b5db3826571e51b7c0049374f62a5a0751a","modified":1663473167801},{"_id":"public/tags/Leetcode/index.html","hash":"230f9fe528fe1699c7b96f890cb1bc06b5ce77f5","modified":1663473167801},{"_id":"public/tags/算法/index.html","hash":"4304bcef454287b1ee6b7043a9cd13c60c4c00b7","modified":1663473167801},{"_id":"public/tags/云开发/index.html","hash":"62c91bfe894bbaddda6f96dcf03564955e54cde4","modified":1663473167801},{"_id":"public/tags/云开发/page/2/index.html","hash":"7619507de4e6b09a538969030c8654f04267cfd1","modified":1663473167801},{"_id":"public/tags/词云/index.html","hash":"1a5d9deeb4502f277d7664cfc91e12df017a659b","modified":1663473167801},{"_id":"public/tags/爬虫/index.html","hash":"fd73c085de509c66fc8feb2e4ba71869650629d1","modified":1663473167801},{"_id":"public/tags/微信小程序/index.html","hash":"7d323cbd61b7839f1c55964356c630188ade1c3c","modified":1663473167801},{"_id":"public/tags/微信小程序/page/2/index.html","hash":"45fa3503747b5660d0473f8851a4fe4b629131ec","modified":1663473167801},{"_id":"public/tags/RabbitMQ/index.html","hash":"5c095f9b5350a0f4fd424e85b9974c25e7197ea2","modified":1663473167801},{"_id":"public/tags/操作系统/index.html","hash":"5e3924b61220b3a1a001d41995e25bcbc5ec27b4","modified":1663473167801},{"_id":"public/tags/k8s/index.html","hash":"9878321cb268cc151bf18cc7874159b0e1b18a98","modified":1663473167801},{"_id":"public/tags/influxdb/index.html","hash":"3f9dc1c8cc42af5d3dee741f5baada38bdeba4e8","modified":1663473167801},{"_id":"public/tags/benchmark/index.html","hash":"853982dcb14a4bd8863a9aec1cefe46a31a0addf","modified":1663473167801},{"_id":"public/tags/prometheus/index.html","hash":"b4951c1574cb25ad4b5946497505b17edf5a8f8d","modified":1663473167801},{"_id":"public/tags/victoriametrics/index.html","hash":"cc2fd02d81c29853b1f7aab52427a8f466c6337c","modified":1663473167801},{"_id":"public/tags/cadvisor/index.html","hash":"8c02a78fa0c8c93981e7fe6efbd9a93f168aa606","modified":1663473167801},{"_id":"public/tags/minikube/index.html","hash":"326c0f2277d9d2e11f632e8c26bdfd6a152c5905","modified":1663473167801},{"_id":"public/tags/tdengine/index.html","hash":"48b857d41ed1a9107786f8aeecf92206e4438e50","modified":1663473167801},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663473167801},{"_id":"public/uploads/qizhi.jpg","hash":"f220bec53ed1a956e43e5192b1a9ce6ffa795998","modified":1663473167801},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1663473167801},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1663473167801},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1663473167801},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1663473167801},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1663473167801},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1663473167801},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1663473167801},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1663473167801},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1663473167801},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1663473167801},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1663473167801},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1663473167801},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1663473167801},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1663473167801},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1663473167801},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1663473167801},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1663473167801},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1663473167801},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1663473167801},{"_id":"public/medias/reward/wechat.png","hash":"62b186e23749a64dcbcd423eb23b19fd037eead2","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1663473167801},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1663473167801},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1663473167801},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1663473167801},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1663473167801},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1663473167801},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1663473167801},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1663473167801},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1663473167801},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1663473167801},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1663473167801},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1663473167801},{"_id":"public/2020/03/07/markdown/wechat.jpg","hash":"25de1b77d33730469583cd71f2e525c44e9f97cf","modified":1663473167801},{"_id":"public/2020/02/16/sort-algorithms/1.png","hash":"cb9865eb782b293168e69406b212a0f3097b82a4","modified":1663473167801},{"_id":"public/uploads/xxml.jpg","hash":"f2d6c337725da7e7ddab61e1aa88810a4a01d520","modified":1663473167801},{"_id":"public/medias/avatar.jpg","hash":"f2d6c337725da7e7ddab61e1aa88810a4a01d520","modified":1663473167801},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1663473167801},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1663473167801},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1663473167801},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1663473167801},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1663473167801},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1663473167801},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1663473167801},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1663473167801},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1663473167801},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1663473167801},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1663473167801},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1663473167801},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1663473167801},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1663473167801},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1663473167801},{"_id":"public/medias/reward/alipay.jpg","hash":"40d0f61bf2aa57963606ed3020b567cf82e1f705","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1663473167801},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1663473167801},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1663473167801},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1663473167801},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1663473167801},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1663473167801},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1663473167801},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1663473167801},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1663473167801},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1663473167801},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1663473167801},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1663473167801},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1663473167801},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1663473167801},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1663473167801},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1663473167801},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1663473167801},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1663473167801},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1663473167801},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1663473167801},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1663473167801},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1663473167801},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1663473167801},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1663473167801},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1663473167801},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1663473167801},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1663473167801},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1663473167801},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1663473167801},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1663473167801},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1663473167801},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1663473167801},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1663473167801},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1663473167801},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1663473167801},{"_id":"public/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1663473167801},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1663473167801},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1663473167801},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1663473167801},{"_id":"public/css/matery.css","hash":"4b7de8e423c366ce3dc4535a537ea4eafe0f1681","modified":1663473167801},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1663473167801},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1663473167801},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1663473167801},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1663473167801},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1663473167801},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1663473167801},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1663473167801},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1663473167801},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1663473167801},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1663473167801},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1663473167801},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1663473167801},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1663473167801},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1663473167801},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1663473167801},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1663473167801},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1663473167801},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1663473167801},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1663473167801},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1663473167801},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1663473167801},{"_id":"public/libs/awesome/css/all.css","hash":"8a4a55db46c5dbfef9c6703fa2d04e89cbfcf633","modified":1663473167801},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1663473167801},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1663473167801},{"_id":"public/libs/awesome/css/all.min.css","hash":"a57ee68d11601b0fd8e5037fc241ff65a754473c","modified":1663473167801},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1663473167801},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1663473167801},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1663473167801},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1663473167801},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1663473167801},{"_id":"public/favicon.png","hash":"c8132dc301db2591fe2bdc5a69858ebe177fbddc","modified":1663473167801},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1663473167801},{"_id":"public/medias/logo.png","hash":"c8132dc301db2591fe2bdc5a69858ebe177fbddc","modified":1663473167801},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1663473167801},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1663473167801},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1663473167801},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"326e1d8f0b23f6df95cd6784fdf330bc6414ecd0","modified":1663473167801},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1663473167801},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1663473167801},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1663473167801},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1663473167801},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1663473167801},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1663473167801},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"907bfbbe295332750575900984a00136de0f0e90","modified":1663473167801},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"d92687d30fa0d43f9ae71009398507bf813a6875","modified":1663473167801}],"Category":[{"name":"Docker","_id":"cl86sz38m000412mj6rkc8nll"},{"name":"Go","_id":"cl86sz38o000c12mj315z1ssf"},{"name":"Celery","_id":"cl86sz38p000k12mj8umiecox"},{"name":"Git","_id":"cl86sz38q000o12mj4pkzhkc1"},{"name":"Kubernetets","parent":"cl86sz38m000412mj6rkc8nll","_id":"cl86sz38q000t12mj4vp909vj"},{"name":"Linux","_id":"cl86sz38q000x12mj3jqicwbr"},{"name":"Python","_id":"cl86sz38q001112mj9mjwalhg"},{"name":"RPC","_id":"cl86sz38q001512mj7lm8bhav"},{"name":"编程","_id":"cl86sz392001l12mj4wyj4h8r"},{"name":"工具","parent":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz393001w12mjd305h4t9"},{"name":"数据库","_id":"cl86sz395002k12mjgh4608qu"},{"name":"编程算法","_id":"cl86sz399003w12mj2e6f2mvd"},{"name":"云开发","_id":"cl86sz399004512mj287b8ko4"},{"name":"爬虫","parent":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz39a004b12mjba2s9nea"},{"name":"微信小程序","_id":"cl86sz39b004i12mj02ovcjrw"},{"name":"B站","_id":"cl86sz39c004o12mj9un2fd9d"},{"name":"词云","parent":"cl86sz39a004b12mjba2s9nea","_id":"cl86sz39e005d12mjct32fgpu"},{"name":"消息队列","_id":"cl86sz39f005m12mjcc223uwf"},{"name":"操作系统","_id":"cl86sz39f005u12mjbnqw0kh8"},{"name":"tsdb","_id":"cl86sz39g006212mjcw4o1o0z"},{"name":"k8s","_id":"cl86sz39i006y12mj8qc20fx7"}],"Data":[{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]},{"_id":"friends","data":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"about","date":"2019-12-31T16:00:01.000Z","type":"about","layout":"about","_content":"\n## 联系方式\n> maolei025@qq.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-01-1 00:00:01\ntype: \"about\"\nlayout: \"about\"\n---\n\n## 联系方式\n> maolei025@qq.com","updated":"2022-08-25T14:12:05.402Z","path":"about/index.html","comments":1,"_id":"cl86sz38i000012mj2u2a518b","content":"<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><blockquote>\n<p><a href=\"mailto:maolei025@qq.com\">maolei025@qq.com</a></p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><blockquote>\n<p><a href=\"mailto:&#x6d;&#x61;&#x6f;&#x6c;&#101;&#x69;&#48;&#50;&#x35;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;\">&#x6d;&#x61;&#x6f;&#x6c;&#101;&#x69;&#48;&#50;&#x35;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a></p>\n</blockquote>\n"},{"title":"contact","date":"2019-12-31T16:00:01.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-01-1 00:00:01\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n\n","updated":"2022-08-25T14:12:05.402Z","path":"contact/index.html","comments":1,"_id":"cl86sz38l000212mjhzyoao3u","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n"},{"title":"404","date":"2019-12-31T16:00:01.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2020-01-1 00:00:01\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2022-08-25T14:12:05.395Z","path":"404.html","comments":1,"_id":"cl86sz38m000612mj5pnt7bjb","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-12-31T16:00:01.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-1 00:00:01\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2022-08-25T14:12:05.402Z","path":"categories/index.html","comments":1,"_id":"cl86sz38n000812mjeniy155k","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-12-31T16:00:01.000Z","type":"friends","layout":"friends","_content":"\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-01-1 00:00:01\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n","updated":"2022-08-25T14:12:05.402Z","path":"friends/index.html","comments":1,"_id":"cl86sz38o000a12mj2lqhhxdj","content":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n"},{"title":"tags","date":"2019-12-31T16:00:01.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-01-1 00:00:01\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2022-08-25T14:12:05.402Z","path":"tags/index.html","comments":1,"_id":"cl86sz38o000f12mjak2pdtlw","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-12-31T16:00:01.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2020-01-1 00:00:01\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2022-08-25T14:12:05.402Z","path":"archives/index.html","comments":1,"_id":"cl86sz38p000h12mj7w44ad8e","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"Docker安装MySql","top":false,"date":"2020-05-05T17:48:42.000Z","_content":"\n#  Docker安装MySql\n\n### 1、查看可用的 MySQL 版本\n\n访问 MySQL 镜像库地址：https://hub.docker.com/_/mysql?tab=tags 。\n\n可以通过 Sort by 查看其他版本的 MySQL，默认是最新版本 **mysql:latest** 。\n\n可以用 **docker search mysql** 命令来查看可用版本\n\n### 2、拉取 MySQL 镜像\n\n```shell\n$ docker pull mysql:latest\n```\n\n### 3、查看本地镜像\n\n```shell\n$ docker images\n```\n\n### 4、运行容器\n\n```shell\n$ docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n\n- **-p 3306:3306** ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 **宿主机ip:3306** 访问到 MySQL 的服务。\n- **MYSQL_ROOT_PASSWORD=123456**：设置 MySQL 服务 root 用户的密码。\n\n### 5、安装成功\n\n通过 **docker ps** 命令查看是否安装成功：\n\n本机可以通过 root 和密码 123456 访问 MySQL 服务。\n\n```shell\n$ mysql -h localhost -u root -p\n```\n\n","source":"_posts/Docker安装MySql.md","raw":"---\ntitle: Docker安装MySql\ntags:\n  - Docker\ncategories:\n  - Docker\ntop: false\ndate: 2020-05-6 01:48:42\n---\n\n#  Docker安装MySql\n\n### 1、查看可用的 MySQL 版本\n\n访问 MySQL 镜像库地址：https://hub.docker.com/_/mysql?tab=tags 。\n\n可以通过 Sort by 查看其他版本的 MySQL，默认是最新版本 **mysql:latest** 。\n\n可以用 **docker search mysql** 命令来查看可用版本\n\n### 2、拉取 MySQL 镜像\n\n```shell\n$ docker pull mysql:latest\n```\n\n### 3、查看本地镜像\n\n```shell\n$ docker images\n```\n\n### 4、运行容器\n\n```shell\n$ docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n\n- **-p 3306:3306** ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 **宿主机ip:3306** 访问到 MySQL 的服务。\n- **MYSQL_ROOT_PASSWORD=123456**：设置 MySQL 服务 root 用户的密码。\n\n### 5、安装成功\n\n通过 **docker ps** 命令查看是否安装成功：\n\n本机可以通过 root 和密码 123456 访问 MySQL 服务。\n\n```shell\n$ mysql -h localhost -u root -p\n```\n\n","slug":"Docker安装MySql","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz38j000112mj6uq921b0","content":"<h1 id=\"Docker安装MySql\"><a href=\"#Docker安装MySql\" class=\"headerlink\" title=\"Docker安装MySql\"></a>Docker安装MySql</h1><h3 id=\"1、查看可用的-MySQL-版本\"><a href=\"#1、查看可用的-MySQL-版本\" class=\"headerlink\" title=\"1、查看可用的 MySQL 版本\"></a>1、查看可用的 MySQL 版本</h3><p>访问 MySQL 镜像库地址：<a href=\"https://hub.docker.com/_/mysql?tab=tags\">https://hub.docker.com/_/mysql?tab=tags</a> 。</p>\n<p>可以通过 Sort by 查看其他版本的 MySQL，默认是最新版本 <strong>mysql:latest</strong> 。</p>\n<p>可以用 <strong>docker search mysql</strong> 命令来查看可用版本</p>\n<h3 id=\"2、拉取-MySQL-镜像\"><a href=\"#2、拉取-MySQL-镜像\" class=\"headerlink\" title=\"2、拉取 MySQL 镜像\"></a>2、拉取 MySQL 镜像</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ docker pull mysql:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3、查看本地镜像\"><a href=\"#3、查看本地镜像\" class=\"headerlink\" title=\"3、查看本地镜像\"></a>3、查看本地镜像</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ docker images<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、运行容器\"><a href=\"#4、运行容器\" class=\"headerlink\" title=\"4、运行容器\"></a>4、运行容器</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>-p 3306:3306</strong> ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 <strong>宿主机ip:3306</strong> 访问到 MySQL 的服务。</li>\n<li><strong>MYSQL_ROOT_PASSWORD=123456</strong>：设置 MySQL 服务 root 用户的密码。</li>\n</ul>\n<h3 id=\"5、安装成功\"><a href=\"#5、安装成功\" class=\"headerlink\" title=\"5、安装成功\"></a>5、安装成功</h3><p>通过 <strong>docker ps</strong> 命令查看是否安装成功：</p>\n<p>本机可以通过 root 和密码 123456 访问 MySQL 服务。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ mysql -h localhost -u root -p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Docker安装MySql\"><a href=\"#Docker安装MySql\" class=\"headerlink\" title=\"Docker安装MySql\"></a>Docker安装MySql</h1><h3 id=\"1、查看可用的-MySQL-版本\"><a href=\"#1、查看可用的-MySQL-版本\" class=\"headerlink\" title=\"1、查看可用的 MySQL 版本\"></a>1、查看可用的 MySQL 版本</h3><p>访问 MySQL 镜像库地址：<a href=\"https://hub.docker.com/_/mysql?tab=tags\">https://hub.docker.com/_/mysql?tab=tags</a> 。</p>\n<p>可以通过 Sort by 查看其他版本的 MySQL，默认是最新版本 <strong>mysql:latest</strong> 。</p>\n<p>可以用 <strong>docker search mysql</strong> 命令来查看可用版本</p>\n<h3 id=\"2、拉取-MySQL-镜像\"><a href=\"#2、拉取-MySQL-镜像\" class=\"headerlink\" title=\"2、拉取 MySQL 镜像\"></a>2、拉取 MySQL 镜像</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ docker pull mysql:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3、查看本地镜像\"><a href=\"#3、查看本地镜像\" class=\"headerlink\" title=\"3、查看本地镜像\"></a>3、查看本地镜像</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ docker images<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、运行容器\"><a href=\"#4、运行容器\" class=\"headerlink\" title=\"4、运行容器\"></a>4、运行容器</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>-p 3306:3306</strong> ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 <strong>宿主机ip:3306</strong> 访问到 MySQL 的服务。</li>\n<li><strong>MYSQL_ROOT_PASSWORD=123456</strong>：设置 MySQL 服务 root 用户的密码。</li>\n</ul>\n<h3 id=\"5、安装成功\"><a href=\"#5、安装成功\" class=\"headerlink\" title=\"5、安装成功\"></a>5、安装成功</h3><p>通过 <strong>docker ps</strong> 命令查看是否安装成功：</p>\n<p>本机可以通过 root 和密码 123456 访问 MySQL 服务。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ mysql -h localhost -u root -p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n"},{"title":"GoByExample-变量","top":false,"date":"2022-07-24T10:33:18.000Z","_content":"\n# GoByExample-变量\n\n\n\n### 1. 变量的来历\n\n​\t\t程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。\n\n\n\n### 2.  变量类型\n\n​\t\t变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。\n\nGo语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。\n\n\n\n### 3. 变量声明\n\nGo语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n- 方法一：声明一个变量, 默认的值是 0\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n      // 方法一：声明一个变量, 默认的值是0\n      var a int\n      fmt.Println(\"a = \", a)\n      fmt.Printf(\"a的类型是: %T\\n\", a)\n  }\n  ```\n  \n- 方法二：声明一个变量, 并初始化一个值\n\n  >  Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为`false`。 切片、函数、指针变量的默认为`nil`。\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n      // 方法二：声明一个变量, 初始化一个值\n      var b int = 100\n      fmt.Printf(\"b = %d, type of b = %T\\n\", b, b)\n  \n      var bb string = \"google.com\"\n      fmt.Printf(\"bb = %s, bb的类型是: %T\\n\", bb, bb)\n  }\n  ```\n\n- 方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n  \n      // 方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。\n      var c = 100\n      fmt.Printf(\"c = %d, type of c = %T\\n\", c, c)\n  \n      var cc = \"google.com\"\n      fmt.Printf(\"cc = %s, cc的类型是: %T\\n\", cc, cc)\n  }\n  ```\n  \n- 短声明，只能在函数内\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n  \n      // 方法四：(常用的方法) 省去var关键字，直接自动匹配\n      // 注: 短声明是在函数或方法内部使用, 不支持全局变量声明！！！！\n      e := 100\n      fmt.Printf(\"e = %d, e的类型是: %T\\n\", e, e)\n  \n      f := \"google.com\"\n      fmt.Printf(\"f = %s, f的类型是: %T\\n\", f, f)\n  }\n  ```\n  \n- 多变量声明\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n  \t// 声明多个变量\n      var xx, yy int = 100, 200\n      fmt.Println(\"xx = \", xx, \", yy = \", yy)\n      var kk, jj = 300, \"google.com\"\n      fmt.Println(\"kk = \", kk, \", jj = \", jj)\n  \n      var (\n          nn int = 100\n          mm bool = true\n      )\n      fmt.Println(\"nn = \", nn, \", mm = \", mm)\n  }\n  ```\n","source":"_posts/GoByExample-变量.md","raw":"---\ntitle: GoByExample-变量\ntags:\n  - Go\n  - GoByExamble\ncategories:\n  - Go\ntop: false\ndate: 2022-07-24 18:33:18\n---\n\n# GoByExample-变量\n\n\n\n### 1. 变量的来历\n\n​\t\t程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。\n\n\n\n### 2.  变量类型\n\n​\t\t变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。\n\nGo语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。\n\n\n\n### 3. 变量声明\n\nGo语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n- 方法一：声明一个变量, 默认的值是 0\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n      // 方法一：声明一个变量, 默认的值是0\n      var a int\n      fmt.Println(\"a = \", a)\n      fmt.Printf(\"a的类型是: %T\\n\", a)\n  }\n  ```\n  \n- 方法二：声明一个变量, 并初始化一个值\n\n  >  Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为`false`。 切片、函数、指针变量的默认为`nil`。\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n      // 方法二：声明一个变量, 初始化一个值\n      var b int = 100\n      fmt.Printf(\"b = %d, type of b = %T\\n\", b, b)\n  \n      var bb string = \"google.com\"\n      fmt.Printf(\"bb = %s, bb的类型是: %T\\n\", bb, bb)\n  }\n  ```\n\n- 方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n  \n      // 方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。\n      var c = 100\n      fmt.Printf(\"c = %d, type of c = %T\\n\", c, c)\n  \n      var cc = \"google.com\"\n      fmt.Printf(\"cc = %s, cc的类型是: %T\\n\", cc, cc)\n  }\n  ```\n  \n- 短声明，只能在函数内\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n  \n      // 方法四：(常用的方法) 省去var关键字，直接自动匹配\n      // 注: 短声明是在函数或方法内部使用, 不支持全局变量声明！！！！\n      e := 100\n      fmt.Printf(\"e = %d, e的类型是: %T\\n\", e, e)\n  \n      f := \"google.com\"\n      fmt.Printf(\"f = %s, f的类型是: %T\\n\", f, f)\n  }\n  ```\n  \n- 多变量声明\n\n  ```go\n  package main\n  \n  import \"fmt\"\n  \n  func main(){\n  \t// 声明多个变量\n      var xx, yy int = 100, 200\n      fmt.Println(\"xx = \", xx, \", yy = \", yy)\n      var kk, jj = 300, \"google.com\"\n      fmt.Println(\"kk = \", kk, \", jj = \", jj)\n  \n      var (\n          nn int = 100\n          mm bool = true\n      )\n      fmt.Println(\"nn = \", nn, \", mm = \", mm)\n  }\n  ```\n","slug":"GoByExample-变量","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz38l000312mj19bn2ls2","content":"<h1 id=\"GoByExample-变量\"><a href=\"#GoByExample-变量\" class=\"headerlink\" title=\"GoByExample-变量\"></a>GoByExample-变量</h1><h3 id=\"1-变量的来历\"><a href=\"#1-变量的来历\" class=\"headerlink\" title=\"1. 变量的来历\"></a>1. 变量的来历</h3><p>​        程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。</p>\n<h3 id=\"2-变量类型\"><a href=\"#2-变量类型\" class=\"headerlink\" title=\"2.  变量类型\"></a>2.  变量类型</h3><p>​        变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。</p>\n<p>Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。</p>\n<h3 id=\"3-变量声明\"><a href=\"#3-变量声明\" class=\"headerlink\" title=\"3. 变量声明\"></a>3. 变量声明</h3><p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。</p>\n<ul>\n<li><p>方法一：声明一个变量, 默认的值是 0</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 方法一：声明一个变量, 默认的值是0</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>方法二：声明一个变量, 并初始化一个值</p>\n<blockquote>\n<p> Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为<code>false</code>。 切片、函数、指针变量的默认为<code>nil</code>。</p>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 方法二：声明一个变量, 初始化一个值</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = %d, type of b = %T\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> bb <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"google.com\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bb = %s, bb的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> bb<span class=\"token punctuation\">,</span> bb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c = %d, type of c = %T\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> cc <span class=\"token operator\">=</span> <span class=\"token string\">\"google.com\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc = %s, cc的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>短声明，只能在函数内</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 方法四：(常用的方法) 省去var关键字，直接自动匹配</span>\n    <span class=\"token comment\">// 注: 短声明是在函数或方法内部使用, 不支持全局变量声明！！！！</span>\n    e <span class=\"token operator\">:=</span> <span class=\"token number\">100</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e = %d, e的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n\n    f <span class=\"token operator\">:=</span> <span class=\"token string\">\"google.com\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f = %s, f的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>多变量声明</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 声明多个变量</span>\n    <span class=\"token keyword\">var</span> xx<span class=\"token punctuation\">,</span> yy <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx = \"</span><span class=\"token punctuation\">,</span> xx<span class=\"token punctuation\">,</span> <span class=\"token string\">\", yy = \"</span><span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> kk<span class=\"token punctuation\">,</span> jj <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"google.com\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kk = \"</span><span class=\"token punctuation\">,</span> kk<span class=\"token punctuation\">,</span> <span class=\"token string\">\", jj = \"</span><span class=\"token punctuation\">,</span> jj<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n        nn <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n        mm <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nn = \"</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">,</span> <span class=\"token string\">\", mm = \"</span><span class=\"token punctuation\">,</span> mm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"GoByExample-变量\"><a href=\"#GoByExample-变量\" class=\"headerlink\" title=\"GoByExample-变量\"></a>GoByExample-变量</h1><h3 id=\"1-变量的来历\"><a href=\"#1-变量的来历\" class=\"headerlink\" title=\"1. 变量的来历\"></a>1. 变量的来历</h3><p>​        程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。</p>\n<h3 id=\"2-变量类型\"><a href=\"#2-变量类型\" class=\"headerlink\" title=\"2.  变量类型\"></a>2.  变量类型</h3><p>​        变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。</p>\n<p>Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。</p>\n<h3 id=\"3-变量声明\"><a href=\"#3-变量声明\" class=\"headerlink\" title=\"3. 变量声明\"></a>3. 变量声明</h3><p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。</p>\n<ul>\n<li><p>方法一：声明一个变量, 默认的值是 0</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 方法一：声明一个变量, 默认的值是0</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>方法二：声明一个变量, 并初始化一个值</p>\n<blockquote>\n<p> Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为<code>false</code>。 切片、函数、指针变量的默认为<code>nil</code>。</p>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 方法二：声明一个变量, 初始化一个值</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = %d, type of b = %T\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> bb <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"google.com\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bb = %s, bb的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> bb<span class=\"token punctuation\">,</span> bb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 方法三：有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c = %d, type of c = %T\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> cc <span class=\"token operator\">=</span> <span class=\"token string\">\"google.com\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc = %s, cc的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>短声明，只能在函数内</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 方法四：(常用的方法) 省去var关键字，直接自动匹配</span>\n    <span class=\"token comment\">// 注: 短声明是在函数或方法内部使用, 不支持全局变量声明！！！！</span>\n    e <span class=\"token operator\">:=</span> <span class=\"token number\">100</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e = %d, e的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n\n    f <span class=\"token operator\">:=</span> <span class=\"token string\">\"google.com\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f = %s, f的类型是: %T\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>多变量声明</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 声明多个变量</span>\n    <span class=\"token keyword\">var</span> xx<span class=\"token punctuation\">,</span> yy <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx = \"</span><span class=\"token punctuation\">,</span> xx<span class=\"token punctuation\">,</span> <span class=\"token string\">\", yy = \"</span><span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> kk<span class=\"token punctuation\">,</span> jj <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"google.com\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kk = \"</span><span class=\"token punctuation\">,</span> kk<span class=\"token punctuation\">,</span> <span class=\"token string\">\", jj = \"</span><span class=\"token punctuation\">,</span> jj<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n        nn <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n        mm <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nn = \"</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">,</span> <span class=\"token string\">\", mm = \"</span><span class=\"token punctuation\">,</span> mm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n"},{"title":"Celery 笔记","top":false,"date":"2020-08-10T11:16:05.000Z","_content":"\n# Celery 笔记\n\n## 一、什么是Celery\n\n### 1.1、celery是什么\n\nCelery是一个简单、灵活且可靠的，处理大量消息的分布式系统，专注于实时处理的异步任务队列，同时也支持任务调度。\n\n![celery](https://i.loli.net/2020/08/13/UBcQ6INAKHyZolS.png)\n\nCelery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。\n\n**消息中间件**\n\nCelery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等\n\n**任务执行单元**\n\nWorker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。\n\n**任务结果存储**\n\nTask result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等\n\n另外， Celery还支持不同的并发和序列化的手段\n\n- 并发：Prefork, Eventlet, gevent, threads/single threaded\n- 序列化：pickle, json, yaml, msgpack. zlib, bzip2 compression， Cryptographic message signing 等等\n\n### 1.2、使用场景\n\ncelery是一个强大的 ***分布式任务队列的异步处理框架***，它可以让任务的执行完全脱离主程序，甚至可以被分配到其他主机上运行。我们通常使用它来实现**异步任务**（async task）和**定时任务**（crontab)。\n\n异步任务：将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等\n\n定时任务：定时执行某件事情，比如每天数据统计\n\n### 1.3、Celery具有以下优点\n\n```python\nSimple(简单)\nCelery 使用和维护都非常简单，并且不需要配置文件。\n\nHighly Available（高可用）\nwoker和client会在网络连接丢失或者失败时，自动进行重试。并且有的brokers 也支持“双主”或者“主／从”的方式实现高可用。\n\nFast（快速）\n单个的Celery进程每分钟可以处理百万级的任务，并且只需要毫秒级的往返延迟（使用 RabbitMQ, librabbitmq, 和优化设置时）\n\nFlexible（灵活）\nCelery几乎每个部分都可以扩展使用，自定义池实现、序列化、压缩方案、日志记录、调度器、消费者、生产者、broker传输等等。\n```\n\n## 二、Celery执行异步任务\n\n### 2.1、基本使用\n\n```python\n# 创建异步任务执行文件celery_task:\nimport celery\nimport time\nbackend='redis://127.0.0.1:6379/1'\nbroker='redis://127.0.0.1:6379/2'\ncel=celery.Celery('test',backend=backend,broker=broker)\n@cel.task\ndef send_email(name):\n    print(\"向%s发送邮件...\"%name)\n    time.sleep(5)\n    print(\"向%s发送邮件完成\"%name)\n    return \"ok\"\n\n# 创建执行任务文件,produce_task.py:\nfrom celery_task import send_email\nresult = send_email.delay(\"lei\")\nprint(result.id)\nresult2 = send_email.delay(\"xxml\")\nprint(result2.id)\n\n\n# 查看执行结果\nfrom celery.result import AsyncResult\nfrom celery_task import cel\n\nasync_result=AsyncResult(id=\"08fde85b-f335-4b5c-9cbe-cc7c808d7a9b\", app=cel)\n\nif async_result.successful():\n    result = async_result.get()\n    print(result)\n    # result.forget() # 将结果删除\nelif async_result.failed():\n    print('执行失败')\nelif async_result.status == 'PENDING':\n    print('任务等待中被执行')\nelif async_result.status == 'RETRY':\n    print('任务异常后正在重试')\nelif async_result.status == 'STARTED':\n    print('任务已经开始被执行')\n```\n\n>  异步任务文件命令执行：`celery worker -A celery_app_task -l info`\n\n### 2.2、多任务结构\n\n![多任务目录结构](https://i.loli.net/2020/08/14/hwbyvHMC7IkgmFt.png)\n\n```python\n# celery.py:\nfrom celery import Celery\n\ncel = Celery('celery_demo',\n             broker='redis://127.0.0.1:6379/1',\n             backend='redis://127.0.0.1:6379/2',\n             # 包含以下两个任务文件，去相应的py文件中找任务，对多个任务做分类\n             include=['celery_tasks.task01',\n                      'celery_tasks.task02'\n                      ])\n\n# 时区\ncel.conf.timezone = 'Asia/Shanghai'\n# 是否使用UTC\ncel.conf.enable_utc = False\n\n\n\n#task01\nimport time\nfrom celery_tasks.celery import cel\n\n@cel.task\ndef send_email(res):\n    time.sleep(5)\n    return \"完成向%s发送邮件任务\"%res\n\n\n\n#task02\nimport time\nfrom celery_tasks.celery import cel\n@cel.task\ndef send_msg(name):\n    time.sleep(5)\n    return \"完成向%s发送短信任务\"%name\n\n\n\n# produce_task.py\nfrom celery_tasks.task01 import send_email\nfrom celery_tasks.task02 import send_msg\n\n# 立即告知celery去执行test_celery任务，并传入一个参数\nresult = send_email.delay('yuan')\nprint(result.id)\nresult = send_msg.delay('yuan')\nprint(result.id)\n\n\n\n#　check_result.py\nfrom celery.result import AsyncResult\nfrom celery_tasks.celery import cel\n\nasync_result = AsyncResult(id=\"562834c6-e4be-46d2-908a-b102adbbf390\", app=cel)\n\nif async_result.successful():\n    result = async_result.get()\n    print(result)\n    # result.forget() # 将结果删除,执行完成，结果不会自动删除\n    # async.revoke(terminate=True)  # 无论现在是什么时候，都要终止\n    # async.revoke(terminate=False) # 如果任务还没有开始执行呢，那么就可以终止。\nelif async_result.failed():\n    print('执行失败')\nelif async_result.status == 'PENDING':\n    print('任务等待中被执行')\nelif async_result.status == 'RETRY':\n    print('任务异常后正在重试')\nelif async_result.status == 'STARTED':\n    print('任务已经开始被执行')\n    \n    \n###\n# 开启work：celery worker -A celery_task -l info -P eventlet，添加任务（执行produce_task.py)，检查任务执行结果（执行check_result.py）\n###\n\n```\n\n## 三、Celery执行定时任务\n\n 设定时间让celery执行一个定时任务，produce_task.py:\n\n```python\n\nfrom celery_task import send_email\nfrom datetime import datetime\n\n# 方式一\n# v1 = datetime(2020, 3, 11, 16, 19, 00)\n# print(v1)\n# v2 = datetime.utcfromtimestamp(v1.timestamp())\n# print(v2)\n# result = send_email.apply_async(args=[\"egon\",], eta=v2)\n# print(result.id)\n\n# 方式二\nctime = datetime.now()\n# 默认用utc时间\nutc_ctime = datetime.utcfromtimestamp(ctime.timestamp())\nfrom datetime import timedelta\ntime_delay = timedelta(seconds=10)\ntask_time = utc_ctime + time_delay\n\n# 使用apply_async并设定时间\nresult = send_email.apply_async(args=[\"egon\"], eta=task_time)\nprint(result.id)\n```\n\n多任务结构 修改celery.py：\n\n```python\nfrom datetime import timedelta\nfrom celery import Celery\nfrom celery.schedules import crontab\n\ncel = Celery('tasks', broker='redis://127.0.0.1:6379/1', \t\tbackend='redis://127.0.0.1:6379/2', include=[\n    'celery_tasks.task01',\n    'celery_tasks.task02',\n])\ncel.conf.timezone = 'Asia/Shanghai'\ncel.conf.enable_utc = False\n\ncel.conf.beat_schedule = {\n    # 名字随意命名\n    'add-every-10-seconds': {\n        # 执行tasks1下的test_celery函数\n        'task': 'celery_tasks.task01.send_email',\n        # 每隔2秒执行一次\n        # 'schedule': 1.0,\n        # 'schedule': crontab(minute=\"*/1\"),\n        'schedule': timedelta(seconds=6),\n        # 传递参数\n        'args': ('张三',)\n    },\n    # 'add-every-12-seconds': {\n    #     'task': 'celery_tasks.task01.send_email',\n    #     每年4月11号，8点42分执行\n    #     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),\n    #     'args': ('张三',)\n    # },\n}\n\n'''\n# 启动 Beat 程序$ celery beat -A proj<br># Celery Beat进程会读取配置文件的内容，周期性的将配置中到期需要执行的任务发送给任务队列\n \n# 之后启动 worker 进程.$ celery -A proj worker -l info 或者$ celery -B -A proj worker -l info\n'''\n```\n\n\n\n## 四、Django中使用celery\n\n[django_celery代码笔记](https://github.com/lei025/leetcode/tree/master/djcelery)\n\n[celery笔记](https://github.com/lei025/leetcode/tree/master/Celery)\n\n","source":"_posts/Celery笔记.md","raw":"---\ntitle: Celery 笔记\ntags:\n  - Celery\ncategories:\n  - Celery\ntop: false\ndate: 2020-08-10 19:16:05\n---\n\n# Celery 笔记\n\n## 一、什么是Celery\n\n### 1.1、celery是什么\n\nCelery是一个简单、灵活且可靠的，处理大量消息的分布式系统，专注于实时处理的异步任务队列，同时也支持任务调度。\n\n![celery](https://i.loli.net/2020/08/13/UBcQ6INAKHyZolS.png)\n\nCelery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。\n\n**消息中间件**\n\nCelery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等\n\n**任务执行单元**\n\nWorker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。\n\n**任务结果存储**\n\nTask result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等\n\n另外， Celery还支持不同的并发和序列化的手段\n\n- 并发：Prefork, Eventlet, gevent, threads/single threaded\n- 序列化：pickle, json, yaml, msgpack. zlib, bzip2 compression， Cryptographic message signing 等等\n\n### 1.2、使用场景\n\ncelery是一个强大的 ***分布式任务队列的异步处理框架***，它可以让任务的执行完全脱离主程序，甚至可以被分配到其他主机上运行。我们通常使用它来实现**异步任务**（async task）和**定时任务**（crontab)。\n\n异步任务：将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等\n\n定时任务：定时执行某件事情，比如每天数据统计\n\n### 1.3、Celery具有以下优点\n\n```python\nSimple(简单)\nCelery 使用和维护都非常简单，并且不需要配置文件。\n\nHighly Available（高可用）\nwoker和client会在网络连接丢失或者失败时，自动进行重试。并且有的brokers 也支持“双主”或者“主／从”的方式实现高可用。\n\nFast（快速）\n单个的Celery进程每分钟可以处理百万级的任务，并且只需要毫秒级的往返延迟（使用 RabbitMQ, librabbitmq, 和优化设置时）\n\nFlexible（灵活）\nCelery几乎每个部分都可以扩展使用，自定义池实现、序列化、压缩方案、日志记录、调度器、消费者、生产者、broker传输等等。\n```\n\n## 二、Celery执行异步任务\n\n### 2.1、基本使用\n\n```python\n# 创建异步任务执行文件celery_task:\nimport celery\nimport time\nbackend='redis://127.0.0.1:6379/1'\nbroker='redis://127.0.0.1:6379/2'\ncel=celery.Celery('test',backend=backend,broker=broker)\n@cel.task\ndef send_email(name):\n    print(\"向%s发送邮件...\"%name)\n    time.sleep(5)\n    print(\"向%s发送邮件完成\"%name)\n    return \"ok\"\n\n# 创建执行任务文件,produce_task.py:\nfrom celery_task import send_email\nresult = send_email.delay(\"lei\")\nprint(result.id)\nresult2 = send_email.delay(\"xxml\")\nprint(result2.id)\n\n\n# 查看执行结果\nfrom celery.result import AsyncResult\nfrom celery_task import cel\n\nasync_result=AsyncResult(id=\"08fde85b-f335-4b5c-9cbe-cc7c808d7a9b\", app=cel)\n\nif async_result.successful():\n    result = async_result.get()\n    print(result)\n    # result.forget() # 将结果删除\nelif async_result.failed():\n    print('执行失败')\nelif async_result.status == 'PENDING':\n    print('任务等待中被执行')\nelif async_result.status == 'RETRY':\n    print('任务异常后正在重试')\nelif async_result.status == 'STARTED':\n    print('任务已经开始被执行')\n```\n\n>  异步任务文件命令执行：`celery worker -A celery_app_task -l info`\n\n### 2.2、多任务结构\n\n![多任务目录结构](https://i.loli.net/2020/08/14/hwbyvHMC7IkgmFt.png)\n\n```python\n# celery.py:\nfrom celery import Celery\n\ncel = Celery('celery_demo',\n             broker='redis://127.0.0.1:6379/1',\n             backend='redis://127.0.0.1:6379/2',\n             # 包含以下两个任务文件，去相应的py文件中找任务，对多个任务做分类\n             include=['celery_tasks.task01',\n                      'celery_tasks.task02'\n                      ])\n\n# 时区\ncel.conf.timezone = 'Asia/Shanghai'\n# 是否使用UTC\ncel.conf.enable_utc = False\n\n\n\n#task01\nimport time\nfrom celery_tasks.celery import cel\n\n@cel.task\ndef send_email(res):\n    time.sleep(5)\n    return \"完成向%s发送邮件任务\"%res\n\n\n\n#task02\nimport time\nfrom celery_tasks.celery import cel\n@cel.task\ndef send_msg(name):\n    time.sleep(5)\n    return \"完成向%s发送短信任务\"%name\n\n\n\n# produce_task.py\nfrom celery_tasks.task01 import send_email\nfrom celery_tasks.task02 import send_msg\n\n# 立即告知celery去执行test_celery任务，并传入一个参数\nresult = send_email.delay('yuan')\nprint(result.id)\nresult = send_msg.delay('yuan')\nprint(result.id)\n\n\n\n#　check_result.py\nfrom celery.result import AsyncResult\nfrom celery_tasks.celery import cel\n\nasync_result = AsyncResult(id=\"562834c6-e4be-46d2-908a-b102adbbf390\", app=cel)\n\nif async_result.successful():\n    result = async_result.get()\n    print(result)\n    # result.forget() # 将结果删除,执行完成，结果不会自动删除\n    # async.revoke(terminate=True)  # 无论现在是什么时候，都要终止\n    # async.revoke(terminate=False) # 如果任务还没有开始执行呢，那么就可以终止。\nelif async_result.failed():\n    print('执行失败')\nelif async_result.status == 'PENDING':\n    print('任务等待中被执行')\nelif async_result.status == 'RETRY':\n    print('任务异常后正在重试')\nelif async_result.status == 'STARTED':\n    print('任务已经开始被执行')\n    \n    \n###\n# 开启work：celery worker -A celery_task -l info -P eventlet，添加任务（执行produce_task.py)，检查任务执行结果（执行check_result.py）\n###\n\n```\n\n## 三、Celery执行定时任务\n\n 设定时间让celery执行一个定时任务，produce_task.py:\n\n```python\n\nfrom celery_task import send_email\nfrom datetime import datetime\n\n# 方式一\n# v1 = datetime(2020, 3, 11, 16, 19, 00)\n# print(v1)\n# v2 = datetime.utcfromtimestamp(v1.timestamp())\n# print(v2)\n# result = send_email.apply_async(args=[\"egon\",], eta=v2)\n# print(result.id)\n\n# 方式二\nctime = datetime.now()\n# 默认用utc时间\nutc_ctime = datetime.utcfromtimestamp(ctime.timestamp())\nfrom datetime import timedelta\ntime_delay = timedelta(seconds=10)\ntask_time = utc_ctime + time_delay\n\n# 使用apply_async并设定时间\nresult = send_email.apply_async(args=[\"egon\"], eta=task_time)\nprint(result.id)\n```\n\n多任务结构 修改celery.py：\n\n```python\nfrom datetime import timedelta\nfrom celery import Celery\nfrom celery.schedules import crontab\n\ncel = Celery('tasks', broker='redis://127.0.0.1:6379/1', \t\tbackend='redis://127.0.0.1:6379/2', include=[\n    'celery_tasks.task01',\n    'celery_tasks.task02',\n])\ncel.conf.timezone = 'Asia/Shanghai'\ncel.conf.enable_utc = False\n\ncel.conf.beat_schedule = {\n    # 名字随意命名\n    'add-every-10-seconds': {\n        # 执行tasks1下的test_celery函数\n        'task': 'celery_tasks.task01.send_email',\n        # 每隔2秒执行一次\n        # 'schedule': 1.0,\n        # 'schedule': crontab(minute=\"*/1\"),\n        'schedule': timedelta(seconds=6),\n        # 传递参数\n        'args': ('张三',)\n    },\n    # 'add-every-12-seconds': {\n    #     'task': 'celery_tasks.task01.send_email',\n    #     每年4月11号，8点42分执行\n    #     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),\n    #     'args': ('张三',)\n    # },\n}\n\n'''\n# 启动 Beat 程序$ celery beat -A proj<br># Celery Beat进程会读取配置文件的内容，周期性的将配置中到期需要执行的任务发送给任务队列\n \n# 之后启动 worker 进程.$ celery -A proj worker -l info 或者$ celery -B -A proj worker -l info\n'''\n```\n\n\n\n## 四、Django中使用celery\n\n[django_celery代码笔记](https://github.com/lei025/leetcode/tree/master/djcelery)\n\n[celery笔记](https://github.com/lei025/leetcode/tree/master/Celery)\n\n","slug":"Celery笔记","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz38n000712mj6m0tef8c","content":"<h1 id=\"Celery-笔记\"><a href=\"#Celery-笔记\" class=\"headerlink\" title=\"Celery 笔记\"></a>Celery 笔记</h1><h2 id=\"一、什么是Celery\"><a href=\"#一、什么是Celery\" class=\"headerlink\" title=\"一、什么是Celery\"></a>一、什么是Celery</h2><h3 id=\"1-1、celery是什么\"><a href=\"#1-1、celery是什么\" class=\"headerlink\" title=\"1.1、celery是什么\"></a>1.1、celery是什么</h3><p>Celery是一个简单、灵活且可靠的，处理大量消息的分布式系统，专注于实时处理的异步任务队列，同时也支持任务调度。</p>\n<p><img src=\"https://i.loli.net/2020/08/13/UBcQ6INAKHyZolS.png\" alt=\"celery\"></p>\n<p>Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。</p>\n<p><strong>消息中间件</strong></p>\n<p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p>\n<p><strong>任务执行单元</strong></p>\n<p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p>\n<p><strong>任务结果存储</strong></p>\n<p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p>\n<p>另外， Celery还支持不同的并发和序列化的手段</p>\n<ul>\n<li>并发：Prefork, Eventlet, gevent, threads/single threaded</li>\n<li>序列化：pickle, json, yaml, msgpack. zlib, bzip2 compression， Cryptographic message signing 等等</li>\n</ul>\n<h3 id=\"1-2、使用场景\"><a href=\"#1-2、使用场景\" class=\"headerlink\" title=\"1.2、使用场景\"></a>1.2、使用场景</h3><p>celery是一个强大的 <strong><em>分布式任务队列的异步处理框架</em></strong>，它可以让任务的执行完全脱离主程序，甚至可以被分配到其他主机上运行。我们通常使用它来实现<strong>异步任务</strong>（async task）和<strong>定时任务</strong>（crontab)。</p>\n<p>异步任务：将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p>\n<p>定时任务：定时执行某件事情，比如每天数据统计</p>\n<h3 id=\"1-3、Celery具有以下优点\"><a href=\"#1-3、Celery具有以下优点\" class=\"headerlink\" title=\"1.3、Celery具有以下优点\"></a>1.3、Celery具有以下优点</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Simple<span class=\"token punctuation\">(</span>简单<span class=\"token punctuation\">)</span>\nCelery 使用和维护都非常简单，并且不需要配置文件。\n\nHighly Available（高可用）\nwoker和client会在网络连接丢失或者失败时，自动进行重试。并且有的brokers 也支持“双主”或者“主／从”的方式实现高可用。\n\nFast（快速）\n单个的Celery进程每分钟可以处理百万级的任务，并且只需要毫秒级的往返延迟（使用 RabbitMQ<span class=\"token punctuation\">,</span> librabbitmq<span class=\"token punctuation\">,</span> 和优化设置时）\n\nFlexible（灵活）\nCelery几乎每个部分都可以扩展使用，自定义池实现、序列化、压缩方案、日志记录、调度器、消费者、生产者、broker传输等等。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二、Celery执行异步任务\"><a href=\"#二、Celery执行异步任务\" class=\"headerlink\" title=\"二、Celery执行异步任务\"></a>二、Celery执行异步任务</h2><h3 id=\"2-1、基本使用\"><a href=\"#2-1、基本使用\" class=\"headerlink\" title=\"2.1、基本使用\"></a>2.1、基本使用</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 创建异步任务执行文件celery_task:</span>\n<span class=\"token keyword\">import</span> celery\n<span class=\"token keyword\">import</span> time\nbackend<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/1'</span>\nbroker<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/2'</span>\ncel<span class=\"token operator\">=</span>celery<span class=\"token punctuation\">.</span>Celery<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>backend<span class=\"token operator\">=</span>backend<span class=\"token punctuation\">,</span>broker<span class=\"token operator\">=</span>broker<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@cel<span class=\"token punctuation\">.</span>task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_email</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"向%s发送邮件...\"</span><span class=\"token operator\">%</span>name<span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"向%s发送邮件完成\"</span><span class=\"token operator\">%</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span>\n\n<span class=\"token comment\"># 创建执行任务文件,produce_task.py:</span>\n<span class=\"token keyword\">from</span> celery_task <span class=\"token keyword\">import</span> send_email\nresult <span class=\"token operator\">=</span> send_email<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token string\">\"lei\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\nresult2 <span class=\"token operator\">=</span> send_email<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token string\">\"xxml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 查看执行结果</span>\n<span class=\"token keyword\">from</span> celery<span class=\"token punctuation\">.</span>result <span class=\"token keyword\">import</span> AsyncResult\n<span class=\"token keyword\">from</span> celery_task <span class=\"token keyword\">import</span> cel\n\nasync_result<span class=\"token operator\">=</span>AsyncResult<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"08fde85b-f335-4b5c-9cbe-cc7c808d7a9b\"</span><span class=\"token punctuation\">,</span> app<span class=\"token operator\">=</span>cel<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> async_result<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> async_result<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># result.forget() # 将结果删除</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行失败'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'PENDING'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务等待中被执行'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'RETRY'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务异常后正在重试'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'STARTED'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务已经开始被执行'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p> 异步任务文件命令执行：<code>celery worker -A celery_app_task -l info</code></p>\n</blockquote>\n<h3 id=\"2-2、多任务结构\"><a href=\"#2-2、多任务结构\" class=\"headerlink\" title=\"2.2、多任务结构\"></a>2.2、多任务结构</h3><p><img src=\"https://i.loli.net/2020/08/14/hwbyvHMC7IkgmFt.png\" alt=\"多任务目录结构\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># celery.py:</span>\n<span class=\"token keyword\">from</span> celery <span class=\"token keyword\">import</span> Celery\n\ncel <span class=\"token operator\">=</span> Celery<span class=\"token punctuation\">(</span><span class=\"token string\">'celery_demo'</span><span class=\"token punctuation\">,</span>\n             broker<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/1'</span><span class=\"token punctuation\">,</span>\n             backend<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/2'</span><span class=\"token punctuation\">,</span>\n             <span class=\"token comment\"># 包含以下两个任务文件，去相应的py文件中找任务，对多个任务做分类</span>\n             include<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'celery_tasks.task01'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">'celery_tasks.task02'</span>\n                      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 时区</span>\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>timezone <span class=\"token operator\">=</span> <span class=\"token string\">'Asia/Shanghai'</span>\n<span class=\"token comment\"># 是否使用UTC</span>\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>enable_utc <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n\n\n<span class=\"token comment\">#task01</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>celery <span class=\"token keyword\">import</span> cel\n\n<span class=\"token decorator annotation punctuation\">@cel<span class=\"token punctuation\">.</span>task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_email</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"完成向%s发送邮件任务\"</span><span class=\"token operator\">%</span>res\n\n\n\n<span class=\"token comment\">#task02</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>celery <span class=\"token keyword\">import</span> cel\n<span class=\"token decorator annotation punctuation\">@cel<span class=\"token punctuation\">.</span>task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_msg</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"完成向%s发送短信任务\"</span><span class=\"token operator\">%</span>name\n\n\n\n<span class=\"token comment\"># produce_task.py</span>\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>task01 <span class=\"token keyword\">import</span> send_email\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>task02 <span class=\"token keyword\">import</span> send_msg\n\n<span class=\"token comment\"># 立即告知celery去执行test_celery任务，并传入一个参数</span>\nresult <span class=\"token operator\">=</span> send_email<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token string\">'yuan'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> send_msg<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token string\">'yuan'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token comment\">#　check_result.py</span>\n<span class=\"token keyword\">from</span> celery<span class=\"token punctuation\">.</span>result <span class=\"token keyword\">import</span> AsyncResult\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>celery <span class=\"token keyword\">import</span> cel\n\nasync_result <span class=\"token operator\">=</span> AsyncResult<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"562834c6-e4be-46d2-908a-b102adbbf390\"</span><span class=\"token punctuation\">,</span> app<span class=\"token operator\">=</span>cel<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> async_result<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> async_result<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># result.forget() # 将结果删除,执行完成，结果不会自动删除</span>\n    <span class=\"token comment\"># async.revoke(terminate=True)  # 无论现在是什么时候，都要终止</span>\n    <span class=\"token comment\"># async.revoke(terminate=False) # 如果任务还没有开始执行呢，那么就可以终止。</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行失败'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'PENDING'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务等待中被执行'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'RETRY'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务异常后正在重试'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'STARTED'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务已经开始被执行'</span><span class=\"token punctuation\">)</span>\n    \n    \n<span class=\"token comment\">###</span>\n<span class=\"token comment\"># 开启work：celery worker -A celery_task -l info -P eventlet，添加任务（执行produce_task.py)，检查任务执行结果（执行check_result.py）</span>\n<span class=\"token comment\">###</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、Celery执行定时任务\"><a href=\"#三、Celery执行定时任务\" class=\"headerlink\" title=\"三、Celery执行定时任务\"></a>三、Celery执行定时任务</h2><p> 设定时间让celery执行一个定时任务，produce_task.py:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> celery_task <span class=\"token keyword\">import</span> send_email\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token comment\"># 方式一</span>\n<span class=\"token comment\"># v1 = datetime(2020, 3, 11, 16, 19, 00)</span>\n<span class=\"token comment\"># print(v1)</span>\n<span class=\"token comment\"># v2 = datetime.utcfromtimestamp(v1.timestamp())</span>\n<span class=\"token comment\"># print(v2)</span>\n<span class=\"token comment\"># result = send_email.apply_async(args=[\"egon\",], eta=v2)</span>\n<span class=\"token comment\"># print(result.id)</span>\n\n<span class=\"token comment\"># 方式二</span>\nctime <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 默认用utc时间</span>\nutc_ctime <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcfromtimestamp<span class=\"token punctuation\">(</span>ctime<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> timedelta\ntime_delay <span class=\"token operator\">=</span> timedelta<span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\ntask_time <span class=\"token operator\">=</span> utc_ctime <span class=\"token operator\">+</span> time_delay\n\n<span class=\"token comment\"># 使用apply_async并设定时间</span>\nresult <span class=\"token operator\">=</span> send_email<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>args<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"egon\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span>task_time<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>多任务结构 修改celery.py：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> timedelta\n<span class=\"token keyword\">from</span> celery <span class=\"token keyword\">import</span> Celery\n<span class=\"token keyword\">from</span> celery<span class=\"token punctuation\">.</span>schedules <span class=\"token keyword\">import</span> crontab\n\ncel <span class=\"token operator\">=</span> Celery<span class=\"token punctuation\">(</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">,</span> broker<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/1'</span><span class=\"token punctuation\">,</span> \t\tbackend<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/2'</span><span class=\"token punctuation\">,</span> include<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'celery_tasks.task01'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'celery_tasks.task02'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>timezone <span class=\"token operator\">=</span> <span class=\"token string\">'Asia/Shanghai'</span>\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>enable_utc <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>beat_schedule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># 名字随意命名</span>\n    <span class=\"token string\">'add-every-10-seconds'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\"># 执行tasks1下的test_celery函数</span>\n        <span class=\"token string\">'task'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'celery_tasks.task01.send_email'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># 每隔2秒执行一次</span>\n        <span class=\"token comment\"># 'schedule': 1.0,</span>\n        <span class=\"token comment\"># 'schedule': crontab(minute=\"*/1\"),</span>\n        <span class=\"token string\">'schedule'</span><span class=\"token punctuation\">:</span> timedelta<span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># 传递参数</span>\n        <span class=\"token string\">'args'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 'add-every-12-seconds': {</span>\n    <span class=\"token comment\">#     'task': 'celery_tasks.task01.send_email',</span>\n    <span class=\"token comment\">#     每年4月11号，8点42分执行</span>\n    <span class=\"token comment\">#     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),</span>\n    <span class=\"token comment\">#     'args': ('张三',)</span>\n    <span class=\"token comment\"># },</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token triple-quoted-string string\">'''\n# 启动 Beat 程序$ celery beat -A proj&lt;br&gt;# Celery Beat进程会读取配置文件的内容，周期性的将配置中到期需要执行的任务发送给任务队列\n \n# 之后启动 worker 进程.$ celery -A proj worker -l info 或者$ celery -B -A proj worker -l info\n'''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"四、Django中使用celery\"><a href=\"#四、Django中使用celery\" class=\"headerlink\" title=\"四、Django中使用celery\"></a>四、Django中使用celery</h2><p><a href=\"https://github.com/lei025/leetcode/tree/master/djcelery\">django_celery代码笔记</a></p>\n<p><a href=\"https://github.com/lei025/leetcode/tree/master/Celery\">celery笔记</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Celery-笔记\"><a href=\"#Celery-笔记\" class=\"headerlink\" title=\"Celery 笔记\"></a>Celery 笔记</h1><h2 id=\"一、什么是Celery\"><a href=\"#一、什么是Celery\" class=\"headerlink\" title=\"一、什么是Celery\"></a>一、什么是Celery</h2><h3 id=\"1-1、celery是什么\"><a href=\"#1-1、celery是什么\" class=\"headerlink\" title=\"1.1、celery是什么\"></a>1.1、celery是什么</h3><p>Celery是一个简单、灵活且可靠的，处理大量消息的分布式系统，专注于实时处理的异步任务队列，同时也支持任务调度。</p>\n<p><img src=\"https://i.loli.net/2020/08/13/UBcQ6INAKHyZolS.png\" alt=\"celery\"></p>\n<p>Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。</p>\n<p><strong>消息中间件</strong></p>\n<p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p>\n<p><strong>任务执行单元</strong></p>\n<p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p>\n<p><strong>任务结果存储</strong></p>\n<p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p>\n<p>另外， Celery还支持不同的并发和序列化的手段</p>\n<ul>\n<li>并发：Prefork, Eventlet, gevent, threads/single threaded</li>\n<li>序列化：pickle, json, yaml, msgpack. zlib, bzip2 compression， Cryptographic message signing 等等</li>\n</ul>\n<h3 id=\"1-2、使用场景\"><a href=\"#1-2、使用场景\" class=\"headerlink\" title=\"1.2、使用场景\"></a>1.2、使用场景</h3><p>celery是一个强大的 <strong><em>分布式任务队列的异步处理框架</em></strong>，它可以让任务的执行完全脱离主程序，甚至可以被分配到其他主机上运行。我们通常使用它来实现<strong>异步任务</strong>（async task）和<strong>定时任务</strong>（crontab)。</p>\n<p>异步任务：将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p>\n<p>定时任务：定时执行某件事情，比如每天数据统计</p>\n<h3 id=\"1-3、Celery具有以下优点\"><a href=\"#1-3、Celery具有以下优点\" class=\"headerlink\" title=\"1.3、Celery具有以下优点\"></a>1.3、Celery具有以下优点</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Simple<span class=\"token punctuation\">(</span>简单<span class=\"token punctuation\">)</span>\nCelery 使用和维护都非常简单，并且不需要配置文件。\n\nHighly Available（高可用）\nwoker和client会在网络连接丢失或者失败时，自动进行重试。并且有的brokers 也支持“双主”或者“主／从”的方式实现高可用。\n\nFast（快速）\n单个的Celery进程每分钟可以处理百万级的任务，并且只需要毫秒级的往返延迟（使用 RabbitMQ<span class=\"token punctuation\">,</span> librabbitmq<span class=\"token punctuation\">,</span> 和优化设置时）\n\nFlexible（灵活）\nCelery几乎每个部分都可以扩展使用，自定义池实现、序列化、压缩方案、日志记录、调度器、消费者、生产者、broker传输等等。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二、Celery执行异步任务\"><a href=\"#二、Celery执行异步任务\" class=\"headerlink\" title=\"二、Celery执行异步任务\"></a>二、Celery执行异步任务</h2><h3 id=\"2-1、基本使用\"><a href=\"#2-1、基本使用\" class=\"headerlink\" title=\"2.1、基本使用\"></a>2.1、基本使用</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 创建异步任务执行文件celery_task:</span>\n<span class=\"token keyword\">import</span> celery\n<span class=\"token keyword\">import</span> time\nbackend<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/1'</span>\nbroker<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/2'</span>\ncel<span class=\"token operator\">=</span>celery<span class=\"token punctuation\">.</span>Celery<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>backend<span class=\"token operator\">=</span>backend<span class=\"token punctuation\">,</span>broker<span class=\"token operator\">=</span>broker<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@cel<span class=\"token punctuation\">.</span>task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_email</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"向%s发送邮件...\"</span><span class=\"token operator\">%</span>name<span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"向%s发送邮件完成\"</span><span class=\"token operator\">%</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span>\n\n<span class=\"token comment\"># 创建执行任务文件,produce_task.py:</span>\n<span class=\"token keyword\">from</span> celery_task <span class=\"token keyword\">import</span> send_email\nresult <span class=\"token operator\">=</span> send_email<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token string\">\"lei\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\nresult2 <span class=\"token operator\">=</span> send_email<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token string\">\"xxml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 查看执行结果</span>\n<span class=\"token keyword\">from</span> celery<span class=\"token punctuation\">.</span>result <span class=\"token keyword\">import</span> AsyncResult\n<span class=\"token keyword\">from</span> celery_task <span class=\"token keyword\">import</span> cel\n\nasync_result<span class=\"token operator\">=</span>AsyncResult<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"08fde85b-f335-4b5c-9cbe-cc7c808d7a9b\"</span><span class=\"token punctuation\">,</span> app<span class=\"token operator\">=</span>cel<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> async_result<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> async_result<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># result.forget() # 将结果删除</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行失败'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'PENDING'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务等待中被执行'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'RETRY'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务异常后正在重试'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'STARTED'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务已经开始被执行'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p> 异步任务文件命令执行：<code>celery worker -A celery_app_task -l info</code></p>\n</blockquote>\n<h3 id=\"2-2、多任务结构\"><a href=\"#2-2、多任务结构\" class=\"headerlink\" title=\"2.2、多任务结构\"></a>2.2、多任务结构</h3><p><img src=\"https://i.loli.net/2020/08/14/hwbyvHMC7IkgmFt.png\" alt=\"多任务目录结构\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># celery.py:</span>\n<span class=\"token keyword\">from</span> celery <span class=\"token keyword\">import</span> Celery\n\ncel <span class=\"token operator\">=</span> Celery<span class=\"token punctuation\">(</span><span class=\"token string\">'celery_demo'</span><span class=\"token punctuation\">,</span>\n             broker<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/1'</span><span class=\"token punctuation\">,</span>\n             backend<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/2'</span><span class=\"token punctuation\">,</span>\n             <span class=\"token comment\"># 包含以下两个任务文件，去相应的py文件中找任务，对多个任务做分类</span>\n             include<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'celery_tasks.task01'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">'celery_tasks.task02'</span>\n                      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 时区</span>\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>timezone <span class=\"token operator\">=</span> <span class=\"token string\">'Asia/Shanghai'</span>\n<span class=\"token comment\"># 是否使用UTC</span>\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>enable_utc <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n\n\n<span class=\"token comment\">#task01</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>celery <span class=\"token keyword\">import</span> cel\n\n<span class=\"token decorator annotation punctuation\">@cel<span class=\"token punctuation\">.</span>task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_email</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"完成向%s发送邮件任务\"</span><span class=\"token operator\">%</span>res\n\n\n\n<span class=\"token comment\">#task02</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>celery <span class=\"token keyword\">import</span> cel\n<span class=\"token decorator annotation punctuation\">@cel<span class=\"token punctuation\">.</span>task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_msg</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"完成向%s发送短信任务\"</span><span class=\"token operator\">%</span>name\n\n\n\n<span class=\"token comment\"># produce_task.py</span>\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>task01 <span class=\"token keyword\">import</span> send_email\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>task02 <span class=\"token keyword\">import</span> send_msg\n\n<span class=\"token comment\"># 立即告知celery去执行test_celery任务，并传入一个参数</span>\nresult <span class=\"token operator\">=</span> send_email<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token string\">'yuan'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> send_msg<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token string\">'yuan'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token comment\">#　check_result.py</span>\n<span class=\"token keyword\">from</span> celery<span class=\"token punctuation\">.</span>result <span class=\"token keyword\">import</span> AsyncResult\n<span class=\"token keyword\">from</span> celery_tasks<span class=\"token punctuation\">.</span>celery <span class=\"token keyword\">import</span> cel\n\nasync_result <span class=\"token operator\">=</span> AsyncResult<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"562834c6-e4be-46d2-908a-b102adbbf390\"</span><span class=\"token punctuation\">,</span> app<span class=\"token operator\">=</span>cel<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> async_result<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> async_result<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># result.forget() # 将结果删除,执行完成，结果不会自动删除</span>\n    <span class=\"token comment\"># async.revoke(terminate=True)  # 无论现在是什么时候，都要终止</span>\n    <span class=\"token comment\"># async.revoke(terminate=False) # 如果任务还没有开始执行呢，那么就可以终止。</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行失败'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'PENDING'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务等待中被执行'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'RETRY'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务异常后正在重试'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> async_result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'STARTED'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'任务已经开始被执行'</span><span class=\"token punctuation\">)</span>\n    \n    \n<span class=\"token comment\">###</span>\n<span class=\"token comment\"># 开启work：celery worker -A celery_task -l info -P eventlet，添加任务（执行produce_task.py)，检查任务执行结果（执行check_result.py）</span>\n<span class=\"token comment\">###</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、Celery执行定时任务\"><a href=\"#三、Celery执行定时任务\" class=\"headerlink\" title=\"三、Celery执行定时任务\"></a>三、Celery执行定时任务</h2><p> 设定时间让celery执行一个定时任务，produce_task.py:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> celery_task <span class=\"token keyword\">import</span> send_email\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token comment\"># 方式一</span>\n<span class=\"token comment\"># v1 = datetime(2020, 3, 11, 16, 19, 00)</span>\n<span class=\"token comment\"># print(v1)</span>\n<span class=\"token comment\"># v2 = datetime.utcfromtimestamp(v1.timestamp())</span>\n<span class=\"token comment\"># print(v2)</span>\n<span class=\"token comment\"># result = send_email.apply_async(args=[\"egon\",], eta=v2)</span>\n<span class=\"token comment\"># print(result.id)</span>\n\n<span class=\"token comment\"># 方式二</span>\nctime <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 默认用utc时间</span>\nutc_ctime <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcfromtimestamp<span class=\"token punctuation\">(</span>ctime<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> timedelta\ntime_delay <span class=\"token operator\">=</span> timedelta<span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\ntask_time <span class=\"token operator\">=</span> utc_ctime <span class=\"token operator\">+</span> time_delay\n\n<span class=\"token comment\"># 使用apply_async并设定时间</span>\nresult <span class=\"token operator\">=</span> send_email<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>args<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"egon\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span>task_time<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>多任务结构 修改celery.py：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> timedelta\n<span class=\"token keyword\">from</span> celery <span class=\"token keyword\">import</span> Celery\n<span class=\"token keyword\">from</span> celery<span class=\"token punctuation\">.</span>schedules <span class=\"token keyword\">import</span> crontab\n\ncel <span class=\"token operator\">=</span> Celery<span class=\"token punctuation\">(</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">,</span> broker<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/1'</span><span class=\"token punctuation\">,</span> \t\tbackend<span class=\"token operator\">=</span><span class=\"token string\">'redis://127.0.0.1:6379/2'</span><span class=\"token punctuation\">,</span> include<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'celery_tasks.task01'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'celery_tasks.task02'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>timezone <span class=\"token operator\">=</span> <span class=\"token string\">'Asia/Shanghai'</span>\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>enable_utc <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\ncel<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>beat_schedule <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># 名字随意命名</span>\n    <span class=\"token string\">'add-every-10-seconds'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># 执行tasks1下的test_celery函数</span>\n        <span class=\"token string\">'task'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'celery_tasks.task01.send_email'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># 每隔2秒执行一次</span>\n        <span class=\"token comment\"># 'schedule': 1.0,</span>\n        <span class=\"token comment\"># 'schedule': crontab(minute=\"*/1\"),</span>\n        <span class=\"token string\">'schedule'</span><span class=\"token punctuation\">:</span> timedelta<span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># 传递参数</span>\n        <span class=\"token string\">'args'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 'add-every-12-seconds': &#123;</span>\n    <span class=\"token comment\">#     'task': 'celery_tasks.task01.send_email',</span>\n    <span class=\"token comment\">#     每年4月11号，8点42分执行</span>\n    <span class=\"token comment\">#     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),</span>\n    <span class=\"token comment\">#     'args': ('张三',)</span>\n    <span class=\"token comment\"># &#125;,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token triple-quoted-string string\">'''\n# 启动 Beat 程序$ celery beat -A proj&lt;br># Celery Beat进程会读取配置文件的内容，周期性的将配置中到期需要执行的任务发送给任务队列\n \n# 之后启动 worker 进程.$ celery -A proj worker -l info 或者$ celery -B -A proj worker -l info\n'''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"四、Django中使用celery\"><a href=\"#四、Django中使用celery\" class=\"headerlink\" title=\"四、Django中使用celery\"></a>四、Django中使用celery</h2><p><a href=\"https://github.com/lei025/leetcode/tree/master/djcelery\">django_celery代码笔记</a></p>\n<p><a href=\"https://github.com/lei025/leetcode/tree/master/Celery\">celery笔记</a></p>\n"},{"title":"Git 同时上传项目至github和gitee","top":false,"date":"2020-04-27T14:36:19.000Z","_content":"\n# Git 同时上传项目至github和gitee\n\n## 1. 删除本地项目git默认远程库名称\n\n```shell\n//git默认远程库名称为origin\n git remote rm origin\n```\n\n## 2. 自定义关联github和gitee并设置名称\n\n```shell\n//关联github并设置别名为github\n$ git remote add github git@github.com:lei025/tcb-hackthon-secondHand.git\n\n//关联gitee并设置别名为gitee\n$ git remote add gitee git@gitee.com:leidb/tcb-hackthon-secondHand.git\n\n```\n\n## 3. 推送到远程仓库\n\n* 推送到github\n\n  `git push github master`\n\n* 推送到gitee\n\n  `git push gitee master`\n\n\n\n由此，本地库就可以同时与多个远程库相互同步代码了。\n\n\n\n[Git使用方法（精心整理，绝对够用）](https://blog.csdn.net/xukai0110/article/details/80637902)","source":"_posts/Git-同时上传项目至github和gitee.md","raw":"---\ntitle: Git 同时上传项目至github和gitee\ntags:\n  - Git\ncategories:\n  - Git\ntop: false\ndate: 2020-04-27 22:36:19\n---\n\n# Git 同时上传项目至github和gitee\n\n## 1. 删除本地项目git默认远程库名称\n\n```shell\n//git默认远程库名称为origin\n git remote rm origin\n```\n\n## 2. 自定义关联github和gitee并设置名称\n\n```shell\n//关联github并设置别名为github\n$ git remote add github git@github.com:lei025/tcb-hackthon-secondHand.git\n\n//关联gitee并设置别名为gitee\n$ git remote add gitee git@gitee.com:leidb/tcb-hackthon-secondHand.git\n\n```\n\n## 3. 推送到远程仓库\n\n* 推送到github\n\n  `git push github master`\n\n* 推送到gitee\n\n  `git push gitee master`\n\n\n\n由此，本地库就可以同时与多个远程库相互同步代码了。\n\n\n\n[Git使用方法（精心整理，绝对够用）](https://blog.csdn.net/xukai0110/article/details/80637902)","slug":"Git-同时上传项目至github和gitee","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz38n000912mjfd2kgnc2","content":"<h1 id=\"Git-同时上传项目至github和gitee\"><a href=\"#Git-同时上传项目至github和gitee\" class=\"headerlink\" title=\"Git 同时上传项目至github和gitee\"></a>Git 同时上传项目至github和gitee</h1><h2 id=\"1-删除本地项目git默认远程库名称\"><a href=\"#1-删除本地项目git默认远程库名称\" class=\"headerlink\" title=\"1. 删除本地项目git默认远程库名称\"></a>1. 删除本地项目git默认远程库名称</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">//git默认远程库名称为origin\n git remote rm origin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-自定义关联github和gitee并设置名称\"><a href=\"#2-自定义关联github和gitee并设置名称\" class=\"headerlink\" title=\"2. 自定义关联github和gitee并设置名称\"></a>2. 自定义关联github和gitee并设置名称</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">//关联github并设置别名为github\n$ git remote add github git@github.com:lei025/tcb-hackthon-secondHand.git\n\n//关联gitee并设置别名为gitee\n$ git remote add gitee git@gitee.com:leidb/tcb-hackthon-secondHand.git\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-推送到远程仓库\"><a href=\"#3-推送到远程仓库\" class=\"headerlink\" title=\"3. 推送到远程仓库\"></a>3. 推送到远程仓库</h2><ul>\n<li><p>推送到github</p>\n<p><code>git push github master</code></p>\n</li>\n<li><p>推送到gitee</p>\n<p><code>git push gitee master</code></p>\n</li>\n</ul>\n<p>由此，本地库就可以同时与多个远程库相互同步代码了。</p>\n<p><a href=\"https://blog.csdn.net/xukai0110/article/details/80637902\">Git使用方法（精心整理，绝对够用）</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Git-同时上传项目至github和gitee\"><a href=\"#Git-同时上传项目至github和gitee\" class=\"headerlink\" title=\"Git 同时上传项目至github和gitee\"></a>Git 同时上传项目至github和gitee</h1><h2 id=\"1-删除本地项目git默认远程库名称\"><a href=\"#1-删除本地项目git默认远程库名称\" class=\"headerlink\" title=\"1. 删除本地项目git默认远程库名称\"></a>1. 删除本地项目git默认远程库名称</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&#x2F;&#x2F;git默认远程库名称为origin\n git remote rm origin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-自定义关联github和gitee并设置名称\"><a href=\"#2-自定义关联github和gitee并设置名称\" class=\"headerlink\" title=\"2. 自定义关联github和gitee并设置名称\"></a>2. 自定义关联github和gitee并设置名称</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&#x2F;&#x2F;关联github并设置别名为github\n$ git remote add github git@github.com:lei025&#x2F;tcb-hackthon-secondHand.git\n\n&#x2F;&#x2F;关联gitee并设置别名为gitee\n$ git remote add gitee git@gitee.com:leidb&#x2F;tcb-hackthon-secondHand.git\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-推送到远程仓库\"><a href=\"#3-推送到远程仓库\" class=\"headerlink\" title=\"3. 推送到远程仓库\"></a>3. 推送到远程仓库</h2><ul>\n<li><p>推送到github</p>\n<p><code>git push github master</code></p>\n</li>\n<li><p>推送到gitee</p>\n<p><code>git push gitee master</code></p>\n</li>\n</ul>\n<p>由此，本地库就可以同时与多个远程库相互同步代码了。</p>\n<p><a href=\"https://blog.csdn.net/xukai0110/article/details/80637902\">Git使用方法（精心整理，绝对够用）</a></p>\n"},{"title":"Kubernetets核心对象和控制器模式","top":false,"cover":false,"toc":false,"mathjax":true,"date":"2022-09-06T07:09:23.000Z","password":null,"summary":"如何定义一个Kubernetets对象？如何创建一个Kubernetets对象？","_content":"\n# Kubernetets核心对象和控制器模式\n\n","source":"_posts/Kubernetets核心对象和控制器模式.md","raw":"---\ntitle: Kubernetets核心对象和控制器模式\ntop: false\ncover: false\ntoc: false\nmathjax: true\ndate: 2022-09-6 15:09:23\npassword:\nsummary: 如何定义一个Kubernetets对象？如何创建一个Kubernetets对象？\ntags:\n- 容器\n- Docker\n- K8s\n- Kubernetets\ncategories:\n- Docker\n- Kubernetets\n---\n\n# Kubernetets核心对象和控制器模式\n\n","slug":"Kubernetets核心对象和控制器模式","published":1,"updated":"2022-09-18T03:49:49.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz38o000b12mj20gm3usy","content":"<h1 id=\"Kubernetets核心对象和控制器模式\"><a href=\"#Kubernetets核心对象和控制器模式\" class=\"headerlink\" title=\"Kubernetets核心对象和控制器模式\"></a>Kubernetets核心对象和控制器模式</h1>","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Kubernetets核心对象和控制器模式\"><a href=\"#Kubernetets核心对象和控制器模式\" class=\"headerlink\" title=\"Kubernetets核心对象和控制器模式\"></a>Kubernetets核心对象和控制器模式</h1>"},{"title":"Linux crontab命令","top":false,"date":"2020-05-19T11:16:05.000Z","_content":"\n# Linux crontab 命令\n\nLinux crontab是用来定期执行程序的命令。\n\n当安装完成操作系统之后，默认便会启动此任务调度命令。\n\ncrond 命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。\n\n**注意：**新创建的 cron 任务，不会马上执行，至少要过 2 分钟后才可以，当然你可以重启 cron 来马上执行。\n\n而 linux 任务调度的工作主要分为以下两类：\n\n- 1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存\n- 2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置\n\n### 语法\n\n```shell\ncrontab [ -u user ] file\n```\n\n或\n\n```shell\ncrontab [ -u user ] { -l | -r | -e }\n```\n\n**说明：**\n\ncrontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。\n\n-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。\n\n#### **参数说明**：\n\n- -e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)\n\n- -r : 删除目前的时程表\n\n- -l : 列出目前的时程表\n\n时间格式如下：\n\n```\nf1 f2 f3 f4 f5 program\n```\n\n- 其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。\n- 当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推\n- 当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推\n- 当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推\n- 当 f1 为 a, b, c,... 时表示第 a, b, c,... 分钟要执行，f2 为 a, b, c,... 时表示第 a, b, c...个小时要执行，其馀类推\n\n>  使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定执行时间。\n\n### 实例\n\n每月每天每小时的第 0 分钟执行一次 /bin/ls\n\n```\n0 * * * * /bin/ls\n```\n\n在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup\n\n```\n0 6-12/3 * 12 * /usr/bin/backup\n```\n\n周一到周五每天下午 5:00 寄一封信给 alex@domain.name\n\n```\n0 17 * * 1-5 mail -s \"hi\" alex@domain.name < /tmp/maildata\n```\n\n每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分....执行 echo \"haha\"\n\n```\n20 0-23/2 * * * echo \"haha\"\n```\n\n下面再看看几个具体的例子：\n\n```shell\n0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache \n\n50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 \n\n50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 \n\n0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 \n\n1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 \n\n00 03 * * 1-5 find /home \"*.xxx\" -mtime +4 -exec rm {} \\;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。\n\n30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令\n```","source":"_posts/Linux-crontab命令.md","raw":"---\ntitle: Linux crontab命令\ntags:\n  - Linux\ncategories:\n  - Linux\ntop: false\ndate: 2020-05-19 19:16:05\n---\n\n# Linux crontab 命令\n\nLinux crontab是用来定期执行程序的命令。\n\n当安装完成操作系统之后，默认便会启动此任务调度命令。\n\ncrond 命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。\n\n**注意：**新创建的 cron 任务，不会马上执行，至少要过 2 分钟后才可以，当然你可以重启 cron 来马上执行。\n\n而 linux 任务调度的工作主要分为以下两类：\n\n- 1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存\n- 2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置\n\n### 语法\n\n```shell\ncrontab [ -u user ] file\n```\n\n或\n\n```shell\ncrontab [ -u user ] { -l | -r | -e }\n```\n\n**说明：**\n\ncrontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。\n\n-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。\n\n#### **参数说明**：\n\n- -e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)\n\n- -r : 删除目前的时程表\n\n- -l : 列出目前的时程表\n\n时间格式如下：\n\n```\nf1 f2 f3 f4 f5 program\n```\n\n- 其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。\n- 当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推\n- 当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推\n- 当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推\n- 当 f1 为 a, b, c,... 时表示第 a, b, c,... 分钟要执行，f2 为 a, b, c,... 时表示第 a, b, c...个小时要执行，其馀类推\n\n>  使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定执行时间。\n\n### 实例\n\n每月每天每小时的第 0 分钟执行一次 /bin/ls\n\n```\n0 * * * * /bin/ls\n```\n\n在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup\n\n```\n0 6-12/3 * 12 * /usr/bin/backup\n```\n\n周一到周五每天下午 5:00 寄一封信给 alex@domain.name\n\n```\n0 17 * * 1-5 mail -s \"hi\" alex@domain.name < /tmp/maildata\n```\n\n每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分....执行 echo \"haha\"\n\n```\n20 0-23/2 * * * echo \"haha\"\n```\n\n下面再看看几个具体的例子：\n\n```shell\n0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache \n\n50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 \n\n50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 \n\n0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 \n\n1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 \n\n00 03 * * 1-5 find /home \"*.xxx\" -mtime +4 -exec rm {} \\;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。\n\n30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令\n```","slug":"Linux-crontab命令","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz38o000g12mj5tw44dcv","content":"<h1 id=\"Linux-crontab-命令\"><a href=\"#Linux-crontab-命令\" class=\"headerlink\" title=\"Linux crontab 命令\"></a>Linux crontab 命令</h1><p>Linux crontab是用来定期执行程序的命令。</p>\n<p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p>\n<p>crond 命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p>\n<p><strong>注意：</strong>新创建的 cron 任务，不会马上执行，至少要过 2 分钟后才可以，当然你可以重启 cron 来马上执行。</p>\n<p>而 linux 任务调度的工作主要分为以下两类：</p>\n<ul>\n<li>1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li>\n<li>2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">crontab [ -u user ] file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">crontab [ -u user ] { -l | -r | -e }<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>说明：</strong></p>\n<p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p>\n<p>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。</p>\n<h4 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a><strong>参数说明</strong>：</h4><ul>\n<li><p>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</p>\n</li>\n<li><p>-r : 删除目前的时程表</p>\n</li>\n<li><p>-l : 列出目前的时程表</p>\n</li>\n</ul>\n<p>时间格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">f1 f2 f3 f4 f5 program<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li>\n<li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li>\n<li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li>\n<li>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</li>\n<li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推</li>\n</ul>\n<blockquote>\n<p> 使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定执行时间。</p>\n</blockquote>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>每月每天每小时的第 0 分钟执行一次 /bin/ls</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 * * * * /bin/ls<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 6-12/3 * 12 * /usr/bin/backup<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>周一到周五每天下午 5:00 寄一封信给 <a href=\"mailto:alex@domain.name\">alex@domain.name</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 17 * * 1-5 mail -s \"hi\" alex@domain.name &lt; /tmp/maildata<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">20 0-23/2 * * * echo \"haha\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面再看看几个具体的例子：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache \n\n50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 \n\n50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 \n\n0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 \n\n1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 \n\n00 03 * * 1-5 find /home \"*.xxx\" -mtime +4 -exec rm {} \\;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。\n\n30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Linux-crontab-命令\"><a href=\"#Linux-crontab-命令\" class=\"headerlink\" title=\"Linux crontab 命令\"></a>Linux crontab 命令</h1><p>Linux crontab是用来定期执行程序的命令。</p>\n<p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p>\n<p>crond 命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p>\n<p><strong>注意：</strong>新创建的 cron 任务，不会马上执行，至少要过 2 分钟后才可以，当然你可以重启 cron 来马上执行。</p>\n<p>而 linux 任务调度的工作主要分为以下两类：</p>\n<ul>\n<li>1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li>\n<li>2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">crontab [ -u user ] file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">crontab [ -u user ] &#123; -l | -r | -e &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>说明：</strong></p>\n<p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p>\n<p>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。</p>\n<h4 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a><strong>参数说明</strong>：</h4><ul>\n<li><p>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</p>\n</li>\n<li><p>-r : 删除目前的时程表</p>\n</li>\n<li><p>-l : 列出目前的时程表</p>\n</li>\n</ul>\n<p>时间格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">f1 f2 f3 f4 f5 program<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li>\n<li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li>\n<li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li>\n<li>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</li>\n<li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推</li>\n</ul>\n<blockquote>\n<p> 使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定执行时间。</p>\n</blockquote>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>每月每天每小时的第 0 分钟执行一次 /bin/ls</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 * * * * &#x2F;bin&#x2F;ls<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 6-12&#x2F;3 * 12 * &#x2F;usr&#x2F;bin&#x2F;backup<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>周一到周五每天下午 5:00 寄一封信给 <a href=\"mailto:&#97;&#108;&#101;&#120;&#x40;&#x64;&#111;&#109;&#x61;&#105;&#x6e;&#46;&#x6e;&#97;&#109;&#101;\">&#97;&#108;&#101;&#120;&#x40;&#x64;&#111;&#109;&#x61;&#105;&#x6e;&#46;&#x6e;&#97;&#109;&#101;</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 17 * * 1-5 mail -s &quot;hi&quot; alex@domain.name &lt; &#x2F;tmp&#x2F;maildata<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">20 0-23&#x2F;2 * * * echo &quot;haha&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面再看看几个具体的例子：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">0 *&#x2F;2 * * * &#x2F;sbin&#x2F;service httpd restart  意思是每两个小时重启一次apache \n\n50 7 * * * &#x2F;sbin&#x2F;service sshd start  意思是每天7：50开启ssh服务 \n\n50 22 * * * &#x2F;sbin&#x2F;service sshd stop  意思是每天22：50关闭ssh服务 \n\n0 0 1,15 * * fsck &#x2F;home  每月1号和15号检查&#x2F;home 磁盘 \n\n1 * * * * &#x2F;home&#x2F;bruce&#x2F;backup  每小时的第一分执行 &#x2F;home&#x2F;bruce&#x2F;backup这个文件 \n\n00 03 * * 1-5 find &#x2F;home &quot;*.xxx&quot; -mtime +4 -exec rm &#123;&#125; \\;  每周一至周五3点钟，在目录&#x2F;home中，查找文件名为*.xxx的文件，并删除4天前的文件。\n\n30 6 *&#x2F;10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Python之禅","date":"2020-05-20T06:34:04.000Z","_content":"## Zen of Python（Python之禅）\n\nBeautiful is better than ugly. （优美比丑陋好）\nExplicit is better than implicit.（清晰比晦涩好）\nSimple is better than complex.（简单比复杂好）\nComplex is better than complicated.（复杂比错综复杂好）\nFlat is better than nested.（扁平比嵌套好）\nSparse is better than dense.（稀疏比密集好）\nReadability counts.（可读性很重要）\nSpecial cases aren't special enough to break the rules.（特殊情况也不应该违反这些规则）\nAlthough practicality beats purity.（但现实往往并不那么完美）\nErrors should never pass silently.（异常不应该被静默处理）\nUnless explicitly silenced.（除非你希望如此）\nIn the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测）\nThere should be one-- and preferably only one --obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案）\nAlthough that way may not be obvious at first unless you're Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人^这里指的是Python之父Guido^）\nNow is better than never.（现在开始做比不做好）\nAlthough never is often better than \\*right\\* now.（不做比盲目去做好^极限编程中的YAGNI原则^）\nIf the implementation is hard to explain, it's a bad idea.（如果一个实现方案难于理解，它就不是一个好的方案）\nIf the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案）\nNamespaces are one honking great idea -- let's do more of those!（命名空间非常有用，我们应当多加利用）","source":"_posts/Python之禅.md","raw":"---\ntitle: Python之禅\ntags: \n\t- Python\ncategories: \n\t- Python\ndate: 2020-05-20 14:34:04\n---\n## Zen of Python（Python之禅）\n\nBeautiful is better than ugly. （优美比丑陋好）\nExplicit is better than implicit.（清晰比晦涩好）\nSimple is better than complex.（简单比复杂好）\nComplex is better than complicated.（复杂比错综复杂好）\nFlat is better than nested.（扁平比嵌套好）\nSparse is better than dense.（稀疏比密集好）\nReadability counts.（可读性很重要）\nSpecial cases aren't special enough to break the rules.（特殊情况也不应该违反这些规则）\nAlthough practicality beats purity.（但现实往往并不那么完美）\nErrors should never pass silently.（异常不应该被静默处理）\nUnless explicitly silenced.（除非你希望如此）\nIn the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测）\nThere should be one-- and preferably only one --obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案）\nAlthough that way may not be obvious at first unless you're Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人^这里指的是Python之父Guido^）\nNow is better than never.（现在开始做比不做好）\nAlthough never is often better than \\*right\\* now.（不做比盲目去做好^极限编程中的YAGNI原则^）\nIf the implementation is hard to explain, it's a bad idea.（如果一个实现方案难于理解，它就不是一个好的方案）\nIf the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案）\nNamespaces are one honking great idea -- let's do more of those!（命名空间非常有用，我们应当多加利用）","slug":"Python之禅","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz38p000i12mjefp623d6","content":"<h2 id=\"Zen-of-Python（Python之禅）\"><a href=\"#Zen-of-Python（Python之禅）\" class=\"headerlink\" title=\"Zen of Python（Python之禅）\"></a>Zen of Python（Python之禅）</h2><p>Beautiful is better than ugly. （优美比丑陋好）<br>Explicit is better than implicit.（清晰比晦涩好）<br>Simple is better than complex.（简单比复杂好）<br>Complex is better than complicated.（复杂比错综复杂好）<br>Flat is better than nested.（扁平比嵌套好）<br>Sparse is better than dense.（稀疏比密集好）<br>Readability counts.（可读性很重要）<br>Special cases aren’t special enough to break the rules.（特殊情况也不应该违反这些规则）<br>Although practicality beats purity.（但现实往往并不那么完美）<br>Errors should never pass silently.（异常不应该被静默处理）<br>Unless explicitly silenced.（除非你希望如此）<br>In the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测）<br>There should be one– and preferably only one –obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案）<br>Although that way may not be obvious at first unless you’re Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人^这里指的是Python之父Guido^）<br>Now is better than never.（现在开始做比不做好）<br>Although never is often better than *right* now.（不做比盲目去做好^极限编程中的YAGNI原则^）<br>If the implementation is hard to explain, it’s a bad idea.（如果一个实现方案难于理解，它就不是一个好的方案）<br>If the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案）<br>Namespaces are one honking great idea – let’s do more of those!（命名空间非常有用，我们应当多加利用）</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Zen-of-Python（Python之禅）\"><a href=\"#Zen-of-Python（Python之禅）\" class=\"headerlink\" title=\"Zen of Python（Python之禅）\"></a>Zen of Python（Python之禅）</h2><p>Beautiful is better than ugly. （优美比丑陋好）<br>Explicit is better than implicit.（清晰比晦涩好）<br>Simple is better than complex.（简单比复杂好）<br>Complex is better than complicated.（复杂比错综复杂好）<br>Flat is better than nested.（扁平比嵌套好）<br>Sparse is better than dense.（稀疏比密集好）<br>Readability counts.（可读性很重要）<br>Special cases aren’t special enough to break the rules.（特殊情况也不应该违反这些规则）<br>Although practicality beats purity.（但现实往往并不那么完美）<br>Errors should never pass silently.（异常不应该被静默处理）<br>Unless explicitly silenced.（除非你希望如此）<br>In the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测）<br>There should be one– and preferably only one –obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案）<br>Although that way may not be obvious at first unless you’re Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人^这里指的是Python之父Guido^）<br>Now is better than never.（现在开始做比不做好）<br>Although never is often better than *right* now.（不做比盲目去做好^极限编程中的YAGNI原则^）<br>If the implementation is hard to explain, it’s a bad idea.（如果一个实现方案难于理解，它就不是一个好的方案）<br>If the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案）<br>Namespaces are one honking great idea – let’s do more of those!（命名空间非常有用，我们应当多加利用）</p>\n"},{"title":"RPC 入门","top":false,"date":"2020-07-30T11:16:05.000Z","_content":"\n# 一、什么是RPC\n\nRPC 的全称是 Remote Procedure Call ，是一种进程间通信方式。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即无论是调用本地接口/服务的还是远程的接口/服务，本质上编写的调用代码基本相同。\n\n# 二、 如何实现RPC\n\n## 2.1 RPC实现原理\n\n实际情况下，RPC很少用到http协议来进行数据传输，毕竟我只是想传输一下数据而已，何必动用到一个文本传输的应用层协议呢，所以一般会选择直接传输二进制数据\n\n不管你用何种协议进行数据传输，一个完整的RPC过程，都可以用下面这张图来描述：\n\n![img](https://i.loli.net/2020/08/12/MuSlDghOWTCd732.png)\n\n以左边的Client端为例，Application就是rpc的调用方，Client Stub就是我们上面说到的代理对象，也就是那个看起来像是Calculator的实现类，其实内部是通过rpc方式来进行远程调用的代理对象，至于Client Run-time Library，则是实现远程调用的工具包，比如python的socket模块，最后通过底层网络实现实现数据的传输。\n\n这个过程中最重要的就是**序列化**和**反序列化**了，因为数据传输的数据包必须是二进制的，你直接丢一个python对象过去，人家可不认识，你必须把python对象序列化为二进制格式，传给Server端，Server端接收到之后，再反序列化为python对象。","source":"_posts/RPC入门.md","raw":"---\ntitle: RPC 入门\ntags:\n  - RPC\ncategories:\n  - RPC\ntop: false\ndate: 2020-07-30 19:16:05\n---\n\n# 一、什么是RPC\n\nRPC 的全称是 Remote Procedure Call ，是一种进程间通信方式。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即无论是调用本地接口/服务的还是远程的接口/服务，本质上编写的调用代码基本相同。\n\n# 二、 如何实现RPC\n\n## 2.1 RPC实现原理\n\n实际情况下，RPC很少用到http协议来进行数据传输，毕竟我只是想传输一下数据而已，何必动用到一个文本传输的应用层协议呢，所以一般会选择直接传输二进制数据\n\n不管你用何种协议进行数据传输，一个完整的RPC过程，都可以用下面这张图来描述：\n\n![img](https://i.loli.net/2020/08/12/MuSlDghOWTCd732.png)\n\n以左边的Client端为例，Application就是rpc的调用方，Client Stub就是我们上面说到的代理对象，也就是那个看起来像是Calculator的实现类，其实内部是通过rpc方式来进行远程调用的代理对象，至于Client Run-time Library，则是实现远程调用的工具包，比如python的socket模块，最后通过底层网络实现实现数据的传输。\n\n这个过程中最重要的就是**序列化**和**反序列化**了，因为数据传输的数据包必须是二进制的，你直接丢一个python对象过去，人家可不认识，你必须把python对象序列化为二进制格式，传给Server端，Server端接收到之后，再反序列化为python对象。","slug":"RPC入门","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz38p000m12mj2zkihb9b","content":"<h1 id=\"一、什么是RPC\"><a href=\"#一、什么是RPC\" class=\"headerlink\" title=\"一、什么是RPC\"></a>一、什么是RPC</h1><p>RPC 的全称是 Remote Procedure Call ，是一种进程间通信方式。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即无论是调用本地接口/服务的还是远程的接口/服务，本质上编写的调用代码基本相同。</p>\n<h1 id=\"二、-如何实现RPC\"><a href=\"#二、-如何实现RPC\" class=\"headerlink\" title=\"二、 如何实现RPC\"></a>二、 如何实现RPC</h1><h2 id=\"2-1-RPC实现原理\"><a href=\"#2-1-RPC实现原理\" class=\"headerlink\" title=\"2.1 RPC实现原理\"></a>2.1 RPC实现原理</h2><p>实际情况下，RPC很少用到http协议来进行数据传输，毕竟我只是想传输一下数据而已，何必动用到一个文本传输的应用层协议呢，所以一般会选择直接传输二进制数据</p>\n<p>不管你用何种协议进行数据传输，一个完整的RPC过程，都可以用下面这张图来描述：</p>\n<p><img src=\"https://i.loli.net/2020/08/12/MuSlDghOWTCd732.png\" alt=\"img\"></p>\n<p>以左边的Client端为例，Application就是rpc的调用方，Client Stub就是我们上面说到的代理对象，也就是那个看起来像是Calculator的实现类，其实内部是通过rpc方式来进行远程调用的代理对象，至于Client Run-time Library，则是实现远程调用的工具包，比如python的socket模块，最后通过底层网络实现实现数据的传输。</p>\n<p>这个过程中最重要的就是<strong>序列化</strong>和<strong>反序列化</strong>了，因为数据传输的数据包必须是二进制的，你直接丢一个python对象过去，人家可不认识，你必须把python对象序列化为二进制格式，传给Server端，Server端接收到之后，再反序列化为python对象。</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"一、什么是RPC\"><a href=\"#一、什么是RPC\" class=\"headerlink\" title=\"一、什么是RPC\"></a>一、什么是RPC</h1><p>RPC 的全称是 Remote Procedure Call ，是一种进程间通信方式。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即无论是调用本地接口/服务的还是远程的接口/服务，本质上编写的调用代码基本相同。</p>\n<h1 id=\"二、-如何实现RPC\"><a href=\"#二、-如何实现RPC\" class=\"headerlink\" title=\"二、 如何实现RPC\"></a>二、 如何实现RPC</h1><h2 id=\"2-1-RPC实现原理\"><a href=\"#2-1-RPC实现原理\" class=\"headerlink\" title=\"2.1 RPC实现原理\"></a>2.1 RPC实现原理</h2><p>实际情况下，RPC很少用到http协议来进行数据传输，毕竟我只是想传输一下数据而已，何必动用到一个文本传输的应用层协议呢，所以一般会选择直接传输二进制数据</p>\n<p>不管你用何种协议进行数据传输，一个完整的RPC过程，都可以用下面这张图来描述：</p>\n<p><img src=\"https://i.loli.net/2020/08/12/MuSlDghOWTCd732.png\" alt=\"img\"></p>\n<p>以左边的Client端为例，Application就是rpc的调用方，Client Stub就是我们上面说到的代理对象，也就是那个看起来像是Calculator的实现类，其实内部是通过rpc方式来进行远程调用的代理对象，至于Client Run-time Library，则是实现远程调用的工具包，比如python的socket模块，最后通过底层网络实现实现数据的传输。</p>\n<p>这个过程中最重要的就是<strong>序列化</strong>和<strong>反序列化</strong>了，因为数据传输的数据包必须是二进制的，你直接丢一个python对象过去，人家可不认识，你必须把python对象序列化为二进制格式，传给Server端，Server端接收到之后，再反序列化为python对象。</p>\n"},{"title":"PEP8风格指南","top":false,"date":"2020-03-10T13:10:57.000Z","_content":"## PEP 8风格指南\n\nPEP是Python Enhancement Proposal的缩写，通常翻译为“Python增强提案”。每个PEP都是一份为Python社区提供的指导Python往更好的方向发展的技术文档，其中的第8号增强提案（PEP 8）是针对Python语言编订的代码风格指南。尽管我们可以在保证语法没有问题的前提下随意书写Python代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。我们可以从Python官方网站的[PEP 8链接](https://www.python.org/dev/peps/pep-0008/)中找到该文档，下面我们对该文档的关键部分做一个简单的总结。\n\n### 空格的使用\n\n1. <u>使用空格来表示缩进而不要用制表符（Tab）。</u>这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道Python并没有像C/C++或Java那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此Python代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，Tab的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用Tab来表示缩进对Python代码来说可能是一场灾难。\n2. <u>和语法相关的每一层缩进都用4个空格来表示。</u>\n3. <u>每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。</u>\n4. <u>函数和类的定义，代码前后都要用两个空行进行分隔。</u>\n5. <u>在同一个类中，各个方法之间应该用一个空行进行分隔。</u>\n6. <u>二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。</u>\n\n### 标识符命名\n\nPEP 8倡导用不同的命名风格来命名Python中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在Python中扮演了怎样的角色（在这一点上，Python自己的内置模块以及某些第三方模块都做得并不是很好）。\n\n1. <u>变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。</u>\n2. <u>类中受保护的实例属性，应该以一个下划线开头。</u>\n3. <u>类中私有的实例属性，应该以两个下划线开头。</u>\n4. <u>类和异常的命名，应该每个单词首字母大写。</u>\n5. <u>模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。</u>\n6. <u>类的实例方法，应该把第一个参数命名为`self`以表示对象自身。</u>\n7. <u>类的类方法，应该把第一个参数命名为`cls`以表示该类自身。</u>\n\n### 表达式和语句\n\n在Python之禅（可以使用`import this`查看）中有这么一句名言：“There should be one-- and preferably only one --obvious way to do it.”，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在PEP 8中也是无处不在的。\n\n1. <u>采用内联形式的否定词，而不要把否定词放在整个表达式的前面。</u>例如`if a is not b`就比`if not a is b`更容易让人理解。\n2. 不要用检查长度的方式来判断字符串、列表等是否为`None`或者没有元素，应该用`if not x`这样的写法来检查它。\n3. <u>就算`if`分支、`for`循环、`except`异常捕获等中只有一行代码，也不要将代码和`if`、`for`、`except`等写在一起，分开写才会让代码更清晰。</u>\n4. <u>`import`语句总是放在文件开头的地方。</u>\n5. <u>引入模块的时候，`from math import sqrt`比`import math`更好。</u>\n6. <u>如果有多个`import`语句，应该将其分为三部分，从上到下分别是Python**标准模块**、**第三方模块**和**自定义模块**，每个部分内部应该按照模块名称的**字母表顺序**来排列。</u>\n\n","source":"_posts/PEP8风格指南.md","raw":"---\ntitle: PEP8风格指南\ntags:\n  - Python\ncategories:\n  - 编程\ntop: false\ndate: 2020-03-10 21:10:57\n---\n## PEP 8风格指南\n\nPEP是Python Enhancement Proposal的缩写，通常翻译为“Python增强提案”。每个PEP都是一份为Python社区提供的指导Python往更好的方向发展的技术文档，其中的第8号增强提案（PEP 8）是针对Python语言编订的代码风格指南。尽管我们可以在保证语法没有问题的前提下随意书写Python代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。我们可以从Python官方网站的[PEP 8链接](https://www.python.org/dev/peps/pep-0008/)中找到该文档，下面我们对该文档的关键部分做一个简单的总结。\n\n### 空格的使用\n\n1. <u>使用空格来表示缩进而不要用制表符（Tab）。</u>这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道Python并没有像C/C++或Java那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此Python代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，Tab的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用Tab来表示缩进对Python代码来说可能是一场灾难。\n2. <u>和语法相关的每一层缩进都用4个空格来表示。</u>\n3. <u>每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。</u>\n4. <u>函数和类的定义，代码前后都要用两个空行进行分隔。</u>\n5. <u>在同一个类中，各个方法之间应该用一个空行进行分隔。</u>\n6. <u>二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。</u>\n\n### 标识符命名\n\nPEP 8倡导用不同的命名风格来命名Python中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在Python中扮演了怎样的角色（在这一点上，Python自己的内置模块以及某些第三方模块都做得并不是很好）。\n\n1. <u>变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。</u>\n2. <u>类中受保护的实例属性，应该以一个下划线开头。</u>\n3. <u>类中私有的实例属性，应该以两个下划线开头。</u>\n4. <u>类和异常的命名，应该每个单词首字母大写。</u>\n5. <u>模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。</u>\n6. <u>类的实例方法，应该把第一个参数命名为`self`以表示对象自身。</u>\n7. <u>类的类方法，应该把第一个参数命名为`cls`以表示该类自身。</u>\n\n### 表达式和语句\n\n在Python之禅（可以使用`import this`查看）中有这么一句名言：“There should be one-- and preferably only one --obvious way to do it.”，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在PEP 8中也是无处不在的。\n\n1. <u>采用内联形式的否定词，而不要把否定词放在整个表达式的前面。</u>例如`if a is not b`就比`if not a is b`更容易让人理解。\n2. 不要用检查长度的方式来判断字符串、列表等是否为`None`或者没有元素，应该用`if not x`这样的写法来检查它。\n3. <u>就算`if`分支、`for`循环、`except`异常捕获等中只有一行代码，也不要将代码和`if`、`for`、`except`等写在一起，分开写才会让代码更清晰。</u>\n4. <u>`import`语句总是放在文件开头的地方。</u>\n5. <u>引入模块的时候，`from math import sqrt`比`import math`更好。</u>\n6. <u>如果有多个`import`语句，应该将其分为三部分，从上到下分别是Python**标准模块**、**第三方模块**和**自定义模块**，每个部分内部应该按照模块名称的**字母表顺序**来排列。</u>\n\n","slug":"PEP8风格指南","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz38z001j12mjhqhj0ylq","content":"<h2 id=\"PEP-8风格指南\"><a href=\"#PEP-8风格指南\" class=\"headerlink\" title=\"PEP 8风格指南\"></a>PEP 8风格指南</h2><p>PEP是Python Enhancement Proposal的缩写，通常翻译为“Python增强提案”。每个PEP都是一份为Python社区提供的指导Python往更好的方向发展的技术文档，其中的第8号增强提案（PEP 8）是针对Python语言编订的代码风格指南。尽管我们可以在保证语法没有问题的前提下随意书写Python代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。我们可以从Python官方网站的<a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8链接</a>中找到该文档，下面我们对该文档的关键部分做一个简单的总结。</p>\n<h3 id=\"空格的使用\"><a href=\"#空格的使用\" class=\"headerlink\" title=\"空格的使用\"></a>空格的使用</h3><ol>\n<li><u>使用空格来表示缩进而不要用制表符（Tab）。</u>这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道Python并没有像C/C++或Java那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此Python代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，Tab的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用Tab来表示缩进对Python代码来说可能是一场灾难。</li>\n<li><u>和语法相关的每一层缩进都用4个空格来表示。</u></li>\n<li><u>每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。</u></li>\n<li><u>函数和类的定义，代码前后都要用两个空行进行分隔。</u></li>\n<li><u>在同一个类中，各个方法之间应该用一个空行进行分隔。</u></li>\n<li><u>二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。</u></li>\n</ol>\n<h3 id=\"标识符命名\"><a href=\"#标识符命名\" class=\"headerlink\" title=\"标识符命名\"></a>标识符命名</h3><p>PEP 8倡导用不同的命名风格来命名Python中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在Python中扮演了怎样的角色（在这一点上，Python自己的内置模块以及某些第三方模块都做得并不是很好）。</p>\n<ol>\n<li><u>变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。</u></li>\n<li><u>类中受保护的实例属性，应该以一个下划线开头。</u></li>\n<li><u>类中私有的实例属性，应该以两个下划线开头。</u></li>\n<li><u>类和异常的命名，应该每个单词首字母大写。</u></li>\n<li><u>模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。</u></li>\n<li><u>类的实例方法，应该把第一个参数命名为<code>self</code>以表示对象自身。</u></li>\n<li><u>类的类方法，应该把第一个参数命名为<code>cls</code>以表示该类自身。</u></li>\n</ol>\n<h3 id=\"表达式和语句\"><a href=\"#表达式和语句\" class=\"headerlink\" title=\"表达式和语句\"></a>表达式和语句</h3><p>在Python之禅（可以使用<code>import this</code>查看）中有这么一句名言：“There should be one– and preferably only one –obvious way to do it.”，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在PEP 8中也是无处不在的。</p>\n<ol>\n<li><u>采用内联形式的否定词，而不要把否定词放在整个表达式的前面。</u>例如<code>if a is not b</code>就比<code>if not a is b</code>更容易让人理解。</li>\n<li>不要用检查长度的方式来判断字符串、列表等是否为<code>None</code>或者没有元素，应该用<code>if not x</code>这样的写法来检查它。</li>\n<li><u>就算<code>if</code>分支、<code>for</code>循环、<code>except</code>异常捕获等中只有一行代码，也不要将代码和<code>if</code>、<code>for</code>、<code>except</code>等写在一起，分开写才会让代码更清晰。</u></li>\n<li><u><code>import</code>语句总是放在文件开头的地方。</u></li>\n<li><u>引入模块的时候，<code>from math import sqrt</code>比<code>import math</code>更好。</u></li>\n<li><u>如果有多个<code>import</code>语句，应该将其分为三部分，从上到下分别是Python<strong>标准模块</strong>、<strong>第三方模块</strong>和<strong>自定义模块</strong>，每个部分内部应该按照模块名称的<strong>字母表顺序</strong>来排列。</u></li>\n</ol>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"PEP-8风格指南\"><a href=\"#PEP-8风格指南\" class=\"headerlink\" title=\"PEP 8风格指南\"></a>PEP 8风格指南</h2><p>PEP是Python Enhancement Proposal的缩写，通常翻译为“Python增强提案”。每个PEP都是一份为Python社区提供的指导Python往更好的方向发展的技术文档，其中的第8号增强提案（PEP 8）是针对Python语言编订的代码风格指南。尽管我们可以在保证语法没有问题的前提下随意书写Python代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。我们可以从Python官方网站的<a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8链接</a>中找到该文档，下面我们对该文档的关键部分做一个简单的总结。</p>\n<h3 id=\"空格的使用\"><a href=\"#空格的使用\" class=\"headerlink\" title=\"空格的使用\"></a>空格的使用</h3><ol>\n<li><u>使用空格来表示缩进而不要用制表符（Tab）。</u>这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道Python并没有像C/C++或Java那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此Python代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，Tab的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用Tab来表示缩进对Python代码来说可能是一场灾难。</li>\n<li><u>和语法相关的每一层缩进都用4个空格来表示。</u></li>\n<li><u>每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。</u></li>\n<li><u>函数和类的定义，代码前后都要用两个空行进行分隔。</u></li>\n<li><u>在同一个类中，各个方法之间应该用一个空行进行分隔。</u></li>\n<li><u>二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。</u></li>\n</ol>\n<h3 id=\"标识符命名\"><a href=\"#标识符命名\" class=\"headerlink\" title=\"标识符命名\"></a>标识符命名</h3><p>PEP 8倡导用不同的命名风格来命名Python中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在Python中扮演了怎样的角色（在这一点上，Python自己的内置模块以及某些第三方模块都做得并不是很好）。</p>\n<ol>\n<li><u>变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。</u></li>\n<li><u>类中受保护的实例属性，应该以一个下划线开头。</u></li>\n<li><u>类中私有的实例属性，应该以两个下划线开头。</u></li>\n<li><u>类和异常的命名，应该每个单词首字母大写。</u></li>\n<li><u>模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。</u></li>\n<li><u>类的实例方法，应该把第一个参数命名为<code>self</code>以表示对象自身。</u></li>\n<li><u>类的类方法，应该把第一个参数命名为<code>cls</code>以表示该类自身。</u></li>\n</ol>\n<h3 id=\"表达式和语句\"><a href=\"#表达式和语句\" class=\"headerlink\" title=\"表达式和语句\"></a>表达式和语句</h3><p>在Python之禅（可以使用<code>import this</code>查看）中有这么一句名言：“There should be one– and preferably only one –obvious way to do it.”，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在PEP 8中也是无处不在的。</p>\n<ol>\n<li><u>采用内联形式的否定词，而不要把否定词放在整个表达式的前面。</u>例如<code>if a is not b</code>就比<code>if not a is b</code>更容易让人理解。</li>\n<li>不要用检查长度的方式来判断字符串、列表等是否为<code>None</code>或者没有元素，应该用<code>if not x</code>这样的写法来检查它。</li>\n<li><u>就算<code>if</code>分支、<code>for</code>循环、<code>except</code>异常捕获等中只有一行代码，也不要将代码和<code>if</code>、<code>for</code>、<code>except</code>等写在一起，分开写才会让代码更清晰。</u></li>\n<li><u><code>import</code>语句总是放在文件开头的地方。</u></li>\n<li><u>引入模块的时候，<code>from math import sqrt</code>比<code>import math</code>更好。</u></li>\n<li><u>如果有多个<code>import</code>语句，应该将其分为三部分，从上到下分别是Python<strong>标准模块</strong>、<strong>第三方模块</strong>和<strong>自定义模块</strong>，每个部分内部应该按照模块名称的<strong>字母表顺序</strong>来排列。</u></li>\n</ol>\n"},{"title":"Kubernetets的核心架构原则","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2022-09-06T07:09:23.000Z","password":null,"summary":"Kubernetets解决了哪些业务痛点？Kubernetets的设计原则：理解命令式和声明式系统的区别？如何理解Kubernetets的核心组件？","_content":"\n# Kubernetets的核心架构原则\n\n> 容器技术\n>\n> namespace：隔离应用进程，给应用进程一个独立的运行环境，让进程之间不受干扰，完全封闭的环境独立的网络标识\n>\n> cgroup：限制进程资源\n>\n> 有了namespace做隔离，有了cgroup限制资源，我们可以很安全将一个应用丢到某个隔离环境中运行，并且不对主机产生影响\n>\n> 应用要跑起来要overlay文件系统支持\n\n## 什么是 Kubernetes(K8s)?\n\nKubernetes 是谷歌开源的容器集群管理系统，是 Google 多年大规模容器管理技术 Borg 的 开源版本，主要功能包括:\n\n- 基于容器的应用部署、维护和滚动升级; \n- 负载均衡和服务发现;\n- 跨机器和跨地区的集群调度;\n- 自动伸缩;\n\n- 无状态服务和有状态服务; \n-  插件机制保证扩展性。\n\n![image.png](https://s2.loli.net/2022/09/17/1AP3rHTIW6v7zYp.png)\n\n## 命令式( Imperative)vs 声明式( Declarative)\n\n- 声明式系统关注**做什么**\n  - 幂等性:状态固定，每次我我要你做事，请给我返回相同结果。\n  - 面向对象的:把一切抽象成对象\n\n- 命令式系统关注**如何做**\n\n## Kubernetes:声明式系统\n\nKubernetes 的所有管理能力构建在对象抽象的基础上，核心对象包括:\n\n- **Node**:计算节点的抽象，用来描述计算节点的资源抽象，健康状态等;\n\n- **Namespace**:资源隔离的基本单位，可以简单理解为文件系统中的目录结构;\n\n- **Pod**:用来描述应用实例，包括镜像地址，资源需求等。Kubernetes中最核心的对象，也是打通应用和基础架构的秘密武器;\n\n\n- **Service**:服务如何将应用发布成服务，本质上是负载均衡和域名服务的声明。\n\n## Kubernetes 采用与 Borg 类似的架构\n\n![image.png](https://s2.loli.net/2022/09/17/DsNvIz84aiJOhbn.png)\n\n### etcd\n\netcd 是 CoreOS 基于 Raft 开发的分布式 key-value 存储，可用于服务发现、共享配置以及一致性保障 (如数据库选主、分布式锁等)。\n\n- 基本的key-value存储;\n- 监听机制 watch;\n-  key的过期及续约机制，用于监控和服务发现;\n- 原子CAS和CAD，用于分布式锁和leader选举。\n\n![image.png](https://s2.loli.net/2022/09/17/ZHQUyNjMhGv5EV4.png)\n\n> raft协议： 确保数据一致性\n>\n> etcd每个member都有三种身份：leader、follower（启动时：跟随者）、candidate（候选人、竞选者）\n>\n> 为了从member中选出一个主来，然后所有的写操作都是通过主来的，其它实例变成follower的角色来听从主的吩咐。\n>\n> ​\t\tetcd启动时角色为follower，如果有leader则跟随，否则，角色变成candidate，通过拉票的方式选主，leader选举出来后，其它实例都变成follower角色，leader会一直给follower发送心跳来维持leader的地位。所有的写请求leader会将数据通过下次心跳一起发送给follower，follower接受到心跳之后会返回log给leader，leader确认后，这一次数据将写入（commit）完成。\n>\n> 支持watch机制，\n>\n> ​    \t根据你的请求的条件，返回当前的结果，并且不会断开当前client的链接，保持长连接，接下来当前请求结果有变更，会通过enevt机制将结果推送\n>\n> \n\n#### 直接访问etcd的数据\n\n```sh\n- 通过etcd进程查看启动参数 \n- 进入容器\n- 到主机namespace查看cert信息 \n\n- 进入容器查询数据\n  $ export ETCDCTL_API=3\n\n  $ etcdctl --endpoints https://localhost:2379 --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key --cacert /etc/kubernetes/pki/etcd/ca.crt get --keys- only --prefix /\n\n- 监听对象变化\n\n  $ etcdctl --endpoints https://localhost:2379 --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key --cacert /etc/kubernetes/pki/etcd/ca.crt watch --prefix /registry/services/specs/default/mynginx\n```\n\n## APIServer\n\nkube-APIServer 是 Kubernetes 最重要的核心组件之一，主要提供以下的功能:\n\n- 提供集群管理的 REST API 接口，包括:\n  - 认证 Authentication;\n  - 授权 Authorization;\n  - 准入 Admission(Mutating & Valiating)。\n- 提供其他模块之间的数据交互和通信的枢纽(其他模块通过 API Server 查询或修改数据，只有 API Server 才直接操作 etcd)。\n- APIServer 提供 etcd 数据缓存以减少集群对 etcd 的访问。\n\n![image.png](https://s2.loli.net/2022/09/18/oF1GPDJfdHuS8Ut.png)\n\n> Apiserver是整个集群的核心，接受了所有的请求，并且所有的数据库读写都是从apiserver过\n>\n> 只有apiserver可以访问etcd，因为apiserver在访问etcd时构建了一个在apiserver的缓存，所以对于任意的客户端访问apiserver的时候，数据时不穿透APIserver的，APIserver会把缓存直接返回，etcd支持watch，有任意变化都会以通知形式告诉apiserver，理论上从apiserver获取的数据都是最新的数据。同理，apiserver也支持watch\n\n![image.png](https://s2.loli.net/2022/09/18/jLdXMDkSgiBRYNo.png)\n\n> 上面时标准APIserver，下面是二次开发\n\n## Controller Manager\n\n- ControllerManager是集群的大脑，是确保整个集群动起来的关键;\n- 其作用是确保Kubernetes遵循声明式系统规范，确保系统的真实状态(ActualState)与用 户定义的期望状态(Desired State 一直);\n- ControllerManager是多个控制器的组合，每个Controller事实上都是一个controlloop， 负责侦听其管控的对象，当对象发生变更时完成配置;\n- Controller配置失败通常会触发自动重试，整个集群会在控制器不断重试的机制下确保最终一 致性( Eventual Consistency)。\n\n### 控制器的工作流程\n\n![](https://s2.loli.net/2022/09/18/aCki9xcTyDeh4Ev.png)\n\n> 生产者消费者模式，任何的控制器会维护一个队列\n\n## Scheduler\n\n特殊的 Controller，工作原理与其他控制器无差别;\n\nScheduler 的特殊职责在于监控当前集群所有未调度的Pod，并且获取当前集群所有节点的健康 状况和资源使用情况，为待调度 Pod 选择最佳计算节点，完成调度。\n\n调度阶段分为:\n\n- Predict:过滤不能满足业务需求的节点，如资源不足，端口冲突等。 \n- Priority:按既定要素将满足调度需求的节点评分，选择最佳节点。\n- Bind:将计算节点与Pod绑定，完成调度。\n\n![](https://s2.loli.net/2022/09/18/GBKcQDiNAWy3FwE.png)\n\n## Kubelet\n\nKubernetes 的初始化系统(init system)\n\n- 从不同源获取Pod清单，并按需求启停Pod的核心组件:\n\t- Pod 清单可从本地文件目录，给定的 HTTPServer 或 KubeAPIServer 等源头获取;\n\n\t- Kubelet 将运行时，网络和存储抽象成了 CRI，CNI，CSI。 \n\t\n- 负责汇报当前节点的资源信息和健康状态;\n\n- 负责Pod的健康检查和状态汇报。\n\n  ![](https://s2.loli.net/2022/09/18/wWxpygF6AVz1q5o.png)\n\n> 理论上把用户进程拉起来，通过namespace和cgroup做资源控制，通过replay把docker image把overlay fs拉起来，然后通过网络插件把网络配起来，K8S为了标准化，把这些借口抽象成CRI, CNI, CSI\n>\n> kubelet是systemd里面的一个service\n>\n> 配置文件读取路径：/etc/kubenetes/manifests\n>\n> kubelet除了watchapiserver，还可以扫描本地目录加载pod\n\n## Kube-Proxy\n\n- 监控集群中用户发布的服务，并完成负载均衡配置。\n\n- 每个节点的Kube-Proxy都会配置相同的负载均衡策略，使得整个集群的服务发现建立在分布 式负载均衡器之上，服务调用无需经过额外的网络跳转(Network Hop)。\n\n- 负载均衡配置基于不同插件实现: •\n\n  - userspace。\n\n  - 操作系统网络协议栈不同的 Hooks 点和插件: \n\n    - iptables;\n\n    - ipvs。\n\n![](https://s2.loli.net/2022/09/18/bd5XpzCjBIKHL9n.png)\n\n> \n\n## Add-ons\n\nkube-dns:负责为整个集群提供 DNS 服务;\n\nIngress Controller:为服务提供外网入口; \n\nMetricsServer:提供资源监控;\n\nDashboard:提供 GUI; \n\nFederation:提供跨可用区的集群; \n\nFluentd-elasticsearch:提供集群日志采集、存储与查询。\n      \n\n## API 设计原则\n\n- Kubernetes 将业务模型化，这些对象的操作都以 API 的形式发布出来，因此其所有 API 设计都是声明式的。\n- 控制器的行为应该是可重入和幂等的，通过幂等的控制器使得系统一致朝用户期望状态努力，且结果稳定。\n- 所有对象应该是互补和可组合的，而不是简单的封装。通过组合关系构建的系统，通常能保持很好的高内聚、松耦合特性。\n- API 操作复杂度应该与对象数量成线性或接近线性比例，这制约了系统的规模上限，如果操作复杂度和 对象成指数比例，那么随着对象的增加，操作的复杂度会迅速上升到用户无法接受的程度。\n- API 对象状态不能依赖于网络连接状态。众所周知，在分布式环境下，网络连接断开是经常发生的事情， 如果希望API对象的状态能应对网络的不稳定，那么 API 对象的状态就不能依赖于网络连接状态。\n- 尽量避免让操作机制依赖于全局状态，因为在分布式系统中要保证全局状态的同步是非常困难的。\n\n## 架构设计原则\n\n- 只有apiserver可以直接访问etcd存储，其他服务必须通过KubernetesAPI来访问集群状态;\n- 单节点故障不应该影响集群的状态;\n- 在没有新请求的情况下，所有组件应该在故障恢复后继续执行上次最后收到的请求(比如网络分区 或服务重启等);\n- 所有组件都应该在内存中保持所需要的状态，apiserver将状态写入etcd存储，而其他组件则通过 apiserver 更新并监听所有的变化;\n- 优先使用事件监听而不是轮询。","source":"_posts/Kubernetets的核心架构原则.md","raw":"---\ntitle: Kubernetets的核心架构原则\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-09-6 15:09:23\npassword:\nsummary: Kubernetets解决了哪些业务痛点？Kubernetets的设计原则：理解命令式和声明式系统的区别？如何理解Kubernetets的核心组件？\ntags:\n- 容器\n- Docker\n- K8s\ncategories:\n- Docker\n- Kubernetets\n---\n\n# Kubernetets的核心架构原则\n\n> 容器技术\n>\n> namespace：隔离应用进程，给应用进程一个独立的运行环境，让进程之间不受干扰，完全封闭的环境独立的网络标识\n>\n> cgroup：限制进程资源\n>\n> 有了namespace做隔离，有了cgroup限制资源，我们可以很安全将一个应用丢到某个隔离环境中运行，并且不对主机产生影响\n>\n> 应用要跑起来要overlay文件系统支持\n\n## 什么是 Kubernetes(K8s)?\n\nKubernetes 是谷歌开源的容器集群管理系统，是 Google 多年大规模容器管理技术 Borg 的 开源版本，主要功能包括:\n\n- 基于容器的应用部署、维护和滚动升级; \n- 负载均衡和服务发现;\n- 跨机器和跨地区的集群调度;\n- 自动伸缩;\n\n- 无状态服务和有状态服务; \n-  插件机制保证扩展性。\n\n![image.png](https://s2.loli.net/2022/09/17/1AP3rHTIW6v7zYp.png)\n\n## 命令式( Imperative)vs 声明式( Declarative)\n\n- 声明式系统关注**做什么**\n  - 幂等性:状态固定，每次我我要你做事，请给我返回相同结果。\n  - 面向对象的:把一切抽象成对象\n\n- 命令式系统关注**如何做**\n\n## Kubernetes:声明式系统\n\nKubernetes 的所有管理能力构建在对象抽象的基础上，核心对象包括:\n\n- **Node**:计算节点的抽象，用来描述计算节点的资源抽象，健康状态等;\n\n- **Namespace**:资源隔离的基本单位，可以简单理解为文件系统中的目录结构;\n\n- **Pod**:用来描述应用实例，包括镜像地址，资源需求等。Kubernetes中最核心的对象，也是打通应用和基础架构的秘密武器;\n\n\n- **Service**:服务如何将应用发布成服务，本质上是负载均衡和域名服务的声明。\n\n## Kubernetes 采用与 Borg 类似的架构\n\n![image.png](https://s2.loli.net/2022/09/17/DsNvIz84aiJOhbn.png)\n\n### etcd\n\netcd 是 CoreOS 基于 Raft 开发的分布式 key-value 存储，可用于服务发现、共享配置以及一致性保障 (如数据库选主、分布式锁等)。\n\n- 基本的key-value存储;\n- 监听机制 watch;\n-  key的过期及续约机制，用于监控和服务发现;\n- 原子CAS和CAD，用于分布式锁和leader选举。\n\n![image.png](https://s2.loli.net/2022/09/17/ZHQUyNjMhGv5EV4.png)\n\n> raft协议： 确保数据一致性\n>\n> etcd每个member都有三种身份：leader、follower（启动时：跟随者）、candidate（候选人、竞选者）\n>\n> 为了从member中选出一个主来，然后所有的写操作都是通过主来的，其它实例变成follower的角色来听从主的吩咐。\n>\n> ​\t\tetcd启动时角色为follower，如果有leader则跟随，否则，角色变成candidate，通过拉票的方式选主，leader选举出来后，其它实例都变成follower角色，leader会一直给follower发送心跳来维持leader的地位。所有的写请求leader会将数据通过下次心跳一起发送给follower，follower接受到心跳之后会返回log给leader，leader确认后，这一次数据将写入（commit）完成。\n>\n> 支持watch机制，\n>\n> ​    \t根据你的请求的条件，返回当前的结果，并且不会断开当前client的链接，保持长连接，接下来当前请求结果有变更，会通过enevt机制将结果推送\n>\n> \n\n#### 直接访问etcd的数据\n\n```sh\n- 通过etcd进程查看启动参数 \n- 进入容器\n- 到主机namespace查看cert信息 \n\n- 进入容器查询数据\n  $ export ETCDCTL_API=3\n\n  $ etcdctl --endpoints https://localhost:2379 --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key --cacert /etc/kubernetes/pki/etcd/ca.crt get --keys- only --prefix /\n\n- 监听对象变化\n\n  $ etcdctl --endpoints https://localhost:2379 --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key --cacert /etc/kubernetes/pki/etcd/ca.crt watch --prefix /registry/services/specs/default/mynginx\n```\n\n## APIServer\n\nkube-APIServer 是 Kubernetes 最重要的核心组件之一，主要提供以下的功能:\n\n- 提供集群管理的 REST API 接口，包括:\n  - 认证 Authentication;\n  - 授权 Authorization;\n  - 准入 Admission(Mutating & Valiating)。\n- 提供其他模块之间的数据交互和通信的枢纽(其他模块通过 API Server 查询或修改数据，只有 API Server 才直接操作 etcd)。\n- APIServer 提供 etcd 数据缓存以减少集群对 etcd 的访问。\n\n![image.png](https://s2.loli.net/2022/09/18/oF1GPDJfdHuS8Ut.png)\n\n> Apiserver是整个集群的核心，接受了所有的请求，并且所有的数据库读写都是从apiserver过\n>\n> 只有apiserver可以访问etcd，因为apiserver在访问etcd时构建了一个在apiserver的缓存，所以对于任意的客户端访问apiserver的时候，数据时不穿透APIserver的，APIserver会把缓存直接返回，etcd支持watch，有任意变化都会以通知形式告诉apiserver，理论上从apiserver获取的数据都是最新的数据。同理，apiserver也支持watch\n\n![image.png](https://s2.loli.net/2022/09/18/jLdXMDkSgiBRYNo.png)\n\n> 上面时标准APIserver，下面是二次开发\n\n## Controller Manager\n\n- ControllerManager是集群的大脑，是确保整个集群动起来的关键;\n- 其作用是确保Kubernetes遵循声明式系统规范，确保系统的真实状态(ActualState)与用 户定义的期望状态(Desired State 一直);\n- ControllerManager是多个控制器的组合，每个Controller事实上都是一个controlloop， 负责侦听其管控的对象，当对象发生变更时完成配置;\n- Controller配置失败通常会触发自动重试，整个集群会在控制器不断重试的机制下确保最终一 致性( Eventual Consistency)。\n\n### 控制器的工作流程\n\n![](https://s2.loli.net/2022/09/18/aCki9xcTyDeh4Ev.png)\n\n> 生产者消费者模式，任何的控制器会维护一个队列\n\n## Scheduler\n\n特殊的 Controller，工作原理与其他控制器无差别;\n\nScheduler 的特殊职责在于监控当前集群所有未调度的Pod，并且获取当前集群所有节点的健康 状况和资源使用情况，为待调度 Pod 选择最佳计算节点，完成调度。\n\n调度阶段分为:\n\n- Predict:过滤不能满足业务需求的节点，如资源不足，端口冲突等。 \n- Priority:按既定要素将满足调度需求的节点评分，选择最佳节点。\n- Bind:将计算节点与Pod绑定，完成调度。\n\n![](https://s2.loli.net/2022/09/18/GBKcQDiNAWy3FwE.png)\n\n## Kubelet\n\nKubernetes 的初始化系统(init system)\n\n- 从不同源获取Pod清单，并按需求启停Pod的核心组件:\n\t- Pod 清单可从本地文件目录，给定的 HTTPServer 或 KubeAPIServer 等源头获取;\n\n\t- Kubelet 将运行时，网络和存储抽象成了 CRI，CNI，CSI。 \n\t\n- 负责汇报当前节点的资源信息和健康状态;\n\n- 负责Pod的健康检查和状态汇报。\n\n  ![](https://s2.loli.net/2022/09/18/wWxpygF6AVz1q5o.png)\n\n> 理论上把用户进程拉起来，通过namespace和cgroup做资源控制，通过replay把docker image把overlay fs拉起来，然后通过网络插件把网络配起来，K8S为了标准化，把这些借口抽象成CRI, CNI, CSI\n>\n> kubelet是systemd里面的一个service\n>\n> 配置文件读取路径：/etc/kubenetes/manifests\n>\n> kubelet除了watchapiserver，还可以扫描本地目录加载pod\n\n## Kube-Proxy\n\n- 监控集群中用户发布的服务，并完成负载均衡配置。\n\n- 每个节点的Kube-Proxy都会配置相同的负载均衡策略，使得整个集群的服务发现建立在分布 式负载均衡器之上，服务调用无需经过额外的网络跳转(Network Hop)。\n\n- 负载均衡配置基于不同插件实现: •\n\n  - userspace。\n\n  - 操作系统网络协议栈不同的 Hooks 点和插件: \n\n    - iptables;\n\n    - ipvs。\n\n![](https://s2.loli.net/2022/09/18/bd5XpzCjBIKHL9n.png)\n\n> \n\n## Add-ons\n\nkube-dns:负责为整个集群提供 DNS 服务;\n\nIngress Controller:为服务提供外网入口; \n\nMetricsServer:提供资源监控;\n\nDashboard:提供 GUI; \n\nFederation:提供跨可用区的集群; \n\nFluentd-elasticsearch:提供集群日志采集、存储与查询。\n      \n\n## API 设计原则\n\n- Kubernetes 将业务模型化，这些对象的操作都以 API 的形式发布出来，因此其所有 API 设计都是声明式的。\n- 控制器的行为应该是可重入和幂等的，通过幂等的控制器使得系统一致朝用户期望状态努力，且结果稳定。\n- 所有对象应该是互补和可组合的，而不是简单的封装。通过组合关系构建的系统，通常能保持很好的高内聚、松耦合特性。\n- API 操作复杂度应该与对象数量成线性或接近线性比例，这制约了系统的规模上限，如果操作复杂度和 对象成指数比例，那么随着对象的增加，操作的复杂度会迅速上升到用户无法接受的程度。\n- API 对象状态不能依赖于网络连接状态。众所周知，在分布式环境下，网络连接断开是经常发生的事情， 如果希望API对象的状态能应对网络的不稳定，那么 API 对象的状态就不能依赖于网络连接状态。\n- 尽量避免让操作机制依赖于全局状态，因为在分布式系统中要保证全局状态的同步是非常困难的。\n\n## 架构设计原则\n\n- 只有apiserver可以直接访问etcd存储，其他服务必须通过KubernetesAPI来访问集群状态;\n- 单节点故障不应该影响集群的状态;\n- 在没有新请求的情况下，所有组件应该在故障恢复后继续执行上次最后收到的请求(比如网络分区 或服务重启等);\n- 所有组件都应该在内存中保持所需要的状态，apiserver将状态写入etcd存储，而其他组件则通过 apiserver 更新并监听所有的变化;\n- 优先使用事件监听而不是轮询。","slug":"Kubernetets的核心架构原则","published":1,"updated":"2022-09-18T03:40:36.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz391001k12mj1my43bdl","content":"<h1 id=\"Kubernetets的核心架构原则\"><a href=\"#Kubernetets的核心架构原则\" class=\"headerlink\" title=\"Kubernetets的核心架构原则\"></a>Kubernetets的核心架构原则</h1><blockquote>\n<p>容器技术</p>\n<p>namespace：隔离应用进程，给应用进程一个独立的运行环境，让进程之间不受干扰，完全封闭的环境独立的网络标识</p>\n<p>cgroup：限制进程资源</p>\n<p>有了namespace做隔离，有了cgroup限制资源，我们可以很安全将一个应用丢到某个隔离环境中运行，并且不对主机产生影响</p>\n<p>应用要跑起来要overlay文件系统支持</p>\n</blockquote>\n<h2 id=\"什么是-Kubernetes-K8s\"><a href=\"#什么是-Kubernetes-K8s\" class=\"headerlink\" title=\"什么是 Kubernetes(K8s)?\"></a>什么是 Kubernetes(K8s)?</h2><p>Kubernetes 是谷歌开源的容器集群管理系统，是 Google 多年大规模容器管理技术 Borg 的 开源版本，主要功能包括:</p>\n<ul>\n<li><p>基于容器的应用部署、维护和滚动升级; </p>\n</li>\n<li><p>负载均衡和服务发现;</p>\n</li>\n<li><p>跨机器和跨地区的集群调度;</p>\n</li>\n<li><p>自动伸缩;</p>\n</li>\n<li><p>无状态服务和有状态服务; </p>\n</li>\n<li><p> 插件机制保证扩展性。</p>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/17/1AP3rHTIW6v7zYp.png\" alt=\"image.png\"></p>\n<h2 id=\"命令式-Imperative-vs-声明式-Declarative\"><a href=\"#命令式-Imperative-vs-声明式-Declarative\" class=\"headerlink\" title=\"命令式( Imperative)vs 声明式( Declarative)\"></a>命令式( Imperative)vs 声明式( Declarative)</h2><ul>\n<li><p>声明式系统关注<strong>做什么</strong></p>\n<ul>\n<li>幂等性:状态固定，每次我我要你做事，请给我返回相同结果。</li>\n<li>面向对象的:把一切抽象成对象</li>\n</ul>\n</li>\n<li><p>命令式系统关注<strong>如何做</strong></p>\n</li>\n</ul>\n<h2 id=\"Kubernetes-声明式系统\"><a href=\"#Kubernetes-声明式系统\" class=\"headerlink\" title=\"Kubernetes:声明式系统\"></a>Kubernetes:声明式系统</h2><p>Kubernetes 的所有管理能力构建在对象抽象的基础上，核心对象包括:</p>\n<ul>\n<li><p><strong>Node</strong>:计算节点的抽象，用来描述计算节点的资源抽象，健康状态等;</p>\n</li>\n<li><p><strong>Namespace</strong>:资源隔离的基本单位，可以简单理解为文件系统中的目录结构;</p>\n</li>\n<li><p><strong>Pod</strong>:用来描述应用实例，包括镜像地址，资源需求等。Kubernetes中最核心的对象，也是打通应用和基础架构的秘密武器;</p>\n</li>\n</ul>\n<ul>\n<li><strong>Service</strong>:服务如何将应用发布成服务，本质上是负载均衡和域名服务的声明。</li>\n</ul>\n<h2 id=\"Kubernetes-采用与-Borg-类似的架构\"><a href=\"#Kubernetes-采用与-Borg-类似的架构\" class=\"headerlink\" title=\"Kubernetes 采用与 Borg 类似的架构\"></a>Kubernetes 采用与 Borg 类似的架构</h2><p><img src=\"https://s2.loli.net/2022/09/17/DsNvIz84aiJOhbn.png\" alt=\"image.png\"></p>\n<h3 id=\"etcd\"><a href=\"#etcd\" class=\"headerlink\" title=\"etcd\"></a>etcd</h3><p>etcd 是 CoreOS 基于 Raft 开发的分布式 key-value 存储，可用于服务发现、共享配置以及一致性保障 (如数据库选主、分布式锁等)。</p>\n<ul>\n<li>基本的key-value存储;</li>\n<li>监听机制 watch;</li>\n<li> key的过期及续约机制，用于监控和服务发现;</li>\n<li>原子CAS和CAD，用于分布式锁和leader选举。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/17/ZHQUyNjMhGv5EV4.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>raft协议： 确保数据一致性</p>\n<p>etcd每个member都有三种身份：leader、follower（启动时：跟随者）、candidate（候选人、竞选者）</p>\n<p>为了从member中选出一个主来，然后所有的写操作都是通过主来的，其它实例变成follower的角色来听从主的吩咐。</p>\n<p>​        etcd启动时角色为follower，如果有leader则跟随，否则，角色变成candidate，通过拉票的方式选主，leader选举出来后，其它实例都变成follower角色，leader会一直给follower发送心跳来维持leader的地位。所有的写请求leader会将数据通过下次心跳一起发送给follower，follower接受到心跳之后会返回log给leader，leader确认后，这一次数据将写入（commit）完成。</p>\n<p>支持watch机制，</p>\n<p>​        根据你的请求的条件，返回当前的结果，并且不会断开当前client的链接，保持长连接，接下来当前请求结果有变更，会通过enevt机制将结果推送</p>\n</blockquote>\n<h4 id=\"直接访问etcd的数据\"><a href=\"#直接访问etcd的数据\" class=\"headerlink\" title=\"直接访问etcd的数据\"></a>直接访问etcd的数据</h4><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">- 通过etcd进程查看启动参数 \n- 进入容器\n- 到主机namespace查看cert信息 \n\n- 进入容器查询数据\n  $ export ETCDCTL_API=3\n\n  $ etcdctl --endpoints https://localhost:2379 --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key --cacert /etc/kubernetes/pki/etcd/ca.crt get --keys- only --prefix /\n\n- 监听对象变化\n\n  $ etcdctl --endpoints https://localhost:2379 --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key --cacert /etc/kubernetes/pki/etcd/ca.crt watch --prefix /registry/services/specs/default/mynginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"APIServer\"><a href=\"#APIServer\" class=\"headerlink\" title=\"APIServer\"></a>APIServer</h2><p>kube-APIServer 是 Kubernetes 最重要的核心组件之一，主要提供以下的功能:</p>\n<ul>\n<li>提供集群管理的 REST API 接口，包括:<ul>\n<li>认证 Authentication;</li>\n<li>授权 Authorization;</li>\n<li>准入 Admission(Mutating &amp; Valiating)。</li>\n</ul>\n</li>\n<li>提供其他模块之间的数据交互和通信的枢纽(其他模块通过 API Server 查询或修改数据，只有 API Server 才直接操作 etcd)。</li>\n<li>APIServer 提供 etcd 数据缓存以减少集群对 etcd 的访问。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/18/oF1GPDJfdHuS8Ut.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>Apiserver是整个集群的核心，接受了所有的请求，并且所有的数据库读写都是从apiserver过</p>\n<p>只有apiserver可以访问etcd，因为apiserver在访问etcd时构建了一个在apiserver的缓存，所以对于任意的客户端访问apiserver的时候，数据时不穿透APIserver的，APIserver会把缓存直接返回，etcd支持watch，有任意变化都会以通知形式告诉apiserver，理论上从apiserver获取的数据都是最新的数据。同理，apiserver也支持watch</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/09/18/jLdXMDkSgiBRYNo.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>上面时标准APIserver，下面是二次开发</p>\n</blockquote>\n<h2 id=\"Controller-Manager\"><a href=\"#Controller-Manager\" class=\"headerlink\" title=\"Controller Manager\"></a>Controller Manager</h2><ul>\n<li>ControllerManager是集群的大脑，是确保整个集群动起来的关键;</li>\n<li>其作用是确保Kubernetes遵循声明式系统规范，确保系统的真实状态(ActualState)与用 户定义的期望状态(Desired State 一直);</li>\n<li>ControllerManager是多个控制器的组合，每个Controller事实上都是一个controlloop， 负责侦听其管控的对象，当对象发生变更时完成配置;</li>\n<li>Controller配置失败通常会触发自动重试，整个集群会在控制器不断重试的机制下确保最终一 致性( Eventual Consistency)。</li>\n</ul>\n<h3 id=\"控制器的工作流程\"><a href=\"#控制器的工作流程\" class=\"headerlink\" title=\"控制器的工作流程\"></a>控制器的工作流程</h3><p><img src=\"https://s2.loli.net/2022/09/18/aCki9xcTyDeh4Ev.png\"></p>\n<blockquote>\n<p>生产者消费者模式，任何的控制器会维护一个队列</p>\n</blockquote>\n<h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><p>特殊的 Controller，工作原理与其他控制器无差别;</p>\n<p>Scheduler 的特殊职责在于监控当前集群所有未调度的Pod，并且获取当前集群所有节点的健康 状况和资源使用情况，为待调度 Pod 选择最佳计算节点，完成调度。</p>\n<p>调度阶段分为:</p>\n<ul>\n<li>Predict:过滤不能满足业务需求的节点，如资源不足，端口冲突等。 </li>\n<li>Priority:按既定要素将满足调度需求的节点评分，选择最佳节点。</li>\n<li>Bind:将计算节点与Pod绑定，完成调度。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/18/GBKcQDiNAWy3FwE.png\"></p>\n<h2 id=\"Kubelet\"><a href=\"#Kubelet\" class=\"headerlink\" title=\"Kubelet\"></a>Kubelet</h2><p>Kubernetes 的初始化系统(init system)</p>\n<ul>\n<li><p>从不同源获取Pod清单，并按需求启停Pod的核心组件:</p>\n<ul>\n<li><p>Pod 清单可从本地文件目录，给定的 HTTPServer 或 KubeAPIServer 等源头获取;</p>\n</li>\n<li><p>Kubelet 将运行时，网络和存储抽象成了 CRI，CNI，CSI。 </p>\n</li>\n</ul>\n</li>\n<li><p>负责汇报当前节点的资源信息和健康状态;</p>\n</li>\n<li><p>负责Pod的健康检查和状态汇报。</p>\n<p><img src=\"https://s2.loli.net/2022/09/18/wWxpygF6AVz1q5o.png\"></p>\n</li>\n</ul>\n<blockquote>\n<p>理论上把用户进程拉起来，通过namespace和cgroup做资源控制，通过replay把docker image把overlay fs拉起来，然后通过网络插件把网络配起来，K8S为了标准化，把这些借口抽象成CRI, CNI, CSI</p>\n<p>kubelet是systemd里面的一个service</p>\n<p>配置文件读取路径：/etc/kubenetes/manifests</p>\n<p>kubelet除了watchapiserver，还可以扫描本地目录加载pod</p>\n</blockquote>\n<h2 id=\"Kube-Proxy\"><a href=\"#Kube-Proxy\" class=\"headerlink\" title=\"Kube-Proxy\"></a>Kube-Proxy</h2><ul>\n<li><p>监控集群中用户发布的服务，并完成负载均衡配置。</p>\n</li>\n<li><p>每个节点的Kube-Proxy都会配置相同的负载均衡策略，使得整个集群的服务发现建立在分布 式负载均衡器之上，服务调用无需经过额外的网络跳转(Network Hop)。</p>\n</li>\n<li><p>负载均衡配置基于不同插件实现: •</p>\n<ul>\n<li><p>userspace。</p>\n</li>\n<li><p>操作系统网络协议栈不同的 Hooks 点和插件: </p>\n<ul>\n<li><p>iptables;</p>\n</li>\n<li><p>ipvs。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/18/bd5XpzCjBIKHL9n.png\"></p>\n<blockquote>\n</blockquote>\n<h2 id=\"Add-ons\"><a href=\"#Add-ons\" class=\"headerlink\" title=\"Add-ons\"></a>Add-ons</h2><p>kube-dns:负责为整个集群提供 DNS 服务;</p>\n<p>Ingress Controller:为服务提供外网入口; </p>\n<p>MetricsServer:提供资源监控;</p>\n<p>Dashboard:提供 GUI; </p>\n<p>Federation:提供跨可用区的集群; </p>\n<p>Fluentd-elasticsearch:提供集群日志采集、存储与查询。</p>\n<h2 id=\"API-设计原则\"><a href=\"#API-设计原则\" class=\"headerlink\" title=\"API 设计原则\"></a>API 设计原则</h2><ul>\n<li>Kubernetes 将业务模型化，这些对象的操作都以 API 的形式发布出来，因此其所有 API 设计都是声明式的。</li>\n<li>控制器的行为应该是可重入和幂等的，通过幂等的控制器使得系统一致朝用户期望状态努力，且结果稳定。</li>\n<li>所有对象应该是互补和可组合的，而不是简单的封装。通过组合关系构建的系统，通常能保持很好的高内聚、松耦合特性。</li>\n<li>API 操作复杂度应该与对象数量成线性或接近线性比例，这制约了系统的规模上限，如果操作复杂度和 对象成指数比例，那么随着对象的增加，操作的复杂度会迅速上升到用户无法接受的程度。</li>\n<li>API 对象状态不能依赖于网络连接状态。众所周知，在分布式环境下，网络连接断开是经常发生的事情， 如果希望API对象的状态能应对网络的不稳定，那么 API 对象的状态就不能依赖于网络连接状态。</li>\n<li>尽量避免让操作机制依赖于全局状态，因为在分布式系统中要保证全局状态的同步是非常困难的。</li>\n</ul>\n<h2 id=\"架构设计原则\"><a href=\"#架构设计原则\" class=\"headerlink\" title=\"架构设计原则\"></a>架构设计原则</h2><ul>\n<li>只有apiserver可以直接访问etcd存储，其他服务必须通过KubernetesAPI来访问集群状态;</li>\n<li>单节点故障不应该影响集群的状态;</li>\n<li>在没有新请求的情况下，所有组件应该在故障恢复后继续执行上次最后收到的请求(比如网络分区 或服务重启等);</li>\n<li>所有组件都应该在内存中保持所需要的状态，apiserver将状态写入etcd存储，而其他组件则通过 apiserver 更新并监听所有的变化;</li>\n<li>优先使用事件监听而不是轮询。</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Kubernetets的核心架构原则\"><a href=\"#Kubernetets的核心架构原则\" class=\"headerlink\" title=\"Kubernetets的核心架构原则\"></a>Kubernetets的核心架构原则</h1><blockquote>\n<p>容器技术</p>\n<p>namespace：隔离应用进程，给应用进程一个独立的运行环境，让进程之间不受干扰，完全封闭的环境独立的网络标识</p>\n<p>cgroup：限制进程资源</p>\n<p>有了namespace做隔离，有了cgroup限制资源，我们可以很安全将一个应用丢到某个隔离环境中运行，并且不对主机产生影响</p>\n<p>应用要跑起来要overlay文件系统支持</p>\n</blockquote>\n<h2 id=\"什么是-Kubernetes-K8s\"><a href=\"#什么是-Kubernetes-K8s\" class=\"headerlink\" title=\"什么是 Kubernetes(K8s)?\"></a>什么是 Kubernetes(K8s)?</h2><p>Kubernetes 是谷歌开源的容器集群管理系统，是 Google 多年大规模容器管理技术 Borg 的 开源版本，主要功能包括:</p>\n<ul>\n<li><p>基于容器的应用部署、维护和滚动升级; </p>\n</li>\n<li><p>负载均衡和服务发现;</p>\n</li>\n<li><p>跨机器和跨地区的集群调度;</p>\n</li>\n<li><p>自动伸缩;</p>\n</li>\n<li><p>无状态服务和有状态服务; </p>\n</li>\n<li><p> 插件机制保证扩展性。</p>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/17/1AP3rHTIW6v7zYp.png\" alt=\"image.png\"></p>\n<h2 id=\"命令式-Imperative-vs-声明式-Declarative\"><a href=\"#命令式-Imperative-vs-声明式-Declarative\" class=\"headerlink\" title=\"命令式( Imperative)vs 声明式( Declarative)\"></a>命令式( Imperative)vs 声明式( Declarative)</h2><ul>\n<li><p>声明式系统关注<strong>做什么</strong></p>\n<ul>\n<li>幂等性:状态固定，每次我我要你做事，请给我返回相同结果。</li>\n<li>面向对象的:把一切抽象成对象</li>\n</ul>\n</li>\n<li><p>命令式系统关注<strong>如何做</strong></p>\n</li>\n</ul>\n<h2 id=\"Kubernetes-声明式系统\"><a href=\"#Kubernetes-声明式系统\" class=\"headerlink\" title=\"Kubernetes:声明式系统\"></a>Kubernetes:声明式系统</h2><p>Kubernetes 的所有管理能力构建在对象抽象的基础上，核心对象包括:</p>\n<ul>\n<li><p><strong>Node</strong>:计算节点的抽象，用来描述计算节点的资源抽象，健康状态等;</p>\n</li>\n<li><p><strong>Namespace</strong>:资源隔离的基本单位，可以简单理解为文件系统中的目录结构;</p>\n</li>\n<li><p><strong>Pod</strong>:用来描述应用实例，包括镜像地址，资源需求等。Kubernetes中最核心的对象，也是打通应用和基础架构的秘密武器;</p>\n</li>\n</ul>\n<ul>\n<li><strong>Service</strong>:服务如何将应用发布成服务，本质上是负载均衡和域名服务的声明。</li>\n</ul>\n<h2 id=\"Kubernetes-采用与-Borg-类似的架构\"><a href=\"#Kubernetes-采用与-Borg-类似的架构\" class=\"headerlink\" title=\"Kubernetes 采用与 Borg 类似的架构\"></a>Kubernetes 采用与 Borg 类似的架构</h2><p><img src=\"https://s2.loli.net/2022/09/17/DsNvIz84aiJOhbn.png\" alt=\"image.png\"></p>\n<h3 id=\"etcd\"><a href=\"#etcd\" class=\"headerlink\" title=\"etcd\"></a>etcd</h3><p>etcd 是 CoreOS 基于 Raft 开发的分布式 key-value 存储，可用于服务发现、共享配置以及一致性保障 (如数据库选主、分布式锁等)。</p>\n<ul>\n<li>基本的key-value存储;</li>\n<li>监听机制 watch;</li>\n<li> key的过期及续约机制，用于监控和服务发现;</li>\n<li>原子CAS和CAD，用于分布式锁和leader选举。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/17/ZHQUyNjMhGv5EV4.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>raft协议： 确保数据一致性</p>\n<p>etcd每个member都有三种身份：leader、follower（启动时：跟随者）、candidate（候选人、竞选者）</p>\n<p>为了从member中选出一个主来，然后所有的写操作都是通过主来的，其它实例变成follower的角色来听从主的吩咐。</p>\n<p>​        etcd启动时角色为follower，如果有leader则跟随，否则，角色变成candidate，通过拉票的方式选主，leader选举出来后，其它实例都变成follower角色，leader会一直给follower发送心跳来维持leader的地位。所有的写请求leader会将数据通过下次心跳一起发送给follower，follower接受到心跳之后会返回log给leader，leader确认后，这一次数据将写入（commit）完成。</p>\n<p>支持watch机制，</p>\n<p>​        根据你的请求的条件，返回当前的结果，并且不会断开当前client的链接，保持长连接，接下来当前请求结果有变更，会通过enevt机制将结果推送</p>\n</blockquote>\n<h4 id=\"直接访问etcd的数据\"><a href=\"#直接访问etcd的数据\" class=\"headerlink\" title=\"直接访问etcd的数据\"></a>直接访问etcd的数据</h4><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">- 通过etcd进程查看启动参数 \n- 进入容器\n- 到主机namespace查看cert信息 \n\n- 进入容器查询数据\n  $ export ETCDCTL_API&#x3D;3\n\n  $ etcdctl --endpoints https:&#x2F;&#x2F;localhost:2379 --cert &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.crt --key &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.key --cacert &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt get --keys- only --prefix &#x2F;\n\n- 监听对象变化\n\n  $ etcdctl --endpoints https:&#x2F;&#x2F;localhost:2379 --cert &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.crt --key &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.key --cacert &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt watch --prefix &#x2F;registry&#x2F;services&#x2F;specs&#x2F;default&#x2F;mynginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"APIServer\"><a href=\"#APIServer\" class=\"headerlink\" title=\"APIServer\"></a>APIServer</h2><p>kube-APIServer 是 Kubernetes 最重要的核心组件之一，主要提供以下的功能:</p>\n<ul>\n<li>提供集群管理的 REST API 接口，包括:<ul>\n<li>认证 Authentication;</li>\n<li>授权 Authorization;</li>\n<li>准入 Admission(Mutating &amp; Valiating)。</li>\n</ul>\n</li>\n<li>提供其他模块之间的数据交互和通信的枢纽(其他模块通过 API Server 查询或修改数据，只有 API Server 才直接操作 etcd)。</li>\n<li>APIServer 提供 etcd 数据缓存以减少集群对 etcd 的访问。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/18/oF1GPDJfdHuS8Ut.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>Apiserver是整个集群的核心，接受了所有的请求，并且所有的数据库读写都是从apiserver过</p>\n<p>只有apiserver可以访问etcd，因为apiserver在访问etcd时构建了一个在apiserver的缓存，所以对于任意的客户端访问apiserver的时候，数据时不穿透APIserver的，APIserver会把缓存直接返回，etcd支持watch，有任意变化都会以通知形式告诉apiserver，理论上从apiserver获取的数据都是最新的数据。同理，apiserver也支持watch</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/09/18/jLdXMDkSgiBRYNo.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>上面时标准APIserver，下面是二次开发</p>\n</blockquote>\n<h2 id=\"Controller-Manager\"><a href=\"#Controller-Manager\" class=\"headerlink\" title=\"Controller Manager\"></a>Controller Manager</h2><ul>\n<li>ControllerManager是集群的大脑，是确保整个集群动起来的关键;</li>\n<li>其作用是确保Kubernetes遵循声明式系统规范，确保系统的真实状态(ActualState)与用 户定义的期望状态(Desired State 一直);</li>\n<li>ControllerManager是多个控制器的组合，每个Controller事实上都是一个controlloop， 负责侦听其管控的对象，当对象发生变更时完成配置;</li>\n<li>Controller配置失败通常会触发自动重试，整个集群会在控制器不断重试的机制下确保最终一 致性( Eventual Consistency)。</li>\n</ul>\n<h3 id=\"控制器的工作流程\"><a href=\"#控制器的工作流程\" class=\"headerlink\" title=\"控制器的工作流程\"></a>控制器的工作流程</h3><p><img src=\"https://s2.loli.net/2022/09/18/aCki9xcTyDeh4Ev.png\"></p>\n<blockquote>\n<p>生产者消费者模式，任何的控制器会维护一个队列</p>\n</blockquote>\n<h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><p>特殊的 Controller，工作原理与其他控制器无差别;</p>\n<p>Scheduler 的特殊职责在于监控当前集群所有未调度的Pod，并且获取当前集群所有节点的健康 状况和资源使用情况，为待调度 Pod 选择最佳计算节点，完成调度。</p>\n<p>调度阶段分为:</p>\n<ul>\n<li>Predict:过滤不能满足业务需求的节点，如资源不足，端口冲突等。 </li>\n<li>Priority:按既定要素将满足调度需求的节点评分，选择最佳节点。</li>\n<li>Bind:将计算节点与Pod绑定，完成调度。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/18/GBKcQDiNAWy3FwE.png\"></p>\n<h2 id=\"Kubelet\"><a href=\"#Kubelet\" class=\"headerlink\" title=\"Kubelet\"></a>Kubelet</h2><p>Kubernetes 的初始化系统(init system)</p>\n<ul>\n<li><p>从不同源获取Pod清单，并按需求启停Pod的核心组件:</p>\n<ul>\n<li><p>Pod 清单可从本地文件目录，给定的 HTTPServer 或 KubeAPIServer 等源头获取;</p>\n</li>\n<li><p>Kubelet 将运行时，网络和存储抽象成了 CRI，CNI，CSI。 </p>\n</li>\n</ul>\n</li>\n<li><p>负责汇报当前节点的资源信息和健康状态;</p>\n</li>\n<li><p>负责Pod的健康检查和状态汇报。</p>\n<p><img src=\"https://s2.loli.net/2022/09/18/wWxpygF6AVz1q5o.png\"></p>\n</li>\n</ul>\n<blockquote>\n<p>理论上把用户进程拉起来，通过namespace和cgroup做资源控制，通过replay把docker image把overlay fs拉起来，然后通过网络插件把网络配起来，K8S为了标准化，把这些借口抽象成CRI, CNI, CSI</p>\n<p>kubelet是systemd里面的一个service</p>\n<p>配置文件读取路径：/etc/kubenetes/manifests</p>\n<p>kubelet除了watchapiserver，还可以扫描本地目录加载pod</p>\n</blockquote>\n<h2 id=\"Kube-Proxy\"><a href=\"#Kube-Proxy\" class=\"headerlink\" title=\"Kube-Proxy\"></a>Kube-Proxy</h2><ul>\n<li><p>监控集群中用户发布的服务，并完成负载均衡配置。</p>\n</li>\n<li><p>每个节点的Kube-Proxy都会配置相同的负载均衡策略，使得整个集群的服务发现建立在分布 式负载均衡器之上，服务调用无需经过额外的网络跳转(Network Hop)。</p>\n</li>\n<li><p>负载均衡配置基于不同插件实现: •</p>\n<ul>\n<li><p>userspace。</p>\n</li>\n<li><p>操作系统网络协议栈不同的 Hooks 点和插件: </p>\n<ul>\n<li><p>iptables;</p>\n</li>\n<li><p>ipvs。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/09/18/bd5XpzCjBIKHL9n.png\"></p>\n<blockquote>\n</blockquote>\n<h2 id=\"Add-ons\"><a href=\"#Add-ons\" class=\"headerlink\" title=\"Add-ons\"></a>Add-ons</h2><p>kube-dns:负责为整个集群提供 DNS 服务;</p>\n<p>Ingress Controller:为服务提供外网入口; </p>\n<p>MetricsServer:提供资源监控;</p>\n<p>Dashboard:提供 GUI; </p>\n<p>Federation:提供跨可用区的集群; </p>\n<p>Fluentd-elasticsearch:提供集群日志采集、存储与查询。</p>\n<h2 id=\"API-设计原则\"><a href=\"#API-设计原则\" class=\"headerlink\" title=\"API 设计原则\"></a>API 设计原则</h2><ul>\n<li>Kubernetes 将业务模型化，这些对象的操作都以 API 的形式发布出来，因此其所有 API 设计都是声明式的。</li>\n<li>控制器的行为应该是可重入和幂等的，通过幂等的控制器使得系统一致朝用户期望状态努力，且结果稳定。</li>\n<li>所有对象应该是互补和可组合的，而不是简单的封装。通过组合关系构建的系统，通常能保持很好的高内聚、松耦合特性。</li>\n<li>API 操作复杂度应该与对象数量成线性或接近线性比例，这制约了系统的规模上限，如果操作复杂度和 对象成指数比例，那么随着对象的增加，操作的复杂度会迅速上升到用户无法接受的程度。</li>\n<li>API 对象状态不能依赖于网络连接状态。众所周知，在分布式环境下，网络连接断开是经常发生的事情， 如果希望API对象的状态能应对网络的不稳定，那么 API 对象的状态就不能依赖于网络连接状态。</li>\n<li>尽量避免让操作机制依赖于全局状态，因为在分布式系统中要保证全局状态的同步是非常困难的。</li>\n</ul>\n<h2 id=\"架构设计原则\"><a href=\"#架构设计原则\" class=\"headerlink\" title=\"架构设计原则\"></a>架构设计原则</h2><ul>\n<li>只有apiserver可以直接访问etcd存储，其他服务必须通过KubernetesAPI来访问集群状态;</li>\n<li>单节点故障不应该影响集群的状态;</li>\n<li>在没有新请求的情况下，所有组件应该在故障恢复后继续执行上次最后收到的请求(比如网络分区 或服务重启等);</li>\n<li>所有组件都应该在内存中保持所需要的状态，apiserver将状态写入etcd存储，而其他组件则通过 apiserver 更新并监听所有的变化;</li>\n<li>优先使用事件监听而不是轮询。</li>\n</ul>\n"},{"title":"Linux查找文件","top":false,"date":"2020-06-10T08:20:43.000Z","_content":"# 1.grep\n  grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。\n  参考：https://man.linuxde.net/grep\n## grep常用用法\n```bash\n[root@www ~]# grep [-acinv] [--color=auto] '搜寻字符串' filename\n选项与参数：\n-a ：将 binary 文件以 text 文件的方式搜寻数据\n-c ：计算找到 '搜寻字符串' 的次数\n-i ：忽略大小写的不同，所以大小写视为相同\n-n ：顺便输出行号\n-v ：反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！\n--color=auto ：可以将找到的关键词部分加上颜色的显示喔！\n\ngrep命令常见用法\n在文件中搜索一个单词，命令会返回一个包含“match_pattern”的文本行：\n\ngrep match_pattern file_name\ngrep \"match_pattern\" file_name\n在多个文件中查找：\n\ngrep \"match_pattern\" file_1 file_2 file_3 ...\n输出除之外的所有行 -v 选项：\n\ngrep -v \"match_pattern\" file_name\n标记匹配颜色 --color=auto 选项：\n\ngrep \"match_pattern\" file_name --color=auto\n使用正则表达式 -E 选项：\n\ngrep -E \"[1-9]+\"\n或\negrep \"[1-9]+\"\n只输出文件中匹配到的部分 -o 选项：\n\necho this is a test line. | grep -o -E \"[a-z]+\\.\"\nline.\n\necho this is a test line. | egrep -o \"[a-z]+\\.\"\nline.\n统计文件或者文本中包含匹配字符串的行数 -c 选项：\n\ngrep -c \"text\" file_name\n输出包含匹配字符串的行数 -n 选项：\n\ngrep \"text\" -n file_name\n或\ncat file_name | grep \"text\" -n\n\n#多个文件\ngrep \"text\" -n file_1 file_2\n打印样式匹配所位于的字符或字节偏移：\n\necho gun is not unix | grep -b -o \"not\"\n7:not\n\n#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项 -b -o 一般总是配合使用。\n搜索多个文件并查找匹配文本在哪些文件中：\n\ngrep -l \"text\" file1 file2 file3...\n```\n显示目录中的可执行文件\n```bash\nll |grep \"*\"   # 添加-v可显示非可执行文件\n```\ngrep递归搜索文件\n在多级目录中对文本进行递归搜索：\n\ngrep \"text\" . -r -n\n\n忽略匹配样式中的字符大小写：\n\necho \"hello world\" | grep -i \"HELLO\"\nhello\n\n\n# 2.find\n> 在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。\n>\n> 参考：https://blog.csdn.net/qq_35246620/article/details/79104520\n\n在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。\n\n语法：find + 目标目录(路径) + <选项> + 参数\n\n### 常用选项列表\n\n| 选项                 | 含义                                                         |\n| -------------------- | ------------------------------------------------------------ |\n| -perm <权限数值>     | 查找符合指定的权限数值的文件或目录                           |\n| -type <文件类型>     | 只寻找符合指定的文件类型的文件                               |\n| -name <范本样式>     | 指定字符串作为寻找文件或目录的范本样式                       |\n| -expty               | 寻找文件大小为 0 Byte 的文件，或目录下没有任何子目录或文件的空目录 |\n| -ls                  | 假设find指令的回传值为ture，就将文件或目录名称列出到标准输出 |\n| -maxdepth <目录层级> | 设置最大目录层级                                             |\n| -mindepth <目录层级> | 设置最小目录层级                                             |\n| -exec <执行指令>     | 假设find指令的回传值为true，就执行该指令                     |\n| -ok <执行指令>       | 此参数的效果和指定-exec类似，但在执行指令之前会先询问用户，若回答y或Y，则放弃执行命令 |\n\n### 文件类型参数列表\n\n| 文件类型参数 | 含义     |\n| ------------ | -------- |\n| `f`          | 普通文件 |\n| `l`          | 符号连接 |\n| `d`          | 目录     |\n| `c`          | 字符设备 |\n| `b`          | 块设备   |\n| `s`          | 套接字   |\n| `p`          | Fifo     |\n\n### ","source":"_posts/Linux查找文件.md","raw":"---\ntitle: Linux查找文件\ntags:\n  - Linux\ncategories:\n  - Linux\ntop: false\ndate: 2020-06-10 16:20:43\n---\n# 1.grep\n  grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。\n  参考：https://man.linuxde.net/grep\n## grep常用用法\n```bash\n[root@www ~]# grep [-acinv] [--color=auto] '搜寻字符串' filename\n选项与参数：\n-a ：将 binary 文件以 text 文件的方式搜寻数据\n-c ：计算找到 '搜寻字符串' 的次数\n-i ：忽略大小写的不同，所以大小写视为相同\n-n ：顺便输出行号\n-v ：反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！\n--color=auto ：可以将找到的关键词部分加上颜色的显示喔！\n\ngrep命令常见用法\n在文件中搜索一个单词，命令会返回一个包含“match_pattern”的文本行：\n\ngrep match_pattern file_name\ngrep \"match_pattern\" file_name\n在多个文件中查找：\n\ngrep \"match_pattern\" file_1 file_2 file_3 ...\n输出除之外的所有行 -v 选项：\n\ngrep -v \"match_pattern\" file_name\n标记匹配颜色 --color=auto 选项：\n\ngrep \"match_pattern\" file_name --color=auto\n使用正则表达式 -E 选项：\n\ngrep -E \"[1-9]+\"\n或\negrep \"[1-9]+\"\n只输出文件中匹配到的部分 -o 选项：\n\necho this is a test line. | grep -o -E \"[a-z]+\\.\"\nline.\n\necho this is a test line. | egrep -o \"[a-z]+\\.\"\nline.\n统计文件或者文本中包含匹配字符串的行数 -c 选项：\n\ngrep -c \"text\" file_name\n输出包含匹配字符串的行数 -n 选项：\n\ngrep \"text\" -n file_name\n或\ncat file_name | grep \"text\" -n\n\n#多个文件\ngrep \"text\" -n file_1 file_2\n打印样式匹配所位于的字符或字节偏移：\n\necho gun is not unix | grep -b -o \"not\"\n7:not\n\n#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项 -b -o 一般总是配合使用。\n搜索多个文件并查找匹配文本在哪些文件中：\n\ngrep -l \"text\" file1 file2 file3...\n```\n显示目录中的可执行文件\n```bash\nll |grep \"*\"   # 添加-v可显示非可执行文件\n```\ngrep递归搜索文件\n在多级目录中对文本进行递归搜索：\n\ngrep \"text\" . -r -n\n\n忽略匹配样式中的字符大小写：\n\necho \"hello world\" | grep -i \"HELLO\"\nhello\n\n\n# 2.find\n> 在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。\n>\n> 参考：https://blog.csdn.net/qq_35246620/article/details/79104520\n\n在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。\n\n语法：find + 目标目录(路径) + <选项> + 参数\n\n### 常用选项列表\n\n| 选项                 | 含义                                                         |\n| -------------------- | ------------------------------------------------------------ |\n| -perm <权限数值>     | 查找符合指定的权限数值的文件或目录                           |\n| -type <文件类型>     | 只寻找符合指定的文件类型的文件                               |\n| -name <范本样式>     | 指定字符串作为寻找文件或目录的范本样式                       |\n| -expty               | 寻找文件大小为 0 Byte 的文件，或目录下没有任何子目录或文件的空目录 |\n| -ls                  | 假设find指令的回传值为ture，就将文件或目录名称列出到标准输出 |\n| -maxdepth <目录层级> | 设置最大目录层级                                             |\n| -mindepth <目录层级> | 设置最小目录层级                                             |\n| -exec <执行指令>     | 假设find指令的回传值为true，就执行该指令                     |\n| -ok <执行指令>       | 此参数的效果和指定-exec类似，但在执行指令之前会先询问用户，若回答y或Y，则放弃执行命令 |\n\n### 文件类型参数列表\n\n| 文件类型参数 | 含义     |\n| ------------ | -------- |\n| `f`          | 普通文件 |\n| `l`          | 符号连接 |\n| `d`          | 目录     |\n| `c`          | 字符设备 |\n| `b`          | 块设备   |\n| `s`          | 套接字   |\n| `p`          | Fifo     |\n\n### ","slug":"Linux查找文件","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz392001n12mjgo7beos0","content":"<h1 id=\"1-grep\"><a href=\"#1-grep\" class=\"headerlink\" title=\"1.grep\"></a>1.grep</h1><p>  grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。<br>  参考：<a href=\"https://man.linuxde.net/grep\">https://man.linuxde.net/grep</a></p>\n<h2 id=\"grep常用用法\"><a href=\"#grep常用用法\" class=\"headerlink\" title=\"grep常用用法\"></a>grep常用用法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep [-acinv] [--color=auto] '搜寻字符串' filename</span>\n选项与参数：\n-a ：将 binary 文件以 text 文件的方式搜寻数据\n-c ：计算找到 <span class=\"token string\">'搜寻字符串'</span> 的次数\n-i ：忽略大小写的不同，所以大小写视为相同\n-n ：顺便输出行号\n-v ：反向选择，亦即显示出没有 <span class=\"token string\">'搜寻字符串'</span> 内容的那一行！\n--color<span class=\"token operator\">=</span>auto ：可以将找到的关键词部分加上颜色的显示喔！\n\ngrep命令常见用法\n在文件中搜索一个单词，命令会返回一个包含“match_pattern”的文本行：\n\n<span class=\"token function\">grep</span> match_pattern file_name\n<span class=\"token function\">grep</span> <span class=\"token string\">\"match_pattern\"</span> file_name\n在多个文件中查找：\n\n<span class=\"token function\">grep</span> <span class=\"token string\">\"match_pattern\"</span> file_1 file_2 file_3 <span class=\"token punctuation\">..</span>.\n输出除之外的所有行 -v 选项：\n\n<span class=\"token function\">grep</span> -v <span class=\"token string\">\"match_pattern\"</span> file_name\n标记匹配颜色 --color<span class=\"token operator\">=</span>auto 选项：\n\n<span class=\"token function\">grep</span> <span class=\"token string\">\"match_pattern\"</span> file_name --color<span class=\"token operator\">=</span>auto\n使用正则表达式 -E 选项：\n\n<span class=\"token function\">grep</span> -E <span class=\"token string\">\"[1-9]+\"</span>\n或\n<span class=\"token function\">egrep</span> <span class=\"token string\">\"[1-9]+\"</span>\n只输出文件中匹配到的部分 -o 选项：\n\n<span class=\"token builtin class-name\">echo</span> this is a <span class=\"token builtin class-name\">test</span> line. <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -o -E <span class=\"token string\">\"[a-z]+\\.\"</span>\nline.\n\n<span class=\"token builtin class-name\">echo</span> this is a <span class=\"token builtin class-name\">test</span> line. <span class=\"token operator\">|</span> <span class=\"token function\">egrep</span> -o <span class=\"token string\">\"[a-z]+\\.\"</span>\nline.\n统计文件或者文本中包含匹配字符串的行数 -c 选项：\n\n<span class=\"token function\">grep</span> -c <span class=\"token string\">\"text\"</span> file_name\n输出包含匹配字符串的行数 -n 选项：\n\n<span class=\"token function\">grep</span> <span class=\"token string\">\"text\"</span> -n file_name\n或\n<span class=\"token function\">cat</span> file_name <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"text\"</span> -n\n\n<span class=\"token comment\">#多个文件</span>\n<span class=\"token function\">grep</span> <span class=\"token string\">\"text\"</span> -n file_1 file_2\n打印样式匹配所位于的字符或字节偏移：\n\n<span class=\"token builtin class-name\">echo</span> gun is not unix <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -b -o <span class=\"token string\">\"not\"</span>\n<span class=\"token number\">7</span>:not\n\n<span class=\"token comment\">#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项 -b -o 一般总是配合使用。</span>\n搜索多个文件并查找匹配文本在哪些文件中：\n\n<span class=\"token function\">grep</span> -l <span class=\"token string\">\"text\"</span> file1 file2 file3<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>显示目录中的可执行文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ll <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">\"*\"</span>   <span class=\"token comment\"># 添加-v可显示非可执行文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>grep递归搜索文件<br>在多级目录中对文本进行递归搜索：</p>\n<p>grep “text” . -r -n</p>\n<p>忽略匹配样式中的字符大小写：</p>\n<p>echo “hello world” | grep -i “HELLO”<br>hello</p>\n<h1 id=\"2-find\"><a href=\"#2-find\" class=\"headerlink\" title=\"2.find\"></a>2.find</h1><blockquote>\n<p>在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。</p>\n<p>参考：<a href=\"https://blog.csdn.net/qq_35246620/article/details/79104520\">https://blog.csdn.net/qq_35246620/article/details/79104520</a></p>\n</blockquote>\n<p>在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。</p>\n<p>语法：find + 目标目录(路径) + &lt;选项&gt; + 参数</p>\n<h3 id=\"常用选项列表\"><a href=\"#常用选项列表\" class=\"headerlink\" title=\"常用选项列表\"></a>常用选项列表</h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-perm &lt;权限数值&gt;</td>\n<td>查找符合指定的权限数值的文件或目录</td>\n</tr>\n<tr>\n<td>-type &lt;文件类型&gt;</td>\n<td>只寻找符合指定的文件类型的文件</td>\n</tr>\n<tr>\n<td>-name &lt;范本样式&gt;</td>\n<td>指定字符串作为寻找文件或目录的范本样式</td>\n</tr>\n<tr>\n<td>-expty</td>\n<td>寻找文件大小为 0 Byte 的文件，或目录下没有任何子目录或文件的空目录</td>\n</tr>\n<tr>\n<td>-ls</td>\n<td>假设find指令的回传值为ture，就将文件或目录名称列出到标准输出</td>\n</tr>\n<tr>\n<td>-maxdepth &lt;目录层级&gt;</td>\n<td>设置最大目录层级</td>\n</tr>\n<tr>\n<td>-mindepth &lt;目录层级&gt;</td>\n<td>设置最小目录层级</td>\n</tr>\n<tr>\n<td>-exec &lt;执行指令&gt;</td>\n<td>假设find指令的回传值为true，就执行该指令</td>\n</tr>\n<tr>\n<td>-ok &lt;执行指令&gt;</td>\n<td>此参数的效果和指定-exec类似，但在执行指令之前会先询问用户，若回答y或Y，则放弃执行命令</td>\n</tr>\n</tbody></table>\n<h3 id=\"文件类型参数列表\"><a href=\"#文件类型参数列表\" class=\"headerlink\" title=\"文件类型参数列表\"></a>文件类型参数列表</h3><table>\n<thead>\n<tr>\n<th>文件类型参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>f</code></td>\n<td>普通文件</td>\n</tr>\n<tr>\n<td><code>l</code></td>\n<td>符号连接</td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td>目录</td>\n</tr>\n<tr>\n<td><code>c</code></td>\n<td>字符设备</td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td>块设备</td>\n</tr>\n<tr>\n<td><code>s</code></td>\n<td>套接字</td>\n</tr>\n<tr>\n<td><code>p</code></td>\n<td>Fifo</td>\n</tr>\n</tbody></table>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"1-grep\"><a href=\"#1-grep\" class=\"headerlink\" title=\"1.grep\"></a>1.grep</h1><p>  grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。<br>  参考：<a href=\"https://man.linuxde.net/grep\">https://man.linuxde.net/grep</a></p>\n<h2 id=\"grep常用用法\"><a href=\"#grep常用用法\" class=\"headerlink\" title=\"grep常用用法\"></a>grep常用用法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@www ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep [-acinv] [--color=auto] '搜寻字符串' filename</span>\n选项与参数：\n-a ：将 binary 文件以 text 文件的方式搜寻数据\n-c ：计算找到 <span class=\"token string\">'搜寻字符串'</span> 的次数\n-i ：忽略大小写的不同，所以大小写视为相同\n-n ：顺便输出行号\n-v ：反向选择，亦即显示出没有 <span class=\"token string\">'搜寻字符串'</span> 内容的那一行！\n--color<span class=\"token operator\">=</span>auto ：可以将找到的关键词部分加上颜色的显示喔！\n\ngrep命令常见用法\n在文件中搜索一个单词，命令会返回一个包含“match_pattern”的文本行：\n\n<span class=\"token function\">grep</span> match_pattern file_name\n<span class=\"token function\">grep</span> <span class=\"token string\">\"match_pattern\"</span> file_name\n在多个文件中查找：\n\n<span class=\"token function\">grep</span> <span class=\"token string\">\"match_pattern\"</span> file_1 file_2 file_3 <span class=\"token punctuation\">..</span>.\n输出除之外的所有行 -v 选项：\n\n<span class=\"token function\">grep</span> -v <span class=\"token string\">\"match_pattern\"</span> file_name\n标记匹配颜色 --color<span class=\"token operator\">=</span>auto 选项：\n\n<span class=\"token function\">grep</span> <span class=\"token string\">\"match_pattern\"</span> file_name --color<span class=\"token operator\">=</span>auto\n使用正则表达式 -E 选项：\n\n<span class=\"token function\">grep</span> -E <span class=\"token string\">\"[1-9]+\"</span>\n或\n<span class=\"token function\">egrep</span> <span class=\"token string\">\"[1-9]+\"</span>\n只输出文件中匹配到的部分 -o 选项：\n\n<span class=\"token builtin class-name\">echo</span> this is a <span class=\"token builtin class-name\">test</span> line. <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -o -E <span class=\"token string\">\"[a-z]+\\.\"</span>\nline.\n\n<span class=\"token builtin class-name\">echo</span> this is a <span class=\"token builtin class-name\">test</span> line. <span class=\"token operator\">|</span> <span class=\"token function\">egrep</span> -o <span class=\"token string\">\"[a-z]+\\.\"</span>\nline.\n统计文件或者文本中包含匹配字符串的行数 -c 选项：\n\n<span class=\"token function\">grep</span> -c <span class=\"token string\">\"text\"</span> file_name\n输出包含匹配字符串的行数 -n 选项：\n\n<span class=\"token function\">grep</span> <span class=\"token string\">\"text\"</span> -n file_name\n或\n<span class=\"token function\">cat</span> file_name <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"text\"</span> -n\n\n<span class=\"token comment\">#多个文件</span>\n<span class=\"token function\">grep</span> <span class=\"token string\">\"text\"</span> -n file_1 file_2\n打印样式匹配所位于的字符或字节偏移：\n\n<span class=\"token builtin class-name\">echo</span> gun is not unix <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -b -o <span class=\"token string\">\"not\"</span>\n<span class=\"token number\">7</span>:not\n\n<span class=\"token comment\">#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项 -b -o 一般总是配合使用。</span>\n搜索多个文件并查找匹配文本在哪些文件中：\n\n<span class=\"token function\">grep</span> -l <span class=\"token string\">\"text\"</span> file1 file2 file3<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>显示目录中的可执行文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ll <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">\"*\"</span>   <span class=\"token comment\"># 添加-v可显示非可执行文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>grep递归搜索文件<br>在多级目录中对文本进行递归搜索：</p>\n<p>grep “text” . -r -n</p>\n<p>忽略匹配样式中的字符大小写：</p>\n<p>echo “hello world” | grep -i “HELLO”<br>hello</p>\n<h1 id=\"2-find\"><a href=\"#2-find\" class=\"headerlink\" title=\"2.find\"></a>2.find</h1><blockquote>\n<p>在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。</p>\n<p>参考：<a href=\"https://blog.csdn.net/qq_35246620/article/details/79104520\">https://blog.csdn.net/qq_35246620/article/details/79104520</a></p>\n</blockquote>\n<p>在 Linux 命令中，find用于在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名，其支持按名称查找、按正则表达式查找、按文件大小查找、按文件权限查找等多种查询方式。如果在使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。</p>\n<p>语法：find + 目标目录(路径) + &lt;选项&gt; + 参数</p>\n<h3 id=\"常用选项列表\"><a href=\"#常用选项列表\" class=\"headerlink\" title=\"常用选项列表\"></a>常用选项列表</h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-perm &lt;权限数值&gt;</td>\n<td>查找符合指定的权限数值的文件或目录</td>\n</tr>\n<tr>\n<td>-type &lt;文件类型&gt;</td>\n<td>只寻找符合指定的文件类型的文件</td>\n</tr>\n<tr>\n<td>-name &lt;范本样式&gt;</td>\n<td>指定字符串作为寻找文件或目录的范本样式</td>\n</tr>\n<tr>\n<td>-expty</td>\n<td>寻找文件大小为 0 Byte 的文件，或目录下没有任何子目录或文件的空目录</td>\n</tr>\n<tr>\n<td>-ls</td>\n<td>假设find指令的回传值为ture，就将文件或目录名称列出到标准输出</td>\n</tr>\n<tr>\n<td>-maxdepth &lt;目录层级&gt;</td>\n<td>设置最大目录层级</td>\n</tr>\n<tr>\n<td>-mindepth &lt;目录层级&gt;</td>\n<td>设置最小目录层级</td>\n</tr>\n<tr>\n<td>-exec &lt;执行指令&gt;</td>\n<td>假设find指令的回传值为true，就执行该指令</td>\n</tr>\n<tr>\n<td>-ok &lt;执行指令&gt;</td>\n<td>此参数的效果和指定-exec类似，但在执行指令之前会先询问用户，若回答y或Y，则放弃执行命令</td>\n</tr>\n</tbody></table>\n<h3 id=\"文件类型参数列表\"><a href=\"#文件类型参数列表\" class=\"headerlink\" title=\"文件类型参数列表\"></a>文件类型参数列表</h3><table>\n<thead>\n<tr>\n<th>文件类型参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>f</code></td>\n<td>普通文件</td>\n</tr>\n<tr>\n<td><code>l</code></td>\n<td>符号连接</td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td>目录</td>\n</tr>\n<tr>\n<td><code>c</code></td>\n<td>字符设备</td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td>块设备</td>\n</tr>\n<tr>\n<td><code>s</code></td>\n<td>套接字</td>\n</tr>\n<tr>\n<td><code>p</code></td>\n<td>Fifo</td>\n</tr>\n</tbody></table>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>"},{"title":"Schedule-Python周期性任务调度工具","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-25T03:22:28.000Z","password":null,"summary":null,"_content":"# Schedule-python周期性任务调度工具\n\n如果你想在Linux服务器上周期性地执行某个 Python 脚本，最出名的选择应该是 Crontab 脚本，但是 Crontab 具有以下缺点：\n\n**`1.不方便执行**秒级的任务**。`** \n\n**`2.当需要执行的定时任务有上百个的时候，Crontab的**管理就会特别不方便**。`** \n\n另外一个选择是 Celery，但是 Celery 的配置比较麻烦，如果你只是需要一个轻量级的调度工具，Celery 不会是一个好选择。\n\n在你想要使用一个轻量级的任务调度工具，而且希望它尽量简单、容易使用、不需要外部依赖，最好能够容纳 Crontab 的所有基本功能，那么 Schedule 模块是你的不二之选。\n\n使用它来调度任务可能只需要几行代码，感受一下：\n\n```python\n \nimport schedule  \nimport time  \n  \ndef job():  \n    print(\"I'm working...\")  \n  \nschedule.every(10).minutes.do(job)  \n  \nwhile True:  \n    schedule.run_pending()  \n    time.sleep(1)\n```\n\n  \n\n上面的代码表示每10分钟执行一次 job 函数，非常简单方便。你只需要引入 schedule 模块，通过调用 **`scedule.every(时间数).时间类型.do(job)`**  发布周期任务。\n\n发布后的周期任务需要用 **`run_pending`** 函数来检测是否执行，因此需要一个 **`While`** 循环不断地轮询这个函数。\n\n下面具体讲讲Schedule模块的安装和初级、进阶使用方法。\n\n## _**1.准备**_\n\n  \n\n\n开始之前，你要确保Python和pip已经成功安装在电脑上，如果没有，可以访问这篇文章：[超详细Python安装指南](http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&mid=2247485004&idx=1&sn=6f89120cf926e71c7eb4788744ff625f&chksm=eb25e4c5dc526dd31f216f56b963179a0bc301a5654644ef98f436aa4740caa6f2774046296f&scene=21#wechat_redirect) 进行安装。  \n\n(可选1) 如果你用Python的目的是数据分析，可以直接安装Anaconda：[Python数据分析与挖掘好帮手—Anaconda](http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&mid=2247486014&idx=1&sn=4519422fbd83b5feffcbb21552226bc3&chksm=eb25e8b7dc5261a1aef2fa400ca7bcaa8c06394ea1f9a5860ab02bcf95d4664f41903b12bbd8&scene=21#wechat_redirect)，它内置了Python和pip.\n\n(可选2) 此外，推荐大家用VSCode编辑器，它有许多的优点：[Python 编程的最好搭档—VSCode 详细指南](http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&mid=2247485849&idx=1&sn=ec098cf67a55bd1d61d4513397434c94&chksm=eb25eb10dc52620682db716d206c18b00bd53c01743729a9dea381e1791566a04a06f1fabca5&scene=21#wechat_redirect)。\n\n**请选择以下任一种方式输入命令安装依赖**：  \n1. Windows 环境 打开 Cmd (开始-运行-CMD)。  \n2. MacOS 环境 打开 Terminal (command+空格输入Terminal)。  \n3. 如果你用的是 VSCode编辑器 或 Pycharm，可以直接使用界面下方的Terminal.\n\n```shell\npip install schedule\n```\n\n  \n\n## _**2.基本使用**_\n\n最基本的使用在文首已经提到过，下面给大家展示更多的调度任务例子：\n\n```python\n \nimport schedule  \nimport time  \n  \ndef job():  \n    print(\"I'm working...\")  \n  \n# 每十分钟执行任务  \nschedule.every(10).minutes.do(job)  \n# 每个小时执行任务  \nschedule.every().hour.do(job)  \n# 每天的10:30执行任务  \nschedule.every().day.at(\"10:30\").do(job)  \n# 每个月执行任务  \nschedule.every().monday.do(job)  \n# 每个星期三的13:15分执行任务  \nschedule.every().wednesday.at(\"13:15\").do(job)  \n# 每分钟的第17秒执行任务  \nschedule.every().minute.at(\":17\").do(job)  \n  \nwhile True:  \n    schedule.run_pending()  \n    time.sleep(1)\n```\n\n  \n\n可以看到，从月到秒的配置，上面的例子都覆盖到了。不过**如果你想只运行一次任务**的话，可以这么配：\n\n```python\n \nimport schedule  \nimport time  \n  \ndef job_that_executes_once():  \n    # 此处编写的任务只会执行一次...  \n    return schedule.CancelJob  \n  \nschedule.every().day.at('22:30').do(job_that_executes_once)  \n  \nwhile True:  \n    schedule.run_pending()  \n    time.sleep(1)\n```\n\n  \n\n**参数传递**\n\n如果你有参数需要传递给作业去执行，你只需要这么做：\n\n```python\n \nimport schedule  \n  \ndef greet(name):  \n    print('Hello', name)  \n  \n# do() 将额外的参数传递给job函数  \nschedule.every(2).seconds.do(greet, name='Alice')  \nschedule.every(4).seconds.do(greet, name='Bob')\n```\n\n  \n\n**获取目前所有的作业**\n\n如果你想获取目前所有的作业：\n\n```python\n \nimport schedule  \n  \ndef hello():  \n    print('Hello world')  \n  \nschedule.every().second.do(hello)  \n  \nall_jobs = schedule.get_jobs()\n```\n\n  \n\n**取消所有作业**\n\n如果某些机制触发了，你需要立即清除当前程序的所有作业：\n\n```python\n \nimport schedule  \n  \ndef greet(name):  \n    print('Hello {}'.format(name))  \n  \nschedule.every().second.do(greet)  \n  \nschedule.clear()\n```\n\n  \n\n**标签功能**\n\n在设置作业的时候，为了后续方便管理作业，你可以给作业打个标签，这样你可以通过标签过滤获取作业或取消作业。\n\n```python\n \nimport schedule  \n  \ndef greet(name):  \n    print('Hello {}'.format(name))  \n  \n# .tag 打标签  \nschedule.every().day.do(greet, 'Andrea').tag('daily-tasks', 'friend')  \nschedule.every().hour.do(greet, 'John').tag('hourly-tasks', 'friend')  \nschedule.every().hour.do(greet, 'Monica').tag('hourly-tasks', 'customer')  \nschedule.every().day.do(greet, 'Derek').tag('daily-tasks', 'guest')  \n  \n# get_jobs(标签)：可以获取所有该标签的任务  \nfriends = schedule.get_jobs('friend')  \n  \n# 取消所有 daily-tasks 标签的任务  \nschedule.clear('daily-tasks')\n```\n\n**设定作业截止时间**\n\n如果你需要让某个作业到某个时间截止，你可以通过这个方法：\n\n```python\n \nimport schedule  \nfrom datetime import datetime, timedelta, time  \n  \ndef job():  \n    print('Boo')  \n  \n# 每个小时运行作业，18:30后停止  \nschedule.every(1).hours.until(\"18:30\").do(job)  \n  \n# 每个小时运行作业，2030-01-01 18:33 today  \nschedule.every(1).hours.until(\"2030-01-01 18:33\").do(job)  \n  \n# 每个小时运行作业，8个小时后停止  \nschedule.every(1).hours.until(timedelta(hours=8)).do(job)  \n  \n# 每个小时运行作业，11:32:42后停止  \nschedule.every(1).hours.until(time(11, 33, 42)).do(job)  \n  \n# 每个小时运行作业，2020-5-17 11:36:20后停止  \nschedule.every(1).hours.until(datetime(2020, 5, 17, 11, 36, 20)).do(job)\n```\n\n  \n\n截止日期之后，该作业将无法运行。\n\n**立即运行所有作业，而不管其安排如何**\n\n如果某个机制触发了，你需要立即运行所有作业，可以调用 **`schedule.run_all()`** :\n\n```python\n \nimport schedule  \n  \ndef job_1():  \n    print('Foo')  \n  \ndef job_2():  \n    print('Bar')  \n  \nschedule.every().monday.at(\"12:40\").do(job_1)  \nschedule.every().tuesday.at(\"16:40\").do(job_2)  \n  \nschedule.run_all()  \n  \n# 立即运行所有作业，每次作业间隔10秒  \nschedule.run_all(delay_seconds=10)\n```\n\n  \n\n## _**3.高级使用**_\n\n  \n\n  \n\n**装饰器安排作业**\n\n如果你觉得设定作业这种形式太啰嗦了，也可以使用装饰器模式：\n\n```python\n \nfrom schedule import every, repeat, run_pending  \nimport time  \n  \n# 此装饰器效果等同于 schedule.every(10).minutes.do(job)  \n@repeat(every(10).minutes)  \ndef job():  \n    print(\"I am a scheduled job\")  \n  \nwhile True:  \n    run_pending()  \n    time.sleep(1)\n```\n\n  \n\n**并行执行**\n\n默认情况下，Schedule 按顺序执行所有作业。其背后的原因是，很难找到让每个人都高兴的并行执行模型。\n\n不过你可以通过多线程的形式来运行每个作业以解决此限制：\n\n```python\n \nimport threading  \nimport time  \nimport schedule  \n  \ndef job1():  \n    print(\"I'm running on thread %s\" % threading.current_thread())  \ndef job2():  \n    print(\"I'm running on thread %s\" % threading.current_thread())  \ndef job3():  \n    print(\"I'm running on thread %s\" % threading.current_thread())  \n  \ndef run_threaded(job_func):  \n    job_thread = threading.Thread(target=job_func)  \n    job_thread.start()  \n  \nschedule.every(10).seconds.do(run_threaded, job1)  \nschedule.every(10).seconds.do(run_threaded, job2)  \nschedule.every(10).seconds.do(run_threaded, job3)  \n  \nwhile True:  \n    schedule.run_pending()  \n    time.sleep(1)\n```\n\n  \n\n**日志记录**\n\nSchedule 模块同时也支持 logging 日志记录，这么使用：\n\n```python\n \nimport schedule  \nimport logging  \n  \nlogging.basicConfig()  \nschedule_logger = logging.getLogger('schedule')  \n# 日志级别为DEBUG  \nschedule_logger.setLevel(level=logging.DEBUG)  \n  \ndef job():  \n    print(\"Hello, Logs\")  \n  \nschedule.every().second.do(job)  \n  \nschedule.run_all()  \n  \nschedule.clear()\n```\n\n  \n\n效果如下：\n\n```shell\nDEBUG:schedule:Running *all* 1 jobs with 0s delay in between  \nDEBUG:schedule:Running job Job(interval=1, unit=seconds, do=job, args=(), kwargs={})  \nHello, Logs  \nDEBUG:schedule:Deleting *all* jobs\n```\n\n  \n\n**异常处理**\n\nSchedule 不会自动捕捉异常，它遇到异常会直接抛出，这会导致一个严重的问题：**后续所有的作业都会被中断执行**，因此我们需要捕捉到这些异常。\n\n你可以手动捕捉，但是某些你预料不到的情况需要程序进行自动捕获，加一个装饰器就能做到了：\n\n```python\n \nimport functools  \n  \ndef catch_exceptions(cancel_on_failure=False):  \n    def catch_exceptions_decorator(job_func):  \n        @functools.wraps(job_func)  \n        def wrapper(*args, **kwargs):  \n            try:  \n                return job_func(*args, **kwargs)  \n            except:  \n                import traceback  \n                print(traceback.format_exc())  \n                if cancel_on_failure:  \n                    return schedule.CancelJob  \n        return wrapper  \n    return catch_exceptions_decorator  \n  \n@catch_exceptions(cancel_on_failure=True)  \ndef bad_task():  \n    return 1 / 0  \n  \nschedule.every(5).minutes.do(bad_task)\n```\n\n  \n\n这样，**`bad_task`** 在执行时遇到的任何错误，都会被 **`catch_exceptions`** 捕获，这点在保证调度任务正常运转的时候非常关键。\n\n  \n\n","source":"_posts/Schedule-Python周期性任务调度工具.md","raw":"---\ntitle: Schedule-Python周期性任务调度工具\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-25 11:22:28\npassword:\nsummary:\ntags:\n  - Schedule\n  - Python\ncategories:\n  - Python\n  - 工具\n---\n# Schedule-python周期性任务调度工具\n\n如果你想在Linux服务器上周期性地执行某个 Python 脚本，最出名的选择应该是 Crontab 脚本，但是 Crontab 具有以下缺点：\n\n**`1.不方便执行**秒级的任务**。`** \n\n**`2.当需要执行的定时任务有上百个的时候，Crontab的**管理就会特别不方便**。`** \n\n另外一个选择是 Celery，但是 Celery 的配置比较麻烦，如果你只是需要一个轻量级的调度工具，Celery 不会是一个好选择。\n\n在你想要使用一个轻量级的任务调度工具，而且希望它尽量简单、容易使用、不需要外部依赖，最好能够容纳 Crontab 的所有基本功能，那么 Schedule 模块是你的不二之选。\n\n使用它来调度任务可能只需要几行代码，感受一下：\n\n```python\n \nimport schedule  \nimport time  \n  \ndef job():  \n    print(\"I'm working...\")  \n  \nschedule.every(10).minutes.do(job)  \n  \nwhile True:  \n    schedule.run_pending()  \n    time.sleep(1)\n```\n\n  \n\n上面的代码表示每10分钟执行一次 job 函数，非常简单方便。你只需要引入 schedule 模块，通过调用 **`scedule.every(时间数).时间类型.do(job)`**  发布周期任务。\n\n发布后的周期任务需要用 **`run_pending`** 函数来检测是否执行，因此需要一个 **`While`** 循环不断地轮询这个函数。\n\n下面具体讲讲Schedule模块的安装和初级、进阶使用方法。\n\n## _**1.准备**_\n\n  \n\n\n开始之前，你要确保Python和pip已经成功安装在电脑上，如果没有，可以访问这篇文章：[超详细Python安装指南](http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&mid=2247485004&idx=1&sn=6f89120cf926e71c7eb4788744ff625f&chksm=eb25e4c5dc526dd31f216f56b963179a0bc301a5654644ef98f436aa4740caa6f2774046296f&scene=21#wechat_redirect) 进行安装。  \n\n(可选1) 如果你用Python的目的是数据分析，可以直接安装Anaconda：[Python数据分析与挖掘好帮手—Anaconda](http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&mid=2247486014&idx=1&sn=4519422fbd83b5feffcbb21552226bc3&chksm=eb25e8b7dc5261a1aef2fa400ca7bcaa8c06394ea1f9a5860ab02bcf95d4664f41903b12bbd8&scene=21#wechat_redirect)，它内置了Python和pip.\n\n(可选2) 此外，推荐大家用VSCode编辑器，它有许多的优点：[Python 编程的最好搭档—VSCode 详细指南](http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&mid=2247485849&idx=1&sn=ec098cf67a55bd1d61d4513397434c94&chksm=eb25eb10dc52620682db716d206c18b00bd53c01743729a9dea381e1791566a04a06f1fabca5&scene=21#wechat_redirect)。\n\n**请选择以下任一种方式输入命令安装依赖**：  \n1. Windows 环境 打开 Cmd (开始-运行-CMD)。  \n2. MacOS 环境 打开 Terminal (command+空格输入Terminal)。  \n3. 如果你用的是 VSCode编辑器 或 Pycharm，可以直接使用界面下方的Terminal.\n\n```shell\npip install schedule\n```\n\n  \n\n## _**2.基本使用**_\n\n最基本的使用在文首已经提到过，下面给大家展示更多的调度任务例子：\n\n```python\n \nimport schedule  \nimport time  \n  \ndef job():  \n    print(\"I'm working...\")  \n  \n# 每十分钟执行任务  \nschedule.every(10).minutes.do(job)  \n# 每个小时执行任务  \nschedule.every().hour.do(job)  \n# 每天的10:30执行任务  \nschedule.every().day.at(\"10:30\").do(job)  \n# 每个月执行任务  \nschedule.every().monday.do(job)  \n# 每个星期三的13:15分执行任务  \nschedule.every().wednesday.at(\"13:15\").do(job)  \n# 每分钟的第17秒执行任务  \nschedule.every().minute.at(\":17\").do(job)  \n  \nwhile True:  \n    schedule.run_pending()  \n    time.sleep(1)\n```\n\n  \n\n可以看到，从月到秒的配置，上面的例子都覆盖到了。不过**如果你想只运行一次任务**的话，可以这么配：\n\n```python\n \nimport schedule  \nimport time  \n  \ndef job_that_executes_once():  \n    # 此处编写的任务只会执行一次...  \n    return schedule.CancelJob  \n  \nschedule.every().day.at('22:30').do(job_that_executes_once)  \n  \nwhile True:  \n    schedule.run_pending()  \n    time.sleep(1)\n```\n\n  \n\n**参数传递**\n\n如果你有参数需要传递给作业去执行，你只需要这么做：\n\n```python\n \nimport schedule  \n  \ndef greet(name):  \n    print('Hello', name)  \n  \n# do() 将额外的参数传递给job函数  \nschedule.every(2).seconds.do(greet, name='Alice')  \nschedule.every(4).seconds.do(greet, name='Bob')\n```\n\n  \n\n**获取目前所有的作业**\n\n如果你想获取目前所有的作业：\n\n```python\n \nimport schedule  \n  \ndef hello():  \n    print('Hello world')  \n  \nschedule.every().second.do(hello)  \n  \nall_jobs = schedule.get_jobs()\n```\n\n  \n\n**取消所有作业**\n\n如果某些机制触发了，你需要立即清除当前程序的所有作业：\n\n```python\n \nimport schedule  \n  \ndef greet(name):  \n    print('Hello {}'.format(name))  \n  \nschedule.every().second.do(greet)  \n  \nschedule.clear()\n```\n\n  \n\n**标签功能**\n\n在设置作业的时候，为了后续方便管理作业，你可以给作业打个标签，这样你可以通过标签过滤获取作业或取消作业。\n\n```python\n \nimport schedule  \n  \ndef greet(name):  \n    print('Hello {}'.format(name))  \n  \n# .tag 打标签  \nschedule.every().day.do(greet, 'Andrea').tag('daily-tasks', 'friend')  \nschedule.every().hour.do(greet, 'John').tag('hourly-tasks', 'friend')  \nschedule.every().hour.do(greet, 'Monica').tag('hourly-tasks', 'customer')  \nschedule.every().day.do(greet, 'Derek').tag('daily-tasks', 'guest')  \n  \n# get_jobs(标签)：可以获取所有该标签的任务  \nfriends = schedule.get_jobs('friend')  \n  \n# 取消所有 daily-tasks 标签的任务  \nschedule.clear('daily-tasks')\n```\n\n**设定作业截止时间**\n\n如果你需要让某个作业到某个时间截止，你可以通过这个方法：\n\n```python\n \nimport schedule  \nfrom datetime import datetime, timedelta, time  \n  \ndef job():  \n    print('Boo')  \n  \n# 每个小时运行作业，18:30后停止  \nschedule.every(1).hours.until(\"18:30\").do(job)  \n  \n# 每个小时运行作业，2030-01-01 18:33 today  \nschedule.every(1).hours.until(\"2030-01-01 18:33\").do(job)  \n  \n# 每个小时运行作业，8个小时后停止  \nschedule.every(1).hours.until(timedelta(hours=8)).do(job)  \n  \n# 每个小时运行作业，11:32:42后停止  \nschedule.every(1).hours.until(time(11, 33, 42)).do(job)  \n  \n# 每个小时运行作业，2020-5-17 11:36:20后停止  \nschedule.every(1).hours.until(datetime(2020, 5, 17, 11, 36, 20)).do(job)\n```\n\n  \n\n截止日期之后，该作业将无法运行。\n\n**立即运行所有作业，而不管其安排如何**\n\n如果某个机制触发了，你需要立即运行所有作业，可以调用 **`schedule.run_all()`** :\n\n```python\n \nimport schedule  \n  \ndef job_1():  \n    print('Foo')  \n  \ndef job_2():  \n    print('Bar')  \n  \nschedule.every().monday.at(\"12:40\").do(job_1)  \nschedule.every().tuesday.at(\"16:40\").do(job_2)  \n  \nschedule.run_all()  \n  \n# 立即运行所有作业，每次作业间隔10秒  \nschedule.run_all(delay_seconds=10)\n```\n\n  \n\n## _**3.高级使用**_\n\n  \n\n  \n\n**装饰器安排作业**\n\n如果你觉得设定作业这种形式太啰嗦了，也可以使用装饰器模式：\n\n```python\n \nfrom schedule import every, repeat, run_pending  \nimport time  \n  \n# 此装饰器效果等同于 schedule.every(10).minutes.do(job)  \n@repeat(every(10).minutes)  \ndef job():  \n    print(\"I am a scheduled job\")  \n  \nwhile True:  \n    run_pending()  \n    time.sleep(1)\n```\n\n  \n\n**并行执行**\n\n默认情况下，Schedule 按顺序执行所有作业。其背后的原因是，很难找到让每个人都高兴的并行执行模型。\n\n不过你可以通过多线程的形式来运行每个作业以解决此限制：\n\n```python\n \nimport threading  \nimport time  \nimport schedule  \n  \ndef job1():  \n    print(\"I'm running on thread %s\" % threading.current_thread())  \ndef job2():  \n    print(\"I'm running on thread %s\" % threading.current_thread())  \ndef job3():  \n    print(\"I'm running on thread %s\" % threading.current_thread())  \n  \ndef run_threaded(job_func):  \n    job_thread = threading.Thread(target=job_func)  \n    job_thread.start()  \n  \nschedule.every(10).seconds.do(run_threaded, job1)  \nschedule.every(10).seconds.do(run_threaded, job2)  \nschedule.every(10).seconds.do(run_threaded, job3)  \n  \nwhile True:  \n    schedule.run_pending()  \n    time.sleep(1)\n```\n\n  \n\n**日志记录**\n\nSchedule 模块同时也支持 logging 日志记录，这么使用：\n\n```python\n \nimport schedule  \nimport logging  \n  \nlogging.basicConfig()  \nschedule_logger = logging.getLogger('schedule')  \n# 日志级别为DEBUG  \nschedule_logger.setLevel(level=logging.DEBUG)  \n  \ndef job():  \n    print(\"Hello, Logs\")  \n  \nschedule.every().second.do(job)  \n  \nschedule.run_all()  \n  \nschedule.clear()\n```\n\n  \n\n效果如下：\n\n```shell\nDEBUG:schedule:Running *all* 1 jobs with 0s delay in between  \nDEBUG:schedule:Running job Job(interval=1, unit=seconds, do=job, args=(), kwargs={})  \nHello, Logs  \nDEBUG:schedule:Deleting *all* jobs\n```\n\n  \n\n**异常处理**\n\nSchedule 不会自动捕捉异常，它遇到异常会直接抛出，这会导致一个严重的问题：**后续所有的作业都会被中断执行**，因此我们需要捕捉到这些异常。\n\n你可以手动捕捉，但是某些你预料不到的情况需要程序进行自动捕获，加一个装饰器就能做到了：\n\n```python\n \nimport functools  \n  \ndef catch_exceptions(cancel_on_failure=False):  \n    def catch_exceptions_decorator(job_func):  \n        @functools.wraps(job_func)  \n        def wrapper(*args, **kwargs):  \n            try:  \n                return job_func(*args, **kwargs)  \n            except:  \n                import traceback  \n                print(traceback.format_exc())  \n                if cancel_on_failure:  \n                    return schedule.CancelJob  \n        return wrapper  \n    return catch_exceptions_decorator  \n  \n@catch_exceptions(cancel_on_failure=True)  \ndef bad_task():  \n    return 1 / 0  \n  \nschedule.every(5).minutes.do(bad_task)\n```\n\n  \n\n这样，**`bad_task`** 在执行时遇到的任何错误，都会被 **`catch_exceptions`** 捕获，这点在保证调度任务正常运转的时候非常关键。\n\n  \n\n","slug":"Schedule-Python周期性任务调度工具","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz392001p12mj3w431tzy","content":"<h1 id=\"Schedule-python周期性任务调度工具\"><a href=\"#Schedule-python周期性任务调度工具\" class=\"headerlink\" title=\"Schedule-python周期性任务调度工具\"></a>Schedule-python周期性任务调度工具</h1><p>如果你想在Linux服务器上周期性地执行某个 Python 脚本，最出名的选择应该是 Crontab 脚本，但是 Crontab 具有以下缺点：</p>\n<p><strong><code>1.不方便执行**秒级的任务**。</code></strong> </p>\n<p><strong><code>2.当需要执行的定时任务有上百个的时候，Crontab的**管理就会特别不方便**。</code></strong> </p>\n<p>另外一个选择是 Celery，但是 Celery 的配置比较麻烦，如果你只是需要一个轻量级的调度工具，Celery 不会是一个好选择。</p>\n<p>在你想要使用一个轻量级的任务调度工具，而且希望它尽量简单、容易使用、不需要外部依赖，最好能够容纳 Crontab 的所有基本功能，那么 Schedule 模块是你的不二之选。</p>\n<p>使用它来调度任务可能只需要几行代码，感受一下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">import</span> time  \n  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm working...\"</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    schedule<span class=\"token punctuation\">.</span>run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>上面的代码表示每10分钟执行一次 job 函数，非常简单方便。你只需要引入 schedule 模块，通过调用 <strong><code>scedule.every(时间数).时间类型.do(job)</code></strong> &nbsp;发布周期任务。</p>\n<p>发布后的周期任务需要用 <strong><code>run_pending</code></strong> 函数来检测是否执行，因此需要一个 <strong><code>While</code></strong> 循环不断地轮询这个函数。</p>\n<p>下面具体讲讲Schedule模块的安装和初级、进阶使用方法。</p>\n<h2 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1.准备\"></a><em><strong>1.准备</strong></em></h2><p>开始之前，你要确保Python和pip已经成功安装在电脑上，如果没有，可以访问这篇文章：<a href=\"http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&amp;mid=2247485004&amp;idx=1&amp;sn=6f89120cf926e71c7eb4788744ff625f&amp;chksm=eb25e4c5dc526dd31f216f56b963179a0bc301a5654644ef98f436aa4740caa6f2774046296f&amp;scene=21#wechat_redirect\">超详细Python安装指南</a>&nbsp;进行安装。  </p>\n<p>(可选1)&nbsp;如果你用Python的目的是数据分析，可以直接安装Anaconda：<a href=\"http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&amp;mid=2247486014&amp;idx=1&amp;sn=4519422fbd83b5feffcbb21552226bc3&amp;chksm=eb25e8b7dc5261a1aef2fa400ca7bcaa8c06394ea1f9a5860ab02bcf95d4664f41903b12bbd8&amp;scene=21#wechat_redirect\">Python数据分析与挖掘好帮手—Anaconda</a>，它内置了Python和pip.</p>\n<p>(可选2)&nbsp;此外，推荐大家用VSCode编辑器，它有许多的优点：<a href=\"http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&amp;mid=2247485849&amp;idx=1&amp;sn=ec098cf67a55bd1d61d4513397434c94&amp;chksm=eb25eb10dc52620682db716d206c18b00bd53c01743729a9dea381e1791566a04a06f1fabca5&amp;scene=21#wechat_redirect\">Python 编程的最好搭档—VSCode 详细指南</a>。</p>\n<p><strong>请选择以下任一种方式输入命令安装依赖</strong>：  </p>\n<ol>\n<li>Windows 环境 打开 Cmd (开始-运行-CMD)。  </li>\n<li>MacOS 环境 打开 Terminal (command+空格输入Terminal)。  </li>\n<li>如果你用的是 VSCode编辑器 或 Pycharm，可以直接使用界面下方的Terminal.</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> schedule<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-基本使用\"><a href=\"#2-基本使用\" class=\"headerlink\" title=\"2.基本使用\"></a><em><strong>2.基本使用</strong></em></h2><p>最基本的使用在文首已经提到过，下面给大家展示更多的调度任务例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">import</span> time  \n  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm working...\"</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每十分钟执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每个小时执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hour<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每天的10:30执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\"10:30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每个月执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>monday<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每个星期三的13:15分执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>wednesday<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\"13:15\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每分钟的第17秒执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minute<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\":17\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    schedule<span class=\"token punctuation\">.</span>run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>可以看到，从月到秒的配置，上面的例子都覆盖到了。不过<strong>如果你想只运行一次任务</strong>的话，可以这么配：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">import</span> time  \n  \n<span class=\"token keyword\">def</span> job_that_executes_once<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token comment\"># 此处编写的任务只会执行一次...  </span>\n    <span class=\"token keyword\">return</span> schedule<span class=\"token punctuation\">.</span>CancelJob  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">'22:30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job_that_executes_once<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    schedule<span class=\"token punctuation\">.</span>run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>参数传递</strong></p>\n<p>如果你有参数需要传递给作业去执行，你只需要这么做：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> greet<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># do() 将额外的参数传递给job函数  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>获取目前所有的作业</strong></p>\n<p>如果你想获取目前所有的作业：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span>  \n  \nall_jobs <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>get_jobs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>取消所有作业</strong></p>\n<p>如果某些机制触发了，你需要立即清除当前程序的所有作业：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> greet<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>标签功能</strong></p>\n<p>在设置作业的时候，为了后续方便管理作业，你可以给作业打个标签，这样你可以通过标签过滤获取作业或取消作业。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> greet<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># .tag 打标签  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> <span class=\"token string\">'Andrea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span><span class=\"token string\">'daily-tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'friend'</span><span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hour<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span><span class=\"token string\">'hourly-tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'friend'</span><span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hour<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> <span class=\"token string\">'Monica'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span><span class=\"token string\">'hourly-tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'customer'</span><span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> <span class=\"token string\">'Derek'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span><span class=\"token string\">'daily-tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'guest'</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># get_jobs(标签)：可以获取所有该标签的任务  </span>\nfriends <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>get_jobs<span class=\"token punctuation\">(</span><span class=\"token string\">'friend'</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 取消所有 daily-tasks 标签的任务  </span>\nschedule<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token string\">'daily-tasks'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>设定作业截止时间</strong></p>\n<p>如果你需要让某个作业到某个时间截止，你可以通过这个方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime<span class=\"token punctuation\">,</span> timedelta<span class=\"token punctuation\">,</span> time  \n  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Boo'</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，18:30后停止  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span><span class=\"token string\">\"18:30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，2030-01-01 18:33 today  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span><span class=\"token string\">\"2030-01-01 18:33\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，8个小时后停止  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span>timedelta<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，11:32:42后停止  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，2020-5-17 11:36:20后停止  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>截止日期之后，该作业将无法运行。</p>\n<p><strong>立即运行所有作业，而不管其安排如何</strong></p>\n<p>如果某个机制触发了，你需要立即运行所有作业，可以调用 <strong><code>schedule.run_all()</code></strong> :</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> job_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">def</span> job_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bar'</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>monday<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\"12:40\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job_1<span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tuesday<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\"16:40\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job_2<span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>run_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 立即运行所有作业，每次作业间隔10秒  </span>\nschedule<span class=\"token punctuation\">.</span>run_all<span class=\"token punctuation\">(</span>delay_seconds<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"3-高级使用\"><a href=\"#3-高级使用\" class=\"headerlink\" title=\"3.高级使用\"></a><em><strong>3.高级使用</strong></em></h2><p><strong>装饰器安排作业</strong></p>\n<p>如果你觉得设定作业这种形式太啰嗦了，也可以使用装饰器模式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">from</span> schedule <span class=\"token keyword\">import</span> every<span class=\"token punctuation\">,</span> repeat<span class=\"token punctuation\">,</span> run_pending  \n<span class=\"token keyword\">import</span> time  \n  \n<span class=\"token comment\"># 此装饰器效果等同于 schedule.every(10).minutes.do(job)  </span>\n<span class=\"token decorator annotation punctuation\">@repeat</span><span class=\"token punctuation\">(</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a scheduled job\"</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>并行执行</strong></p>\n<p>默认情况下，Schedule 按顺序执行所有作业。其背后的原因是，很难找到让每个人都高兴的并行执行模型。</p>\n<p>不过你可以通过多线程的形式来运行每个作业以解决此限制：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> threading  \n<span class=\"token keyword\">import</span> time  \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> job1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm running on thread %s\"</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> job2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm running on thread %s\"</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> job3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm running on thread %s\"</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">def</span> run_threaded<span class=\"token punctuation\">(</span>job_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    job_thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>job_func<span class=\"token punctuation\">)</span>  \n    job_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>run_threaded<span class=\"token punctuation\">,</span> job1<span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>run_threaded<span class=\"token punctuation\">,</span> job2<span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>run_threaded<span class=\"token punctuation\">,</span> job3<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    schedule<span class=\"token punctuation\">.</span>run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>日志记录</strong></p>\n<p>Schedule 模块同时也支持 logging 日志记录，这么使用：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">import</span> logging  \n  \nlogging<span class=\"token punctuation\">.</span>basicConfig<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \nschedule_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'schedule'</span><span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 日志级别为DEBUG  </span>\nschedule_logger<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>level<span class=\"token operator\">=</span>logging<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Logs\"</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>run_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>效果如下：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">DEBUG:schedule:Running *all* <span class=\"token number\">1</span> <span class=\"token function\">jobs</span> with 0s delay <span class=\"token keyword\">in</span> between  \nDEBUG:schedule:Running job Job<span class=\"token punctuation\">(</span>interval<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">unit</span><span class=\"token operator\">=</span>seconds, <span class=\"token assign-left variable\">do</span><span class=\"token operator\">=</span>job, <span class=\"token assign-left variable\">args</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">kwargs</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \nHello, Logs  \nDEBUG:schedule:Deleting *all* <span class=\"token function\">jobs</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>异常处理</strong></p>\n<p>Schedule 不会自动捕捉异常，它遇到异常会直接抛出，这会导致一个严重的问题：<strong>后续所有的作业都会被中断执行</strong>，因此我们需要捕捉到这些异常。</p>\n<p>你可以手动捕捉，但是某些你预料不到的情况需要程序进行自动捕获，加一个装饰器就能做到了：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> functools  \n  \n<span class=\"token keyword\">def</span> catch_exceptions<span class=\"token punctuation\">(</span>cancel_on_failure<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">def</span> catch_exceptions_decorator<span class=\"token punctuation\">(</span>job_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n        <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>job_func<span class=\"token punctuation\">)</span>  \n        <span class=\"token keyword\">def</span> wrapper<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  \n                <span class=\"token keyword\">return</span> job_func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>  \n            <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>  \n                <span class=\"token keyword\">import</span> traceback  \n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token keyword\">if</span> cancel_on_failure<span class=\"token punctuation\">:</span>  \n                    <span class=\"token keyword\">return</span> schedule<span class=\"token punctuation\">.</span>CancelJob  \n        <span class=\"token keyword\">return</span> wrapper  \n    <span class=\"token keyword\">return</span> catch_exceptions_decorator  \n  \n<span class=\"token decorator annotation punctuation\">@catch_exceptions</span><span class=\"token punctuation\">(</span>cancel_on_failure<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> bad_task<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>bad_task<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这样，**<code>bad_task</code>** 在执行时遇到的任何错误，都会被 <strong><code>catch_exceptions</code></strong> 捕获，这点在保证调度任务正常运转的时候非常关键。</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Schedule-python周期性任务调度工具\"><a href=\"#Schedule-python周期性任务调度工具\" class=\"headerlink\" title=\"Schedule-python周期性任务调度工具\"></a>Schedule-python周期性任务调度工具</h1><p>如果你想在Linux服务器上周期性地执行某个 Python 脚本，最出名的选择应该是 Crontab 脚本，但是 Crontab 具有以下缺点：</p>\n<p><strong><code>1.不方便执行**秒级的任务**。</code></strong> </p>\n<p><strong><code>2.当需要执行的定时任务有上百个的时候，Crontab的**管理就会特别不方便**。</code></strong> </p>\n<p>另外一个选择是 Celery，但是 Celery 的配置比较麻烦，如果你只是需要一个轻量级的调度工具，Celery 不会是一个好选择。</p>\n<p>在你想要使用一个轻量级的任务调度工具，而且希望它尽量简单、容易使用、不需要外部依赖，最好能够容纳 Crontab 的所有基本功能，那么 Schedule 模块是你的不二之选。</p>\n<p>使用它来调度任务可能只需要几行代码，感受一下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">import</span> time  \n  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm working...\"</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    schedule<span class=\"token punctuation\">.</span>run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>上面的代码表示每10分钟执行一次 job 函数，非常简单方便。你只需要引入 schedule 模块，通过调用 <strong><code>scedule.every(时间数).时间类型.do(job)</code></strong>  发布周期任务。</p>\n<p>发布后的周期任务需要用 <strong><code>run_pending</code></strong> 函数来检测是否执行，因此需要一个 <strong><code>While</code></strong> 循环不断地轮询这个函数。</p>\n<p>下面具体讲讲Schedule模块的安装和初级、进阶使用方法。</p>\n<h2 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1.准备\"></a><em><strong>1.准备</strong></em></h2><p>开始之前，你要确保Python和pip已经成功安装在电脑上，如果没有，可以访问这篇文章：<a href=\"http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&mid=2247485004&idx=1&sn=6f89120cf926e71c7eb4788744ff625f&chksm=eb25e4c5dc526dd31f216f56b963179a0bc301a5654644ef98f436aa4740caa6f2774046296f&scene=21#wechat_redirect\">超详细Python安装指南</a> 进行安装。  </p>\n<p>(可选1) 如果你用Python的目的是数据分析，可以直接安装Anaconda：<a href=\"http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&mid=2247486014&idx=1&sn=4519422fbd83b5feffcbb21552226bc3&chksm=eb25e8b7dc5261a1aef2fa400ca7bcaa8c06394ea1f9a5860ab02bcf95d4664f41903b12bbd8&scene=21#wechat_redirect\">Python数据分析与挖掘好帮手—Anaconda</a>，它内置了Python和pip.</p>\n<p>(可选2) 此外，推荐大家用VSCode编辑器，它有许多的优点：<a href=\"http://mp.weixin.qq.com/s?__biz=MzI3MzM0ODU4Mg==&mid=2247485849&idx=1&sn=ec098cf67a55bd1d61d4513397434c94&chksm=eb25eb10dc52620682db716d206c18b00bd53c01743729a9dea381e1791566a04a06f1fabca5&scene=21#wechat_redirect\">Python 编程的最好搭档—VSCode 详细指南</a>。</p>\n<p><strong>请选择以下任一种方式输入命令安装依赖</strong>：  </p>\n<ol>\n<li>Windows 环境 打开 Cmd (开始-运行-CMD)。  </li>\n<li>MacOS 环境 打开 Terminal (command+空格输入Terminal)。  </li>\n<li>如果你用的是 VSCode编辑器 或 Pycharm，可以直接使用界面下方的Terminal.</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> schedule<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-基本使用\"><a href=\"#2-基本使用\" class=\"headerlink\" title=\"2.基本使用\"></a><em><strong>2.基本使用</strong></em></h2><p>最基本的使用在文首已经提到过，下面给大家展示更多的调度任务例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">import</span> time  \n  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm working...\"</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每十分钟执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每个小时执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hour<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每天的10:30执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\"10:30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每个月执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>monday<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每个星期三的13:15分执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>wednesday<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\"13:15\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 每分钟的第17秒执行任务  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minute<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\":17\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    schedule<span class=\"token punctuation\">.</span>run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>可以看到，从月到秒的配置，上面的例子都覆盖到了。不过<strong>如果你想只运行一次任务</strong>的话，可以这么配：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">import</span> time  \n  \n<span class=\"token keyword\">def</span> job_that_executes_once<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token comment\"># 此处编写的任务只会执行一次...  </span>\n    <span class=\"token keyword\">return</span> schedule<span class=\"token punctuation\">.</span>CancelJob  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">'22:30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job_that_executes_once<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    schedule<span class=\"token punctuation\">.</span>run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>参数传递</strong></p>\n<p>如果你有参数需要传递给作业去执行，你只需要这么做：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> greet<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># do() 将额外的参数传递给job函数  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>获取目前所有的作业</strong></p>\n<p>如果你想获取目前所有的作业：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span>  \n  \nall_jobs <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>get_jobs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>取消所有作业</strong></p>\n<p>如果某些机制触发了，你需要立即清除当前程序的所有作业：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> greet<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello &#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>标签功能</strong></p>\n<p>在设置作业的时候，为了后续方便管理作业，你可以给作业打个标签，这样你可以通过标签过滤获取作业或取消作业。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> greet<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello &#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># .tag 打标签  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> <span class=\"token string\">'Andrea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span><span class=\"token string\">'daily-tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'friend'</span><span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hour<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span><span class=\"token string\">'hourly-tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'friend'</span><span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hour<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> <span class=\"token string\">'Monica'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span><span class=\"token string\">'hourly-tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'customer'</span><span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">,</span> <span class=\"token string\">'Derek'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span><span class=\"token string\">'daily-tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'guest'</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># get_jobs(标签)：可以获取所有该标签的任务  </span>\nfriends <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>get_jobs<span class=\"token punctuation\">(</span><span class=\"token string\">'friend'</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 取消所有 daily-tasks 标签的任务  </span>\nschedule<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token string\">'daily-tasks'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>设定作业截止时间</strong></p>\n<p>如果你需要让某个作业到某个时间截止，你可以通过这个方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime<span class=\"token punctuation\">,</span> timedelta<span class=\"token punctuation\">,</span> time  \n  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Boo'</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，18:30后停止  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span><span class=\"token string\">\"18:30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，2030-01-01 18:33 today  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span><span class=\"token string\">\"2030-01-01 18:33\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，8个小时后停止  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span>timedelta<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，11:32:42后停止  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 每个小时运行作业，2020-5-17 11:36:20后停止  </span>\nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>截止日期之后，该作业将无法运行。</p>\n<p><strong>立即运行所有作业，而不管其安排如何</strong></p>\n<p>如果某个机制触发了，你需要立即运行所有作业，可以调用 <strong><code>schedule.run_all()</code></strong> :</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> job_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">def</span> job_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bar'</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>monday<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\"12:40\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job_1<span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tuesday<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">(</span><span class=\"token string\">\"16:40\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job_2<span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>run_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token comment\"># 立即运行所有作业，每次作业间隔10秒  </span>\nschedule<span class=\"token punctuation\">.</span>run_all<span class=\"token punctuation\">(</span>delay_seconds<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"3-高级使用\"><a href=\"#3-高级使用\" class=\"headerlink\" title=\"3.高级使用\"></a><em><strong>3.高级使用</strong></em></h2><p><strong>装饰器安排作业</strong></p>\n<p>如果你觉得设定作业这种形式太啰嗦了，也可以使用装饰器模式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">from</span> schedule <span class=\"token keyword\">import</span> every<span class=\"token punctuation\">,</span> repeat<span class=\"token punctuation\">,</span> run_pending  \n<span class=\"token keyword\">import</span> time  \n  \n<span class=\"token comment\"># 此装饰器效果等同于 schedule.every(10).minutes.do(job)  </span>\n<span class=\"token decorator annotation punctuation\">@repeat</span><span class=\"token punctuation\">(</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a scheduled job\"</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>并行执行</strong></p>\n<p>默认情况下，Schedule 按顺序执行所有作业。其背后的原因是，很难找到让每个人都高兴的并行执行模型。</p>\n<p>不过你可以通过多线程的形式来运行每个作业以解决此限制：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> threading  \n<span class=\"token keyword\">import</span> time  \n<span class=\"token keyword\">import</span> schedule  \n  \n<span class=\"token keyword\">def</span> job1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm running on thread %s\"</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> job2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm running on thread %s\"</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> job3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm running on thread %s\"</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">def</span> run_threaded<span class=\"token punctuation\">(</span>job_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    job_thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>job_func<span class=\"token punctuation\">)</span>  \n    job_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>run_threaded<span class=\"token punctuation\">,</span> job1<span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>run_threaded<span class=\"token punctuation\">,</span> job2<span class=\"token punctuation\">)</span>  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>run_threaded<span class=\"token punctuation\">,</span> job3<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  \n    schedule<span class=\"token punctuation\">.</span>run_pending<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>日志记录</strong></p>\n<p>Schedule 模块同时也支持 logging 日志记录，这么使用：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> schedule  \n<span class=\"token keyword\">import</span> logging  \n  \nlogging<span class=\"token punctuation\">.</span>basicConfig<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \nschedule_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'schedule'</span><span class=\"token punctuation\">)</span>  \n<span class=\"token comment\"># 日志级别为DEBUG  </span>\nschedule_logger<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>level<span class=\"token operator\">=</span>logging<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">def</span> job<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Logs\"</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>run_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  \nschedule<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>效果如下：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">DEBUG:schedule:Running *all* <span class=\"token number\">1</span> <span class=\"token function\">jobs</span> with 0s delay <span class=\"token keyword\">in</span> between  \nDEBUG:schedule:Running job Job<span class=\"token punctuation\">(</span>interval<span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">unit</span><span class=\"token operator\">=</span>seconds, <span class=\"token assign-left variable\">do</span><span class=\"token operator\">=</span>job, <span class=\"token assign-left variable\">args</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">kwargs</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  \nHello, Logs  \nDEBUG:schedule:Deleting *all* <span class=\"token function\">jobs</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>异常处理</strong></p>\n<p>Schedule 不会自动捕捉异常，它遇到异常会直接抛出，这会导致一个严重的问题：<strong>后续所有的作业都会被中断执行</strong>，因此我们需要捕捉到这些异常。</p>\n<p>你可以手动捕捉，但是某些你预料不到的情况需要程序进行自动捕获，加一个装饰器就能做到了：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> \n<span class=\"token keyword\">import</span> functools  \n  \n<span class=\"token keyword\">def</span> catch_exceptions<span class=\"token punctuation\">(</span>cancel_on_failure<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">def</span> catch_exceptions_decorator<span class=\"token punctuation\">(</span>job_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n        <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>job_func<span class=\"token punctuation\">)</span>  \n        <span class=\"token keyword\">def</span> wrapper<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  \n                <span class=\"token keyword\">return</span> job_func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>  \n            <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>  \n                <span class=\"token keyword\">import</span> traceback  \n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token keyword\">if</span> cancel_on_failure<span class=\"token punctuation\">:</span>  \n                    <span class=\"token keyword\">return</span> schedule<span class=\"token punctuation\">.</span>CancelJob  \n        <span class=\"token keyword\">return</span> wrapper  \n    <span class=\"token keyword\">return</span> catch_exceptions_decorator  \n  \n<span class=\"token decorator annotation punctuation\">@catch_exceptions</span><span class=\"token punctuation\">(</span>cancel_on_failure<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> bad_task<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span>  \n  \nschedule<span class=\"token punctuation\">.</span>every<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">.</span>do<span class=\"token punctuation\">(</span>bad_task<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这样，**<code>bad_task</code>** 在执行时遇到的任何错误，都会被 <strong><code>catch_exceptions</code></strong> 捕获，这点在保证调度任务正常运转的时候非常关键。</p>\n"},{"title":"python collections模块的高效数据类型","date":"2022-01-25T01:43:19.000Z","top":false,"_content":"\n# python collections模块的高效数据类型\n\n> python的collections是用于存储数据集合(比如列表list, 字典dict, 元组tuple和集合set)的容器。这些容器内置在Python中，可以直接使用。该collections模块提供了额外的，高性能的数据类型，可以增强你的代码，使事情变得更清洁，更容易。\n\n## Counter\nCounter()是字典对象的子类。Counter()可接收一个可迭代遍历的对象（例如字符串、列表或元组）作为参数，并返回计数器字典。字典的键将是可遍历对象中的唯一元素，每个键的值将是可迭代对象中的每个唯一元素对应的计数。\n\n```python\nfrom collections import Counter\n\nlst = [1, 2, 3, 3, 2, 1, 1, 1, 2, 2, 3, 1, 2, 1, 1]\ncounter = Counter(lst)\n\nprint(counter) # Conter ({1：7，2：2：5，3：3})\n\nprint(counter[1]) # 返回7。1的数量有7个\n```\n\n### most_common\nCounter对象最有用的功能是most_common()函数。将其应用于Counter对象时，它将返回N个最常见元素及其计数的列表，按从最常见到最不常见的顺序排列。\n\n```python\n\nlst = [1, 2, 3, 3, 2, 1, 1, 1, 2, 2, 3, 1, 2, 1, 1]\ncounter = Counter(lst)\nprint(counter.most_common(2)) # 返回最常见两个元素及其计数 \n# [（1，7），（2，5）]\n```\n\n### defaultdict\ndefaultdict工作起来完全像一个普通的Python字典，但它有额外的奖励。当您试图访问一个不存在的键，它不会引发错误，而是使用不存在的键创建新的key，其对应的默认值是根据创建defaultdict对象时作为参数传递的数据类型自动设置的。\n\n```python\n\nfrom collections import defaultdict\n\nnames_dict = defaultdict(int)\nnames_dict[\"Bob\"] = 1\nnames_dict[\"Katie\"] = 2\nsara_number = names_dict[\"Sara\"]\n\nprint(names_dict)\n# defaultdict(<class 'int'>, {'Bob': 1, 'Katie': 2, 'Sara': 0})\n```\n> 在普通字典中，这将引发错误。使用defaultdict后不再报错，而是自动以\"Sara\"创建一个新键key，其初始化值为0，是因为我们指定了int数据类型作为初始化值。\n\n如果要将设置列表类型数据做为一个key的初始化值，我们只需设置`names_dict = defaultdict(list)`，此时“Sara”将使用空列表初始化[]。此时打印结果如下所示：\n\n`defaultdict(<class 'int'>, {'Bob': 1, 'Katie': 2, 'Sara': []})`\n\n### deque\ndeque队列是在计算机科学里最基本的数据结构，遵循先入先出（FIFO）的原理。简单来说，这意味着添加到队列中的第一个对象也必须是要删除的第一个对象。我们只能在队列的前面插入内容，而只能从队列的后面删除内容，而队列中间没有任何动作。\n\ncollections模块提供的deque对象是能实现队列数据结构的优化版本。该功能的主要特色是能够保持队列的大小，即如果将队列的最大长度设置为10，则将deque根据FIFO原理添加和删除元素以保持最大长度始终为10。这是到目前为止，Python中队列的最佳实现。\n\n```python\nfrom collections import deque\n\nmy_queue = deque(maxlen=10)\n\nfor i in range(10):\n    my_queue.append(i+1)\n\nprint(my_queue)\n\n# 我们首先初始化deque，指定我们希望它始终保持最大长度为10。\n# 其次，当我们通过循环将值插入到队列中时。\n# 注意，填充队列的功能与使用常规Python列表的方式完全相同。\n# 最后，我们打印出结果。\n\n# deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxlen=10)\n\n# 由于队列中有一个maxlen=10，并且循环中添加了10个元素，\n# 因此队列中包含了从1到10的所有数字。\n# 现在，让我们看看添加更多数字时会发生什么。\n\nfor i in range(10, 15):\n    my_queue.append(i+1)\n\nprint(my_queue)\n# 在上面的代码中，我们在队列中添加了另外5个元素，数字从11到15。\n# 但是我们的队列只有一个，且maxlen=10。\n# 因此必须删除一些元素，才能插入新的元素。\n# 由于队列必须遵循FIFO原则，\n# 因此它将删除最先插入队列中的前5个元素，即[1、2、3、4、5]。\n# 打印语句的结果如下：\n\n# deque([6, 7, 8, 9, 10, 11, 12, 13, 14, 15], maxlen=10)\n```\n\n### namedtuple\n在Python中创建常规元组时，其元素是通用的且未命名，这迫使您记住每个元组元素的确切索引。可以使用具名元组namedtuple来解决这个问题。\n\n该namedtuple()返回与用于所述元组中的每个位置和一个通用名固定名称的元组namedtuple对象。要使用namedtuple，请先为其创建一个模板。下面的代码创建一个namedtuple名为Person的模板，其属性为name，age和job。\n\n```python\n\nfrom collections import namedtuple\n\nPerson = namedtuple('Person', 'name age job')\n# 创建模板后，您可以使用它来创建namedtuple对象。\n# 让我们使用Person模板为2个人创建2个namedtuple对象，并打印它们。\n\nPerson = namedtuple('Person', 'name age job')\n\nMike = Person(name='Mike', age=30, job='Data Scientist')\nKate = Person(name=\"Kate\", age=28, job='Project Manager')\n\nprint(Mike)\nprint(Kate)\n# 上面的代码非常简单。我们使用namedtuple 模板的所有属性来初始化“人员” ，\n# 以后可以直接使用Mike或Kate使用元组元素，\n# 而不用再使用索引了。上面的打印语句将给出以下结果：\n\nPerson(name='Mike', age=30, job='Data Scientist')\nPerson(name='Kate', age=28, job='Project Manager')\n# 因此，namedtuple能够更容易地使用，更合适元组对象的组织，可读性也更强。\n```\n\n### OrderDict\n\nPython的字典dict是无序的。如果先键值A先插入字典，键值B后插入字典，但是当你打印字典的Keys列表时，你会发现B可能在A的前面。对于无序字典，每次打印字典时每次显示元素的顺序都不一样。如果你的Python版本较老，需要借助collections模块提供的OrderedDict实现有序字典。\n\nOrderedDict类似于正常的字典，只是它记住了元素插入的顺序。当对有序的词字典上迭代时，返回元素的顺序是按第一次添加元素的顺序进行。当元素删除时，排好序的词典保持着排序的顺序；但是当新元素添加时，就会被添加到末尾。\n\n```python\n\ndd = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n#按key排序\nod_by_key = collections.OrderedDict(sorted(dd.items(), key=lambda t: t[0]))\nprint(od_by_key) \n#按照value排序\nod_by_value = collections.OrderedDict(sorted(dd.items(),key=lambda t:t[1]))\nprint(od_by_value) \n#输出\nOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n```","source":"_posts/collections模块的高效数据类型.md","raw":"---\ntitle: python collections模块的高效数据类型\ndate: 2022-01-25 09:43:19\ntags:\n  - Python\n  - Collections\ncategories:\n  - Python\ntop: false\n---\n\n# python collections模块的高效数据类型\n\n> python的collections是用于存储数据集合(比如列表list, 字典dict, 元组tuple和集合set)的容器。这些容器内置在Python中，可以直接使用。该collections模块提供了额外的，高性能的数据类型，可以增强你的代码，使事情变得更清洁，更容易。\n\n## Counter\nCounter()是字典对象的子类。Counter()可接收一个可迭代遍历的对象（例如字符串、列表或元组）作为参数，并返回计数器字典。字典的键将是可遍历对象中的唯一元素，每个键的值将是可迭代对象中的每个唯一元素对应的计数。\n\n```python\nfrom collections import Counter\n\nlst = [1, 2, 3, 3, 2, 1, 1, 1, 2, 2, 3, 1, 2, 1, 1]\ncounter = Counter(lst)\n\nprint(counter) # Conter ({1：7，2：2：5，3：3})\n\nprint(counter[1]) # 返回7。1的数量有7个\n```\n\n### most_common\nCounter对象最有用的功能是most_common()函数。将其应用于Counter对象时，它将返回N个最常见元素及其计数的列表，按从最常见到最不常见的顺序排列。\n\n```python\n\nlst = [1, 2, 3, 3, 2, 1, 1, 1, 2, 2, 3, 1, 2, 1, 1]\ncounter = Counter(lst)\nprint(counter.most_common(2)) # 返回最常见两个元素及其计数 \n# [（1，7），（2，5）]\n```\n\n### defaultdict\ndefaultdict工作起来完全像一个普通的Python字典，但它有额外的奖励。当您试图访问一个不存在的键，它不会引发错误，而是使用不存在的键创建新的key，其对应的默认值是根据创建defaultdict对象时作为参数传递的数据类型自动设置的。\n\n```python\n\nfrom collections import defaultdict\n\nnames_dict = defaultdict(int)\nnames_dict[\"Bob\"] = 1\nnames_dict[\"Katie\"] = 2\nsara_number = names_dict[\"Sara\"]\n\nprint(names_dict)\n# defaultdict(<class 'int'>, {'Bob': 1, 'Katie': 2, 'Sara': 0})\n```\n> 在普通字典中，这将引发错误。使用defaultdict后不再报错，而是自动以\"Sara\"创建一个新键key，其初始化值为0，是因为我们指定了int数据类型作为初始化值。\n\n如果要将设置列表类型数据做为一个key的初始化值，我们只需设置`names_dict = defaultdict(list)`，此时“Sara”将使用空列表初始化[]。此时打印结果如下所示：\n\n`defaultdict(<class 'int'>, {'Bob': 1, 'Katie': 2, 'Sara': []})`\n\n### deque\ndeque队列是在计算机科学里最基本的数据结构，遵循先入先出（FIFO）的原理。简单来说，这意味着添加到队列中的第一个对象也必须是要删除的第一个对象。我们只能在队列的前面插入内容，而只能从队列的后面删除内容，而队列中间没有任何动作。\n\ncollections模块提供的deque对象是能实现队列数据结构的优化版本。该功能的主要特色是能够保持队列的大小，即如果将队列的最大长度设置为10，则将deque根据FIFO原理添加和删除元素以保持最大长度始终为10。这是到目前为止，Python中队列的最佳实现。\n\n```python\nfrom collections import deque\n\nmy_queue = deque(maxlen=10)\n\nfor i in range(10):\n    my_queue.append(i+1)\n\nprint(my_queue)\n\n# 我们首先初始化deque，指定我们希望它始终保持最大长度为10。\n# 其次，当我们通过循环将值插入到队列中时。\n# 注意，填充队列的功能与使用常规Python列表的方式完全相同。\n# 最后，我们打印出结果。\n\n# deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxlen=10)\n\n# 由于队列中有一个maxlen=10，并且循环中添加了10个元素，\n# 因此队列中包含了从1到10的所有数字。\n# 现在，让我们看看添加更多数字时会发生什么。\n\nfor i in range(10, 15):\n    my_queue.append(i+1)\n\nprint(my_queue)\n# 在上面的代码中，我们在队列中添加了另外5个元素，数字从11到15。\n# 但是我们的队列只有一个，且maxlen=10。\n# 因此必须删除一些元素，才能插入新的元素。\n# 由于队列必须遵循FIFO原则，\n# 因此它将删除最先插入队列中的前5个元素，即[1、2、3、4、5]。\n# 打印语句的结果如下：\n\n# deque([6, 7, 8, 9, 10, 11, 12, 13, 14, 15], maxlen=10)\n```\n\n### namedtuple\n在Python中创建常规元组时，其元素是通用的且未命名，这迫使您记住每个元组元素的确切索引。可以使用具名元组namedtuple来解决这个问题。\n\n该namedtuple()返回与用于所述元组中的每个位置和一个通用名固定名称的元组namedtuple对象。要使用namedtuple，请先为其创建一个模板。下面的代码创建一个namedtuple名为Person的模板，其属性为name，age和job。\n\n```python\n\nfrom collections import namedtuple\n\nPerson = namedtuple('Person', 'name age job')\n# 创建模板后，您可以使用它来创建namedtuple对象。\n# 让我们使用Person模板为2个人创建2个namedtuple对象，并打印它们。\n\nPerson = namedtuple('Person', 'name age job')\n\nMike = Person(name='Mike', age=30, job='Data Scientist')\nKate = Person(name=\"Kate\", age=28, job='Project Manager')\n\nprint(Mike)\nprint(Kate)\n# 上面的代码非常简单。我们使用namedtuple 模板的所有属性来初始化“人员” ，\n# 以后可以直接使用Mike或Kate使用元组元素，\n# 而不用再使用索引了。上面的打印语句将给出以下结果：\n\nPerson(name='Mike', age=30, job='Data Scientist')\nPerson(name='Kate', age=28, job='Project Manager')\n# 因此，namedtuple能够更容易地使用，更合适元组对象的组织，可读性也更强。\n```\n\n### OrderDict\n\nPython的字典dict是无序的。如果先键值A先插入字典，键值B后插入字典，但是当你打印字典的Keys列表时，你会发现B可能在A的前面。对于无序字典，每次打印字典时每次显示元素的顺序都不一样。如果你的Python版本较老，需要借助collections模块提供的OrderedDict实现有序字典。\n\nOrderedDict类似于正常的字典，只是它记住了元素插入的顺序。当对有序的词字典上迭代时，返回元素的顺序是按第一次添加元素的顺序进行。当元素删除时，排好序的词典保持着排序的顺序；但是当新元素添加时，就会被添加到末尾。\n\n```python\n\ndd = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n#按key排序\nod_by_key = collections.OrderedDict(sorted(dd.items(), key=lambda t: t[0]))\nprint(od_by_key) \n#按照value排序\nod_by_value = collections.OrderedDict(sorted(dd.items(),key=lambda t:t[1]))\nprint(od_by_value) \n#输出\nOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n```","slug":"collections模块的高效数据类型","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz392001r12mj13w4g05t","content":"<h1 id=\"python-collections模块的高效数据类型\"><a href=\"#python-collections模块的高效数据类型\" class=\"headerlink\" title=\"python collections模块的高效数据类型\"></a>python collections模块的高效数据类型</h1><blockquote>\n<p>python的collections是用于存储数据集合(比如列表list, 字典dict, 元组tuple和集合set)的容器。这些容器内置在Python中，可以直接使用。该collections模块提供了额外的，高性能的数据类型，可以增强你的代码，使事情变得更清洁，更容易。</p>\n</blockquote>\n<h2 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h2><p>Counter()是字典对象的子类。Counter()可接收一个可迭代遍历的对象（例如字符串、列表或元组）作为参数，并返回计数器字典。字典的键将是可遍历对象中的唯一元素，每个键的值将是可迭代对象中的每个唯一元素对应的计数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ncounter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span> <span class=\"token comment\"># Conter ({1：7，2：2：5，3：3})</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 返回7。1的数量有7个</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"most-common\"><a href=\"#most-common\" class=\"headerlink\" title=\"most_common\"></a>most_common</h3><p>Counter对象最有用的功能是most_common()函数。将其应用于Counter对象时，它将返回N个最常见元素及其计数的列表，按从最常见到最不常见的顺序排列。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ncounter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 返回最常见两个元素及其计数 </span>\n<span class=\"token comment\"># [（1，7），（2，5）]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"defaultdict\"><a href=\"#defaultdict\" class=\"headerlink\" title=\"defaultdict\"></a>defaultdict</h3><p>defaultdict工作起来完全像一个普通的Python字典，但它有额外的奖励。当您试图访问一个不存在的键，它不会引发错误，而是使用不存在的键创建新的key，其对应的默认值是根据创建defaultdict对象时作为参数传递的数据类型自动设置的。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\nnames_dict <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\nnames_dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nnames_dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"Katie\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nsara_number <span class=\"token operator\">=</span> names_dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"Sara\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names_dict<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># defaultdict(&lt;class 'int'&gt;, {'Bob': 1, 'Katie': 2, 'Sara': 0})</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在普通字典中，这将引发错误。使用defaultdict后不再报错，而是自动以”Sara”创建一个新键key，其初始化值为0，是因为我们指定了int数据类型作为初始化值。</p>\n</blockquote>\n<p>如果要将设置列表类型数据做为一个key的初始化值，我们只需设置<code>names_dict = defaultdict(list)</code>，此时“Sara”将使用空列表初始化[]。此时打印结果如下所示：</p>\n<p><code>defaultdict(&lt;class 'int'&gt;, {'Bob': 1, 'Katie': 2, 'Sara': []})</code></p>\n<h3 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque\"></a>deque</h3><p>deque队列是在计算机科学里最基本的数据结构，遵循先入先出（FIFO）的原理。简单来说，这意味着添加到队列中的第一个对象也必须是要删除的第一个对象。我们只能在队列的前面插入内容，而只能从队列的后面删除内容，而队列中间没有任何动作。</p>\n<p>collections模块提供的deque对象是能实现队列数据结构的优化版本。该功能的主要特色是能够保持队列的大小，即如果将队列的最大长度设置为10，则将deque根据FIFO原理添加和删除元素以保持最大长度始终为10。这是到目前为止，Python中队列的最佳实现。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\nmy_queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>maxlen<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    my_queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_queue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 我们首先初始化deque，指定我们希望它始终保持最大长度为10。</span>\n<span class=\"token comment\"># 其次，当我们通过循环将值插入到队列中时。</span>\n<span class=\"token comment\"># 注意，填充队列的功能与使用常规Python列表的方式完全相同。</span>\n<span class=\"token comment\"># 最后，我们打印出结果。</span>\n\n<span class=\"token comment\"># deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxlen=10)</span>\n\n<span class=\"token comment\"># 由于队列中有一个maxlen=10，并且循环中添加了10个元素，</span>\n<span class=\"token comment\"># 因此队列中包含了从1到10的所有数字。</span>\n<span class=\"token comment\"># 现在，让我们看看添加更多数字时会发生什么。</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    my_queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_queue<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 在上面的代码中，我们在队列中添加了另外5个元素，数字从11到15。</span>\n<span class=\"token comment\"># 但是我们的队列只有一个，且maxlen=10。</span>\n<span class=\"token comment\"># 因此必须删除一些元素，才能插入新的元素。</span>\n<span class=\"token comment\"># 由于队列必须遵循FIFO原则，</span>\n<span class=\"token comment\"># 因此它将删除最先插入队列中的前5个元素，即[1、2、3、4、5]。</span>\n<span class=\"token comment\"># 打印语句的结果如下：</span>\n\n<span class=\"token comment\"># deque([6, 7, 8, 9, 10, 11, 12, 13, 14, 15], maxlen=10)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"namedtuple\"><a href=\"#namedtuple\" class=\"headerlink\" title=\"namedtuple\"></a>namedtuple</h3><p>在Python中创建常规元组时，其元素是通用的且未命名，这迫使您记住每个元组元素的确切索引。可以使用具名元组namedtuple来解决这个问题。</p>\n<p>该namedtuple()返回与用于所述元组中的每个位置和一个通用名固定名称的元组namedtuple对象。要使用namedtuple，请先为其创建一个模板。下面的代码创建一个namedtuple名为Person的模板，其属性为name，age和job。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> namedtuple\n\nPerson <span class=\"token operator\">=</span> namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">'Person'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name age job'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 创建模板后，您可以使用它来创建namedtuple对象。</span>\n<span class=\"token comment\"># 让我们使用Person模板为2个人创建2个namedtuple对象，并打印它们。</span>\n\nPerson <span class=\"token operator\">=</span> namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">'Person'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name age job'</span><span class=\"token punctuation\">)</span>\n\nMike <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">=</span><span class=\"token string\">'Data Scientist'</span><span class=\"token punctuation\">)</span>\nKate <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Kate\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">=</span><span class=\"token string\">'Project Manager'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Mike<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Kate<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 上面的代码非常简单。我们使用namedtuple 模板的所有属性来初始化“人员” ，</span>\n<span class=\"token comment\"># 以后可以直接使用Mike或Kate使用元组元素，</span>\n<span class=\"token comment\"># 而不用再使用索引了。上面的打印语句将给出以下结果：</span>\n\nPerson<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">=</span><span class=\"token string\">'Data Scientist'</span><span class=\"token punctuation\">)</span>\nPerson<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Kate'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">=</span><span class=\"token string\">'Project Manager'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 因此，namedtuple能够更容易地使用，更合适元组对象的组织，可读性也更强。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"OrderDict\"><a href=\"#OrderDict\" class=\"headerlink\" title=\"OrderDict\"></a>OrderDict</h3><p>Python的字典dict是无序的。如果先键值A先插入字典，键值B后插入字典，但是当你打印字典的Keys列表时，你会发现B可能在A的前面。对于无序字典，每次打印字典时每次显示元素的顺序都不一样。如果你的Python版本较老，需要借助collections模块提供的OrderedDict实现有序字典。</p>\n<p>OrderedDict类似于正常的字典，只是它记住了元素插入的顺序。当对有序的词字典上迭代时，返回元素的顺序是按第一次添加元素的顺序进行。当元素删除时，排好序的词典保持着排序的顺序；但是当新元素添加时，就会被添加到末尾。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\ndd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#按key排序</span>\nod_by_key <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>OrderedDict<span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>dd<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>od_by_key<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">#按照value排序</span>\nod_by_value <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>OrderedDict<span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>dd<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>od_by_value<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">#输出</span>\nOrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nOrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"python-collections模块的高效数据类型\"><a href=\"#python-collections模块的高效数据类型\" class=\"headerlink\" title=\"python collections模块的高效数据类型\"></a>python collections模块的高效数据类型</h1><blockquote>\n<p>python的collections是用于存储数据集合(比如列表list, 字典dict, 元组tuple和集合set)的容器。这些容器内置在Python中，可以直接使用。该collections模块提供了额外的，高性能的数据类型，可以增强你的代码，使事情变得更清洁，更容易。</p>\n</blockquote>\n<h2 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h2><p>Counter()是字典对象的子类。Counter()可接收一个可迭代遍历的对象（例如字符串、列表或元组）作为参数，并返回计数器字典。字典的键将是可遍历对象中的唯一元素，每个键的值将是可迭代对象中的每个唯一元素对应的计数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ncounter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span> <span class=\"token comment\"># Conter (&#123;1：7，2：2：5，3：3&#125;)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 返回7。1的数量有7个</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"most-common\"><a href=\"#most-common\" class=\"headerlink\" title=\"most_common\"></a>most_common</h3><p>Counter对象最有用的功能是most_common()函数。将其应用于Counter对象时，它将返回N个最常见元素及其计数的列表，按从最常见到最不常见的顺序排列。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\nlst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ncounter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 返回最常见两个元素及其计数 </span>\n<span class=\"token comment\"># [（1，7），（2，5）]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"defaultdict\"><a href=\"#defaultdict\" class=\"headerlink\" title=\"defaultdict\"></a>defaultdict</h3><p>defaultdict工作起来完全像一个普通的Python字典，但它有额外的奖励。当您试图访问一个不存在的键，它不会引发错误，而是使用不存在的键创建新的key，其对应的默认值是根据创建defaultdict对象时作为参数传递的数据类型自动设置的。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\nnames_dict <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\nnames_dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nnames_dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"Katie\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nsara_number <span class=\"token operator\">=</span> names_dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"Sara\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names_dict<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># defaultdict(&lt;class 'int'>, &#123;'Bob': 1, 'Katie': 2, 'Sara': 0&#125;)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在普通字典中，这将引发错误。使用defaultdict后不再报错，而是自动以”Sara”创建一个新键key，其初始化值为0，是因为我们指定了int数据类型作为初始化值。</p>\n</blockquote>\n<p>如果要将设置列表类型数据做为一个key的初始化值，我们只需设置<code>names_dict = defaultdict(list)</code>，此时“Sara”将使用空列表初始化[]。此时打印结果如下所示：</p>\n<p><code>defaultdict(&lt;class &#39;int&#39;&gt;, &#123;&#39;Bob&#39;: 1, &#39;Katie&#39;: 2, &#39;Sara&#39;: []&#125;)</code></p>\n<h3 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque\"></a>deque</h3><p>deque队列是在计算机科学里最基本的数据结构，遵循先入先出（FIFO）的原理。简单来说，这意味着添加到队列中的第一个对象也必须是要删除的第一个对象。我们只能在队列的前面插入内容，而只能从队列的后面删除内容，而队列中间没有任何动作。</p>\n<p>collections模块提供的deque对象是能实现队列数据结构的优化版本。该功能的主要特色是能够保持队列的大小，即如果将队列的最大长度设置为10，则将deque根据FIFO原理添加和删除元素以保持最大长度始终为10。这是到目前为止，Python中队列的最佳实现。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\nmy_queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>maxlen<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    my_queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_queue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 我们首先初始化deque，指定我们希望它始终保持最大长度为10。</span>\n<span class=\"token comment\"># 其次，当我们通过循环将值插入到队列中时。</span>\n<span class=\"token comment\"># 注意，填充队列的功能与使用常规Python列表的方式完全相同。</span>\n<span class=\"token comment\"># 最后，我们打印出结果。</span>\n\n<span class=\"token comment\"># deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxlen=10)</span>\n\n<span class=\"token comment\"># 由于队列中有一个maxlen=10，并且循环中添加了10个元素，</span>\n<span class=\"token comment\"># 因此队列中包含了从1到10的所有数字。</span>\n<span class=\"token comment\"># 现在，让我们看看添加更多数字时会发生什么。</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    my_queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_queue<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 在上面的代码中，我们在队列中添加了另外5个元素，数字从11到15。</span>\n<span class=\"token comment\"># 但是我们的队列只有一个，且maxlen=10。</span>\n<span class=\"token comment\"># 因此必须删除一些元素，才能插入新的元素。</span>\n<span class=\"token comment\"># 由于队列必须遵循FIFO原则，</span>\n<span class=\"token comment\"># 因此它将删除最先插入队列中的前5个元素，即[1、2、3、4、5]。</span>\n<span class=\"token comment\"># 打印语句的结果如下：</span>\n\n<span class=\"token comment\"># deque([6, 7, 8, 9, 10, 11, 12, 13, 14, 15], maxlen=10)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"namedtuple\"><a href=\"#namedtuple\" class=\"headerlink\" title=\"namedtuple\"></a>namedtuple</h3><p>在Python中创建常规元组时，其元素是通用的且未命名，这迫使您记住每个元组元素的确切索引。可以使用具名元组namedtuple来解决这个问题。</p>\n<p>该namedtuple()返回与用于所述元组中的每个位置和一个通用名固定名称的元组namedtuple对象。要使用namedtuple，请先为其创建一个模板。下面的代码创建一个namedtuple名为Person的模板，其属性为name，age和job。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> namedtuple\n\nPerson <span class=\"token operator\">=</span> namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">'Person'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name age job'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 创建模板后，您可以使用它来创建namedtuple对象。</span>\n<span class=\"token comment\"># 让我们使用Person模板为2个人创建2个namedtuple对象，并打印它们。</span>\n\nPerson <span class=\"token operator\">=</span> namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">'Person'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name age job'</span><span class=\"token punctuation\">)</span>\n\nMike <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">=</span><span class=\"token string\">'Data Scientist'</span><span class=\"token punctuation\">)</span>\nKate <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Kate\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">=</span><span class=\"token string\">'Project Manager'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Mike<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Kate<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 上面的代码非常简单。我们使用namedtuple 模板的所有属性来初始化“人员” ，</span>\n<span class=\"token comment\"># 以后可以直接使用Mike或Kate使用元组元素，</span>\n<span class=\"token comment\"># 而不用再使用索引了。上面的打印语句将给出以下结果：</span>\n\nPerson<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">=</span><span class=\"token string\">'Data Scientist'</span><span class=\"token punctuation\">)</span>\nPerson<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Kate'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">=</span><span class=\"token string\">'Project Manager'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 因此，namedtuple能够更容易地使用，更合适元组对象的组织，可读性也更强。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"OrderDict\"><a href=\"#OrderDict\" class=\"headerlink\" title=\"OrderDict\"></a>OrderDict</h3><p>Python的字典dict是无序的。如果先键值A先插入字典，键值B后插入字典，但是当你打印字典的Keys列表时，你会发现B可能在A的前面。对于无序字典，每次打印字典时每次显示元素的顺序都不一样。如果你的Python版本较老，需要借助collections模块提供的OrderedDict实现有序字典。</p>\n<p>OrderedDict类似于正常的字典，只是它记住了元素插入的顺序。当对有序的词字典上迭代时，返回元素的顺序是按第一次添加元素的顺序进行。当元素删除时，排好序的词典保持着排序的顺序；但是当新元素添加时，就会被添加到末尾。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\ndd <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">#按key排序</span>\nod_by_key <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>OrderedDict<span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>dd<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>od_by_key<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">#按照value排序</span>\nod_by_value <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>OrderedDict<span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>dd<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>od_by_value<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">#输出</span>\nOrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nOrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"demo","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-12-31T07:51:46.000Z","password":null,"summary":null,"_content":"\n```html\n                <!-- i/o used begin-->\n                <h4 class=\"pt-5\">I/O</h4>\n                <ul id=\"io_tabs\" role=\"tablist\" class=\"nav nav-tabs\">\n                    <li class=\"list-group list-group-horizontal\">\n                        <a id=\"io_tablink\" data-toggle=\"tab\" href=\"#read_tabpanel\" role=\"tab\"\n                            aria-controls=\"read_tabpanel\" class=\"nav-link active\"> Raw Usage </a>\n                        <a id=\"io_tablink\" data-toggle=\"tab\" href=\"#write_tabpanel\" role=\"tab\"\n                            aria-controls=\"write_tabpanel\" class=\"nav-link\"> %Allocated </a>\n                    </li>\n                </ul>\n                <div class=\"tab-content\">\n                    <div class=\"tab-pane active\" id=\"read_tabpanel\" role=\"tabpanel\" style=\"height:500px; width: 100%;\">\n                    </div>\n                    <div class=\"tab-pane\" id=\"write_tabpanel\" role=\"tabpanel\" style=\"height:500px; width: 100%;\">\n                    </div>\n                </div>\n                <!-- i/o used end-->\n```\n\n```javascript\nvar myChart = echarts.init(document.getElementById('cpu_tabpanel'), 'light');\n\n// 指定图表的配置项和数据\nvar option = {\n    // 全局调色盘。\n    // color: ['#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\n    title: {\n        text: 'CPU Usage',\n        left: \"center\"\n    },\n    tooltip: {},\n    legend: {\n        left: \"12%\",\n        data: ['%cpu']\n    },\n    xAxis: {\n        type: 'category',\n        axisLabel: { interval: 0, rotate: -45 },\n        data: []\n    },\n    yAxis: [{\n        type: \"value\",\n        show: true,\n        position: \"left\",\n        offset: 0,\n        name: \"% single core CPU useage\",\n        nameLocation: \"middle\",\n        nameTextStyle: {\n            color: \"rgba(19, 113, 200, 1)\",\n            fontStyle: \"normal\",\n            fontWeight: \"bold\",\n            fontFamily: \"sans-serif\",\n            fontSize: 13,\n            align: \"center\",\n            lineHeight: 50\n        }\n    }],\n    series: [{\n        name: '%cpu',\n        type: 'bar',\n        data: []\n    }],\n    toolbox: {\n        show: true,\n        feature: {\n            dataZoom: {\n                yAxisIndex: \"none\"\n            },\n            dataView: {\n                readOnly: false\n            },\n            magicType: {\n                type: [\"line\", \"bar\"]\n            },\n            restore: {},\n            saveAsImage: {}\n        }\n    },\n};\n\nvar test = window.location.href;\nids = test.split('/')\naxios.get('/api/v1/workflow/' + ids[5], {\n    params: {\n\n    }\n})\n    .then(function (response) {\n        for (i = 0, max = response.data.data.length; i < max; i++) {\n            // console.log(response.data.data[i].cpu_precent);\n            option.series[0].data.push(response.data.data[i].cpu_precent);\n            option.xAxis.data.push(response.data.data[i].process);\n        }\n        // console.log(response.data.data.length);\n        // console.log(option.series);\n        // console.log(option.xAxis);\n        myChart.setOption(option);\n\n    })\n    .catch(function (error) {\n        console.log(error);\n    });\n\n// pctcpu_tabpanel\nvar myChart2 = echarts.init(document.getElementById('pctcpu_tabpanel'), 'light');\n\nvar option2 = {\n    title: {\n        text: '% Requested CPU Used',\n        left: \"center\"\n    },\n    tooltip: {},\n    legend: {\n        left: \"12%\",\n        data: ['%requested']\n    },\n    xAxis: {\n        type: 'category',\n        axisLabel: { interval: 0, rotate: -45 },\n        data: []\n    },\n    yAxis: [{\n        type: \"value\",\n        show: true,\n        position: \"left\",\n        offset: 0,\n        name: \"% Allocated CPUs Used\",\n        nameLocation: \"middle\",\n        nameTextStyle: {\n            color: \"rgba(19, 113, 200, 1)\",\n            fontStyle: \"normal\",\n            fontWeight: \"bold\",\n            fontFamily: \"sans-serif\",\n            fontSize: 13,\n            align: \"center\",\n            lineHeight: 50\n        }\n    }],\n    series: [{\n        name: '%requested',\n        type: 'bar',\n        data: []\n    }],\n    toolbox: {\n        show: true,\n        feature: {\n            dataZoom: {\n                yAxisIndex: \"none\"\n            },\n            dataView: {\n                readOnly: false\n            },\n            magicType: {\n                type: [\"line\", \"bar\"]\n            },\n            restore: {},\n            saveAsImage: {}\n        }\n    },\n};\n\naxios.get('/api/v1/workflow/' + ids[5], {\n    params: {\n\n    }\n})\n    .then(function (response) {\n        for (i = 0, max = response.data.data.length; i < max; i++) {\n            // console.log(response.data.data[i].cpu_precent);\n            option2.series[0].data.push(response.data.data[i].cpus / 20);\n            option2.xAxis.data.push(response.data.data[i].process);\n        }\n        // console.log(response.data.data.length);\n        myChart2.setOption(option2);\n\n    })\n    .catch(function (error) {\n        console.log(error);\n    });\n\n```\n\n","source":"_posts/demo.md","raw":"---\ntitle: demo\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-12-31 15:51:46\npassword:\nsummary:\ntags:\ncategories:\n---\n\n```html\n                <!-- i/o used begin-->\n                <h4 class=\"pt-5\">I/O</h4>\n                <ul id=\"io_tabs\" role=\"tablist\" class=\"nav nav-tabs\">\n                    <li class=\"list-group list-group-horizontal\">\n                        <a id=\"io_tablink\" data-toggle=\"tab\" href=\"#read_tabpanel\" role=\"tab\"\n                            aria-controls=\"read_tabpanel\" class=\"nav-link active\"> Raw Usage </a>\n                        <a id=\"io_tablink\" data-toggle=\"tab\" href=\"#write_tabpanel\" role=\"tab\"\n                            aria-controls=\"write_tabpanel\" class=\"nav-link\"> %Allocated </a>\n                    </li>\n                </ul>\n                <div class=\"tab-content\">\n                    <div class=\"tab-pane active\" id=\"read_tabpanel\" role=\"tabpanel\" style=\"height:500px; width: 100%;\">\n                    </div>\n                    <div class=\"tab-pane\" id=\"write_tabpanel\" role=\"tabpanel\" style=\"height:500px; width: 100%;\">\n                    </div>\n                </div>\n                <!-- i/o used end-->\n```\n\n```javascript\nvar myChart = echarts.init(document.getElementById('cpu_tabpanel'), 'light');\n\n// 指定图表的配置项和数据\nvar option = {\n    // 全局调色盘。\n    // color: ['#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\n    title: {\n        text: 'CPU Usage',\n        left: \"center\"\n    },\n    tooltip: {},\n    legend: {\n        left: \"12%\",\n        data: ['%cpu']\n    },\n    xAxis: {\n        type: 'category',\n        axisLabel: { interval: 0, rotate: -45 },\n        data: []\n    },\n    yAxis: [{\n        type: \"value\",\n        show: true,\n        position: \"left\",\n        offset: 0,\n        name: \"% single core CPU useage\",\n        nameLocation: \"middle\",\n        nameTextStyle: {\n            color: \"rgba(19, 113, 200, 1)\",\n            fontStyle: \"normal\",\n            fontWeight: \"bold\",\n            fontFamily: \"sans-serif\",\n            fontSize: 13,\n            align: \"center\",\n            lineHeight: 50\n        }\n    }],\n    series: [{\n        name: '%cpu',\n        type: 'bar',\n        data: []\n    }],\n    toolbox: {\n        show: true,\n        feature: {\n            dataZoom: {\n                yAxisIndex: \"none\"\n            },\n            dataView: {\n                readOnly: false\n            },\n            magicType: {\n                type: [\"line\", \"bar\"]\n            },\n            restore: {},\n            saveAsImage: {}\n        }\n    },\n};\n\nvar test = window.location.href;\nids = test.split('/')\naxios.get('/api/v1/workflow/' + ids[5], {\n    params: {\n\n    }\n})\n    .then(function (response) {\n        for (i = 0, max = response.data.data.length; i < max; i++) {\n            // console.log(response.data.data[i].cpu_precent);\n            option.series[0].data.push(response.data.data[i].cpu_precent);\n            option.xAxis.data.push(response.data.data[i].process);\n        }\n        // console.log(response.data.data.length);\n        // console.log(option.series);\n        // console.log(option.xAxis);\n        myChart.setOption(option);\n\n    })\n    .catch(function (error) {\n        console.log(error);\n    });\n\n// pctcpu_tabpanel\nvar myChart2 = echarts.init(document.getElementById('pctcpu_tabpanel'), 'light');\n\nvar option2 = {\n    title: {\n        text: '% Requested CPU Used',\n        left: \"center\"\n    },\n    tooltip: {},\n    legend: {\n        left: \"12%\",\n        data: ['%requested']\n    },\n    xAxis: {\n        type: 'category',\n        axisLabel: { interval: 0, rotate: -45 },\n        data: []\n    },\n    yAxis: [{\n        type: \"value\",\n        show: true,\n        position: \"left\",\n        offset: 0,\n        name: \"% Allocated CPUs Used\",\n        nameLocation: \"middle\",\n        nameTextStyle: {\n            color: \"rgba(19, 113, 200, 1)\",\n            fontStyle: \"normal\",\n            fontWeight: \"bold\",\n            fontFamily: \"sans-serif\",\n            fontSize: 13,\n            align: \"center\",\n            lineHeight: 50\n        }\n    }],\n    series: [{\n        name: '%requested',\n        type: 'bar',\n        data: []\n    }],\n    toolbox: {\n        show: true,\n        feature: {\n            dataZoom: {\n                yAxisIndex: \"none\"\n            },\n            dataView: {\n                readOnly: false\n            },\n            magicType: {\n                type: [\"line\", \"bar\"]\n            },\n            restore: {},\n            saveAsImage: {}\n        }\n    },\n};\n\naxios.get('/api/v1/workflow/' + ids[5], {\n    params: {\n\n    }\n})\n    .then(function (response) {\n        for (i = 0, max = response.data.data.length; i < max; i++) {\n            // console.log(response.data.data[i].cpu_precent);\n            option2.series[0].data.push(response.data.data[i].cpus / 20);\n            option2.xAxis.data.push(response.data.data[i].process);\n        }\n        // console.log(response.data.data.length);\n        myChart2.setOption(option2);\n\n    })\n    .catch(function (error) {\n        console.log(error);\n    });\n\n```\n\n","slug":"demo","published":1,"updated":"2022-08-25T14:12:05.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz393001v12mjcnyvcpjm","content":"<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- i/o used begin--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pt-5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>I/O<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>io_tabs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tablist<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav nav-tabs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list-group list-group-horizontal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>io_tablink<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-toggle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#read_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">aria-controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>read_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-link active<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> Raw Usage <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>io_tablink<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-toggle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#write_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">aria-controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>write_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-link<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> %Allocated <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab-pane active<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>read_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tabpanel<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>500px<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab-pane<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>write_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tabpanel<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>500px<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- i/o used end--&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myChart <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cpu_tabpanel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 指定图表的配置项和数据</span>\n<span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 全局调色盘。</span>\n    <span class=\"token comment\">// color: ['#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'CPU Usage'</span><span class=\"token punctuation\">,</span>\n        left<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    tooltip<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    legend<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        left<span class=\"token operator\">:</span> <span class=\"token string\">\"12%\"</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'%cpu'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span>\n        axisLabel<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> interval<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rotate<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span>\n        show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        position<span class=\"token operator\">:</span> <span class=\"token string\">\"left\"</span><span class=\"token punctuation\">,</span>\n        offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"% single core CPU useage\"</span><span class=\"token punctuation\">,</span>\n        nameLocation<span class=\"token operator\">:</span> <span class=\"token string\">\"middle\"</span><span class=\"token punctuation\">,</span>\n        nameTextStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">\"rgba(19, 113, 200, 1)\"</span><span class=\"token punctuation\">,</span>\n            fontStyle<span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span>\n            fontWeight<span class=\"token operator\">:</span> <span class=\"token string\">\"bold\"</span><span class=\"token punctuation\">,</span>\n            fontFamily<span class=\"token operator\">:</span> <span class=\"token string\">\"sans-serif\"</span><span class=\"token punctuation\">,</span>\n            fontSize<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n            align<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span>\n            lineHeight<span class=\"token operator\">:</span> <span class=\"token number\">50</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'%cpu'</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    toolbox<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        feature<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            dataZoom<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                yAxisIndex<span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            dataView<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                readOnly<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            magicType<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                type<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            restore<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            saveAsImage<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span>\nids <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v1/workflow/'</span> <span class=\"token operator\">+</span> ids<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// console.log(response.data.data[i].cpu_precent);</span>\n            option<span class=\"token punctuation\">.</span>series<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cpu_precent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            option<span class=\"token punctuation\">.</span>xAxis<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// console.log(response.data.data.length);</span>\n        <span class=\"token comment\">// console.log(option.series);</span>\n        <span class=\"token comment\">// console.log(option.xAxis);</span>\n        myChart<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// pctcpu_tabpanel</span>\n<span class=\"token keyword\">var</span> myChart2 <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pctcpu_tabpanel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> option2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'% Requested CPU Used'</span><span class=\"token punctuation\">,</span>\n        left<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    tooltip<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    legend<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        left<span class=\"token operator\">:</span> <span class=\"token string\">\"12%\"</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'%requested'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span>\n        axisLabel<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> interval<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rotate<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span>\n        show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        position<span class=\"token operator\">:</span> <span class=\"token string\">\"left\"</span><span class=\"token punctuation\">,</span>\n        offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"% Allocated CPUs Used\"</span><span class=\"token punctuation\">,</span>\n        nameLocation<span class=\"token operator\">:</span> <span class=\"token string\">\"middle\"</span><span class=\"token punctuation\">,</span>\n        nameTextStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">\"rgba(19, 113, 200, 1)\"</span><span class=\"token punctuation\">,</span>\n            fontStyle<span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span>\n            fontWeight<span class=\"token operator\">:</span> <span class=\"token string\">\"bold\"</span><span class=\"token punctuation\">,</span>\n            fontFamily<span class=\"token operator\">:</span> <span class=\"token string\">\"sans-serif\"</span><span class=\"token punctuation\">,</span>\n            fontSize<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n            align<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span>\n            lineHeight<span class=\"token operator\">:</span> <span class=\"token number\">50</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'%requested'</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    toolbox<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        feature<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            dataZoom<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                yAxisIndex<span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            dataView<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                readOnly<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            magicType<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                type<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            restore<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            saveAsImage<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v1/workflow/'</span> <span class=\"token operator\">+</span> ids<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// console.log(response.data.data[i].cpu_precent);</span>\n            option2<span class=\"token punctuation\">.</span>series<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cpus <span class=\"token operator\">/</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            option2<span class=\"token punctuation\">.</span>xAxis<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// console.log(response.data.data.length);</span>\n        myChart2<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span>option2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- i/o used begin--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pt-5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>I/O<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>io_tabs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tablist<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav nav-tabs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list-group list-group-horizontal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>io_tablink<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-toggle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#read_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">aria-controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>read_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-link active<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> Raw Usage <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>io_tablink<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-toggle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#write_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">aria-controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>write_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-link<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> %Allocated <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab-pane active<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>read_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tabpanel<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>500px<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tab-pane<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>write_tabpanel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tabpanel<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>500px<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- i/o used end--></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myChart <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cpu_tabpanel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 指定图表的配置项和数据</span>\n<span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 全局调色盘。</span>\n    <span class=\"token comment\">// color: ['#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'CPU Usage'</span><span class=\"token punctuation\">,</span>\n        left<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    tooltip<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    legend<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        left<span class=\"token operator\">:</span> <span class=\"token string\">\"12%\"</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'%cpu'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span>\n        axisLabel<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> interval<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rotate<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">45</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span>\n        show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        position<span class=\"token operator\">:</span> <span class=\"token string\">\"left\"</span><span class=\"token punctuation\">,</span>\n        offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"% single core CPU useage\"</span><span class=\"token punctuation\">,</span>\n        nameLocation<span class=\"token operator\">:</span> <span class=\"token string\">\"middle\"</span><span class=\"token punctuation\">,</span>\n        nameTextStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">\"rgba(19, 113, 200, 1)\"</span><span class=\"token punctuation\">,</span>\n            fontStyle<span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span>\n            fontWeight<span class=\"token operator\">:</span> <span class=\"token string\">\"bold\"</span><span class=\"token punctuation\">,</span>\n            fontFamily<span class=\"token operator\">:</span> <span class=\"token string\">\"sans-serif\"</span><span class=\"token punctuation\">,</span>\n            fontSize<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n            align<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span>\n            lineHeight<span class=\"token operator\">:</span> <span class=\"token number\">50</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'%cpu'</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    toolbox<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        feature<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            dataZoom<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                yAxisIndex<span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            dataView<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                readOnly<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            magicType<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                type<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            restore<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            saveAsImage<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span>\nids <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v1/workflow/'</span> <span class=\"token operator\">+</span> ids<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// console.log(response.data.data[i].cpu_precent);</span>\n            option<span class=\"token punctuation\">.</span>series<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cpu_precent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            option<span class=\"token punctuation\">.</span>xAxis<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// console.log(response.data.data.length);</span>\n        <span class=\"token comment\">// console.log(option.series);</span>\n        <span class=\"token comment\">// console.log(option.xAxis);</span>\n        myChart<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// pctcpu_tabpanel</span>\n<span class=\"token keyword\">var</span> myChart2 <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pctcpu_tabpanel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> option2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'% Requested CPU Used'</span><span class=\"token punctuation\">,</span>\n        left<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    tooltip<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    legend<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        left<span class=\"token operator\">:</span> <span class=\"token string\">\"12%\"</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'%requested'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span>\n        axisLabel<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> interval<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rotate<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">45</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span>\n        show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        position<span class=\"token operator\">:</span> <span class=\"token string\">\"left\"</span><span class=\"token punctuation\">,</span>\n        offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"% Allocated CPUs Used\"</span><span class=\"token punctuation\">,</span>\n        nameLocation<span class=\"token operator\">:</span> <span class=\"token string\">\"middle\"</span><span class=\"token punctuation\">,</span>\n        nameTextStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">\"rgba(19, 113, 200, 1)\"</span><span class=\"token punctuation\">,</span>\n            fontStyle<span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span>\n            fontWeight<span class=\"token operator\">:</span> <span class=\"token string\">\"bold\"</span><span class=\"token punctuation\">,</span>\n            fontFamily<span class=\"token operator\">:</span> <span class=\"token string\">\"sans-serif\"</span><span class=\"token punctuation\">,</span>\n            fontSize<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n            align<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span>\n            lineHeight<span class=\"token operator\">:</span> <span class=\"token number\">50</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'%requested'</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    toolbox<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        feature<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            dataZoom<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                yAxisIndex<span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            dataView<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                readOnly<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            magicType<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                type<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            restore<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            saveAsImage<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v1/workflow/'</span> <span class=\"token operator\">+</span> ids<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// console.log(response.data.data[i].cpu_precent);</span>\n            option2<span class=\"token punctuation\">.</span>series<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cpus <span class=\"token operator\">/</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            option2<span class=\"token punctuation\">.</span>xAxis<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// console.log(response.data.data.length);</span>\n        myChart2<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span>option2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"Ubuntu下docker实践","top":false,"date":"2020-05-05T13:33:18.000Z","_content":"\n# Ubuntu18 下docker实践\n\n<table bgcolor=#343a40 >\n    <tr>\n        <td><img src='https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP' ></td>\n  </tr>\n    </table>\n\n1.更新索引\n\n```shell\nsudo apt update\n```\n\n2.安装需要的包\n\n```shell\nsudo apt install apt-transport-https ca-certificates software-properties-common curl\n```\n\n3.添加 GPG 密钥，并添加 Docker-ce 软件源\n\n```shell\ncurl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n$(lsb_release -cs) stable\"\n```\n\n9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。\n\n```shell\nlei@lei:~$ sudo apt-key fingerprint 0EBFCD88\npub   rsa4096 2017-02-22 [SCEA]\n      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid           [ 未知 ] Docker Release (CE deb) <docker@docker.com>\nsub   rsa4096 2017-02-22 [S]\n```\n\n4.添加成功后更新软件包缓存\n\n```shell\nsudo apt update\n```\n\n5.安装 Docker-ce\n\n```shell\nsudo apt install docker-ce\n```\n\n6.设置开机自启动并启动 Docker-ce（安装成功后默认已设置并启动，可忽略）\n\n```shell\nsudo systemctl enable docker\nsudo systemctl start docker\n```\n\n7.测试运行\n\n```shell\ndocker -v\nsudo docker run hello-world\n```\n\n8.添加当前用户到 docker 用户组，可以不用 sudo 运行 docker（可选）\n\n```shell\nsudo groupadd docker\nsudo usermod -aG docker $USER\n```\n\n9.测试添加用户组（可选）\n\n```shell\ndocker run hello-world\n```\n\n# Docker 镜像加速\n\n国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。\n\n- 网易：**https://hub-mirror.c.163.com/**\n- 阿里云：**https://<你的ID>.mirror.aliyuncs.com**\n- 七牛云加速器：**https://reg-mirror.qiniu.com**\n\n阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\n\n## 1. 安装／升级Docker客户端\n\n推荐安装1.10.0以上版本的Docker客户端，参考文档 [docker-ce](https://yq.aliyun.com/articles/110806)\n\n## 2. 配置镜像加速器\n\n针对Docker客户端版本大于 1.10.0 的用户\n\n您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://klq9hjzs.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n# Docker Hello World\n\nDocker 允许你在容器内运行应用程序， 使用 **docker run** 命令来在容器内运行一个应用程序。\n\n输出Hello world\n\n```shell\nrunoob@runoob:~$ docker run ubuntu:15.10 /bin/echo \"Hello world\"\nHello world\n```\n\n> 如果报错\n>\n> ```\n> ”Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/json: dial unix /var/run/docker.sock: connect: permission denied“\n> ```\n>\n> 大概的意思就是：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。\n\n```shell\nsudo groupadd docker     #添加docker用户组\nsudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中\nnewgrp docker     #更新用户组\ndocker ps    #测试docker命令是否可以使用sudo正常使用\n```\n\n各个参数解析：\n\n- **docker:** Docker 的二进制执行文件。\n- **run:** 与前面的 docker 组合来运行一个容器。\n- **ubuntu:15.10** 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。\n- **/bin/echo \"Hello world\":** 在启动的容器里执行的命令\n\n以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo \"Hello world\"，然后输出结果。\n\n## 运行交互式的容器\n\n我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**\"对话\"**的能力\n\n## 启动容器（后台模式）\n\n使用以下命令创建一个以进程方式运行的容器\n\n```shell\nlei@lei:~$ docker run -d ubuntu:15.10 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n30a4768775a6716d84e226a7930aa886095506ea9ec11b424c1104323b5b6d18\n```\n\n在宿主主机内使用 **docker logs** 命令，查看容器内的标准输出：\n\n```shell\nlei@lei:~$ docker logs 30a4768775a6\nhello world\nhello world\nhello world\n\n```\n\n## 停止容器\n\n我们使用 **docker stop** 命令来停止容器:\n\n```\nlei@lei:~$ docker stop 30a4768775a6\n30a4768775a6\n```\n\n## 获取一个新的镜像\n\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n\n## 查找镜像\n\n我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： **https://hub.docker.com/**\n\n我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。\n\n## 删除镜像\n\n镜像删除使用 **docker rmi** 命令，比如我们删除 hello-world 镜像：\n\n## 创建镜像\n\n当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。\n\n- 1、从已经创建的容器中更新镜像，并且提交这个镜像\n- 2、使用 Dockerfile 指令来创建一个新的镜像\n\n# Docker 容器连接\n\n容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 **-P** 或 **-p** 参数来指定端口映射。\n\n## 网络端口映射\n\n```shell\nlei@lei:~$ docker run -d -P training/webapp python app.py\n4385e6f8006cc161d3e41744f1e7bf283a9a1be66a785b08b9092e5f375aee3b\n```\n\n我们使用 **-P** 参数创建一个容器，使用 **docker ps** 可以看到容器端口 5000 绑定主机端口 32768。\n\n```shell\nlei@lei:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES\n4385e6f8006c        training/webapp     \"python app.py\"     13 seconds ago      Up 8 seconds        0.0.0.0:32768->5000/tcp   fervent_haibt\n```\n\n我们也可以使用 **-p** 标识来指定容器端口绑定到主机端口。\n\n两种方式的区别是:\n\n- **-P :**是容器内部端口**随机**映射到主机的高端口。\n- **-p :** 是容器内部端口绑定到**指定**的主机端口。\n\n我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。\n\n```shell\nlei@lei:~$ docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py\n8239a7e1c7b14a9ca04de7ce7fc526bf77cdb5443b8278f7bbbd745b4dcf713c\n^[[Alei@leidocker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES\n8239a7e1c7b1        training/webapp     \"python app.py\"     6 seconds ago       Up 4 seconds        127.0.0.1:5001->5000/tcp   admiring_maxwell\na56e5e9a438c        training/webapp     \"python app.py\"     48 seconds ago      Up 45 seconds       0.0.0.0:5000->5000/tcp     admiring_wing\n4385e6f8006c        training/webapp     \"python app.py\"     2 minutes ago       Up 2 minutes        0.0.0.0:32768->5000/tcp    fervent_haibt\n```\n\n\n\n# Docker Dockerfile\n\n### 什么是 Dockerfile？\n\nDockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。\n\n### 使用 Dockerfile 定制镜像\n\n**1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）**\n\n在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：\n\n```shell\nFROM nginx\nRUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html\n```\n\n**2、FROM 和 RUN 指令的作用**\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下俩种格式：\n\nshell 格式：\n\n```\nRUN <命令行命令>\n# <命令行命令> 等同于，在终端操作的 shell 命令。\n```\n\nexec 格式：\n\n```shell\nRUN [\"可执行文件\", \"参数1\", \"参数2\"]\n# 例如：\n# RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline\n```\n\n**注意**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大\n\n### 开始构建镜像\n\n在 Dockerfile 文件的存放目录下，执行构建动作。\n\n以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。\n\n**注**：最后的 **.** 代表本次执行的上下文路径，下一节会介绍。\n\n```shell\n$ docker build -t nginx:test .\n```\n\n上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。\n\n**解析**：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。\n\n如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。\n\n>  **注意**：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。\n\n# Docker Compose\n\n### Compose 简介\n\nCompose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。\n\n如果你还不了解 YML 文件配置，可以先阅读 [YAML 入门教程](https://www.runoob.com/w3cnote/yaml-intro.html)。\n\nCompose 使用的三个步骤：\n\n- 使用 Dockerfile 定义应用程序的环境。\n- 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。\n- 最后，执行 docker-compose up 命令来启动并运行整个应用程序。\n\n# Docker Machine\n\n### 简介\n\nDocker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。\n\nDocker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。\n\nDocker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。\n\n使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。","source":"_posts/Ubuntu下docker实践.md","raw":"---\ntitle: Ubuntu下docker实践\ntags:\n  - Docker\ncategories:\n  - Docker\ntop: false\ndate: 2020-05-5 21:33:18\n---\n\n# Ubuntu18 下docker实践\n\n<table bgcolor=#343a40 >\n    <tr>\n        <td><img src='https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP' ></td>\n  </tr>\n    </table>\n\n1.更新索引\n\n```shell\nsudo apt update\n```\n\n2.安装需要的包\n\n```shell\nsudo apt install apt-transport-https ca-certificates software-properties-common curl\n```\n\n3.添加 GPG 密钥，并添加 Docker-ce 软件源\n\n```shell\ncurl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n$(lsb_release -cs) stable\"\n```\n\n9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。\n\n```shell\nlei@lei:~$ sudo apt-key fingerprint 0EBFCD88\npub   rsa4096 2017-02-22 [SCEA]\n      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid           [ 未知 ] Docker Release (CE deb) <docker@docker.com>\nsub   rsa4096 2017-02-22 [S]\n```\n\n4.添加成功后更新软件包缓存\n\n```shell\nsudo apt update\n```\n\n5.安装 Docker-ce\n\n```shell\nsudo apt install docker-ce\n```\n\n6.设置开机自启动并启动 Docker-ce（安装成功后默认已设置并启动，可忽略）\n\n```shell\nsudo systemctl enable docker\nsudo systemctl start docker\n```\n\n7.测试运行\n\n```shell\ndocker -v\nsudo docker run hello-world\n```\n\n8.添加当前用户到 docker 用户组，可以不用 sudo 运行 docker（可选）\n\n```shell\nsudo groupadd docker\nsudo usermod -aG docker $USER\n```\n\n9.测试添加用户组（可选）\n\n```shell\ndocker run hello-world\n```\n\n# Docker 镜像加速\n\n国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。\n\n- 网易：**https://hub-mirror.c.163.com/**\n- 阿里云：**https://<你的ID>.mirror.aliyuncs.com**\n- 七牛云加速器：**https://reg-mirror.qiniu.com**\n\n阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\n\n## 1. 安装／升级Docker客户端\n\n推荐安装1.10.0以上版本的Docker客户端，参考文档 [docker-ce](https://yq.aliyun.com/articles/110806)\n\n## 2. 配置镜像加速器\n\n针对Docker客户端版本大于 1.10.0 的用户\n\n您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://klq9hjzs.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n# Docker Hello World\n\nDocker 允许你在容器内运行应用程序， 使用 **docker run** 命令来在容器内运行一个应用程序。\n\n输出Hello world\n\n```shell\nrunoob@runoob:~$ docker run ubuntu:15.10 /bin/echo \"Hello world\"\nHello world\n```\n\n> 如果报错\n>\n> ```\n> ”Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/json: dial unix /var/run/docker.sock: connect: permission denied“\n> ```\n>\n> 大概的意思就是：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。\n\n```shell\nsudo groupadd docker     #添加docker用户组\nsudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中\nnewgrp docker     #更新用户组\ndocker ps    #测试docker命令是否可以使用sudo正常使用\n```\n\n各个参数解析：\n\n- **docker:** Docker 的二进制执行文件。\n- **run:** 与前面的 docker 组合来运行一个容器。\n- **ubuntu:15.10** 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。\n- **/bin/echo \"Hello world\":** 在启动的容器里执行的命令\n\n以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo \"Hello world\"，然后输出结果。\n\n## 运行交互式的容器\n\n我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**\"对话\"**的能力\n\n## 启动容器（后台模式）\n\n使用以下命令创建一个以进程方式运行的容器\n\n```shell\nlei@lei:~$ docker run -d ubuntu:15.10 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n30a4768775a6716d84e226a7930aa886095506ea9ec11b424c1104323b5b6d18\n```\n\n在宿主主机内使用 **docker logs** 命令，查看容器内的标准输出：\n\n```shell\nlei@lei:~$ docker logs 30a4768775a6\nhello world\nhello world\nhello world\n\n```\n\n## 停止容器\n\n我们使用 **docker stop** 命令来停止容器:\n\n```\nlei@lei:~$ docker stop 30a4768775a6\n30a4768775a6\n```\n\n## 获取一个新的镜像\n\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n\n## 查找镜像\n\n我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： **https://hub.docker.com/**\n\n我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。\n\n## 删除镜像\n\n镜像删除使用 **docker rmi** 命令，比如我们删除 hello-world 镜像：\n\n## 创建镜像\n\n当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。\n\n- 1、从已经创建的容器中更新镜像，并且提交这个镜像\n- 2、使用 Dockerfile 指令来创建一个新的镜像\n\n# Docker 容器连接\n\n容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 **-P** 或 **-p** 参数来指定端口映射。\n\n## 网络端口映射\n\n```shell\nlei@lei:~$ docker run -d -P training/webapp python app.py\n4385e6f8006cc161d3e41744f1e7bf283a9a1be66a785b08b9092e5f375aee3b\n```\n\n我们使用 **-P** 参数创建一个容器，使用 **docker ps** 可以看到容器端口 5000 绑定主机端口 32768。\n\n```shell\nlei@lei:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES\n4385e6f8006c        training/webapp     \"python app.py\"     13 seconds ago      Up 8 seconds        0.0.0.0:32768->5000/tcp   fervent_haibt\n```\n\n我们也可以使用 **-p** 标识来指定容器端口绑定到主机端口。\n\n两种方式的区别是:\n\n- **-P :**是容器内部端口**随机**映射到主机的高端口。\n- **-p :** 是容器内部端口绑定到**指定**的主机端口。\n\n我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。\n\n```shell\nlei@lei:~$ docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py\n8239a7e1c7b14a9ca04de7ce7fc526bf77cdb5443b8278f7bbbd745b4dcf713c\n^[[Alei@leidocker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES\n8239a7e1c7b1        training/webapp     \"python app.py\"     6 seconds ago       Up 4 seconds        127.0.0.1:5001->5000/tcp   admiring_maxwell\na56e5e9a438c        training/webapp     \"python app.py\"     48 seconds ago      Up 45 seconds       0.0.0.0:5000->5000/tcp     admiring_wing\n4385e6f8006c        training/webapp     \"python app.py\"     2 minutes ago       Up 2 minutes        0.0.0.0:32768->5000/tcp    fervent_haibt\n```\n\n\n\n# Docker Dockerfile\n\n### 什么是 Dockerfile？\n\nDockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。\n\n### 使用 Dockerfile 定制镜像\n\n**1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）**\n\n在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：\n\n```shell\nFROM nginx\nRUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html\n```\n\n**2、FROM 和 RUN 指令的作用**\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下俩种格式：\n\nshell 格式：\n\n```\nRUN <命令行命令>\n# <命令行命令> 等同于，在终端操作的 shell 命令。\n```\n\nexec 格式：\n\n```shell\nRUN [\"可执行文件\", \"参数1\", \"参数2\"]\n# 例如：\n# RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline\n```\n\n**注意**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大\n\n### 开始构建镜像\n\n在 Dockerfile 文件的存放目录下，执行构建动作。\n\n以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。\n\n**注**：最后的 **.** 代表本次执行的上下文路径，下一节会介绍。\n\n```shell\n$ docker build -t nginx:test .\n```\n\n上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。\n\n**解析**：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。\n\n如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。\n\n>  **注意**：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。\n\n# Docker Compose\n\n### Compose 简介\n\nCompose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。\n\n如果你还不了解 YML 文件配置，可以先阅读 [YAML 入门教程](https://www.runoob.com/w3cnote/yaml-intro.html)。\n\nCompose 使用的三个步骤：\n\n- 使用 Dockerfile 定义应用程序的环境。\n- 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。\n- 最后，执行 docker-compose up 命令来启动并运行整个应用程序。\n\n# Docker Machine\n\n### 简介\n\nDocker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。\n\nDocker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。\n\nDocker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。\n\n使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。","slug":"Ubuntu下docker实践","published":1,"updated":"2022-09-18T03:07:11.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz393001z12mjcv609fio","content":"<h1 id=\"Ubuntu18-下docker实践\"><a href=\"#Ubuntu18-下docker实践\" class=\"headerlink\" title=\"Ubuntu18 下docker实践\"></a>Ubuntu18 下docker实践</h1><table bgcolor=\"#343a40\">\n    <tbody><tr>\n        <td><img src=\"https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP\"></td>\n  </tr>\n    </tbody></table>\n\n<p>1.更新索引</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.安装需要的包</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> apt-transport-https ca-certificates software-properties-common <span class=\"token function\">curl</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3.添加 GPG 密钥，并添加 Docker-ce 软件源</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">curl</span> -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n\n<span class=\"token function\">sudo</span> add-apt-repository   <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n<span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> stable\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ <span class=\"token function\">sudo</span> apt-key fingerprint 0EBFCD88\npub   rsa4096 <span class=\"token number\">2017</span>-02-22 <span class=\"token punctuation\">[</span>SCEA<span class=\"token punctuation\">]</span>\n      9DC8 <span class=\"token number\">5822</span> 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid           <span class=\"token punctuation\">[</span> 未知 <span class=\"token punctuation\">]</span> Docker Release <span class=\"token punctuation\">(</span>CE deb<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>docker@docker.com<span class=\"token operator\">&gt;</span>\nsub   rsa4096 <span class=\"token number\">2017</span>-02-22 <span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>4.添加成功后更新软件包缓存</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>5.安装 Docker-ce</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-ce<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>6.设置开机自启动并启动 Docker-ce（安装成功后默认已设置并启动，可忽略）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> docker\n<span class=\"token function\">sudo</span> systemctl start docker<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>7.测试运行</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker -v\n<span class=\"token function\">sudo</span> docker run hello-world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>8.添加当前用户到 docker 用户组，可以不用 sudo 运行 docker（可选）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> docker\n<span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG docker <span class=\"token environment constant\">$USER</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>9.测试添加用户组（可选）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker run hello-world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"Docker-镜像加速\"><a href=\"#Docker-镜像加速\" class=\"headerlink\" title=\"Docker 镜像加速\"></a>Docker 镜像加速</h1><p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。</p>\n<ul>\n<li>网易：<strong><a href=\"https://hub-mirror.c.163.com/\">https://hub-mirror.c.163.com/</a></strong></li>\n<li>阿里云：<strong>https://&lt;你的ID&gt;.mirror.aliyuncs.com</strong></li>\n<li>七牛云加速器：<strong><a href=\"https://reg-mirror.qiniu.com/\">https://reg-mirror.qiniu.com</a></strong></li>\n</ul>\n<p>阿里云镜像获取地址：<a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>\n<h2 id=\"1-安装／升级Docker客户端\"><a href=\"#1-安装／升级Docker客户端\" class=\"headerlink\" title=\"1. 安装／升级Docker客户端\"></a>1. 安装／升级Docker客户端</h2><p>推荐安装1.10.0以上版本的Docker客户端，参考文档 <a href=\"https://yq.aliyun.com/articles/110806\">docker-ce</a></p>\n<h2 id=\"2-配置镜像加速器\"><a href=\"#2-配置镜像加速器\" class=\"headerlink\" title=\"2. 配置镜像加速器\"></a>2. 配置镜像加速器</h2><p>针对Docker客户端版本大于 1.10.0 的用户</p>\n<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> -p /etc/docker\n<span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'\n{\n  \"registry-mirrors\": [\"https://klq9hjzs.mirror.aliyuncs.com\"]\n}\nEOF</span>\n<span class=\"token function\">sudo</span> systemctl daemon-reload\n<span class=\"token function\">sudo</span> systemctl restart docker<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Docker-Hello-World\"><a href=\"#Docker-Hello-World\" class=\"headerlink\" title=\"Docker Hello World\"></a>Docker Hello World</h1><p>Docker 允许你在容器内运行应用程序， 使用 <strong>docker run</strong> 命令来在容器内运行一个应用程序。</p>\n<p>输出Hello world</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">runoob@runoob:~$ docker run ubuntu:15.10 /bin/echo <span class=\"token string\">\"Hello world\"</span>\nHello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>如果报错</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">”Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/json: dial unix /var/run/docker.sock: connect: permission denied“<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>大概的意思就是：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。</p>\n</blockquote>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> docker     <span class=\"token comment\">#添加docker用户组</span>\n<span class=\"token function\">sudo</span> gpasswd -a <span class=\"token environment constant\">$USER</span> docker     <span class=\"token comment\">#将登陆用户加入到docker用户组中</span>\nnewgrp docker     <span class=\"token comment\">#更新用户组</span>\ndocker <span class=\"token function\">ps</span>    <span class=\"token comment\">#测试docker命令是否可以使用sudo正常使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>各个参数解析：</p>\n<ul>\n<li><strong>docker:</strong> Docker 的二进制执行文件。</li>\n<li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li>\n<li><strong>ubuntu:15.10</strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li>\n<li><strong>/bin/echo “Hello world”:</strong> 在启动的容器里执行的命令</li>\n</ul>\n<p>以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。</p>\n<h2 id=\"运行交互式的容器\"><a href=\"#运行交互式的容器\" class=\"headerlink\" title=\"运行交互式的容器\"></a>运行交互式的容器</h2><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**”对话”**的能力</p>\n<h2 id=\"启动容器（后台模式）\"><a href=\"#启动容器（后台模式）\" class=\"headerlink\" title=\"启动容器（后台模式）\"></a>启动容器（后台模式）</h2><p>使用以下命令创建一个以进程方式运行的容器</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker run -d ubuntu:15.10 /bin/sh -c <span class=\"token string\">\"while true; do echo hello world; sleep 1; done\"</span>\n30a4768775a6716d84e226a7930aa886095506ea9ec11b424c1104323b5b6d18<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在宿主主机内使用 <strong>docker logs</strong> 命令，查看容器内的标准输出：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker logs 30a4768775a6\nhello world\nhello world\nhello world\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h2><p>我们使用 <strong>docker stop</strong> 命令来停止容器:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">lei@lei:~$ docker stop 30a4768775a6\n30a4768775a6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"获取一个新的镜像\"><a href=\"#获取一个新的镜像\" class=\"headerlink\" title=\"获取一个新的镜像\"></a>获取一个新的镜像</h2><p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<h2 id=\"查找镜像\"><a href=\"#查找镜像\" class=\"headerlink\" title=\"查找镜像\"></a>查找镜像</h2><p>我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <strong><a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></strong></p>\n<p>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。</p>\n<h2 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h2><p>镜像删除使用 <strong>docker rmi</strong> 命令，比如我们删除 hello-world 镜像：</p>\n<h2 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h2><p>当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。</p>\n<ul>\n<li>1、从已经创建的容器中更新镜像，并且提交这个镜像</li>\n<li>2、使用 Dockerfile 指令来创建一个新的镜像</li>\n</ul>\n<h1 id=\"Docker-容器连接\"><a href=\"#Docker-容器连接\" class=\"headerlink\" title=\"Docker 容器连接\"></a>Docker 容器连接</h1><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <strong>-P</strong> 或 <strong>-p</strong> 参数来指定端口映射。</p>\n<h2 id=\"网络端口映射\"><a href=\"#网络端口映射\" class=\"headerlink\" title=\"网络端口映射\"></a>网络端口映射</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker run -d -P training/webapp python app.py\n4385e6f8006cc161d3e41744f1e7bf283a9a1be66a785b08b9092e5f375aee3b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>我们使用 <strong>-P</strong> 参数创建一个容器，使用 <strong>docker ps</strong> 可以看到容器端口 5000 绑定主机端口 32768。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES\n4385e6f8006c        training/webapp     <span class=\"token string\">\"python app.py\"</span>     <span class=\"token number\">13</span> seconds ago      Up <span class=\"token number\">8</span> seconds        <span class=\"token number\">0.0</span>.0.0:32768-<span class=\"token operator\">&gt;</span><span class=\"token number\">5000</span>/tcp   fervent_haibt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>我们也可以使用 <strong>-p</strong> 标识来指定容器端口绑定到主机端口。</p>\n<p>两种方式的区别是:</p>\n<ul>\n<li><strong>-P :**是容器内部端口</strong>随机**映射到主机的高端口。</li>\n<li><strong>-p :</strong> 是容器内部端口绑定到<strong>指定</strong>的主机端口。</li>\n</ul>\n<p>我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker run -d -p <span class=\"token number\">127.0</span>.0.1:5001:5000 training/webapp python app.py\n8239a7e1c7b14a9ca04de7ce7fc526bf77cdb5443b8278f7bbbd745b4dcf713c\n^<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Alei@leidocker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES\n8239a7e1c7b1        training/webapp     <span class=\"token string\">\"python app.py\"</span>     <span class=\"token number\">6</span> seconds ago       Up <span class=\"token number\">4</span> seconds        <span class=\"token number\">127.0</span>.0.1:5001-<span class=\"token operator\">&gt;</span><span class=\"token number\">5000</span>/tcp   admiring_maxwell\na56e5e9a438c        training/webapp     <span class=\"token string\">\"python app.py\"</span>     <span class=\"token number\">48</span> seconds ago      Up <span class=\"token number\">45</span> seconds       <span class=\"token number\">0.0</span>.0.0:5000-<span class=\"token operator\">&gt;</span><span class=\"token number\">5000</span>/tcp     admiring_wing\n4385e6f8006c        training/webapp     <span class=\"token string\">\"python app.py\"</span>     <span class=\"token number\">2</span> minutes ago       Up <span class=\"token number\">2</span> minutes        <span class=\"token number\">0.0</span>.0.0:32768-<span class=\"token operator\">&gt;</span><span class=\"token number\">5000</span>/tcp    fervent_haibt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Docker-Dockerfile\"><a href=\"#Docker-Dockerfile\" class=\"headerlink\" title=\"Docker Dockerfile\"></a>Docker Dockerfile</h1><h3 id=\"什么是-Dockerfile？\"><a href=\"#什么是-Dockerfile？\" class=\"headerlink\" title=\"什么是 Dockerfile？\"></a>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>\n<h3 id=\"使用-Dockerfile-定制镜像\"><a href=\"#使用-Dockerfile-定制镜像\" class=\"headerlink\" title=\"使用 Dockerfile 定制镜像\"></a>使用 Dockerfile 定制镜像</h3><p><strong>1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p>\n<p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">FROM nginx\nRUN <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'这是一个本地构建的nginx镜像'</span> <span class=\"token operator\">&gt;</span> /usr/share/nginx/html/index.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>2、FROM 和 RUN 指令的作用</strong></p>\n<p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p>\n<p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p>\n<p>shell 格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">RUN &lt;命令行命令&gt;\n# &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>exec 格式：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">RUN <span class=\"token punctuation\">[</span><span class=\"token string\">\"可执行文件\"</span>, <span class=\"token string\">\"参数1\"</span>, <span class=\"token string\">\"参数2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 例如：</span>\n<span class=\"token comment\"># RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大</p>\n<h3 id=\"开始构建镜像\"><a href=\"#开始构建镜像\" class=\"headerlink\" title=\"开始构建镜像\"></a>开始构建镜像</h3><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p>\n<p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。</p>\n<p><strong>注</strong>：最后的 <strong>.</strong> 代表本次执行的上下文路径，下一节会介绍。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ docker build -t nginx:test <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>\n<p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>\n<p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p>\n<blockquote>\n<p> <strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p>\n</blockquote>\n<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h1><h3 id=\"Compose-简介\"><a href=\"#Compose-简介\" class=\"headerlink\" title=\"Compose 简介\"></a>Compose 简介</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>\n<p>如果你还不了解 YML 文件配置，可以先阅读 <a href=\"https://www.runoob.com/w3cnote/yaml-intro.html\">YAML 入门教程</a>。</p>\n<p>Compose 使用的三个步骤：</p>\n<ul>\n<li>使用 Dockerfile 定义应用程序的环境。</li>\n<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>\n<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>\n</ul>\n<h1 id=\"Docker-Machine\"><a href=\"#Docker-Machine\" class=\"headerlink\" title=\"Docker Machine\"></a>Docker Machine</h1><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p>\n<p>Docker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。</p>\n<p>Docker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。</p>\n<p>使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Ubuntu18-下docker实践\"><a href=\"#Ubuntu18-下docker实践\" class=\"headerlink\" title=\"Ubuntu18 下docker实践\"></a>Ubuntu18 下docker实践</h1><table bgcolor=#343a40 >\n    <tr>\n        <td><img src='https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP' ></td>\n  </tr>\n    </table>\n\n<p>1.更新索引</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.安装需要的包</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> apt-transport-https ca-certificates software-properties-common <span class=\"token function\">curl</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3.添加 GPG 密钥，并添加 Docker-ce 软件源</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">curl</span> -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n\n<span class=\"token function\">sudo</span> add-apt-repository   <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n<span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> stable\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ <span class=\"token function\">sudo</span> apt-key fingerprint 0EBFCD88\npub   rsa4096 <span class=\"token number\">2017</span>-02-22 <span class=\"token punctuation\">[</span>SCEA<span class=\"token punctuation\">]</span>\n      9DC8 <span class=\"token number\">5822</span> 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid           <span class=\"token punctuation\">[</span> 未知 <span class=\"token punctuation\">]</span> Docker Release <span class=\"token punctuation\">(</span>CE deb<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>docker@docker.com<span class=\"token operator\">></span>\nsub   rsa4096 <span class=\"token number\">2017</span>-02-22 <span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>4.添加成功后更新软件包缓存</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>5.安装 Docker-ce</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-ce<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>6.设置开机自启动并启动 Docker-ce（安装成功后默认已设置并启动，可忽略）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> docker\n<span class=\"token function\">sudo</span> systemctl start docker<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>7.测试运行</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker -v\n<span class=\"token function\">sudo</span> docker run hello-world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>8.添加当前用户到 docker 用户组，可以不用 sudo 运行 docker（可选）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> docker\n<span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG docker <span class=\"token environment constant\">$USER</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>9.测试添加用户组（可选）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker run hello-world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"Docker-镜像加速\"><a href=\"#Docker-镜像加速\" class=\"headerlink\" title=\"Docker 镜像加速\"></a>Docker 镜像加速</h1><p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。</p>\n<ul>\n<li>网易：<strong><a href=\"https://hub-mirror.c.163.com/\">https://hub-mirror.c.163.com/</a></strong></li>\n<li>阿里云：<strong>https://&lt;你的ID&gt;.mirror.aliyuncs.com</strong></li>\n<li>七牛云加速器：<strong><a href=\"https://reg-mirror.qiniu.com/\">https://reg-mirror.qiniu.com</a></strong></li>\n</ul>\n<p>阿里云镜像获取地址：<a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>\n<h2 id=\"1-安装／升级Docker客户端\"><a href=\"#1-安装／升级Docker客户端\" class=\"headerlink\" title=\"1. 安装／升级Docker客户端\"></a>1. 安装／升级Docker客户端</h2><p>推荐安装1.10.0以上版本的Docker客户端，参考文档 <a href=\"https://yq.aliyun.com/articles/110806\">docker-ce</a></p>\n<h2 id=\"2-配置镜像加速器\"><a href=\"#2-配置镜像加速器\" class=\"headerlink\" title=\"2. 配置镜像加速器\"></a>2. 配置镜像加速器</h2><p>针对Docker客户端版本大于 1.10.0 的用户</p>\n<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> -p /etc/docker\n<span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'\n&#123;\n  \"registry-mirrors\": [\"https://klq9hjzs.mirror.aliyuncs.com\"]\n&#125;\nEOF</span>\n<span class=\"token function\">sudo</span> systemctl daemon-reload\n<span class=\"token function\">sudo</span> systemctl restart docker<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Docker-Hello-World\"><a href=\"#Docker-Hello-World\" class=\"headerlink\" title=\"Docker Hello World\"></a>Docker Hello World</h1><p>Docker 允许你在容器内运行应用程序， 使用 <strong>docker run</strong> 命令来在容器内运行一个应用程序。</p>\n<p>输出Hello world</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">runoob@runoob:~$ docker run ubuntu:15.10 /bin/echo <span class=\"token string\">\"Hello world\"</span>\nHello world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>如果报错</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">”Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock: Get http:&#x2F;&#x2F;%2Fvar%2Frun%2Fdocker.sock&#x2F;v1.26&#x2F;images&#x2F;json: dial unix &#x2F;var&#x2F;run&#x2F;docker.sock: connect: permission denied“<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>大概的意思就是：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。</p>\n</blockquote>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> docker     <span class=\"token comment\">#添加docker用户组</span>\n<span class=\"token function\">sudo</span> gpasswd -a <span class=\"token environment constant\">$USER</span> docker     <span class=\"token comment\">#将登陆用户加入到docker用户组中</span>\nnewgrp docker     <span class=\"token comment\">#更新用户组</span>\ndocker <span class=\"token function\">ps</span>    <span class=\"token comment\">#测试docker命令是否可以使用sudo正常使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>各个参数解析：</p>\n<ul>\n<li><strong>docker:</strong> Docker 的二进制执行文件。</li>\n<li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li>\n<li><strong>ubuntu:15.10</strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li>\n<li><strong>/bin/echo “Hello world”:</strong> 在启动的容器里执行的命令</li>\n</ul>\n<p>以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。</p>\n<h2 id=\"运行交互式的容器\"><a href=\"#运行交互式的容器\" class=\"headerlink\" title=\"运行交互式的容器\"></a>运行交互式的容器</h2><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**”对话”**的能力</p>\n<h2 id=\"启动容器（后台模式）\"><a href=\"#启动容器（后台模式）\" class=\"headerlink\" title=\"启动容器（后台模式）\"></a>启动容器（后台模式）</h2><p>使用以下命令创建一个以进程方式运行的容器</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker run -d ubuntu:15.10 /bin/sh -c <span class=\"token string\">\"while true; do echo hello world; sleep 1; done\"</span>\n30a4768775a6716d84e226a7930aa886095506ea9ec11b424c1104323b5b6d18<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在宿主主机内使用 <strong>docker logs</strong> 命令，查看容器内的标准输出：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker logs 30a4768775a6\nhello world\nhello world\nhello world\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h2><p>我们使用 <strong>docker stop</strong> 命令来停止容器:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">lei@lei:~$ docker stop 30a4768775a6\n30a4768775a6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"获取一个新的镜像\"><a href=\"#获取一个新的镜像\" class=\"headerlink\" title=\"获取一个新的镜像\"></a>获取一个新的镜像</h2><p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<h2 id=\"查找镜像\"><a href=\"#查找镜像\" class=\"headerlink\" title=\"查找镜像\"></a>查找镜像</h2><p>我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <strong><a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></strong></p>\n<p>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。</p>\n<h2 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h2><p>镜像删除使用 <strong>docker rmi</strong> 命令，比如我们删除 hello-world 镜像：</p>\n<h2 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h2><p>当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。</p>\n<ul>\n<li>1、从已经创建的容器中更新镜像，并且提交这个镜像</li>\n<li>2、使用 Dockerfile 指令来创建一个新的镜像</li>\n</ul>\n<h1 id=\"Docker-容器连接\"><a href=\"#Docker-容器连接\" class=\"headerlink\" title=\"Docker 容器连接\"></a>Docker 容器连接</h1><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <strong>-P</strong> 或 <strong>-p</strong> 参数来指定端口映射。</p>\n<h2 id=\"网络端口映射\"><a href=\"#网络端口映射\" class=\"headerlink\" title=\"网络端口映射\"></a>网络端口映射</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker run -d -P training/webapp python app.py\n4385e6f8006cc161d3e41744f1e7bf283a9a1be66a785b08b9092e5f375aee3b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>我们使用 <strong>-P</strong> 参数创建一个容器，使用 <strong>docker ps</strong> 可以看到容器端口 5000 绑定主机端口 32768。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES\n4385e6f8006c        training/webapp     <span class=\"token string\">\"python app.py\"</span>     <span class=\"token number\">13</span> seconds ago      Up <span class=\"token number\">8</span> seconds        <span class=\"token number\">0.0</span>.0.0:32768-<span class=\"token operator\">></span><span class=\"token number\">5000</span>/tcp   fervent_haibt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>我们也可以使用 <strong>-p</strong> 标识来指定容器端口绑定到主机端口。</p>\n<p>两种方式的区别是:</p>\n<ul>\n<li><strong>-P :**是容器内部端口</strong>随机**映射到主机的高端口。</li>\n<li><strong>-p :</strong> 是容器内部端口绑定到<strong>指定</strong>的主机端口。</li>\n</ul>\n<p>我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lei@lei:~$ docker run -d -p <span class=\"token number\">127.0</span>.0.1:5001:5000 training/webapp python app.py\n8239a7e1c7b14a9ca04de7ce7fc526bf77cdb5443b8278f7bbbd745b4dcf713c\n^<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Alei@leidocker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                      NAMES\n8239a7e1c7b1        training/webapp     <span class=\"token string\">\"python app.py\"</span>     <span class=\"token number\">6</span> seconds ago       Up <span class=\"token number\">4</span> seconds        <span class=\"token number\">127.0</span>.0.1:5001-<span class=\"token operator\">></span><span class=\"token number\">5000</span>/tcp   admiring_maxwell\na56e5e9a438c        training/webapp     <span class=\"token string\">\"python app.py\"</span>     <span class=\"token number\">48</span> seconds ago      Up <span class=\"token number\">45</span> seconds       <span class=\"token number\">0.0</span>.0.0:5000-<span class=\"token operator\">></span><span class=\"token number\">5000</span>/tcp     admiring_wing\n4385e6f8006c        training/webapp     <span class=\"token string\">\"python app.py\"</span>     <span class=\"token number\">2</span> minutes ago       Up <span class=\"token number\">2</span> minutes        <span class=\"token number\">0.0</span>.0.0:32768-<span class=\"token operator\">></span><span class=\"token number\">5000</span>/tcp    fervent_haibt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Docker-Dockerfile\"><a href=\"#Docker-Dockerfile\" class=\"headerlink\" title=\"Docker Dockerfile\"></a>Docker Dockerfile</h1><h3 id=\"什么是-Dockerfile？\"><a href=\"#什么是-Dockerfile？\" class=\"headerlink\" title=\"什么是 Dockerfile？\"></a>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>\n<h3 id=\"使用-Dockerfile-定制镜像\"><a href=\"#使用-Dockerfile-定制镜像\" class=\"headerlink\" title=\"使用 Dockerfile 定制镜像\"></a>使用 Dockerfile 定制镜像</h3><p><strong>1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p>\n<p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">FROM nginx\nRUN <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'这是一个本地构建的nginx镜像'</span> <span class=\"token operator\">></span> /usr/share/nginx/html/index.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>2、FROM 和 RUN 指令的作用</strong></p>\n<p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p>\n<p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p>\n<p>shell 格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">RUN &lt;命令行命令&gt;\n# &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>exec 格式：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">RUN <span class=\"token punctuation\">[</span><span class=\"token string\">\"可执行文件\"</span>, <span class=\"token string\">\"参数1\"</span>, <span class=\"token string\">\"参数2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 例如：</span>\n<span class=\"token comment\"># RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大</p>\n<h3 id=\"开始构建镜像\"><a href=\"#开始构建镜像\" class=\"headerlink\" title=\"开始构建镜像\"></a>开始构建镜像</h3><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p>\n<p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。</p>\n<p><strong>注</strong>：最后的 <strong>.</strong> 代表本次执行的上下文路径，下一节会介绍。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ docker build -t nginx:test <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>\n<p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>\n<p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p>\n<blockquote>\n<p> <strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p>\n</blockquote>\n<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h1><h3 id=\"Compose-简介\"><a href=\"#Compose-简介\" class=\"headerlink\" title=\"Compose 简介\"></a>Compose 简介</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>\n<p>如果你还不了解 YML 文件配置，可以先阅读 <a href=\"https://www.runoob.com/w3cnote/yaml-intro.html\">YAML 入门教程</a>。</p>\n<p>Compose 使用的三个步骤：</p>\n<ul>\n<li>使用 Dockerfile 定义应用程序的环境。</li>\n<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>\n<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>\n</ul>\n<h1 id=\"Docker-Machine\"><a href=\"#Docker-Machine\" class=\"headerlink\" title=\"Docker Machine\"></a>Docker Machine</h1><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p>\n<p>Docker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。</p>\n<p>Docker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。</p>\n<p>使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p>\n"},{"title":"django小结","top":false,"date":"2020-07-01T06:34:04.000Z","_content":"# django小结\n\n![django小结](https://i.loli.net/2020/07/07/eyYNL7mpBqOAPtZ.png)\n\n## 请求的生命周期\n\n### wsgi -> 请求中间件 -> 路由分配 -> 视图 -> 响应中间件 -> wsgi\n\n```\n\t1.请求发送到 wsgi ，wsgi 封装请求的相关数据（request）\n\t2.django 去匹配路径，根据路处理具体的业务逻辑\n\t3.执行函数， 函数中处理具体的业务逻辑\n\t4.函数返回响应， Django按照HTTP 协议的响应的格式进行返回\n```\n\n\n\n## 中间件\n\n### 简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器\n\n## 使用 orm 和原生 sql 的缺点\n\n### orm 优点\n\n- 快速开发\n\n### orm 缺点\n\n- 复杂查询可能会有性能问题\n\n### 原生 sql 优点\n\n- 运行复杂查询更加灵活\n\n### 原生 sql 缺点\n\n- 编写需小心，防止 sql 注入\n\n## 概念\n\n### 什么是 wsgi\n\n- web server 和 web application 通信的一种规范\n\n### 什么是 FBV 和 CBV\n\n- 处理方式\n\n\t- 类处理方式（class base views）\n\t- 函数处理方式（function base views）\n\n## Django、Flask、Tornado 对比\n\n### Django 走的是大而全的方向，开发效率高。采用 MTV 设计模式，自带 ORM 组件，提高了开发效率\n\n### Flask 是轻量级的框架，自由、灵活、可扩展性强，核心基于 Werkzeug 和 Jinja2\n\n### Tornada 走的是少而精的方向，性能优越，最出名是异步非阻塞能力\n\n## 安全\n\n### CSRF (跨站请求伪造)\n\n- 是一种挟制用户在当前已登录的 web 应用程序上执行非本意的操作攻击方式\n- 令牌同步模式\n- 检查 Referer 字段\n- 添加 token\n\n### XSS\n\n- 利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令到网页，使用用户加载并执行攻击者的恶意代码\n\n## django 中 csrf的实现机制\n\n### 令牌同步模式\n\n## session 和 cookie的区别\n\n### session 是以对象的形式保存在服务器中\n\n### cookie 是以字符串的形式保存在客户端\n\n## restful规范\n\n*XMind - Trial Version*","source":"_posts/django小结.md","raw":"---\ntitle: django小结\ntags:\n  - Python\n  - Django\ncategories:\n  - Python\ntop: false\ndate: 2020-07-01 14:34:04\n---\n# django小结\n\n![django小结](https://i.loli.net/2020/07/07/eyYNL7mpBqOAPtZ.png)\n\n## 请求的生命周期\n\n### wsgi -> 请求中间件 -> 路由分配 -> 视图 -> 响应中间件 -> wsgi\n\n```\n\t1.请求发送到 wsgi ，wsgi 封装请求的相关数据（request）\n\t2.django 去匹配路径，根据路处理具体的业务逻辑\n\t3.执行函数， 函数中处理具体的业务逻辑\n\t4.函数返回响应， Django按照HTTP 协议的响应的格式进行返回\n```\n\n\n\n## 中间件\n\n### 简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器\n\n## 使用 orm 和原生 sql 的缺点\n\n### orm 优点\n\n- 快速开发\n\n### orm 缺点\n\n- 复杂查询可能会有性能问题\n\n### 原生 sql 优点\n\n- 运行复杂查询更加灵活\n\n### 原生 sql 缺点\n\n- 编写需小心，防止 sql 注入\n\n## 概念\n\n### 什么是 wsgi\n\n- web server 和 web application 通信的一种规范\n\n### 什么是 FBV 和 CBV\n\n- 处理方式\n\n\t- 类处理方式（class base views）\n\t- 函数处理方式（function base views）\n\n## Django、Flask、Tornado 对比\n\n### Django 走的是大而全的方向，开发效率高。采用 MTV 设计模式，自带 ORM 组件，提高了开发效率\n\n### Flask 是轻量级的框架，自由、灵活、可扩展性强，核心基于 Werkzeug 和 Jinja2\n\n### Tornada 走的是少而精的方向，性能优越，最出名是异步非阻塞能力\n\n## 安全\n\n### CSRF (跨站请求伪造)\n\n- 是一种挟制用户在当前已登录的 web 应用程序上执行非本意的操作攻击方式\n- 令牌同步模式\n- 检查 Referer 字段\n- 添加 token\n\n### XSS\n\n- 利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令到网页，使用用户加载并执行攻击者的恶意代码\n\n## django 中 csrf的实现机制\n\n### 令牌同步模式\n\n## session 和 cookie的区别\n\n### session 是以对象的形式保存在服务器中\n\n### cookie 是以字符串的形式保存在客户端\n\n## restful规范\n\n*XMind - Trial Version*","slug":"django小结","published":1,"updated":"2022-08-25T14:12:05.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz393002112mjetmg1f6e","content":"<h1 id=\"django小结\"><a href=\"#django小结\" class=\"headerlink\" title=\"django小结\"></a>django小结</h1><p><img src=\"https://i.loli.net/2020/07/07/eyYNL7mpBqOAPtZ.png\" alt=\"django小结\"></p>\n<h2 id=\"请求的生命周期\"><a href=\"#请求的生命周期\" class=\"headerlink\" title=\"请求的生命周期\"></a>请求的生命周期</h2><h3 id=\"wsgi-gt-请求中间件-gt-路由分配-gt-视图-gt-响应中间件-gt-wsgi\"><a href=\"#wsgi-gt-请求中间件-gt-路由分配-gt-视图-gt-响应中间件-gt-wsgi\" class=\"headerlink\" title=\"wsgi -> 请求中间件 -> 路由分配 -> 视图 -> 响应中间件 -> wsgi\"></a>wsgi -&gt; 请求中间件 -&gt; 路由分配 -&gt; 视图 -&gt; 响应中间件 -&gt; wsgi</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1.请求发送到 wsgi ，wsgi 封装请求的相关数据（request）\n2.django 去匹配路径，根据路处理具体的业务逻辑\n3.执行函数， 函数中处理具体的业务逻辑\n4.函数返回响应， Django按照HTTP 协议的响应的格式进行返回<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><h3 id=\"简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器\"><a href=\"#简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器\" class=\"headerlink\" title=\"简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器\"></a>简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器</h3><h2 id=\"使用-orm-和原生-sql-的缺点\"><a href=\"#使用-orm-和原生-sql-的缺点\" class=\"headerlink\" title=\"使用 orm 和原生 sql 的缺点\"></a>使用 orm 和原生 sql 的缺点</h2><h3 id=\"orm-优点\"><a href=\"#orm-优点\" class=\"headerlink\" title=\"orm 优点\"></a>orm 优点</h3><ul>\n<li>快速开发</li>\n</ul>\n<h3 id=\"orm-缺点\"><a href=\"#orm-缺点\" class=\"headerlink\" title=\"orm 缺点\"></a>orm 缺点</h3><ul>\n<li>复杂查询可能会有性能问题</li>\n</ul>\n<h3 id=\"原生-sql-优点\"><a href=\"#原生-sql-优点\" class=\"headerlink\" title=\"原生 sql 优点\"></a>原生 sql 优点</h3><ul>\n<li>运行复杂查询更加灵活</li>\n</ul>\n<h3 id=\"原生-sql-缺点\"><a href=\"#原生-sql-缺点\" class=\"headerlink\" title=\"原生 sql 缺点\"></a>原生 sql 缺点</h3><ul>\n<li>编写需小心，防止 sql 注入</li>\n</ul>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"什么是-wsgi\"><a href=\"#什么是-wsgi\" class=\"headerlink\" title=\"什么是 wsgi\"></a>什么是 wsgi</h3><ul>\n<li>web server 和 web application 通信的一种规范</li>\n</ul>\n<h3 id=\"什么是-FBV-和-CBV\"><a href=\"#什么是-FBV-和-CBV\" class=\"headerlink\" title=\"什么是 FBV 和 CBV\"></a>什么是 FBV 和 CBV</h3><ul>\n<li><p>处理方式</p>\n<ul>\n<li>类处理方式（class base views）</li>\n<li>函数处理方式（function base views）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Django、Flask、Tornado-对比\"><a href=\"#Django、Flask、Tornado-对比\" class=\"headerlink\" title=\"Django、Flask、Tornado 对比\"></a>Django、Flask、Tornado 对比</h2><h3 id=\"Django-走的是大而全的方向，开发效率高。采用-MTV-设计模式，自带-ORM-组件，提高了开发效率\"><a href=\"#Django-走的是大而全的方向，开发效率高。采用-MTV-设计模式，自带-ORM-组件，提高了开发效率\" class=\"headerlink\" title=\"Django 走的是大而全的方向，开发效率高。采用 MTV 设计模式，自带 ORM 组件，提高了开发效率\"></a>Django 走的是大而全的方向，开发效率高。采用 MTV 设计模式，自带 ORM 组件，提高了开发效率</h3><h3 id=\"Flask-是轻量级的框架，自由、灵活、可扩展性强，核心基于-Werkzeug-和-Jinja2\"><a href=\"#Flask-是轻量级的框架，自由、灵活、可扩展性强，核心基于-Werkzeug-和-Jinja2\" class=\"headerlink\" title=\"Flask 是轻量级的框架，自由、灵活、可扩展性强，核心基于 Werkzeug 和 Jinja2\"></a>Flask 是轻量级的框架，自由、灵活、可扩展性强，核心基于 Werkzeug 和 Jinja2</h3><h3 id=\"Tornada-走的是少而精的方向，性能优越，最出名是异步非阻塞能力\"><a href=\"#Tornada-走的是少而精的方向，性能优越，最出名是异步非阻塞能力\" class=\"headerlink\" title=\"Tornada 走的是少而精的方向，性能优越，最出名是异步非阻塞能力\"></a>Tornada 走的是少而精的方向，性能优越，最出名是异步非阻塞能力</h3><h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><h3 id=\"CSRF-跨站请求伪造\"><a href=\"#CSRF-跨站请求伪造\" class=\"headerlink\" title=\"CSRF (跨站请求伪造)\"></a>CSRF (跨站请求伪造)</h3><ul>\n<li>是一种挟制用户在当前已登录的 web 应用程序上执行非本意的操作攻击方式</li>\n<li>令牌同步模式</li>\n<li>检查 Referer 字段</li>\n<li>添加 token</li>\n</ul>\n<h3 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h3><ul>\n<li>利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令到网页，使用用户加载并执行攻击者的恶意代码</li>\n</ul>\n<h2 id=\"django-中-csrf的实现机制\"><a href=\"#django-中-csrf的实现机制\" class=\"headerlink\" title=\"django 中 csrf的实现机制\"></a>django 中 csrf的实现机制</h2><h3 id=\"令牌同步模式\"><a href=\"#令牌同步模式\" class=\"headerlink\" title=\"令牌同步模式\"></a>令牌同步模式</h3><h2 id=\"session-和-cookie的区别\"><a href=\"#session-和-cookie的区别\" class=\"headerlink\" title=\"session 和 cookie的区别\"></a>session 和 cookie的区别</h2><h3 id=\"session-是以对象的形式保存在服务器中\"><a href=\"#session-是以对象的形式保存在服务器中\" class=\"headerlink\" title=\"session 是以对象的形式保存在服务器中\"></a>session 是以对象的形式保存在服务器中</h3><h3 id=\"cookie-是以字符串的形式保存在客户端\"><a href=\"#cookie-是以字符串的形式保存在客户端\" class=\"headerlink\" title=\"cookie 是以字符串的形式保存在客户端\"></a>cookie 是以字符串的形式保存在客户端</h3><h2 id=\"restful规范\"><a href=\"#restful规范\" class=\"headerlink\" title=\"restful规范\"></a>restful规范</h2><p><em>XMind - Trial Version</em></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"django小结\"><a href=\"#django小结\" class=\"headerlink\" title=\"django小结\"></a>django小结</h1><p><img src=\"https://i.loli.net/2020/07/07/eyYNL7mpBqOAPtZ.png\" alt=\"django小结\"></p>\n<h2 id=\"请求的生命周期\"><a href=\"#请求的生命周期\" class=\"headerlink\" title=\"请求的生命周期\"></a>请求的生命周期</h2><h3 id=\"wsgi-gt-请求中间件-gt-路由分配-gt-视图-gt-响应中间件-gt-wsgi\"><a href=\"#wsgi-gt-请求中间件-gt-路由分配-gt-视图-gt-响应中间件-gt-wsgi\" class=\"headerlink\" title=\"wsgi -&gt; 请求中间件 -&gt; 路由分配 -&gt; 视图 -&gt; 响应中间件 -&gt; wsgi\"></a>wsgi -&gt; 请求中间件 -&gt; 路由分配 -&gt; 视图 -&gt; 响应中间件 -&gt; wsgi</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1.请求发送到 wsgi ，wsgi 封装请求的相关数据（request）\n2.django 去匹配路径，根据路处理具体的业务逻辑\n3.执行函数， 函数中处理具体的业务逻辑\n4.函数返回响应， Django按照HTTP 协议的响应的格式进行返回<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><h3 id=\"简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器\"><a href=\"#简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器\" class=\"headerlink\" title=\"简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器\"></a>简单来说中间键是帮助我们是视图函数执行前和执行后都做一些额外的操作，包装如装饰器</h3><h2 id=\"使用-orm-和原生-sql-的缺点\"><a href=\"#使用-orm-和原生-sql-的缺点\" class=\"headerlink\" title=\"使用 orm 和原生 sql 的缺点\"></a>使用 orm 和原生 sql 的缺点</h2><h3 id=\"orm-优点\"><a href=\"#orm-优点\" class=\"headerlink\" title=\"orm 优点\"></a>orm 优点</h3><ul>\n<li>快速开发</li>\n</ul>\n<h3 id=\"orm-缺点\"><a href=\"#orm-缺点\" class=\"headerlink\" title=\"orm 缺点\"></a>orm 缺点</h3><ul>\n<li>复杂查询可能会有性能问题</li>\n</ul>\n<h3 id=\"原生-sql-优点\"><a href=\"#原生-sql-优点\" class=\"headerlink\" title=\"原生 sql 优点\"></a>原生 sql 优点</h3><ul>\n<li>运行复杂查询更加灵活</li>\n</ul>\n<h3 id=\"原生-sql-缺点\"><a href=\"#原生-sql-缺点\" class=\"headerlink\" title=\"原生 sql 缺点\"></a>原生 sql 缺点</h3><ul>\n<li>编写需小心，防止 sql 注入</li>\n</ul>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"什么是-wsgi\"><a href=\"#什么是-wsgi\" class=\"headerlink\" title=\"什么是 wsgi\"></a>什么是 wsgi</h3><ul>\n<li>web server 和 web application 通信的一种规范</li>\n</ul>\n<h3 id=\"什么是-FBV-和-CBV\"><a href=\"#什么是-FBV-和-CBV\" class=\"headerlink\" title=\"什么是 FBV 和 CBV\"></a>什么是 FBV 和 CBV</h3><ul>\n<li><p>处理方式</p>\n<ul>\n<li>类处理方式（class base views）</li>\n<li>函数处理方式（function base views）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Django、Flask、Tornado-对比\"><a href=\"#Django、Flask、Tornado-对比\" class=\"headerlink\" title=\"Django、Flask、Tornado 对比\"></a>Django、Flask、Tornado 对比</h2><h3 id=\"Django-走的是大而全的方向，开发效率高。采用-MTV-设计模式，自带-ORM-组件，提高了开发效率\"><a href=\"#Django-走的是大而全的方向，开发效率高。采用-MTV-设计模式，自带-ORM-组件，提高了开发效率\" class=\"headerlink\" title=\"Django 走的是大而全的方向，开发效率高。采用 MTV 设计模式，自带 ORM 组件，提高了开发效率\"></a>Django 走的是大而全的方向，开发效率高。采用 MTV 设计模式，自带 ORM 组件，提高了开发效率</h3><h3 id=\"Flask-是轻量级的框架，自由、灵活、可扩展性强，核心基于-Werkzeug-和-Jinja2\"><a href=\"#Flask-是轻量级的框架，自由、灵活、可扩展性强，核心基于-Werkzeug-和-Jinja2\" class=\"headerlink\" title=\"Flask 是轻量级的框架，自由、灵活、可扩展性强，核心基于 Werkzeug 和 Jinja2\"></a>Flask 是轻量级的框架，自由、灵活、可扩展性强，核心基于 Werkzeug 和 Jinja2</h3><h3 id=\"Tornada-走的是少而精的方向，性能优越，最出名是异步非阻塞能力\"><a href=\"#Tornada-走的是少而精的方向，性能优越，最出名是异步非阻塞能力\" class=\"headerlink\" title=\"Tornada 走的是少而精的方向，性能优越，最出名是异步非阻塞能力\"></a>Tornada 走的是少而精的方向，性能优越，最出名是异步非阻塞能力</h3><h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><h3 id=\"CSRF-跨站请求伪造\"><a href=\"#CSRF-跨站请求伪造\" class=\"headerlink\" title=\"CSRF (跨站请求伪造)\"></a>CSRF (跨站请求伪造)</h3><ul>\n<li>是一种挟制用户在当前已登录的 web 应用程序上执行非本意的操作攻击方式</li>\n<li>令牌同步模式</li>\n<li>检查 Referer 字段</li>\n<li>添加 token</li>\n</ul>\n<h3 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h3><ul>\n<li>利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令到网页，使用用户加载并执行攻击者的恶意代码</li>\n</ul>\n<h2 id=\"django-中-csrf的实现机制\"><a href=\"#django-中-csrf的实现机制\" class=\"headerlink\" title=\"django 中 csrf的实现机制\"></a>django 中 csrf的实现机制</h2><h3 id=\"令牌同步模式\"><a href=\"#令牌同步模式\" class=\"headerlink\" title=\"令牌同步模式\"></a>令牌同步模式</h3><h2 id=\"session-和-cookie的区别\"><a href=\"#session-和-cookie的区别\" class=\"headerlink\" title=\"session 和 cookie的区别\"></a>session 和 cookie的区别</h2><h3 id=\"session-是以对象的形式保存在服务器中\"><a href=\"#session-是以对象的形式保存在服务器中\" class=\"headerlink\" title=\"session 是以对象的形式保存在服务器中\"></a>session 是以对象的形式保存在服务器中</h3><h3 id=\"cookie-是以字符串的形式保存在客户端\"><a href=\"#cookie-是以字符串的形式保存在客户端\" class=\"headerlink\" title=\"cookie 是以字符串的形式保存在客户端\"></a>cookie 是以字符串的形式保存在客户端</h3><h2 id=\"restful规范\"><a href=\"#restful规范\" class=\"headerlink\" title=\"restful规范\"></a>restful规范</h2><p><em>XMind - Trial Version</em></p>\n"},{"title":"标签测试","date":"2020-03-06T06:03:04.000Z","_content":"#### git简单的使用方法:\n\n`1、  cd ~/.ssh/`    如果没有对应的文件夹，则执行  `mkdir  ./.ssh`\n\n`2、git config --global user.name \"lilei\"`\n\n`3、git config --global user.email \"849078367@qq.com\"`\n\n`4、ssh-keygen -t rsa -C \"849078367@qq.com\"`\n\n执行上面命令后在home目录生成了`id_rsa.pub`秘钥文件\n\n `ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9zTKWSeYAGIREZDUrvEX9JCoK1Th2ME7Mu/RbRg6o+MJqlrhi5w1DTl+VOkbwKJEGPwdMV3pl3cCF74ksFT0MrvHxOlqV1TQAHVN85Lp/JALPPO27eJsKtgkeHN0nreJEyEteJdqrDmeyhOdDKp1iC0Ec+9H3apaSRPCiB5hghMCucxoRabRgqOt04Yn0XxYsYXw6Oe3cWAMvkrlSwCk1SXQLqoyCdEX7KW0+gFnYivbo4Rnmjh7FiVrtqtlgJJ3siE4EnA7H9fpzpDo1cp0Yd0rQIbLjuib0TNCUHkToWe9EaApfCVfdTkhr42vwwJPyPk0qz4DxaiwXEcvoVTnv 849078367@qq.com`\n 把秘钥复制到gitlib>>setings>>SSH Keys`http://124.204.65.84:12463/profile/keys`\n\n![](/home/lei/TJ/note/2019-07-11 15-41-30屏幕截图.png)\n\n\n\n创建项目文件目录，然后执行`git init`   ````````````````````````\n\n添加远程仓库：`git remote add origin http://124.204.65.84:12463/spider/datacrawl.git`\n\n克隆远程仓库：`git clone http://gitlab.example.com/spider/datacrawl.git`\n\n拉取远程仓库代码：`git pull origin feature/additional`\n\n`feature/additional`这个是我们所在的分支\n\n推送本地代码到远程仓库：`git push origin feature/additional`或`git push`（ps:之后每次上传代码可以用这命令）\n\n配置文件在当前项目目录 为隐藏文件夹 .`git`下面的config\n\n修改`config文件`示例：\n\n``\n\n```linux\n  1 [core]\n  2         repositoryformatversion = 0\n  3         filemode = true\n  4         bare = false\n  5         logallrefupdates = true\n  6 [remote \"origin\"]\n  7         url = http://124.204.65.84:12463/spider/datacrawl.git\n  8         fetch = +refs/heads/*:refs/remotes/origin/*\n  9 [branch \"feature/additional\"]\n 10         remote = origin\n 11         merge = refs/heads/feature/additional\n 12 [branch \"develop\"]\n 13         remote = origin\n 14         merge =  refs/heads/develop\n 15 [user]\n 16         name = maolei\n 17         email = 849078367@qq.com\n 18 [credential]\n 19         helper = store\n~                                 \n```\n\n第一次会输入用户名和密码，之后就不会了，\n\n#### 推送本地代码到远程仓库：\n\n`git add .`提交所有文件到暂存区\n\n`git commot -m \"对本次提交的描述\"`\n\n`git status` 查看当前状态\n\n`git push`把刚刚提交到暂存区的文件推送到远程仓库\n\n每次推送之前一个`git pull`一下，避免和远程更新发生冲突，会提示 `git pull`\n\n**其他的一些用法可以参考廖雪峰的git教程**https://www.liaoxuefeng.com/wiki/896043488029600\n\n\n\n保留当前活动  `git stash`\n`切换分支`  `git checkout feature/additional` \n\n# git本地版本回退与远端版本回退(回滚)\n\n> 一个commit对应这一个版本，有一个commit id，40位的16进制数字，通过SHA1计算得到，不同的文件计算出来的SHA1值不同(有很小的几率相同，可忽略)，这样每一个提交都有其独特的id。每提交一个新版本，实际上Git就会把它们自动串成一条时间线。\n> 在Git中，HEAD表示当前版本，也就是e620a6ff0940a8dff…，HEAD^表示上一个版本，HEAD^^表示上上一个版本，往上100个版本可以写成HEAD加连续100个^，也可以写成：HEAD~100。\n>\n\n**git log：**该命令显示从最近到最远的提交日志。\n\n**git log --pretty=oneline：**将只会显示提交的commit id号和对应的注释。(这里是两个-，Markdown显示两个-为一个-)\n\n**git reset –hard commit_id 或则是 git reset –hard HEAD^**\n\n```\ngit reset --hard HEAD^   # hard选项，表示彻底将工作区、暂存区和版本库记录恢复到指定的版本库\n```\n\n使用git reset –hard 进行版本回退之后，在本地查看README.md，里面已经变为版本2对应的内容了。\n\n##　**如果你在本地做了错误提交，那么回退版本的方法很简单**\n1.先用下面命令找到要回退的版本的commit id：\n\n```\ngit reflog 1\n```\n\n2.接着回退版本:\n\n```\ngit reset --hard a7e1d279\n```\n\na7e1d279就是你要回退的版本的commit id的前面几位。\n\n## 远程分支版本回退的方法\n如果你的错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。\n1.首先要回退本地分支：\n\n```shell\ngit reflog\ngit reset --hard Obfafd\n```\n\n2.紧接着强制推送到远程分支：\n\n```shell\ngit push -f origin master ## 这里假设只有一个master分支\n```\n\norigin就是一个名字，它是在你clone一个托管在Github上代码库时，git为你默认创建的指向这个远程代码库的标签，origin指向的是repository，master只是这个repository中默认创建的第一个branch。当你git push的时候因为origin和master都是默认创建的，所以可以这样省略。\n\n\n> 注意：本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支，否则无法推送到远程分支\n>  \n\n","source":"_posts/git简单使用.md","raw":"---\ntitle: 标签测试\ndate: 2020-03-06 14:03:04\ntags: \n\t- Git\n\t- Linux\n---\n#### git简单的使用方法:\n\n`1、  cd ~/.ssh/`    如果没有对应的文件夹，则执行  `mkdir  ./.ssh`\n\n`2、git config --global user.name \"lilei\"`\n\n`3、git config --global user.email \"849078367@qq.com\"`\n\n`4、ssh-keygen -t rsa -C \"849078367@qq.com\"`\n\n执行上面命令后在home目录生成了`id_rsa.pub`秘钥文件\n\n `ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9zTKWSeYAGIREZDUrvEX9JCoK1Th2ME7Mu/RbRg6o+MJqlrhi5w1DTl+VOkbwKJEGPwdMV3pl3cCF74ksFT0MrvHxOlqV1TQAHVN85Lp/JALPPO27eJsKtgkeHN0nreJEyEteJdqrDmeyhOdDKp1iC0Ec+9H3apaSRPCiB5hghMCucxoRabRgqOt04Yn0XxYsYXw6Oe3cWAMvkrlSwCk1SXQLqoyCdEX7KW0+gFnYivbo4Rnmjh7FiVrtqtlgJJ3siE4EnA7H9fpzpDo1cp0Yd0rQIbLjuib0TNCUHkToWe9EaApfCVfdTkhr42vwwJPyPk0qz4DxaiwXEcvoVTnv 849078367@qq.com`\n 把秘钥复制到gitlib>>setings>>SSH Keys`http://124.204.65.84:12463/profile/keys`\n\n![](/home/lei/TJ/note/2019-07-11 15-41-30屏幕截图.png)\n\n\n\n创建项目文件目录，然后执行`git init`   ````````````````````````\n\n添加远程仓库：`git remote add origin http://124.204.65.84:12463/spider/datacrawl.git`\n\n克隆远程仓库：`git clone http://gitlab.example.com/spider/datacrawl.git`\n\n拉取远程仓库代码：`git pull origin feature/additional`\n\n`feature/additional`这个是我们所在的分支\n\n推送本地代码到远程仓库：`git push origin feature/additional`或`git push`（ps:之后每次上传代码可以用这命令）\n\n配置文件在当前项目目录 为隐藏文件夹 .`git`下面的config\n\n修改`config文件`示例：\n\n``\n\n```linux\n  1 [core]\n  2         repositoryformatversion = 0\n  3         filemode = true\n  4         bare = false\n  5         logallrefupdates = true\n  6 [remote \"origin\"]\n  7         url = http://124.204.65.84:12463/spider/datacrawl.git\n  8         fetch = +refs/heads/*:refs/remotes/origin/*\n  9 [branch \"feature/additional\"]\n 10         remote = origin\n 11         merge = refs/heads/feature/additional\n 12 [branch \"develop\"]\n 13         remote = origin\n 14         merge =  refs/heads/develop\n 15 [user]\n 16         name = maolei\n 17         email = 849078367@qq.com\n 18 [credential]\n 19         helper = store\n~                                 \n```\n\n第一次会输入用户名和密码，之后就不会了，\n\n#### 推送本地代码到远程仓库：\n\n`git add .`提交所有文件到暂存区\n\n`git commot -m \"对本次提交的描述\"`\n\n`git status` 查看当前状态\n\n`git push`把刚刚提交到暂存区的文件推送到远程仓库\n\n每次推送之前一个`git pull`一下，避免和远程更新发生冲突，会提示 `git pull`\n\n**其他的一些用法可以参考廖雪峰的git教程**https://www.liaoxuefeng.com/wiki/896043488029600\n\n\n\n保留当前活动  `git stash`\n`切换分支`  `git checkout feature/additional` \n\n# git本地版本回退与远端版本回退(回滚)\n\n> 一个commit对应这一个版本，有一个commit id，40位的16进制数字，通过SHA1计算得到，不同的文件计算出来的SHA1值不同(有很小的几率相同，可忽略)，这样每一个提交都有其独特的id。每提交一个新版本，实际上Git就会把它们自动串成一条时间线。\n> 在Git中，HEAD表示当前版本，也就是e620a6ff0940a8dff…，HEAD^表示上一个版本，HEAD^^表示上上一个版本，往上100个版本可以写成HEAD加连续100个^，也可以写成：HEAD~100。\n>\n\n**git log：**该命令显示从最近到最远的提交日志。\n\n**git log --pretty=oneline：**将只会显示提交的commit id号和对应的注释。(这里是两个-，Markdown显示两个-为一个-)\n\n**git reset –hard commit_id 或则是 git reset –hard HEAD^**\n\n```\ngit reset --hard HEAD^   # hard选项，表示彻底将工作区、暂存区和版本库记录恢复到指定的版本库\n```\n\n使用git reset –hard 进行版本回退之后，在本地查看README.md，里面已经变为版本2对应的内容了。\n\n##　**如果你在本地做了错误提交，那么回退版本的方法很简单**\n1.先用下面命令找到要回退的版本的commit id：\n\n```\ngit reflog 1\n```\n\n2.接着回退版本:\n\n```\ngit reset --hard a7e1d279\n```\n\na7e1d279就是你要回退的版本的commit id的前面几位。\n\n## 远程分支版本回退的方法\n如果你的错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。\n1.首先要回退本地分支：\n\n```shell\ngit reflog\ngit reset --hard Obfafd\n```\n\n2.紧接着强制推送到远程分支：\n\n```shell\ngit push -f origin master ## 这里假设只有一个master分支\n```\n\norigin就是一个名字，它是在你clone一个托管在Github上代码库时，git为你默认创建的指向这个远程代码库的标签，origin指向的是repository，master只是这个repository中默认创建的第一个branch。当你git push的时候因为origin和master都是默认创建的，所以可以这样省略。\n\n\n> 注意：本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支，否则无法推送到远程分支\n>  \n\n","slug":"git简单使用","published":1,"updated":"2022-08-25T14:12:05.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz394002512mjetue29rt","content":"<h4 id=\"git简单的使用方法\"><a href=\"#git简单的使用方法\" class=\"headerlink\" title=\"git简单的使用方法:\"></a>git简单的使用方法:</h4><p><code>1、  cd ~/.ssh/</code>    如果没有对应的文件夹，则执行  <code>mkdir  ./.ssh</code></p>\n<p><code>2、git config --global user.name \"lilei\"</code></p>\n<p><code>3、git config --global user.email \"849078367@qq.com\"</code></p>\n<p><code>4、ssh-keygen -t rsa -C \"849078367@qq.com\"</code></p>\n<p>执行上面命令后在home目录生成了<code>id_rsa.pub</code>秘钥文件</p>\n<p> <code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9zTKWSeYAGIREZDUrvEX9JCoK1Th2ME7Mu/RbRg6o+MJqlrhi5w1DTl+VOkbwKJEGPwdMV3pl3cCF74ksFT0MrvHxOlqV1TQAHVN85Lp/JALPPO27eJsKtgkeHN0nreJEyEteJdqrDmeyhOdDKp1iC0Ec+9H3apaSRPCiB5hghMCucxoRabRgqOt04Yn0XxYsYXw6Oe3cWAMvkrlSwCk1SXQLqoyCdEX7KW0+gFnYivbo4Rnmjh7FiVrtqtlgJJ3siE4EnA7H9fpzpDo1cp0Yd0rQIbLjuib0TNCUHkToWe9EaApfCVfdTkhr42vwwJPyPk0qz4DxaiwXEcvoVTnv 849078367@qq.com</code><br> 把秘钥复制到gitlib&gt;&gt;setings&gt;&gt;SSH Keys<code>http://124.204.65.84:12463/profile/keys</code></p>\n<p>![](/home/lei/TJ/note/2019-07-11 15-41-30屏幕截图.png)</p>\n<p>创建项目文件目录，然后执行<code>git init</code>   ````````````````````````</p>\n<p>添加远程仓库：<code>git remote add origin http://124.204.65.84:12463/spider/datacrawl.git</code></p>\n<p>克隆远程仓库：<code>git clone http://gitlab.example.com/spider/datacrawl.git</code></p>\n<p>拉取远程仓库代码：<code>git pull origin feature/additional</code></p>\n<p><code>feature/additional</code>这个是我们所在的分支</p>\n<p>推送本地代码到远程仓库：<code>git push origin feature/additional</code>或<code>git push</code>（ps:之后每次上传代码可以用这命令）</p>\n<p>配置文件在当前项目目录 为隐藏文件夹 .<code>git</code>下面的config</p>\n<p>修改<code>config文件</code>示例：</p>\n<p>``</p>\n<pre class=\"line-numbers language-linux\" data-language=\"linux\"><code class=\"language-linux\">  1 [core]\n  2         repositoryformatversion = 0\n  3         filemode = true\n  4         bare = false\n  5         logallrefupdates = true\n  6 [remote \"origin\"]\n  7         url = http://124.204.65.84:12463/spider/datacrawl.git\n  8         fetch = +refs/heads/*:refs/remotes/origin/*\n  9 [branch \"feature/additional\"]\n 10         remote = origin\n 11         merge = refs/heads/feature/additional\n 12 [branch \"develop\"]\n 13         remote = origin\n 14         merge =  refs/heads/develop\n 15 [user]\n 16         name = maolei\n 17         email = 849078367@qq.com\n 18 [credential]\n 19         helper = store\n~                                 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第一次会输入用户名和密码，之后就不会了，</p>\n<h4 id=\"推送本地代码到远程仓库：\"><a href=\"#推送本地代码到远程仓库：\" class=\"headerlink\" title=\"推送本地代码到远程仓库：\"></a>推送本地代码到远程仓库：</h4><p><code>git add .</code>提交所有文件到暂存区</p>\n<p><code>git commot -m \"对本次提交的描述\"</code></p>\n<p><code>git status</code> 查看当前状态</p>\n<p><code>git push</code>把刚刚提交到暂存区的文件推送到远程仓库</p>\n<p>每次推送之前一个<code>git pull</code>一下，避免和远程更新发生冲突，会提示 <code>git pull</code></p>\n<p><strong>其他的一些用法可以参考廖雪峰的git教程</strong><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>\n<p>保留当前活动  <code>git stash</code><br><code>切换分支</code>  <code>git checkout feature/additional</code> </p>\n<h1 id=\"git本地版本回退与远端版本回退-回滚\"><a href=\"#git本地版本回退与远端版本回退-回滚\" class=\"headerlink\" title=\"git本地版本回退与远端版本回退(回滚)\"></a>git本地版本回退与远端版本回退(回滚)</h1><blockquote>\n<p>一个commit对应这一个版本，有一个commit id，40位的16进制数字，通过SHA1计算得到，不同的文件计算出来的SHA1值不同(有很小的几率相同，可忽略)，这样每一个提交都有其独特的id。每提交一个新版本，实际上Git就会把它们自动串成一条时间线。<br>在Git中，HEAD表示当前版本，也就是e620a6ff0940a8dff…，HEAD^表示上一个版本，HEAD^^表示上上一个版本，往上100个版本可以写成HEAD加连续100个^，也可以写成：HEAD~100。</p>\n</blockquote>\n<p><strong>git log：</strong>该命令显示从最近到最远的提交日志。</p>\n<p><strong>git log –pretty=oneline：</strong>将只会显示提交的commit id号和对应的注释。(这里是两个-，Markdown显示两个-为一个-)</p>\n<p><strong>git reset –hard commit_id 或则是 git reset –hard HEAD^</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git reset --hard HEAD^   # hard选项，表示彻底将工作区、暂存区和版本库记录恢复到指定的版本库<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用git reset –hard 进行版本回退之后，在本地查看README.md，里面已经变为版本2对应的内容了。</p>\n<p>##　<strong>如果你在本地做了错误提交，那么回退版本的方法很简单</strong><br>1.先用下面命令找到要回退的版本的commit id：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git reflog 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.接着回退版本:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git reset --hard a7e1d279<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>a7e1d279就是你要回退的版本的commit id的前面几位。</p>\n<h2 id=\"远程分支版本回退的方法\"><a href=\"#远程分支版本回退的方法\" class=\"headerlink\" title=\"远程分支版本回退的方法\"></a>远程分支版本回退的方法</h2><p>如果你的错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。<br>1.首先要回退本地分支：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> reflog\n<span class=\"token function\">git</span> reset --hard Obfafd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2.紧接着强制推送到远程分支：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> push -f origin master <span class=\"token comment\">## 这里假设只有一个master分支</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>origin就是一个名字，它是在你clone一个托管在Github上代码库时，git为你默认创建的指向这个远程代码库的标签，origin指向的是repository，master只是这个repository中默认创建的第一个branch。当你git push的时候因为origin和master都是默认创建的，所以可以这样省略。</p>\n<blockquote>\n<p>注意：本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支，否则无法推送到远程分支</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"git简单的使用方法\"><a href=\"#git简单的使用方法\" class=\"headerlink\" title=\"git简单的使用方法:\"></a>git简单的使用方法:</h4><p><code>1、  cd ~/.ssh/</code>    如果没有对应的文件夹，则执行  <code>mkdir  ./.ssh</code></p>\n<p><code>2、git config --global user.name &quot;lilei&quot;</code></p>\n<p><code>3、git config --global user.email &quot;849078367@qq.com&quot;</code></p>\n<p><code>4、ssh-keygen -t rsa -C &quot;849078367@qq.com&quot;</code></p>\n<p>执行上面命令后在home目录生成了<code>id_rsa.pub</code>秘钥文件</p>\n<p> <code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9zTKWSeYAGIREZDUrvEX9JCoK1Th2ME7Mu/RbRg6o+MJqlrhi5w1DTl+VOkbwKJEGPwdMV3pl3cCF74ksFT0MrvHxOlqV1TQAHVN85Lp/JALPPO27eJsKtgkeHN0nreJEyEteJdqrDmeyhOdDKp1iC0Ec+9H3apaSRPCiB5hghMCucxoRabRgqOt04Yn0XxYsYXw6Oe3cWAMvkrlSwCk1SXQLqoyCdEX7KW0+gFnYivbo4Rnmjh7FiVrtqtlgJJ3siE4EnA7H9fpzpDo1cp0Yd0rQIbLjuib0TNCUHkToWe9EaApfCVfdTkhr42vwwJPyPk0qz4DxaiwXEcvoVTnv 849078367@qq.com</code><br> 把秘钥复制到gitlib&gt;&gt;setings&gt;&gt;SSH Keys<code>http://124.204.65.84:12463/profile/keys</code></p>\n<p>![](/home/lei/TJ/note/2019-07-11 15-41-30屏幕截图.png)</p>\n<p>创建项目文件目录，然后执行<code>git init</code>   ````````````````````````</p>\n<p>添加远程仓库：<code>git remote add origin http://124.204.65.84:12463/spider/datacrawl.git</code></p>\n<p>克隆远程仓库：<code>git clone http://gitlab.example.com/spider/datacrawl.git</code></p>\n<p>拉取远程仓库代码：<code>git pull origin feature/additional</code></p>\n<p><code>feature/additional</code>这个是我们所在的分支</p>\n<p>推送本地代码到远程仓库：<code>git push origin feature/additional</code>或<code>git push</code>（ps:之后每次上传代码可以用这命令）</p>\n<p>配置文件在当前项目目录 为隐藏文件夹 .<code>git</code>下面的config</p>\n<p>修改<code>config文件</code>示例：</p>\n<p>``</p>\n<pre class=\"line-numbers language-linux\" data-language=\"linux\"><code class=\"language-linux\">  1 [core]\n  2         repositoryformatversion &#x3D; 0\n  3         filemode &#x3D; true\n  4         bare &#x3D; false\n  5         logallrefupdates &#x3D; true\n  6 [remote &quot;origin&quot;]\n  7         url &#x3D; http:&#x2F;&#x2F;124.204.65.84:12463&#x2F;spider&#x2F;datacrawl.git\n  8         fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*\n  9 [branch &quot;feature&#x2F;additional&quot;]\n 10         remote &#x3D; origin\n 11         merge &#x3D; refs&#x2F;heads&#x2F;feature&#x2F;additional\n 12 [branch &quot;develop&quot;]\n 13         remote &#x3D; origin\n 14         merge &#x3D;  refs&#x2F;heads&#x2F;develop\n 15 [user]\n 16         name &#x3D; maolei\n 17         email &#x3D; 849078367@qq.com\n 18 [credential]\n 19         helper &#x3D; store\n~                                 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第一次会输入用户名和密码，之后就不会了，</p>\n<h4 id=\"推送本地代码到远程仓库：\"><a href=\"#推送本地代码到远程仓库：\" class=\"headerlink\" title=\"推送本地代码到远程仓库：\"></a>推送本地代码到远程仓库：</h4><p><code>git add .</code>提交所有文件到暂存区</p>\n<p><code>git commot -m &quot;对本次提交的描述&quot;</code></p>\n<p><code>git status</code> 查看当前状态</p>\n<p><code>git push</code>把刚刚提交到暂存区的文件推送到远程仓库</p>\n<p>每次推送之前一个<code>git pull</code>一下，避免和远程更新发生冲突，会提示 <code>git pull</code></p>\n<p><strong>其他的一些用法可以参考廖雪峰的git教程</strong><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>\n<p>保留当前活动  <code>git stash</code><br><code>切换分支</code>  <code>git checkout feature/additional</code> </p>\n<h1 id=\"git本地版本回退与远端版本回退-回滚\"><a href=\"#git本地版本回退与远端版本回退-回滚\" class=\"headerlink\" title=\"git本地版本回退与远端版本回退(回滚)\"></a>git本地版本回退与远端版本回退(回滚)</h1><blockquote>\n<p>一个commit对应这一个版本，有一个commit id，40位的16进制数字，通过SHA1计算得到，不同的文件计算出来的SHA1值不同(有很小的几率相同，可忽略)，这样每一个提交都有其独特的id。每提交一个新版本，实际上Git就会把它们自动串成一条时间线。<br>在Git中，HEAD表示当前版本，也就是e620a6ff0940a8dff…，HEAD^表示上一个版本，HEAD^^表示上上一个版本，往上100个版本可以写成HEAD加连续100个^，也可以写成：HEAD~100。</p>\n</blockquote>\n<p><strong>git log：</strong>该命令显示从最近到最远的提交日志。</p>\n<p><strong>git log –pretty=oneline：</strong>将只会显示提交的commit id号和对应的注释。(这里是两个-，Markdown显示两个-为一个-)</p>\n<p><strong>git reset –hard commit_id 或则是 git reset –hard HEAD^</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git reset --hard HEAD^   # hard选项，表示彻底将工作区、暂存区和版本库记录恢复到指定的版本库<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用git reset –hard 进行版本回退之后，在本地查看README.md，里面已经变为版本2对应的内容了。</p>\n<p>##　<strong>如果你在本地做了错误提交，那么回退版本的方法很简单</strong><br>1.先用下面命令找到要回退的版本的commit id：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git reflog 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.接着回退版本:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git reset --hard a7e1d279<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>a7e1d279就是你要回退的版本的commit id的前面几位。</p>\n<h2 id=\"远程分支版本回退的方法\"><a href=\"#远程分支版本回退的方法\" class=\"headerlink\" title=\"远程分支版本回退的方法\"></a>远程分支版本回退的方法</h2><p>如果你的错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。<br>1.首先要回退本地分支：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> reflog\n<span class=\"token function\">git</span> reset --hard Obfafd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2.紧接着强制推送到远程分支：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> push -f origin master <span class=\"token comment\">## 这里假设只有一个master分支</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>origin就是一个名字，它是在你clone一个托管在Github上代码库时，git为你默认创建的指向这个远程代码库的标签，origin指向的是repository，master只是这个repository中默认创建的第一个branch。当你git push的时候因为origin和master都是默认创建的，所以可以这样省略。</p>\n<blockquote>\n<p>注意：本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支，否则无法推送到远程分支</p>\n</blockquote>\n"},{"title":"Hello World","date":"2020-02-01T04:20:35.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2020-2-1 12:20:35\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-08-25T14:12:05.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz394002812mj3gjt4i5k","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"test","date":"2020-03-07T06:03:04.000Z","_content":"\n# Markdown 学习笔记  \n\n{% asset_img wechat.jpg WeChat %}\n\n> 2019.8.18\n>\n> [菜鸟教程](https://www.runoob.com/markdown/md-tutorial.html)\n\n## 1、Markdown标题\n\n###  \t\t使用 # 号标记,使用 **#** 号可表示 1-6 级标题，一级标题对应一个 **#** 号，二级标题对应两个 **#** 号，以此类推。  \n\n# \t一级标题\n## \t二级标题\n### \t三级标题\n#### \t四级标题\n##### \t五级标题\n###### \t六级标题  \n\n\n\n## 2、Markdown 段落  \t\n\n### \t\t\tMarkdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车。\n\n### \t\t当然也可以在段落后面使用一个空行来表示重新开始一个段落\n\n### <style color=red>字体</style>：\n\n#### \t\t\t\tMarkdown 可以使用以下几种字体\n\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___  \n\n### 分隔线：\n\n#### \t\t你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n***\n\n  \n\n* * *\n\n  \n\n*****\n\n\n\n---\n\n \n\n--------------\n\n## 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 **~~** 即可，实例如下：\n\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n\n  \n\nMarkdown 教程\n\n[Markdown 教程](https://www.runoob.com/markdown/md-tutorial.html)[Markdown 标题](https://www.runoob.com/markdown/md-title.html)[Markdown 段落格式](https://www.runoob.com/markdown/md-paragraph.html)[Markdown 列表](https://www.runoob.com/markdown/md-lists.html)[Markdown 区块](https://www.runoob.com/markdown/md-block.html)[Markdown 代码](https://www.runoob.com/markdown/md-code.html)[Markdown 链接](https://www.runoob.com/markdown/md-link.html)[Markdown 图片](https://www.runoob.com/markdown/md-image.html)[Markdown 表格](https://www.runoob.com/markdown/md-table.html)[Markdown 高级技巧](https://www.runoob.com/markdown/md-advance.html)\n\n [Markdown 标题](https://www.runoob.com/markdown/md-title.html)\n\n[Markdown 列表](https://www.runoob.com/markdown/md-lists.html) \n\n# Markdown 段落\n\nMarkdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车**。\n\n![img](https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg)\n\n当然也可以在段落后面使用一个空行来表示重新开始一个段落。\n\n![img](https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg)\n\n------\n\n## 字体\n\nMarkdown 可以使用以下几种字体：\n\n```\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n显示效果如下所示：\n\n![img](https://www.runoob.com/wp-content/uploads/2019/03/md3.gif)\n\n------\n\n## 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n```\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n## 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 **~~** 即可，实例如下：\n\n```\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n```\n\n\n\n------\n\n## 下划线\n\n下划线可以通过 HTML 的 **<u>** 标签来实现：\n\nMarkdown 教程\nMarkdown 教程\nMarkdown 标题\nMarkdown 段落格式\nMarkdown 列表\nMarkdown 区块\nMarkdown 代码\nMarkdown 链接\nMarkdown 图片\nMarkdown 表格\nMarkdown 高级技巧\n Markdown 标题 Markdown 列表 \nMarkdown 段落\nMarkdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。\n\n\n\n当然也可以在段落后面使用一个空行来表示重新开始一个段落。\n\n\n\n字体\nMarkdown 可以使用以下几种字体：\n\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n显示效果如下所示：\n\n\n\n分隔线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n显示效果如下所示：\n\n\n\n删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n显示效果如下所示：\n\n\n\n下划线\n下划线可以通过 HTML 的 <u> 标签来实现：\n<u>带下划线文本</u>\n\n## 脚注\n\n脚注是对文本的补充说明。\n\nMarkdown 脚注的格式如下:[^要注明的文本]\n[^要注明的文本]\n\n# 4、Markdown 列表\n\nMarkdown 支持有序列表和无序列表。\n\n无序列表使用星号(*****)、加号(**+**)或是减号(**-**)作为列表标记：\n\n****** 第一项\n****** 第二项\n****** 第三项\n\n**+**  第一项\n**+**   第二项\n**+**  第三项\n\n**-** 第一项\n**-** 第二项\n**-** 第三项  \n\n\n\n1. 第一项\n\n2. 第二项\n\n3. 第三项  \n\n   \n   \n\n1.第一项：\n    - 第一项嵌套的第一个元素\n        - 第一项嵌套的第二个元素\n\n2.第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第一个元素\n\n  \n\n# 5、Markdown 区块\n\nMarkdown 区块引用是在段落开头使用 **>** 符号 ，然后后面紧跟一个**空格**符号：\n\n> 块区引用    \n>\n>   \n\n> 最外层\n> > 第一层嵌套\n> >\n> > > 第二层嵌套\n\n### 区块中使用列表\n\n区块中使用列表实例如下：\n\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n> + 第一项\n> + 第二项\n> + 第三项\n\n\n\n### 列表中使用区块\n\n如果要在列表项目内放进区块，那么就需要在 **>** 前添加四个空格的缩进。\n\n区块中使用列表实例如下：\n* 第一项\n    > 菜鸟教程\n    > 学的不仅是技术更是梦想\n* 第二项\n\n\n\n# 6、Markdown 代码\n\n如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：\n\n`print()`函数\n\n### 代码区块\n\n代码区块使用 **4 个空格**或者一个**制表符（Tab 键）**。\n\n实例如下：\n\n\n```javascript\n$(document).ready(function () {\n    alert('RUNOOB');\n});\n```\n\n## 7、Markdown 链接\n\n链接使用方法如下：\n\n```\n[链接名称](链接地址)\n\n或者\n\n<链接地址>\n```\n\n#### 这是一个链接 [菜鸟教程](https://www.runoob.com)\n\n```\n<https://www.runoob.com>\n```\n\n<https://www.runoob.com>\n\n### 高级链接\n\n```\n链接也可以用变量来代替，文档末尾附带变量地址：\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 runoob 作为网址变量 [Runoob][runoob]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [runoob]: http://www.runoob.com/\n```\n\n链接也可以用变量来代替，文档末尾附带变量地址：\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 runoob 作为网址变量 [Runoob][runoob]\n然后在文档的结尾为变量赋值（网址）\n\n[1]: http://www.google.com/\n[runoob]: http://www.runoob.com/\n\n# Markdown 图片\n\nMarkdown 图片语法格式如下：\n\n```\n![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 \"可选标题\")\n```\n\n- 开头一个感叹号 !\n- 接着一个方括号，里面放上图片的替代文字\n- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 'title' 属性的文字。\n\n使用实例：\n\n```\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)\n\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png \"RUNOOB\")\n```\n\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)\n\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png \"RUNOOB\")\n\n当然，你也可以像网址那样对图片网址使用变量:\n\n```\n这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾位变量赋值（网址）\n\n[1]: http://static.runoob.com/images/runoob-logo.png\n```\n\n\n这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾位变量赋值（网址）\n\n[1]: http://static.runoob.com/images/runoob-logo.png\n\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。\n\n```\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n```\n\n\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n\n# Markdown 表格\n\nMarkdown 制作表格使用 **|** 来分隔不同的单元格，使用 **-** 来分隔表头和其他行。\n\n语法格式如下：\n\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n对齐方式\n\n**我们可以设置表格的对齐方式：**\n\n- **-:** 设置内容和标题栏居右对齐。\n- **:-** 设置内容和标题栏居左对齐。\n- **:-:** 设置内容和标题栏居中对齐。\n\n实例如下：\n\n```\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n# 8、Markdown 高级技巧\n\n### 支持的 HTML 元素\n\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd> <b> <i> <em> <sup> <sub> <br>`等 ，如：\n\n```\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n\n### 转义\n\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠`\\`转义特殊字符：\n\n```\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n```\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n```\n\\   反斜线\n`   反引号\n*   星号\n_   下划线\n{}  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号\n```\n\n### 公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```Math\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n\n","source":"_posts/markdown.md","raw":"---\ntitle: test\ndate: 2020-03-07 14:03:04\ntags:\n---\n\n# Markdown 学习笔记  \n\n{% asset_img wechat.jpg WeChat %}\n\n> 2019.8.18\n>\n> [菜鸟教程](https://www.runoob.com/markdown/md-tutorial.html)\n\n## 1、Markdown标题\n\n###  \t\t使用 # 号标记,使用 **#** 号可表示 1-6 级标题，一级标题对应一个 **#** 号，二级标题对应两个 **#** 号，以此类推。  \n\n# \t一级标题\n## \t二级标题\n### \t三级标题\n#### \t四级标题\n##### \t五级标题\n###### \t六级标题  \n\n\n\n## 2、Markdown 段落  \t\n\n### \t\t\tMarkdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车。\n\n### \t\t当然也可以在段落后面使用一个空行来表示重新开始一个段落\n\n### <style color=red>字体</style>：\n\n#### \t\t\t\tMarkdown 可以使用以下几种字体\n\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___  \n\n### 分隔线：\n\n#### \t\t你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n***\n\n  \n\n* * *\n\n  \n\n*****\n\n\n\n---\n\n \n\n--------------\n\n## 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 **~~** 即可，实例如下：\n\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n\n  \n\nMarkdown 教程\n\n[Markdown 教程](https://www.runoob.com/markdown/md-tutorial.html)[Markdown 标题](https://www.runoob.com/markdown/md-title.html)[Markdown 段落格式](https://www.runoob.com/markdown/md-paragraph.html)[Markdown 列表](https://www.runoob.com/markdown/md-lists.html)[Markdown 区块](https://www.runoob.com/markdown/md-block.html)[Markdown 代码](https://www.runoob.com/markdown/md-code.html)[Markdown 链接](https://www.runoob.com/markdown/md-link.html)[Markdown 图片](https://www.runoob.com/markdown/md-image.html)[Markdown 表格](https://www.runoob.com/markdown/md-table.html)[Markdown 高级技巧](https://www.runoob.com/markdown/md-advance.html)\n\n [Markdown 标题](https://www.runoob.com/markdown/md-title.html)\n\n[Markdown 列表](https://www.runoob.com/markdown/md-lists.html) \n\n# Markdown 段落\n\nMarkdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车**。\n\n![img](https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg)\n\n当然也可以在段落后面使用一个空行来表示重新开始一个段落。\n\n![img](https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg)\n\n------\n\n## 字体\n\nMarkdown 可以使用以下几种字体：\n\n```\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n显示效果如下所示：\n\n![img](https://www.runoob.com/wp-content/uploads/2019/03/md3.gif)\n\n------\n\n## 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n```\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n## 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 **~~** 即可，实例如下：\n\n```\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n```\n\n\n\n------\n\n## 下划线\n\n下划线可以通过 HTML 的 **<u>** 标签来实现：\n\nMarkdown 教程\nMarkdown 教程\nMarkdown 标题\nMarkdown 段落格式\nMarkdown 列表\nMarkdown 区块\nMarkdown 代码\nMarkdown 链接\nMarkdown 图片\nMarkdown 表格\nMarkdown 高级技巧\n Markdown 标题 Markdown 列表 \nMarkdown 段落\nMarkdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。\n\n\n\n当然也可以在段落后面使用一个空行来表示重新开始一个段落。\n\n\n\n字体\nMarkdown 可以使用以下几种字体：\n\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n显示效果如下所示：\n\n\n\n分隔线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n显示效果如下所示：\n\n\n\n删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n显示效果如下所示：\n\n\n\n下划线\n下划线可以通过 HTML 的 <u> 标签来实现：\n<u>带下划线文本</u>\n\n## 脚注\n\n脚注是对文本的补充说明。\n\nMarkdown 脚注的格式如下:[^要注明的文本]\n[^要注明的文本]\n\n# 4、Markdown 列表\n\nMarkdown 支持有序列表和无序列表。\n\n无序列表使用星号(*****)、加号(**+**)或是减号(**-**)作为列表标记：\n\n****** 第一项\n****** 第二项\n****** 第三项\n\n**+**  第一项\n**+**   第二项\n**+**  第三项\n\n**-** 第一项\n**-** 第二项\n**-** 第三项  \n\n\n\n1. 第一项\n\n2. 第二项\n\n3. 第三项  \n\n   \n   \n\n1.第一项：\n    - 第一项嵌套的第一个元素\n        - 第一项嵌套的第二个元素\n\n2.第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第一个元素\n\n  \n\n# 5、Markdown 区块\n\nMarkdown 区块引用是在段落开头使用 **>** 符号 ，然后后面紧跟一个**空格**符号：\n\n> 块区引用    \n>\n>   \n\n> 最外层\n> > 第一层嵌套\n> >\n> > > 第二层嵌套\n\n### 区块中使用列表\n\n区块中使用列表实例如下：\n\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n> + 第一项\n> + 第二项\n> + 第三项\n\n\n\n### 列表中使用区块\n\n如果要在列表项目内放进区块，那么就需要在 **>** 前添加四个空格的缩进。\n\n区块中使用列表实例如下：\n* 第一项\n    > 菜鸟教程\n    > 学的不仅是技术更是梦想\n* 第二项\n\n\n\n# 6、Markdown 代码\n\n如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：\n\n`print()`函数\n\n### 代码区块\n\n代码区块使用 **4 个空格**或者一个**制表符（Tab 键）**。\n\n实例如下：\n\n\n```javascript\n$(document).ready(function () {\n    alert('RUNOOB');\n});\n```\n\n## 7、Markdown 链接\n\n链接使用方法如下：\n\n```\n[链接名称](链接地址)\n\n或者\n\n<链接地址>\n```\n\n#### 这是一个链接 [菜鸟教程](https://www.runoob.com)\n\n```\n<https://www.runoob.com>\n```\n\n<https://www.runoob.com>\n\n### 高级链接\n\n```\n链接也可以用变量来代替，文档末尾附带变量地址：\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 runoob 作为网址变量 [Runoob][runoob]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [runoob]: http://www.runoob.com/\n```\n\n链接也可以用变量来代替，文档末尾附带变量地址：\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 runoob 作为网址变量 [Runoob][runoob]\n然后在文档的结尾为变量赋值（网址）\n\n[1]: http://www.google.com/\n[runoob]: http://www.runoob.com/\n\n# Markdown 图片\n\nMarkdown 图片语法格式如下：\n\n```\n![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 \"可选标题\")\n```\n\n- 开头一个感叹号 !\n- 接着一个方括号，里面放上图片的替代文字\n- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 'title' 属性的文字。\n\n使用实例：\n\n```\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)\n\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png \"RUNOOB\")\n```\n\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)\n\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png \"RUNOOB\")\n\n当然，你也可以像网址那样对图片网址使用变量:\n\n```\n这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾位变量赋值（网址）\n\n[1]: http://static.runoob.com/images/runoob-logo.png\n```\n\n\n这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾位变量赋值（网址）\n\n[1]: http://static.runoob.com/images/runoob-logo.png\n\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。\n\n```\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n```\n\n\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n\n# Markdown 表格\n\nMarkdown 制作表格使用 **|** 来分隔不同的单元格，使用 **-** 来分隔表头和其他行。\n\n语法格式如下：\n\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n对齐方式\n\n**我们可以设置表格的对齐方式：**\n\n- **-:** 设置内容和标题栏居右对齐。\n- **:-** 设置内容和标题栏居左对齐。\n- **:-:** 设置内容和标题栏居中对齐。\n\n实例如下：\n\n```\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n# 8、Markdown 高级技巧\n\n### 支持的 HTML 元素\n\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd> <b> <i> <em> <sup> <sub> <br>`等 ，如：\n\n```\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n\n### 转义\n\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠`\\`转义特殊字符：\n\n```\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n```\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n```\n\\   反斜线\n`   反引号\n*   星号\n_   下划线\n{}  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号\n```\n\n### 公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```Math\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n\n","slug":"markdown","published":1,"updated":"2022-08-25T14:12:05.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz394002c12mjbdd6f5yg","content":"<h1 id=\"Markdown-学习笔记\"><a href=\"#Markdown-学习笔记\" class=\"headerlink\" title=\"Markdown 学习笔记\"></a>Markdown 学习笔记</h1><img src=\"/2020/03/07/markdown/wechat.jpg\" class=\"\" title=\"WeChat\">\n\n<blockquote>\n<p>2019.8.18</p>\n<p><a href=\"https://www.runoob.com/markdown/md-tutorial.html\">菜鸟教程</a></p>\n</blockquote>\n<h2 id=\"1、Markdown标题\"><a href=\"#1、Markdown标题\" class=\"headerlink\" title=\"1、Markdown标题\"></a>1、Markdown标题</h2><h3 id=\"使用-号标记-使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号，以此类推。\"><a href=\"#使用-号标记-使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号，以此类推。\" class=\"headerlink\" title=\"使用 # 号标记,使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\"></a>使用 # 号标记,使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</h3><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h2 id=\"2、Markdown-段落\"><a href=\"#2、Markdown-段落\" class=\"headerlink\" title=\"2、Markdown 段落\"></a>2、Markdown 段落</h2><h3 id=\"Markdown-段落没有特殊的格式，直接编写文字就好，-段落的换行是使用两个以上空格加上回车。\"><a href=\"#Markdown-段落没有特殊的格式，直接编写文字就好，-段落的换行是使用两个以上空格加上回车。\" class=\"headerlink\" title=\"Markdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车。\"></a>Markdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车。</h3><h3 id=\"当然也可以在段落后面使用一个空行来表示重新开始一个段落\"><a href=\"#当然也可以在段落后面使用一个空行来表示重新开始一个段落\" class=\"headerlink\" title=\"当然也可以在段落后面使用一个空行来表示重新开始一个段落\"></a>当然也可以在段落后面使用一个空行来表示重新开始一个段落</h3><h3 id=\"字体：\"><a href=\"#字体：\" class=\"headerlink\" title=\"字体：\"></a><style color=\"red\">字体</style>：</h3><h4 id=\"Markdown-可以使用以下几种字体\"><a href=\"#Markdown-可以使用以下几种字体\" class=\"headerlink\" title=\"Markdown 可以使用以下几种字体\"></a>Markdown 可以使用以下几种字体</h4><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong>  </p>\n<h3 id=\"分隔线：\"><a href=\"#分隔线：\" class=\"headerlink\" title=\"分隔线：\"></a>分隔线：</h3><h4 id=\"你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\"><a href=\"#你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\" class=\"headerlink\" title=\"你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\"></a>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</h4><hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p>\n<p>RUNOOB.COM<br>GOOGLE.COM<br><del>BAIDU.COM</del></p>\n<p>Markdown 教程</p>\n<p><a href=\"https://www.runoob.com/markdown/md-tutorial.html\">Markdown 教程</a><a href=\"https://www.runoob.com/markdown/md-title.html\">Markdown 标题</a><a href=\"https://www.runoob.com/markdown/md-paragraph.html\">Markdown 段落格式</a><a href=\"https://www.runoob.com/markdown/md-lists.html\">Markdown 列表</a><a href=\"https://www.runoob.com/markdown/md-block.html\">Markdown 区块</a><a href=\"https://www.runoob.com/markdown/md-code.html\">Markdown 代码</a><a href=\"https://www.runoob.com/markdown/md-link.html\">Markdown 链接</a><a href=\"https://www.runoob.com/markdown/md-image.html\">Markdown 图片</a><a href=\"https://www.runoob.com/markdown/md-table.html\">Markdown 表格</a><a href=\"https://www.runoob.com/markdown/md-advance.html\">Markdown 高级技巧</a></p>\n<p> <a href=\"https://www.runoob.com/markdown/md-title.html\">Markdown 标题</a></p>\n<p><a href=\"https://www.runoob.com/markdown/md-lists.html\">Markdown 列表</a> </p>\n<h1 id=\"Markdown-段落\"><a href=\"#Markdown-段落\" class=\"headerlink\" title=\"Markdown 段落\"></a>Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg\" alt=\"img\"></p>\n<p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg\" alt=\"img\"></p>\n<hr>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>显示效果如下所示：</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/md3.gif\" alt=\"img\"></p>\n<hr>\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">***\n\n* * *\n\n*****\n\n- - -\n\n----------<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"删除线-1\"><a href=\"#删除线-1\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">RUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><p>下划线可以通过 HTML 的 <strong><u></u></strong><u> 标签来实现：</u></p><u>\n<p>Markdown 教程<br>Markdown 教程<br>Markdown 标题<br>Markdown 段落格式<br>Markdown 列表<br>Markdown 区块<br>Markdown 代码<br>Markdown 链接<br>Markdown 图片<br>Markdown 表格<br>Markdown 高级技巧<br> Markdown 标题 Markdown 列表<br>Markdown 段落<br>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p>\n<p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p>\n<p>字体<br>Markdown 可以使用以下几种字体：</p>\n<p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong><br>显示效果如下所示：</p>\n<p>分隔线<br>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<p>显示效果如下所示：</p>\n<p>删除线<br>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p>\n<p>RUNOOB.COM<br>GOOGLE.COM<br><del>BAIDU.COM</del><br>显示效果如下所示：</p>\n<p>下划线<br>下划线可以通过 HTML 的 <u> 标签来实现：<br><u>带下划线文本</u></u></p><u>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注是对文本的补充说明。</p>\n<p>Markdown 脚注的格式如下:[^要注明的文本]<br>[^要注明的文本]</p>\n<h1 id=\"4、Markdown-列表\"><a href=\"#4、Markdown-列表\" class=\"headerlink\" title=\"4、Markdown 列表\"></a>4、Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p>\n<p>无序列表使用星号(*<strong>**)、加号(</strong>+<strong>)或是减号(</strong>-**)作为列表标记：</p>\n<p><strong>**</strong> 第一项<br><strong>**</strong> 第二项<br><strong>**</strong> 第三项</p>\n<p><strong>+</strong>  第一项<br><strong>+</strong>   第二项<br><strong>+</strong>  第三项</p>\n<p><strong>-</strong> 第一项<br><strong>-</strong> 第二项<br><strong>-</strong> 第三项  </p>\n<ol>\n<li><p>第一项</p>\n</li>\n<li><p>第二项</p>\n</li>\n<li><p>第三项  </p>\n</li>\n</ol>\n<p>1.第一项：<br>    - 第一项嵌套的第一个元素<br>        - 第一项嵌套的第二个元素</p>\n<p>2.第二项：<br>    - 第二项嵌套的第一个元素<br>    - 第二项嵌套的第一个元素</p>\n<h1 id=\"5、Markdown-区块\"><a href=\"#5、Markdown-区块\" class=\"headerlink\" title=\"5、Markdown 区块\"></a>5、Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p>\n<blockquote>\n<p>块区引用    </p>\n</blockquote>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"区块中使用列表\"><a href=\"#区块中使用列表\" class=\"headerlink\" title=\"区块中使用列表\"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p>\n<blockquote>\n<p>区块中使用列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<h3 id=\"列表中使用区块\"><a href=\"#列表中使用区块\" class=\"headerlink\" title=\"列表中使用区块\"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p>\n<p>区块中使用列表实例如下：</p>\n<ul>\n<li>第一项<blockquote>\n<p>菜鸟教程<br>学的不仅是技术更是梦想</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ul>\n<h1 id=\"6、Markdown-代码\"><a href=\"#6、Markdown-代码\" class=\"headerlink\" title=\"6、Markdown 代码\"></a>6、Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：</p>\n<p><code>print()</code>函数</p>\n<h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p>\n<p>实例如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RUNOOB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7、Markdown-链接\"><a href=\"#7、Markdown-链接\" class=\"headerlink\" title=\"7、Markdown 链接\"></a>7、Markdown 链接</h2><p>链接使用方法如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[链接名称](链接地址)\n\n或者\n\n&lt;链接地址&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"这是一个链接-菜鸟教程\"><a href=\"#这是一个链接-菜鸟教程\" class=\"headerlink\" title=\"这是一个链接 菜鸟教程\"></a>这是一个链接 <a href=\"https://www.runoob.com/\">菜鸟教程</a></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;https://www.runoob.com&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><a href=\"https://www.runoob.com/\">https://www.runoob.com</a></p>\n<h3 id=\"高级链接\"><a href=\"#高级链接\" class=\"headerlink\" title=\"高级链接\"></a>高级链接</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">链接也可以用变量来代替，文档末尾附带变量地址：\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 runoob 作为网址变量 [Runoob][runoob]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [runoob]: http://www.runoob.com/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>链接也可以用变量来代替，文档末尾附带变量地址：<br>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>这个链接用 runoob 作为网址变量 <a href=\"http://www.runoob.com/\">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p>\n<h1 id=\"Markdown-图片\"><a href=\"#Markdown-图片\" class=\"headerlink\" title=\"Markdown 图片\"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 \"可选标题\")<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>开头一个感叹号 !</li>\n<li>接着一个方括号，里面放上图片的替代文字</li>\n<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>\n</ul>\n<p>使用实例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)\n\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png \"RUNOOB\")<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://static.runoob.com/images/runoob-logo.png\" alt=\"RUNOOB 图标\"></p>\n<p><img src=\"http://static.runoob.com/images/runoob-logo.png\" alt=\"RUNOOB 图标\" title=\"RUNOOB\"></p>\n<p>当然，你也可以像网址那样对图片网址使用变量:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾位变量赋值（网址）\n\n[1]: http://static.runoob.com/images/runoob-logo.png<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">RUNOOB</a>.<br>然后在文档的结尾位变量赋值（网址）</p>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\"&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n\n<h1 id=\"Markdown-表格\"><a href=\"#Markdown-表格\" class=\"headerlink\" title=\"Markdown 表格\"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody></table>\n<p>对齐方式</p>\n<p><strong>我们可以设置表格的对齐方式：</strong></p>\n<ul>\n<li><strong>-:</strong> 设置内容和标题栏居右对齐。</li>\n<li><strong>:-</strong> 设置内容和标题栏居左对齐。</li>\n<li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li>\n</ul>\n<p>实例如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">左对齐</th>\n<th align=\"right\">右对齐</th>\n<th align=\"center\">居中对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n</tbody></table>\n<h1 id=\"8、Markdown-高级技巧\"><a href=\"#8、Markdown-高级技巧\" class=\"headerlink\" title=\"8、Markdown 高级技巧\"></a>8、Markdown 高级技巧</h1><h3 id=\"支持的-HTML-元素\"><a href=\"#支持的-HTML-元素\" class=\"headerlink\" title=\"支持的 HTML 元素\"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>\n<h3 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠<code>\\</code>转义特殊字符：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">**文本加粗** \n\\*\\* 正常显示星号 \\*\\*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>文本加粗</strong><br>** 正常显示星号 **</p>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\\   反斜线\n`   反引号\n*   星号\n_   下划线\n{}  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<pre class=\"line-numbers language-Math\" data-language=\"Math\"><code class=\"language-Math\">$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\\n\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>$$<br>\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial u} &amp; 0 \\<br>\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial v} &amp; 0 \\<br>\\end{vmatrix}<br>$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p>\n</u></u>","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Markdown-学习笔记\"><a href=\"#Markdown-学习笔记\" class=\"headerlink\" title=\"Markdown 学习笔记\"></a>Markdown 学习笔记</h1><img src=\"/2020/03/07/markdown/wechat.jpg\" class=\"\" title=\"WeChat\">\n\n<blockquote>\n<p>2019.8.18</p>\n<p><a href=\"https://www.runoob.com/markdown/md-tutorial.html\">菜鸟教程</a></p>\n</blockquote>\n<h2 id=\"1、Markdown标题\"><a href=\"#1、Markdown标题\" class=\"headerlink\" title=\"1、Markdown标题\"></a>1、Markdown标题</h2><h3 id=\"使用-号标记-使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号，以此类推。\"><a href=\"#使用-号标记-使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号，以此类推。\" class=\"headerlink\" title=\"使用 # 号标记,使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\"></a>使用 # 号标记,使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</h3><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h2 id=\"2、Markdown-段落\"><a href=\"#2、Markdown-段落\" class=\"headerlink\" title=\"2、Markdown 段落\"></a>2、Markdown 段落</h2><h3 id=\"Markdown-段落没有特殊的格式，直接编写文字就好，-段落的换行是使用两个以上空格加上回车。\"><a href=\"#Markdown-段落没有特殊的格式，直接编写文字就好，-段落的换行是使用两个以上空格加上回车。\" class=\"headerlink\" title=\"Markdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车。\"></a>Markdown 段落没有特殊的格式，直接编写文字就好，**段落的换行是使用两个以上空格加上回车。</h3><h3 id=\"当然也可以在段落后面使用一个空行来表示重新开始一个段落\"><a href=\"#当然也可以在段落后面使用一个空行来表示重新开始一个段落\" class=\"headerlink\" title=\"当然也可以在段落后面使用一个空行来表示重新开始一个段落\"></a>当然也可以在段落后面使用一个空行来表示重新开始一个段落</h3><h3 id=\"字体：\"><a href=\"#字体：\" class=\"headerlink\" title=\"字体：\"></a><style color=red>字体</style>：</h3><h4 id=\"Markdown-可以使用以下几种字体\"><a href=\"#Markdown-可以使用以下几种字体\" class=\"headerlink\" title=\"Markdown 可以使用以下几种字体\"></a>Markdown 可以使用以下几种字体</h4><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong>  </p>\n<h3 id=\"分隔线：\"><a href=\"#分隔线：\" class=\"headerlink\" title=\"分隔线：\"></a>分隔线：</h3><h4 id=\"你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\"><a href=\"#你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\" class=\"headerlink\" title=\"你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\"></a>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</h4><hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p>\n<p>RUNOOB.COM<br>GOOGLE.COM<br><del>BAIDU.COM</del></p>\n<p>Markdown 教程</p>\n<p><a href=\"https://www.runoob.com/markdown/md-tutorial.html\">Markdown 教程</a><a href=\"https://www.runoob.com/markdown/md-title.html\">Markdown 标题</a><a href=\"https://www.runoob.com/markdown/md-paragraph.html\">Markdown 段落格式</a><a href=\"https://www.runoob.com/markdown/md-lists.html\">Markdown 列表</a><a href=\"https://www.runoob.com/markdown/md-block.html\">Markdown 区块</a><a href=\"https://www.runoob.com/markdown/md-code.html\">Markdown 代码</a><a href=\"https://www.runoob.com/markdown/md-link.html\">Markdown 链接</a><a href=\"https://www.runoob.com/markdown/md-image.html\">Markdown 图片</a><a href=\"https://www.runoob.com/markdown/md-table.html\">Markdown 表格</a><a href=\"https://www.runoob.com/markdown/md-advance.html\">Markdown 高级技巧</a></p>\n<p> <a href=\"https://www.runoob.com/markdown/md-title.html\">Markdown 标题</a></p>\n<p><a href=\"https://www.runoob.com/markdown/md-lists.html\">Markdown 列表</a> </p>\n<h1 id=\"Markdown-段落\"><a href=\"#Markdown-段落\" class=\"headerlink\" title=\"Markdown 段落\"></a>Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg\" alt=\"img\"></p>\n<p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg\" alt=\"img\"></p>\n<hr>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>显示效果如下所示：</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/md3.gif\" alt=\"img\"></p>\n<hr>\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">***\n\n* * *\n\n*****\n\n- - -\n\n----------<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"删除线-1\"><a href=\"#删除线-1\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">RUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><p>下划线可以通过 HTML 的 <strong><u></strong> 标签来实现：</p>\n<p>Markdown 教程<br>Markdown 教程<br>Markdown 标题<br>Markdown 段落格式<br>Markdown 列表<br>Markdown 区块<br>Markdown 代码<br>Markdown 链接<br>Markdown 图片<br>Markdown 表格<br>Markdown 高级技巧<br> Markdown 标题 Markdown 列表<br>Markdown 段落<br>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p>\n<p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p>\n<p>字体<br>Markdown 可以使用以下几种字体：</p>\n<p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong><br>显示效果如下所示：</p>\n<p>分隔线<br>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<p>显示效果如下所示：</p>\n<p>删除线<br>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p>\n<p>RUNOOB.COM<br>GOOGLE.COM<br><del>BAIDU.COM</del><br>显示效果如下所示：</p>\n<p>下划线<br>下划线可以通过 HTML 的 <u> 标签来实现：<br><u>带下划线文本</u></p>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注是对文本的补充说明。</p>\n<p>Markdown 脚注的格式如下:[^要注明的文本]<br>[^要注明的文本]</p>\n<h1 id=\"4、Markdown-列表\"><a href=\"#4、Markdown-列表\" class=\"headerlink\" title=\"4、Markdown 列表\"></a>4、Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p>\n<p>无序列表使用星号(*<strong>**)、加号(</strong>+<strong>)或是减号(</strong>-**)作为列表标记：</p>\n<p><strong>**</strong> 第一项<br><strong>**</strong> 第二项<br><strong>**</strong> 第三项</p>\n<p><strong>+</strong>  第一项<br><strong>+</strong>   第二项<br><strong>+</strong>  第三项</p>\n<p><strong>-</strong> 第一项<br><strong>-</strong> 第二项<br><strong>-</strong> 第三项  </p>\n<ol>\n<li><p>第一项</p>\n</li>\n<li><p>第二项</p>\n</li>\n<li><p>第三项  </p>\n</li>\n</ol>\n<p>1.第一项：<br>    - 第一项嵌套的第一个元素<br>        - 第一项嵌套的第二个元素</p>\n<p>2.第二项：<br>    - 第二项嵌套的第一个元素<br>    - 第二项嵌套的第一个元素</p>\n<h1 id=\"5、Markdown-区块\"><a href=\"#5、Markdown-区块\" class=\"headerlink\" title=\"5、Markdown 区块\"></a>5、Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p>\n<blockquote>\n<p>块区引用    </p>\n</blockquote>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"区块中使用列表\"><a href=\"#区块中使用列表\" class=\"headerlink\" title=\"区块中使用列表\"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p>\n<blockquote>\n<p>区块中使用列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<h3 id=\"列表中使用区块\"><a href=\"#列表中使用区块\" class=\"headerlink\" title=\"列表中使用区块\"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p>\n<p>区块中使用列表实例如下：</p>\n<ul>\n<li>第一项<blockquote>\n<p>菜鸟教程<br>学的不仅是技术更是梦想</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ul>\n<h1 id=\"6、Markdown-代码\"><a href=\"#6、Markdown-代码\" class=\"headerlink\" title=\"6、Markdown 代码\"></a>6、Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：</p>\n<p><code>print()</code>函数</p>\n<h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p>\n<p>实例如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RUNOOB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7、Markdown-链接\"><a href=\"#7、Markdown-链接\" class=\"headerlink\" title=\"7、Markdown 链接\"></a>7、Markdown 链接</h2><p>链接使用方法如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[链接名称](链接地址)\n\n或者\n\n&lt;链接地址&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"这是一个链接-菜鸟教程\"><a href=\"#这是一个链接-菜鸟教程\" class=\"headerlink\" title=\"这是一个链接 菜鸟教程\"></a>这是一个链接 <a href=\"https://www.runoob.com/\">菜鸟教程</a></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;https:&#x2F;&#x2F;www.runoob.com&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><a href=\"https://www.runoob.com/\">https://www.runoob.com</a></p>\n<h3 id=\"高级链接\"><a href=\"#高级链接\" class=\"headerlink\" title=\"高级链接\"></a>高级链接</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">链接也可以用变量来代替，文档末尾附带变量地址：\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 runoob 作为网址变量 [Runoob][runoob]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http:&#x2F;&#x2F;www.google.com&#x2F;\n  [runoob]: http:&#x2F;&#x2F;www.runoob.com&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>链接也可以用变量来代替，文档末尾附带变量地址：<br>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>这个链接用 runoob 作为网址变量 <a href=\"http://www.runoob.com/\">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p>\n<h1 id=\"Markdown-图片\"><a href=\"#Markdown-图片\" class=\"headerlink\" title=\"Markdown 图片\"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 &quot;可选标题&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>开头一个感叹号 !</li>\n<li>接着一个方括号，里面放上图片的替代文字</li>\n<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>\n</ul>\n<p>使用实例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png)\n\n![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png &quot;RUNOOB&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://static.runoob.com/images/runoob-logo.png\" alt=\"RUNOOB 图标\"></p>\n<p><img src=\"http://static.runoob.com/images/runoob-logo.png\" alt=\"RUNOOB 图标\" title=\"RUNOOB\"></p>\n<p>当然，你也可以像网址那样对图片网址使用变量:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾位变量赋值（网址）\n\n[1]: http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">RUNOOB</a>.<br>然后在文档的结尾位变量赋值（网址）</p>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png&quot; width&#x3D;&quot;50%&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n\n<h1 id=\"Markdown-表格\"><a href=\"#Markdown-表格\" class=\"headerlink\" title=\"Markdown 表格\"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody></table>\n<p>对齐方式</p>\n<p><strong>我们可以设置表格的对齐方式：</strong></p>\n<ul>\n<li><strong>-:</strong> 设置内容和标题栏居右对齐。</li>\n<li><strong>:-</strong> 设置内容和标题栏居左对齐。</li>\n<li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li>\n</ul>\n<p>实例如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">左对齐</th>\n<th align=\"right\">右对齐</th>\n<th align=\"center\">居中对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n</tbody></table>\n<h1 id=\"8、Markdown-高级技巧\"><a href=\"#8、Markdown-高级技巧\" class=\"headerlink\" title=\"8、Markdown 高级技巧\"></a>8、Markdown 高级技巧</h1><h3 id=\"支持的-HTML-元素\"><a href=\"#支持的-HTML-元素\" class=\"headerlink\" title=\"支持的 HTML 元素\"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">使用 &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Del&lt;&#x2F;kbd&gt; 重启电脑<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>\n<h3 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠<code>\\</code>转义特殊字符：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">**文本加粗** \n\\*\\* 正常显示星号 \\*\\*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>文本加粗</strong><br>** 正常显示星号 **</p>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\\   反斜线\n&#96;   反引号\n*   星号\n_   下划线\n&#123;&#125;  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<pre class=\"line-numbers language-Math\" data-language=\"Math\"><code class=\"language-Math\">$$\n\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D;  \\begin&#123;vmatrix&#125; \n\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\n\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\n\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\n\\end&#123;vmatrix&#125;\n$$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>$$<br>\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial u} &amp; 0 \\<br>\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial v} &amp; 0 \\<br>\\end{vmatrix}<br>$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p>\n"},{"title":"Mongodb 和 Redis 的区别","top":false,"date":"2020-07-30T11:16:05.000Z","_content":"\n# Mongodb 和 Redis 的区别\n\nMongoDB和Redis都是NoSQL数据库，采用结构型数据存储，而MySQL、oracle等则属于传统的关系型数据库。\n\n### NoSQL数据库与关系型数据库的优缺点**\n\n- **关系型数据库**\n\n优点：以完善的关系代数理论为基础,有严格的标准,支持事务ACID四性,借助索引机制可以实现高效的查询。\n\n> 原子性、一致性、隔离性、持久性\n\n缺点：可扩展性差，无法较好地支持海量数据存储，数据模型过于死板，事务机制影响了系统的整体性能，全文搜索功能较弱。\n\n- **NoSQL数据库**\n\n优点：数据之间无关系，易扩展。有非常高的读写性能，支持大量数据，性能高。有灵活的数据模型，无须事先为要存储的数据建立字段，随时可以存储自定义的数据格式。\n\n缺点：复杂查询性能不高,一般都不能实现事务的强一致性。\n\n### **redis与mongoDB的区别**\n\n- **内存管理**\n\nRedis 数据全部存在内存，定期写入磁盘，当内存不够时，可以选择指定的 LRU 算法删除数据。\n\nMongoDB 数据会优先存于内存，当内存不够时，只将热点数据放入内存，其他数据存在磁盘。\n\n*需要注意的是Redis 和mongoDB特别消耗内存，一般不建议将它们和别的服务部署在同一台服务器上。*\n\n- **数据结构**\n\nRedis 支持的数据结构丰富，包括hash、string、list、set、zset。\n\nMongoDB 文件存储是BSON格式类似JSON，或自定义的二进制格式。数据结构比较单一，但是支持丰富的数据表达，索引，最类似关系型数据库，支持的查询语言非常丰富。\n\n- **数据量和性能**\n\n  mongodb与redis性能都很依赖内存的大小，mongodb 有丰富的数据表达、索引；最类似于关系数据库，支持丰富的查询语言，redis数据丰富，较少的IO ，这方面mongodb优势明显。\n\n  mongodb对海量数据的访问效率提升，redis 较小数据量的性能及运算,这方面 mongodb性能优于redis .monbgodb 有mapredurce功能，提供数据分析，redis 没有 ，这方面 mongodb优于redis 。\n\n  \n\n当物理内存够用的时候，性能，redis>mongodb>mysql\n\n数据量，mysql>mongodb>redis\n\n*注意mongodb可以存储文件，适合存放大量的小文件，内置了GirdFS 的分布式文件系统。*\n\n- **可靠性**\n\n  mongodb不支持事物，靠客户端自身保证，redis支持事物，比较弱，仅能保证事物中的操作按顺序执行，这方面 redis优于mongodb。\n\nmongodb从1.8版本后，采用binlog方式（MySQL同样采用该方式）支持持久化，增加可靠性；\n\nRedis依赖快照进行持久化；AOF增强可靠性；增强可靠性的同时，影响访问性能。\n\n可靠性上MongoDB优于Redis。\n\n\n\n![img](https://upload-images.jianshu.io/upload_images/11422128-575cd92e76caedea.png?imageMogr2/auto-orient/strip|imageView2/2/w/491/format/webp)\n\n**171. mysql 索引是怎么实现的？**\n\n索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。\n\n\n\n具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。\n\n**175. 说一下 mysql 的行锁和表锁？**\n\nMyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。\n\n\n\n- 表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。\n- 行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。\n\n**178. 如何做 mysql 的性能优化？**\n\n- 为搜索字段创建索引。\n- 避免使用 select *，列出需要查询的字段。\n- 垂直分割分表。\n- 选择正确的存储引擎。\n\n[引用mysql](https://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&mid=2651938577&idx=2&sn=4943c30f0c0f7be2184d0275378085fa&chksm=8d0f305fba78b9493e45048af00f454e4352cb94181b637b1f6f93f94fa385ba3a6f092c0b25&mpshare=1&scene=1&srcid=0813QGYaBHVpqL3TH9CCNevT&sharer_sharetime=1597328200226&sharer_shareid=b59d477b5eab6b4160165bc8bf143bf9&key=281d398fa0af70c927b9b1f6d21582dafbb4795fb3495b5450a51a8f51a633404b6b8bf6337cd02db79ce62058ba7e2b18ede46e33e0636b21031f30a0783998c8db6529ae24083357f7024841e7f5ea&ascene=1&uin=MTY1NTEzNDEwMw%3D%3D&devicetype=Windows+XP&version=62060841&lang=zh_CN&exportkey=AYA9K6fq8gpv9k%2Bw3lHAlyU%3D&pass_ticket=KF3ZYQGe69eA2wf6qHzvVf2iikdbBS4yxBkgWqlJFBWQx1nJTf21s0CRDuypaA8Q)\n\n","source":"_posts/mongodb和redis的区别.md","raw":"---\ntitle: Mongodb 和 Redis 的区别\ntags:\n  - Mongodb\n  - Redis\ncategories:\n  - 数据库\ntop: false\ndate: 2020-07-30 19:16:05\n---\n\n# Mongodb 和 Redis 的区别\n\nMongoDB和Redis都是NoSQL数据库，采用结构型数据存储，而MySQL、oracle等则属于传统的关系型数据库。\n\n### NoSQL数据库与关系型数据库的优缺点**\n\n- **关系型数据库**\n\n优点：以完善的关系代数理论为基础,有严格的标准,支持事务ACID四性,借助索引机制可以实现高效的查询。\n\n> 原子性、一致性、隔离性、持久性\n\n缺点：可扩展性差，无法较好地支持海量数据存储，数据模型过于死板，事务机制影响了系统的整体性能，全文搜索功能较弱。\n\n- **NoSQL数据库**\n\n优点：数据之间无关系，易扩展。有非常高的读写性能，支持大量数据，性能高。有灵活的数据模型，无须事先为要存储的数据建立字段，随时可以存储自定义的数据格式。\n\n缺点：复杂查询性能不高,一般都不能实现事务的强一致性。\n\n### **redis与mongoDB的区别**\n\n- **内存管理**\n\nRedis 数据全部存在内存，定期写入磁盘，当内存不够时，可以选择指定的 LRU 算法删除数据。\n\nMongoDB 数据会优先存于内存，当内存不够时，只将热点数据放入内存，其他数据存在磁盘。\n\n*需要注意的是Redis 和mongoDB特别消耗内存，一般不建议将它们和别的服务部署在同一台服务器上。*\n\n- **数据结构**\n\nRedis 支持的数据结构丰富，包括hash、string、list、set、zset。\n\nMongoDB 文件存储是BSON格式类似JSON，或自定义的二进制格式。数据结构比较单一，但是支持丰富的数据表达，索引，最类似关系型数据库，支持的查询语言非常丰富。\n\n- **数据量和性能**\n\n  mongodb与redis性能都很依赖内存的大小，mongodb 有丰富的数据表达、索引；最类似于关系数据库，支持丰富的查询语言，redis数据丰富，较少的IO ，这方面mongodb优势明显。\n\n  mongodb对海量数据的访问效率提升，redis 较小数据量的性能及运算,这方面 mongodb性能优于redis .monbgodb 有mapredurce功能，提供数据分析，redis 没有 ，这方面 mongodb优于redis 。\n\n  \n\n当物理内存够用的时候，性能，redis>mongodb>mysql\n\n数据量，mysql>mongodb>redis\n\n*注意mongodb可以存储文件，适合存放大量的小文件，内置了GirdFS 的分布式文件系统。*\n\n- **可靠性**\n\n  mongodb不支持事物，靠客户端自身保证，redis支持事物，比较弱，仅能保证事物中的操作按顺序执行，这方面 redis优于mongodb。\n\nmongodb从1.8版本后，采用binlog方式（MySQL同样采用该方式）支持持久化，增加可靠性；\n\nRedis依赖快照进行持久化；AOF增强可靠性；增强可靠性的同时，影响访问性能。\n\n可靠性上MongoDB优于Redis。\n\n\n\n![img](https://upload-images.jianshu.io/upload_images/11422128-575cd92e76caedea.png?imageMogr2/auto-orient/strip|imageView2/2/w/491/format/webp)\n\n**171. mysql 索引是怎么实现的？**\n\n索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。\n\n\n\n具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。\n\n**175. 说一下 mysql 的行锁和表锁？**\n\nMyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。\n\n\n\n- 表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。\n- 行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。\n\n**178. 如何做 mysql 的性能优化？**\n\n- 为搜索字段创建索引。\n- 避免使用 select *，列出需要查询的字段。\n- 垂直分割分表。\n- 选择正确的存储引擎。\n\n[引用mysql](https://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&mid=2651938577&idx=2&sn=4943c30f0c0f7be2184d0275378085fa&chksm=8d0f305fba78b9493e45048af00f454e4352cb94181b637b1f6f93f94fa385ba3a6f092c0b25&mpshare=1&scene=1&srcid=0813QGYaBHVpqL3TH9CCNevT&sharer_sharetime=1597328200226&sharer_shareid=b59d477b5eab6b4160165bc8bf143bf9&key=281d398fa0af70c927b9b1f6d21582dafbb4795fb3495b5450a51a8f51a633404b6b8bf6337cd02db79ce62058ba7e2b18ede46e33e0636b21031f30a0783998c8db6529ae24083357f7024841e7f5ea&ascene=1&uin=MTY1NTEzNDEwMw%3D%3D&devicetype=Windows+XP&version=62060841&lang=zh_CN&exportkey=AYA9K6fq8gpv9k%2Bw3lHAlyU%3D&pass_ticket=KF3ZYQGe69eA2wf6qHzvVf2iikdbBS4yxBkgWqlJFBWQx1nJTf21s0CRDuypaA8Q)\n\n","slug":"mongodb和redis的区别","published":1,"updated":"2022-08-25T14:12:05.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz395002f12mjhjoa1cks","content":"<h1 id=\"Mongodb-和-Redis-的区别\"><a href=\"#Mongodb-和-Redis-的区别\" class=\"headerlink\" title=\"Mongodb 和 Redis 的区别\"></a>Mongodb 和 Redis 的区别</h1><p>MongoDB和Redis都是NoSQL数据库，采用结构型数据存储，而MySQL、oracle等则属于传统的关系型数据库。</p>\n<h3 id=\"NoSQL数据库与关系型数据库的优缺点\"><a href=\"#NoSQL数据库与关系型数据库的优缺点\" class=\"headerlink\" title=\"NoSQL数据库与关系型数据库的优缺点**\"></a>NoSQL数据库与关系型数据库的优缺点**</h3><ul>\n<li><strong>关系型数据库</strong></li>\n</ul>\n<p>优点：以完善的关系代数理论为基础,有严格的标准,支持事务ACID四性,借助索引机制可以实现高效的查询。</p>\n<blockquote>\n<p>原子性、一致性、隔离性、持久性</p>\n</blockquote>\n<p>缺点：可扩展性差，无法较好地支持海量数据存储，数据模型过于死板，事务机制影响了系统的整体性能，全文搜索功能较弱。</p>\n<ul>\n<li><strong>NoSQL数据库</strong></li>\n</ul>\n<p>优点：数据之间无关系，易扩展。有非常高的读写性能，支持大量数据，性能高。有灵活的数据模型，无须事先为要存储的数据建立字段，随时可以存储自定义的数据格式。</p>\n<p>缺点：复杂查询性能不高,一般都不能实现事务的强一致性。</p>\n<h3 id=\"redis与mongoDB的区别\"><a href=\"#redis与mongoDB的区别\" class=\"headerlink\" title=\"redis与mongoDB的区别\"></a><strong>redis与mongoDB的区别</strong></h3><ul>\n<li><strong>内存管理</strong></li>\n</ul>\n<p>Redis 数据全部存在内存，定期写入磁盘，当内存不够时，可以选择指定的 LRU 算法删除数据。</p>\n<p>MongoDB 数据会优先存于内存，当内存不够时，只将热点数据放入内存，其他数据存在磁盘。</p>\n<p><em>需要注意的是Redis 和mongoDB特别消耗内存，一般不建议将它们和别的服务部署在同一台服务器上。</em></p>\n<ul>\n<li><strong>数据结构</strong></li>\n</ul>\n<p>Redis 支持的数据结构丰富，包括hash、string、list、set、zset。</p>\n<p>MongoDB 文件存储是BSON格式类似JSON，或自定义的二进制格式。数据结构比较单一，但是支持丰富的数据表达，索引，最类似关系型数据库，支持的查询语言非常丰富。</p>\n<ul>\n<li><p><strong>数据量和性能</strong></p>\n<p>mongodb与redis性能都很依赖内存的大小，mongodb 有丰富的数据表达、索引；最类似于关系数据库，支持丰富的查询语言，redis数据丰富，较少的IO ，这方面mongodb优势明显。</p>\n<p>mongodb对海量数据的访问效率提升，redis 较小数据量的性能及运算,这方面 mongodb性能优于redis .monbgodb 有mapredurce功能，提供数据分析，redis 没有 ，这方面 mongodb优于redis 。</p>\n</li>\n</ul>\n<p>当物理内存够用的时候，性能，redis&gt;mongodb&gt;mysql</p>\n<p>数据量，mysql&gt;mongodb&gt;redis</p>\n<p><em>注意mongodb可以存储文件，适合存放大量的小文件，内置了GirdFS 的分布式文件系统。</em></p>\n<ul>\n<li><p><strong>可靠性</strong></p>\n<p>mongodb不支持事物，靠客户端自身保证，redis支持事物，比较弱，仅能保证事物中的操作按顺序执行，这方面 redis优于mongodb。</p>\n</li>\n</ul>\n<p>mongodb从1.8版本后，采用binlog方式（MySQL同样采用该方式）支持持久化，增加可靠性；</p>\n<p>Redis依赖快照进行持久化；AOF增强可靠性；增强可靠性的同时，影响访问性能。</p>\n<p>可靠性上MongoDB优于Redis。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/11422128-575cd92e76caedea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/491/format/webp\" alt=\"img\"></p>\n<p><strong>171. mysql 索引是怎么实现的？</strong></p>\n<p>索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。</p>\n<p>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</p>\n<p><strong>175. 说一下 mysql 的行锁和表锁？</strong></p>\n<p>MyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。</p>\n<ul>\n<li>表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。</li>\n<li>行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。</li>\n</ul>\n<p><strong>178. 如何做 mysql 的性能优化？</strong></p>\n<ul>\n<li>为搜索字段创建索引。</li>\n<li>避免使用 select *，列出需要查询的字段。</li>\n<li>垂直分割分表。</li>\n<li>选择正确的存储引擎。</li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&amp;mid=2651938577&amp;idx=2&amp;sn=4943c30f0c0f7be2184d0275378085fa&amp;chksm=8d0f305fba78b9493e45048af00f454e4352cb94181b637b1f6f93f94fa385ba3a6f092c0b25&amp;mpshare=1&amp;scene=1&amp;srcid=0813QGYaBHVpqL3TH9CCNevT&amp;sharer_sharetime=1597328200226&amp;sharer_shareid=b59d477b5eab6b4160165bc8bf143bf9&amp;key=281d398fa0af70c927b9b1f6d21582dafbb4795fb3495b5450a51a8f51a633404b6b8bf6337cd02db79ce62058ba7e2b18ede46e33e0636b21031f30a0783998c8db6529ae24083357f7024841e7f5ea&amp;ascene=1&amp;uin=MTY1NTEzNDEwMw==&amp;devicetype=Windows+XP&amp;version=62060841&amp;lang=zh_CN&amp;exportkey=AYA9K6fq8gpv9k+w3lHAlyU=&amp;pass_ticket=KF3ZYQGe69eA2wf6qHzvVf2iikdbBS4yxBkgWqlJFBWQx1nJTf21s0CRDuypaA8Q\">引用mysql</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Mongodb-和-Redis-的区别\"><a href=\"#Mongodb-和-Redis-的区别\" class=\"headerlink\" title=\"Mongodb 和 Redis 的区别\"></a>Mongodb 和 Redis 的区别</h1><p>MongoDB和Redis都是NoSQL数据库，采用结构型数据存储，而MySQL、oracle等则属于传统的关系型数据库。</p>\n<h3 id=\"NoSQL数据库与关系型数据库的优缺点\"><a href=\"#NoSQL数据库与关系型数据库的优缺点\" class=\"headerlink\" title=\"NoSQL数据库与关系型数据库的优缺点**\"></a>NoSQL数据库与关系型数据库的优缺点**</h3><ul>\n<li><strong>关系型数据库</strong></li>\n</ul>\n<p>优点：以完善的关系代数理论为基础,有严格的标准,支持事务ACID四性,借助索引机制可以实现高效的查询。</p>\n<blockquote>\n<p>原子性、一致性、隔离性、持久性</p>\n</blockquote>\n<p>缺点：可扩展性差，无法较好地支持海量数据存储，数据模型过于死板，事务机制影响了系统的整体性能，全文搜索功能较弱。</p>\n<ul>\n<li><strong>NoSQL数据库</strong></li>\n</ul>\n<p>优点：数据之间无关系，易扩展。有非常高的读写性能，支持大量数据，性能高。有灵活的数据模型，无须事先为要存储的数据建立字段，随时可以存储自定义的数据格式。</p>\n<p>缺点：复杂查询性能不高,一般都不能实现事务的强一致性。</p>\n<h3 id=\"redis与mongoDB的区别\"><a href=\"#redis与mongoDB的区别\" class=\"headerlink\" title=\"redis与mongoDB的区别\"></a><strong>redis与mongoDB的区别</strong></h3><ul>\n<li><strong>内存管理</strong></li>\n</ul>\n<p>Redis 数据全部存在内存，定期写入磁盘，当内存不够时，可以选择指定的 LRU 算法删除数据。</p>\n<p>MongoDB 数据会优先存于内存，当内存不够时，只将热点数据放入内存，其他数据存在磁盘。</p>\n<p><em>需要注意的是Redis 和mongoDB特别消耗内存，一般不建议将它们和别的服务部署在同一台服务器上。</em></p>\n<ul>\n<li><strong>数据结构</strong></li>\n</ul>\n<p>Redis 支持的数据结构丰富，包括hash、string、list、set、zset。</p>\n<p>MongoDB 文件存储是BSON格式类似JSON，或自定义的二进制格式。数据结构比较单一，但是支持丰富的数据表达，索引，最类似关系型数据库，支持的查询语言非常丰富。</p>\n<ul>\n<li><p><strong>数据量和性能</strong></p>\n<p>mongodb与redis性能都很依赖内存的大小，mongodb 有丰富的数据表达、索引；最类似于关系数据库，支持丰富的查询语言，redis数据丰富，较少的IO ，这方面mongodb优势明显。</p>\n<p>mongodb对海量数据的访问效率提升，redis 较小数据量的性能及运算,这方面 mongodb性能优于redis .monbgodb 有mapredurce功能，提供数据分析，redis 没有 ，这方面 mongodb优于redis 。</p>\n</li>\n</ul>\n<p>当物理内存够用的时候，性能，redis&gt;mongodb&gt;mysql</p>\n<p>数据量，mysql&gt;mongodb&gt;redis</p>\n<p><em>注意mongodb可以存储文件，适合存放大量的小文件，内置了GirdFS 的分布式文件系统。</em></p>\n<ul>\n<li><p><strong>可靠性</strong></p>\n<p>mongodb不支持事物，靠客户端自身保证，redis支持事物，比较弱，仅能保证事物中的操作按顺序执行，这方面 redis优于mongodb。</p>\n</li>\n</ul>\n<p>mongodb从1.8版本后，采用binlog方式（MySQL同样采用该方式）支持持久化，增加可靠性；</p>\n<p>Redis依赖快照进行持久化；AOF增强可靠性；增强可靠性的同时，影响访问性能。</p>\n<p>可靠性上MongoDB优于Redis。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/11422128-575cd92e76caedea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/491/format/webp\" alt=\"img\"></p>\n<p><strong>171. mysql 索引是怎么实现的？</strong></p>\n<p>索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。</p>\n<p>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</p>\n<p><strong>175. 说一下 mysql 的行锁和表锁？</strong></p>\n<p>MyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。</p>\n<ul>\n<li>表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。</li>\n<li>行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。</li>\n</ul>\n<p><strong>178. 如何做 mysql 的性能优化？</strong></p>\n<ul>\n<li>为搜索字段创建索引。</li>\n<li>避免使用 select *，列出需要查询的字段。</li>\n<li>垂直分割分表。</li>\n<li>选择正确的存储引擎。</li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&mid=2651938577&idx=2&sn=4943c30f0c0f7be2184d0275378085fa&chksm=8d0f305fba78b9493e45048af00f454e4352cb94181b637b1f6f93f94fa385ba3a6f092c0b25&mpshare=1&scene=1&srcid=0813QGYaBHVpqL3TH9CCNevT&sharer_sharetime=1597328200226&sharer_shareid=b59d477b5eab6b4160165bc8bf143bf9&key=281d398fa0af70c927b9b1f6d21582dafbb4795fb3495b5450a51a8f51a633404b6b8bf6337cd02db79ce62058ba7e2b18ede46e33e0636b21031f30a0783998c8db6529ae24083357f7024841e7f5ea&ascene=1&uin=MTY1NTEzNDEwMw==&devicetype=Windows+XP&version=62060841&lang=zh_CN&exportkey=AYA9K6fq8gpv9k+w3lHAlyU=&pass_ticket=KF3ZYQGe69eA2wf6qHzvVf2iikdbBS4yxBkgWqlJFBWQx1nJTf21s0CRDuypaA8Q\">引用mysql</a></p>\n"},{"title":"新安装 Ubuntu 必备工具","top":false,"date":"2022-01-01T14:12:01.000Z","_content":"# 新安装 Ubuntu 必备工具\n\n1.更换软件源\n\n2.更换中文目录名称\n\n```bash\nexport LANG=en_US\nxdg-user-dirs-gtk-update\nexport LANG=zh_CN\n\n```\n\n3.安装常用工具\n\n```bash\n# ssh net-tools vim htop git\nsudo apt install *\n\n```\n\n4.安装docker\n\n```bash\n# 1. Update the apt package index and install packages to allow apt to use a repository over HTTPS:\n sudo apt-get update\n sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# 2. Add Docker’s official GPG key:\n curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n# 3. Use the following command to set up the stable repository. \necho \\\n  \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker Engine\n# 1. update index and install and install the latest version\n sudo apt-get update\n sudo apt-get install docker-ce docker-ce-cli containerd.io\n\n# 2. Verify that Docker Engine is installed correctly by running the hello-world image.\nsudo docker run hello-world\n\n# docker permission denied \n# 1. 新建docker分组\nsudo groupadd docker\n\n# 2. 将当前用户添加进分组里面\nsudo usermod -aG docker ${USER}\n\n# 3. 然后重新登录，以便让权限生效\n\n\n# docker 更换淘宝源\nsudo vim /etc/docker/daemon.json\n\n{\n  \"registry-mirrors\": [\"https://klq9hjzs.mirror.aliyuncs.com\"]\n}\n\n\n# Install docker-compose\n# 1. Run this command to download the current stable release of Docker Compose:\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n# 2. Apply executable permissions to the binary:\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Test the installation.\ndocker-compose --version\n```\n\n5.生产软件\n\n```bash\n# Pycharm\nsudo snap install [pycharm-professional|pycharm-community] --classic\n\n# Postman\nsudo snap install postman\n\n# Redis Desktop Manager\nsudo snap install redis-desktop-manager\n\n# Typora\n# or run:\n# sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\nwget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -\n\n# add Typora's repository\nsudo add-apt-repository 'deb https://typora.io/linux ./'\nsudo apt-get update\n\n# install typora\nsudo apt-get install typora\n```\n\n6.优化\n\n```bash\n# 1. 安装 tweek\nsudo apt install gnome-tweak-tool\n\n# 2. 安装插件扩展支持\n# 让 gnome 支持插件扩展\nsudo apt install gnome-shell-extensions \n\n# chrome 浏览器扩展支持，可以使用浏览器安装插件\nsudo apt install chrome-gnome-shell\n```\n\n7.解决apt-get安装中的E: Sub-process /usr/bin/dpkg returned an error code (1)问题\n\n```bash\ncd /var/lib/dpkg/\nsudo mv info/ info_bak          # 现将info文件夹更名\nsudo mkdir info                 # 再新建一个新的info文件夹\nsudo apt-get update             # 更新\nsudo apt-get -f install         # 修复\nsudo mv info/* info_bak/        # 执行完上一步操作后会在新的info文件夹下生成一些文件，现将这些文件全部移到info_bak文件夹下\nsudo rm -rf info                # 把自己新建的info文件夹删掉\nsudo mv info_bak info           # 把以前的info文件夹重新改回名\n\n```\n\n8.oss-browser\n\n```bash\n# desktop icon\n\nsudo vim /usr/share/applications/oss.desktop\n\n[Desktop Entry]\nName=oss\nComment=a ali tool for pic and video\nExec=oss\nIcon=/opt/oss-browser-linux-x64/resources/custom/icon.png\nTerminal=false\nType=Application\nCategories=Development\n\n```\n\n9.数据库\n\n```bash\n\n# MySQL\ndocker run -itd --name mysql --restart=always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n\n# redis\ndocker run -itd --name redis --restart=always -p 6379:6379  redis\n\n# postgres\ndocker run --name some-postgres --restart=always -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d postgres\n\n# mongodb\ndocker run -itd --name mongo -p 27017:27017 --restart=always mongo --auth\n\ndocker exec -it mongo mongo admin\n# 创建一个名为 admin，密码为 123456 的用户。\n>  db.createUser({ user:'admin',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},\"readWriteAnyDatabase\"]});\n# 尝试使用上面创建的用户信息进行连接。\n> db.auth('admin', '123456')\n```\n\n10.Celery\n\n```bash\n\n```\n\n10.RabbitMQ\n\nIf you’re using Ubuntu or Debian install RabbitMQ by executing this command:\n\n$ sudo apt-get install rabbitmq-server\nOr, if you want to run it on Docker execute this:\n\n$ docker run -d -p 5672:5672 rabbitmq\nWhen the command completes, the broker will already be running in the background, ready to move messages for you: Starting rabbitmq-server: SUCCESS.\n\n```bash\n\ndocker run -it  --name rabbitmq -p 5672:5672 -p 15672:15672 -d rabbitmq:3.9-management\n\n# 启动 rabbitmq 服务\nservice rabbitmq-server start\n\n# 关闭 rabbitmq 服务\nservice rabbitmq-server stop\n\n# 重启 rabbitmq 服务\nservice rabbitmq-server restart\n\n# 查看 rabbitmq 状态\nservice rabbitmq-server status\n# 添加用户\nsudo rabbitmqctl add_user  admin  admin  \n\n# 赋予权限\nsudo rabbitmqctl set_user_tags admin administrator\n\n# 赋予 virtual host 中所有资源的配置、写、读权限\nsudo rabbitmqctl  set_permissions -p / admin '.*' '.*' '.*'\n\n# rabbitmq_manager\n\n# rabbitmq_manager 是官方提供的管理工具，官方地址：https://www.rabbitmq.com/management.html\n\n# 启用 rabbitmq_manager\ncd /etc/rabbitmq\nsudo rabbitmq-plugins enable rabbitmq_management\n \n# 访问 rabbitmq_manager：\n# 地址：http://localhost:15672\n# 账户：admin\n# 密码：admin\n```\n","source":"_posts/new_install_ubuntu.md","raw":"---\ntitle: 新安装 Ubuntu 必备工具\ntags:\n  - Ununtu\ncategories:\n  - Linux\ntop: false\ndate: 2022-01-1 22:12:01\n---\n# 新安装 Ubuntu 必备工具\n\n1.更换软件源\n\n2.更换中文目录名称\n\n```bash\nexport LANG=en_US\nxdg-user-dirs-gtk-update\nexport LANG=zh_CN\n\n```\n\n3.安装常用工具\n\n```bash\n# ssh net-tools vim htop git\nsudo apt install *\n\n```\n\n4.安装docker\n\n```bash\n# 1. Update the apt package index and install packages to allow apt to use a repository over HTTPS:\n sudo apt-get update\n sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# 2. Add Docker’s official GPG key:\n curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n# 3. Use the following command to set up the stable repository. \necho \\\n  \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker Engine\n# 1. update index and install and install the latest version\n sudo apt-get update\n sudo apt-get install docker-ce docker-ce-cli containerd.io\n\n# 2. Verify that Docker Engine is installed correctly by running the hello-world image.\nsudo docker run hello-world\n\n# docker permission denied \n# 1. 新建docker分组\nsudo groupadd docker\n\n# 2. 将当前用户添加进分组里面\nsudo usermod -aG docker ${USER}\n\n# 3. 然后重新登录，以便让权限生效\n\n\n# docker 更换淘宝源\nsudo vim /etc/docker/daemon.json\n\n{\n  \"registry-mirrors\": [\"https://klq9hjzs.mirror.aliyuncs.com\"]\n}\n\n\n# Install docker-compose\n# 1. Run this command to download the current stable release of Docker Compose:\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n# 2. Apply executable permissions to the binary:\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Test the installation.\ndocker-compose --version\n```\n\n5.生产软件\n\n```bash\n# Pycharm\nsudo snap install [pycharm-professional|pycharm-community] --classic\n\n# Postman\nsudo snap install postman\n\n# Redis Desktop Manager\nsudo snap install redis-desktop-manager\n\n# Typora\n# or run:\n# sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\nwget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -\n\n# add Typora's repository\nsudo add-apt-repository 'deb https://typora.io/linux ./'\nsudo apt-get update\n\n# install typora\nsudo apt-get install typora\n```\n\n6.优化\n\n```bash\n# 1. 安装 tweek\nsudo apt install gnome-tweak-tool\n\n# 2. 安装插件扩展支持\n# 让 gnome 支持插件扩展\nsudo apt install gnome-shell-extensions \n\n# chrome 浏览器扩展支持，可以使用浏览器安装插件\nsudo apt install chrome-gnome-shell\n```\n\n7.解决apt-get安装中的E: Sub-process /usr/bin/dpkg returned an error code (1)问题\n\n```bash\ncd /var/lib/dpkg/\nsudo mv info/ info_bak          # 现将info文件夹更名\nsudo mkdir info                 # 再新建一个新的info文件夹\nsudo apt-get update             # 更新\nsudo apt-get -f install         # 修复\nsudo mv info/* info_bak/        # 执行完上一步操作后会在新的info文件夹下生成一些文件，现将这些文件全部移到info_bak文件夹下\nsudo rm -rf info                # 把自己新建的info文件夹删掉\nsudo mv info_bak info           # 把以前的info文件夹重新改回名\n\n```\n\n8.oss-browser\n\n```bash\n# desktop icon\n\nsudo vim /usr/share/applications/oss.desktop\n\n[Desktop Entry]\nName=oss\nComment=a ali tool for pic and video\nExec=oss\nIcon=/opt/oss-browser-linux-x64/resources/custom/icon.png\nTerminal=false\nType=Application\nCategories=Development\n\n```\n\n9.数据库\n\n```bash\n\n# MySQL\ndocker run -itd --name mysql --restart=always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n\n# redis\ndocker run -itd --name redis --restart=always -p 6379:6379  redis\n\n# postgres\ndocker run --name some-postgres --restart=always -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d postgres\n\n# mongodb\ndocker run -itd --name mongo -p 27017:27017 --restart=always mongo --auth\n\ndocker exec -it mongo mongo admin\n# 创建一个名为 admin，密码为 123456 的用户。\n>  db.createUser({ user:'admin',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},\"readWriteAnyDatabase\"]});\n# 尝试使用上面创建的用户信息进行连接。\n> db.auth('admin', '123456')\n```\n\n10.Celery\n\n```bash\n\n```\n\n10.RabbitMQ\n\nIf you’re using Ubuntu or Debian install RabbitMQ by executing this command:\n\n$ sudo apt-get install rabbitmq-server\nOr, if you want to run it on Docker execute this:\n\n$ docker run -d -p 5672:5672 rabbitmq\nWhen the command completes, the broker will already be running in the background, ready to move messages for you: Starting rabbitmq-server: SUCCESS.\n\n```bash\n\ndocker run -it  --name rabbitmq -p 5672:5672 -p 15672:15672 -d rabbitmq:3.9-management\n\n# 启动 rabbitmq 服务\nservice rabbitmq-server start\n\n# 关闭 rabbitmq 服务\nservice rabbitmq-server stop\n\n# 重启 rabbitmq 服务\nservice rabbitmq-server restart\n\n# 查看 rabbitmq 状态\nservice rabbitmq-server status\n# 添加用户\nsudo rabbitmqctl add_user  admin  admin  \n\n# 赋予权限\nsudo rabbitmqctl set_user_tags admin administrator\n\n# 赋予 virtual host 中所有资源的配置、写、读权限\nsudo rabbitmqctl  set_permissions -p / admin '.*' '.*' '.*'\n\n# rabbitmq_manager\n\n# rabbitmq_manager 是官方提供的管理工具，官方地址：https://www.rabbitmq.com/management.html\n\n# 启用 rabbitmq_manager\ncd /etc/rabbitmq\nsudo rabbitmq-plugins enable rabbitmq_management\n \n# 访问 rabbitmq_manager：\n# 地址：http://localhost:15672\n# 账户：admin\n# 密码：admin\n```\n","slug":"new_install_ubuntu","published":1,"updated":"2022-08-25T14:12:05.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz395002i12mjf0hadcqo","content":"<h1 id=\"新安装-Ubuntu-必备工具\"><a href=\"#新安装-Ubuntu-必备工具\" class=\"headerlink\" title=\"新安装 Ubuntu 必备工具\"></a>新安装 Ubuntu 必备工具</h1><p>1.更换软件源</p>\n<p>2.更换中文目录名称</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>en_US\nxdg-user-dirs-gtk-update\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>zh_CN\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>3.安装常用工具</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ssh net-tools vim htop git</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> *\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>4.安装docker</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. Update the apt package index and install packages to allow apt to use a repository over HTTPS:</span>\n <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token punctuation\">\\</span>\n    apt-transport-https <span class=\"token punctuation\">\\</span>\n    ca-certificates <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">curl</span> <span class=\"token punctuation\">\\</span>\n    gnupg <span class=\"token punctuation\">\\</span>\n    lsb-release\n\n<span class=\"token comment\"># 2. Add Docker’s official GPG key:</span>\n <span class=\"token function\">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n<span class=\"token comment\"># 3. Use the following command to set up the stable repository. </span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token string\">\"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> stable\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/sources.list.d/docker.list <span class=\"token operator\">&gt;</span> /dev/null\n\n<span class=\"token comment\"># Install Docker Engine</span>\n<span class=\"token comment\"># 1. update index and install and install the latest version</span>\n <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io\n\n<span class=\"token comment\"># 2. Verify that Docker Engine is installed correctly by running the hello-world image.</span>\n<span class=\"token function\">sudo</span> docker run hello-world\n\n<span class=\"token comment\"># docker permission denied </span>\n<span class=\"token comment\"># 1. 新建docker分组</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> docker\n\n<span class=\"token comment\"># 2. 将当前用户添加进分组里面</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG docker <span class=\"token variable\">${<span class=\"token environment constant\">USER</span>}</span>\n\n<span class=\"token comment\"># 3. 然后重新登录，以便让权限生效</span>\n\n\n<span class=\"token comment\"># docker 更换淘宝源</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/docker/daemon.json\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"registry-mirrors\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://klq9hjzs.mirror.aliyuncs.com\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\"># Install docker-compose</span>\n<span class=\"token comment\"># 1. Run this command to download the current stable release of Docker Compose:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> -L <span class=\"token string\">\"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -s<span class=\"token variable\">)</span></span>-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -m<span class=\"token variable\">)</span></span>\"</span> -o /usr/local/bin/docker-compose\n\n<span class=\"token comment\"># 2. Apply executable permissions to the binary:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/docker-compose\n\n<span class=\"token comment\"># Test the installation.</span>\ndocker-compose --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>5.生产软件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Pycharm</span>\n<span class=\"token function\">sudo</span> snap <span class=\"token function\">install</span> <span class=\"token punctuation\">[</span>pycharm-professional<span class=\"token operator\">|</span>pycharm-community<span class=\"token punctuation\">]</span> --classic\n\n<span class=\"token comment\"># Postman</span>\n<span class=\"token function\">sudo</span> snap <span class=\"token function\">install</span> postman\n\n<span class=\"token comment\"># Redis Desktop Manager</span>\n<span class=\"token function\">sudo</span> snap <span class=\"token function\">install</span> redis-desktop-manager\n\n<span class=\"token comment\"># Typora</span>\n<span class=\"token comment\"># or run:</span>\n<span class=\"token comment\"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span>\n<span class=\"token function\">wget</span> -qO - https://typora.io/linux/public-key.asc <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n\n<span class=\"token comment\"># add Typora's repository</span>\n<span class=\"token function\">sudo</span> add-apt-repository <span class=\"token string\">'deb https://typora.io/linux ./'</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n\n<span class=\"token comment\"># install typora</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> typora<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>6.优化</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 安装 tweek</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gnome-tweak-tool\n\n<span class=\"token comment\"># 2. 安装插件扩展支持</span>\n<span class=\"token comment\"># 让 gnome 支持插件扩展</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gnome-shell-extensions \n\n<span class=\"token comment\"># chrome 浏览器扩展支持，可以使用浏览器安装插件</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> chrome-gnome-shell<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>7.解决apt-get安装中的E: Sub-process /usr/bin/dpkg returned an error code (1)问题</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /var/lib/dpkg/\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> info/ info_bak          <span class=\"token comment\"># 现将info文件夹更名</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> info                 <span class=\"token comment\"># 再新建一个新的info文件夹</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update             <span class=\"token comment\"># 更新</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> -f <span class=\"token function\">install</span>         <span class=\"token comment\"># 修复</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> info/* info_bak/        <span class=\"token comment\"># 执行完上一步操作后会在新的info文件夹下生成一些文件，现将这些文件全部移到info_bak文件夹下</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf info                <span class=\"token comment\"># 把自己新建的info文件夹删掉</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> info_bak info           <span class=\"token comment\"># 把以前的info文件夹重新改回名</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>8.oss-browser</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># desktop icon</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /usr/share/applications/oss.desktop\n\n<span class=\"token punctuation\">[</span>Desktop Entry<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Name</span><span class=\"token operator\">=</span>oss\n<span class=\"token assign-left variable\">Comment</span><span class=\"token operator\">=</span>a ali tool <span class=\"token keyword\">for</span> pic and video\n<span class=\"token assign-left variable\">Exec</span><span class=\"token operator\">=</span>oss\n<span class=\"token assign-left variable\">Icon</span><span class=\"token operator\">=</span>/opt/oss-browser-linux-x64/resources/custom/icon.png\n<span class=\"token assign-left variable\">Terminal</span><span class=\"token operator\">=</span>false\n<span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>Application\n<span class=\"token assign-left variable\">Categories</span><span class=\"token operator\">=</span>Development\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>9.数据库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token comment\"># MySQL</span>\ndocker run -itd --name mysql --restart<span class=\"token operator\">=</span>always -p <span class=\"token number\">3306</span>:3306 -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> mysql\n\n<span class=\"token comment\"># redis</span>\ndocker run -itd --name redis --restart<span class=\"token operator\">=</span>always -p <span class=\"token number\">6379</span>:6379  redis\n\n<span class=\"token comment\"># postgres</span>\ndocker run --name some-postgres --restart<span class=\"token operator\">=</span>always -e <span class=\"token assign-left variable\">POSTGRES_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> -p <span class=\"token number\">5432</span>:5432 -d postgres\n\n<span class=\"token comment\"># mongodb</span>\ndocker run -itd --name mongo -p <span class=\"token number\">27017</span>:27017 --restart<span class=\"token operator\">=</span>always mongo --auth\n\ndocker <span class=\"token builtin class-name\">exec</span> -it mongo mongo admin\n<span class=\"token comment\"># 创建一个名为 admin，密码为 123456 的用户。</span>\n<span class=\"token operator\">&gt;</span>  db.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user:<span class=\"token string\">'admin'</span>,pwd:<span class=\"token string\">'123456'</span>,roles:<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> role:<span class=\"token string\">'userAdminAnyDatabase'</span>, db: <span class=\"token string\">'admin'</span><span class=\"token punctuation\">}</span>,<span class=\"token string\">\"readWriteAnyDatabase\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 尝试使用上面创建的用户信息进行连接。</span>\n<span class=\"token operator\">&gt;</span> db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span>, <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>10.Celery</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>10.RabbitMQ</p>\n<p>If you’re using Ubuntu or Debian install RabbitMQ by executing this command:</p>\n<p>$ sudo apt-get install rabbitmq-server<br>Or, if you want to run it on Docker execute this:</p>\n<p>$ docker run -d -p 5672:5672 rabbitmq<br>When the command completes, the broker will already be running in the background, ready to move messages for you: Starting rabbitmq-server: SUCCESS.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\ndocker run -it  --name rabbitmq -p <span class=\"token number\">5672</span>:5672 -p <span class=\"token number\">15672</span>:15672 -d rabbitmq:3.9-management\n\n<span class=\"token comment\"># 启动 rabbitmq 服务</span>\n<span class=\"token function\">service</span> rabbitmq-server start\n\n<span class=\"token comment\"># 关闭 rabbitmq 服务</span>\n<span class=\"token function\">service</span> rabbitmq-server stop\n\n<span class=\"token comment\"># 重启 rabbitmq 服务</span>\n<span class=\"token function\">service</span> rabbitmq-server restart\n\n<span class=\"token comment\"># 查看 rabbitmq 状态</span>\n<span class=\"token function\">service</span> rabbitmq-server status\n<span class=\"token comment\"># 添加用户</span>\n<span class=\"token function\">sudo</span> rabbitmqctl add_user  admin  admin  \n\n<span class=\"token comment\"># 赋予权限</span>\n<span class=\"token function\">sudo</span> rabbitmqctl set_user_tags admin administrator\n\n<span class=\"token comment\"># 赋予 virtual host 中所有资源的配置、写、读权限</span>\n<span class=\"token function\">sudo</span> rabbitmqctl  set_permissions -p / admin <span class=\"token string\">'.*'</span> <span class=\"token string\">'.*'</span> <span class=\"token string\">'.*'</span>\n\n<span class=\"token comment\"># rabbitmq_manager</span>\n\n<span class=\"token comment\"># rabbitmq_manager 是官方提供的管理工具，官方地址：https://www.rabbitmq.com/management.html</span>\n\n<span class=\"token comment\"># 启用 rabbitmq_manager</span>\n<span class=\"token builtin class-name\">cd</span> /etc/rabbitmq\n<span class=\"token function\">sudo</span> rabbitmq-plugins <span class=\"token builtin class-name\">enable</span> rabbitmq_management\n \n<span class=\"token comment\"># 访问 rabbitmq_manager：</span>\n<span class=\"token comment\"># 地址：http://localhost:15672</span>\n<span class=\"token comment\"># 账户：admin</span>\n<span class=\"token comment\"># 密码：admin</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"新安装-Ubuntu-必备工具\"><a href=\"#新安装-Ubuntu-必备工具\" class=\"headerlink\" title=\"新安装 Ubuntu 必备工具\"></a>新安装 Ubuntu 必备工具</h1><p>1.更换软件源</p>\n<p>2.更换中文目录名称</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>en_US\nxdg-user-dirs-gtk-update\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>zh_CN\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>3.安装常用工具</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ssh net-tools vim htop git</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> *\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>4.安装docker</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. Update the apt package index and install packages to allow apt to use a repository over HTTPS:</span>\n <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token punctuation\">\\</span>\n    apt-transport-https <span class=\"token punctuation\">\\</span>\n    ca-certificates <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">curl</span> <span class=\"token punctuation\">\\</span>\n    gnupg <span class=\"token punctuation\">\\</span>\n    lsb-release\n\n<span class=\"token comment\"># 2. Add Docker’s official GPG key:</span>\n <span class=\"token function\">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n<span class=\"token comment\"># 3. Use the following command to set up the stable repository. </span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token string\">\"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> stable\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/sources.list.d/docker.list <span class=\"token operator\">></span> /dev/null\n\n<span class=\"token comment\"># Install Docker Engine</span>\n<span class=\"token comment\"># 1. update index and install and install the latest version</span>\n <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io\n\n<span class=\"token comment\"># 2. Verify that Docker Engine is installed correctly by running the hello-world image.</span>\n<span class=\"token function\">sudo</span> docker run hello-world\n\n<span class=\"token comment\"># docker permission denied </span>\n<span class=\"token comment\"># 1. 新建docker分组</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> docker\n\n<span class=\"token comment\"># 2. 将当前用户添加进分组里面</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG docker <span class=\"token variable\">$&#123;<span class=\"token environment constant\">USER</span>&#125;</span>\n\n<span class=\"token comment\"># 3. 然后重新登录，以便让权限生效</span>\n\n\n<span class=\"token comment\"># docker 更换淘宝源</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/docker/daemon.json\n\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"registry-mirrors\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://klq9hjzs.mirror.aliyuncs.com\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\"># Install docker-compose</span>\n<span class=\"token comment\"># 1. Run this command to download the current stable release of Docker Compose:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> -L <span class=\"token string\">\"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -s<span class=\"token variable\">)</span></span>-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -m<span class=\"token variable\">)</span></span>\"</span> -o /usr/local/bin/docker-compose\n\n<span class=\"token comment\"># 2. Apply executable permissions to the binary:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/docker-compose\n\n<span class=\"token comment\"># Test the installation.</span>\ndocker-compose --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>5.生产软件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Pycharm</span>\n<span class=\"token function\">sudo</span> snap <span class=\"token function\">install</span> <span class=\"token punctuation\">[</span>pycharm-professional<span class=\"token operator\">|</span>pycharm-community<span class=\"token punctuation\">]</span> --classic\n\n<span class=\"token comment\"># Postman</span>\n<span class=\"token function\">sudo</span> snap <span class=\"token function\">install</span> postman\n\n<span class=\"token comment\"># Redis Desktop Manager</span>\n<span class=\"token function\">sudo</span> snap <span class=\"token function\">install</span> redis-desktop-manager\n\n<span class=\"token comment\"># Typora</span>\n<span class=\"token comment\"># or run:</span>\n<span class=\"token comment\"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span>\n<span class=\"token function\">wget</span> -qO - https://typora.io/linux/public-key.asc <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n\n<span class=\"token comment\"># add Typora's repository</span>\n<span class=\"token function\">sudo</span> add-apt-repository <span class=\"token string\">'deb https://typora.io/linux ./'</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n\n<span class=\"token comment\"># install typora</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> typora<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>6.优化</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 安装 tweek</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gnome-tweak-tool\n\n<span class=\"token comment\"># 2. 安装插件扩展支持</span>\n<span class=\"token comment\"># 让 gnome 支持插件扩展</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gnome-shell-extensions \n\n<span class=\"token comment\"># chrome 浏览器扩展支持，可以使用浏览器安装插件</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> chrome-gnome-shell<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>7.解决apt-get安装中的E: Sub-process /usr/bin/dpkg returned an error code (1)问题</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /var/lib/dpkg/\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> info/ info_bak          <span class=\"token comment\"># 现将info文件夹更名</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> info                 <span class=\"token comment\"># 再新建一个新的info文件夹</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update             <span class=\"token comment\"># 更新</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> -f <span class=\"token function\">install</span>         <span class=\"token comment\"># 修复</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> info/* info_bak/        <span class=\"token comment\"># 执行完上一步操作后会在新的info文件夹下生成一些文件，现将这些文件全部移到info_bak文件夹下</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf info                <span class=\"token comment\"># 把自己新建的info文件夹删掉</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> info_bak info           <span class=\"token comment\"># 把以前的info文件夹重新改回名</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>8.oss-browser</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># desktop icon</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /usr/share/applications/oss.desktop\n\n<span class=\"token punctuation\">[</span>Desktop Entry<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Name</span><span class=\"token operator\">=</span>oss\n<span class=\"token assign-left variable\">Comment</span><span class=\"token operator\">=</span>a ali tool <span class=\"token keyword\">for</span> pic and video\n<span class=\"token assign-left variable\">Exec</span><span class=\"token operator\">=</span>oss\n<span class=\"token assign-left variable\">Icon</span><span class=\"token operator\">=</span>/opt/oss-browser-linux-x64/resources/custom/icon.png\n<span class=\"token assign-left variable\">Terminal</span><span class=\"token operator\">=</span>false\n<span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>Application\n<span class=\"token assign-left variable\">Categories</span><span class=\"token operator\">=</span>Development\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>9.数据库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token comment\"># MySQL</span>\ndocker run -itd --name mysql --restart<span class=\"token operator\">=</span>always -p <span class=\"token number\">3306</span>:3306 -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> mysql\n\n<span class=\"token comment\"># redis</span>\ndocker run -itd --name redis --restart<span class=\"token operator\">=</span>always -p <span class=\"token number\">6379</span>:6379  redis\n\n<span class=\"token comment\"># postgres</span>\ndocker run --name some-postgres --restart<span class=\"token operator\">=</span>always -e <span class=\"token assign-left variable\">POSTGRES_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> -p <span class=\"token number\">5432</span>:5432 -d postgres\n\n<span class=\"token comment\"># mongodb</span>\ndocker run -itd --name mongo -p <span class=\"token number\">27017</span>:27017 --restart<span class=\"token operator\">=</span>always mongo --auth\n\ndocker <span class=\"token builtin class-name\">exec</span> -it mongo mongo admin\n<span class=\"token comment\"># 创建一个名为 admin，密码为 123456 的用户。</span>\n<span class=\"token operator\">></span>  db.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> user:<span class=\"token string\">'admin'</span>,pwd:<span class=\"token string\">'123456'</span>,roles:<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> role:<span class=\"token string\">'userAdminAnyDatabase'</span>, db: <span class=\"token string\">'admin'</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token string\">\"readWriteAnyDatabase\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 尝试使用上面创建的用户信息进行连接。</span>\n<span class=\"token operator\">></span> db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span>, <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>10.Celery</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>10.RabbitMQ</p>\n<p>If you’re using Ubuntu or Debian install RabbitMQ by executing this command:</p>\n<p>$ sudo apt-get install rabbitmq-server<br>Or, if you want to run it on Docker execute this:</p>\n<p>$ docker run -d -p 5672:5672 rabbitmq<br>When the command completes, the broker will already be running in the background, ready to move messages for you: Starting rabbitmq-server: SUCCESS.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\ndocker run -it  --name rabbitmq -p <span class=\"token number\">5672</span>:5672 -p <span class=\"token number\">15672</span>:15672 -d rabbitmq:3.9-management\n\n<span class=\"token comment\"># 启动 rabbitmq 服务</span>\n<span class=\"token function\">service</span> rabbitmq-server start\n\n<span class=\"token comment\"># 关闭 rabbitmq 服务</span>\n<span class=\"token function\">service</span> rabbitmq-server stop\n\n<span class=\"token comment\"># 重启 rabbitmq 服务</span>\n<span class=\"token function\">service</span> rabbitmq-server restart\n\n<span class=\"token comment\"># 查看 rabbitmq 状态</span>\n<span class=\"token function\">service</span> rabbitmq-server status\n<span class=\"token comment\"># 添加用户</span>\n<span class=\"token function\">sudo</span> rabbitmqctl add_user  admin  admin  \n\n<span class=\"token comment\"># 赋予权限</span>\n<span class=\"token function\">sudo</span> rabbitmqctl set_user_tags admin administrator\n\n<span class=\"token comment\"># 赋予 virtual host 中所有资源的配置、写、读权限</span>\n<span class=\"token function\">sudo</span> rabbitmqctl  set_permissions -p / admin <span class=\"token string\">'.*'</span> <span class=\"token string\">'.*'</span> <span class=\"token string\">'.*'</span>\n\n<span class=\"token comment\"># rabbitmq_manager</span>\n\n<span class=\"token comment\"># rabbitmq_manager 是官方提供的管理工具，官方地址：https://www.rabbitmq.com/management.html</span>\n\n<span class=\"token comment\"># 启用 rabbitmq_manager</span>\n<span class=\"token builtin class-name\">cd</span> /etc/rabbitmq\n<span class=\"token function\">sudo</span> rabbitmq-plugins <span class=\"token builtin class-name\">enable</span> rabbitmq_management\n \n<span class=\"token comment\"># 访问 rabbitmq_manager：</span>\n<span class=\"token comment\"># 地址：http://localhost:15672</span>\n<span class=\"token comment\"># 账户：admin</span>\n<span class=\"token comment\"># 密码：admin</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"docker笔记","top":false,"date":"2020-07-15T13:33:18.000Z","_content":"\n<table bgcolor=#343a40 >\n    <tr>\n        <td><img src='https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP' ></td>\n  </tr>\n    </table>\n## 镜像的操作\n\n### 1.拉取镜像\n\n```bash\n从中央仓库拉取镜像到本地\ndocker pull 镜像名称[:tag]\n#举个栗子:docker pull daocloud.io/library/tomcat:8.5.15-jre8\n```\n\n### 2.查看本地全部镜像\n\n```bash\n查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小\ndocker images\n```\n\n### 3.删除本地镜像\n\n```bash\n镜像会占用磁盘空间，可以直接手动删除，标识通过查看获取\ndocker rmi #镜像的标识\n```\n\n### 4.镜像的导入导出\n\n```bash\n如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null，需要手动修改\n#将本地的镜像导出\ndocker save -o 导出的路径 镜像id\n#加载本地的镜像文件\ndocker load -i 镜像文件\n#修改镜像文件docker tag 镜像id 新镜像名称：版本\n```\n\n## 容器的操作\n\n### 1.运行容器\n\n```bash\n#运行容器需要定制具体镜像，如果镜像不存在，会直接下载\n#简单操作\ndocker run 镜像的标识|镜像的名称[:tag]\n#常用的参数\ndocker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]\n#-d:代表后台运行容器\n#-p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口\n#--name 容器名称:指定容器的名称\n\n### 例：运行MySQL容器\n\ndocker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4\n\n```\n\n### 2.查看正在运行的容器\n\n```bash\n查看全部正在运行的容器信息\ndocker ps [-qa]\n#-a 查看全部的容器，包括没有运行\n#-q 只查看容器的标识\n```\n\n### 3.查看容器日志\n\n```bash\n查看容器日志，以查看容器运行的信息\ndocker logs -f 容器id\n#-f：可以滚动查看日志的最后几行\n```\n\n### 4.进入容器的内部\n\n```bash\n可以进入容器的内部进行操作\ndocker exec -it 容器id bash\n```\n\n### 5.复制内容到容器\n\n```bash\n将宿主机的文件复制到容器内部的指定目录\ndocker cp 文件名称 容器id:容器内部路径\n```\n\n### 6.重启&启动&停止&删除容器\n\n```bash\n容器的启动，停止，删除等操作\n#重新启动容器\ndocker restart 容器id\n#启动停止运行的容器\ndocker start 容器id \n#停止指定的容器(删除容器前，需要先停止容器)\ndocker stop 容器id\n#停止全部容器\ndocker stop $(docker ps -qa)\n#删除指定容器\ndocker rm 容器id\n#删除全部容器\ndocker rm $(docker ps -qa)\n```\n\n## 数据卷\n\n数据卷：将宿主机的一个目录映射到容器的一个目录中。\n\n可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。\n\n### 1.创建数据卷\n\n```bash\n#创建数据卷后，默认会存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data\ndocker volume create 数据卷名称\n```\n\n### 2.查看全部数据卷\n\n```bash\n#查看全部数据卷信息\ndocker volume ls\n```\n\n### 3.查看数据卷详情\n\n```bash\n#查看数据卷的详细信息，可以查询到存放的路径，创建时间等等\ndocker volume inspect 数据卷名称\n```\n\n### 4.删除数据卷\n\n```bash\n#删除指定的数据卷\ndocker volume rm 数据卷名称\n```\n\n### 5.容器映射数据卷\n\n```bash\n#通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。\ndocker run -d -p 8080:8080 --name mysql -v 数据卷名称:容器内部的路径 镜像id \n#通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。\ndocker run -d -p 8080:8080 --name mysql -v 路径(/root/自己创建的文件夹):容器内部的路径 镜像id\n```\n\n\n\n## Docker Dockerfile\n\n### 什么是 Dockerfile？\n\nDockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。\n\n### 使用 Dockerfile 定制镜像\n\n```dockerfile\n创建自定义镜像就需要创建一个Dockerfiler,如下为Dockerfile的语言\n \nfrom：指定当前自定义镜像依赖的环境\ncopy：将相对路径下的内容复制到自定义镜像中\nworkdir：声明镜像的默认工作目录\nrun：执行的命令，可以编写多个\ncmd：需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）\n \n```\n\n**1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）**\n\n在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：\n\n```shell\nFROM nginx\nRUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html\n```\n\n**2、FROM 和 RUN 指令的作用**\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下俩种格式：\n\nshell 格式：\n\n```\nRUN <命令行命令>\n# <命令行命令> 等同于，在终端操作的 shell 命令。\n```\n\nexec 格式：\n\n```shell\nRUN [\"可执行文件\", \"参数1\", \"参数2\"]\n# 例如：\n# RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline\n```\n\n**注意**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大\n\n### 开始构建镜像\n\n在 Dockerfile 文件的存放目录下，执行构建动作。\n\n以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。\n\n**注**：最后的 **.** 代表本次执行的上下文路径，下一节会介绍。\n\n```shell\n#编写完Dockerfile后需要通过命令将其制作为镜像，并且要在Dockerfile的当前目录下，之后即可在镜像中查看到指定的镜像信息，注意最后的 .\ndocker build -t 镜像名称[:tag] ./\n\n$ docker build -t nginx:test .\n```\n\n上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。\n\n**解析**：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。\n\n如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。\n\n>  **注意**：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。\n\n# Docker Compose\n\n### Compose 简介\n\nCompose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。\n\n如果你还不了解 YML 文件配置，可以先阅读 [YAML 入门教程](https://www.runoob.com/w3cnote/yaml-intro.html)。\n\nCompose 使用的三个步骤：\n\n- 使用 Dockerfile 定义应用程序的环境。\n- 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。\n- 最后，执行 docker-compose up 命令来启动并运行整个应用程序。\n\n### 1.下载并安装Docker-Compose\n\n### 1.1下载Docker-Compose\n\n```bash\n#去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose下载路径：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64\n```\n\n### 1.2设置权限\n\n```bash\n#需要将DockerCompose文件的名称修改一下，给予DockerCompose文件一个可执行的权限\nmv docker-compose-Linux-x86_64 docker-compose\nchmod 777 docker-compose\n```\n\n### 1.3配置环境变量\n\n```bash\n#方便后期操作，配置一个环境变量\n#将docker-compose文件移动到了/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到了PATH中 \nmv docker-compose /usr/local/bin\nvi /etc/profile\n#添加内容：export PATH=$JAVA_HOME:/usr/local/bin:$PATH\nsource /etc/profile\n```\n\n### 1.4测试\n\n```bash\n在任意目录下输入\ndocker-compose\n```\n\n### 2.Docker-Compose管理MySQL和Tomcat容器\n\n```yaml\n# yml文件以key:value方式来指定配置信息\n# 多个配置信息以换行+缩进的方式来区分\n# 在docker-compose.yml文件中，不要使用制表符 \n\nversion: '3.1'\nservices:  \n  mysql:           # 服务的名称    \n    restart: always   # 代表只要docker启动，那么这个容器就跟着一起启动    \n    image: daocloud.io/library/mysql:5.7.4  # 指定镜像路径    \n    container_name: mysql  # 指定容器名称    \n    ports:      \n      - 3306:3306   #  指定端口号的映射    \n    environment:      \n      MYSQL_ROOT_PASSWORD: root   # 指定MySQL的ROOT用户登录密码      \n      TZ: Asia/Shanghai        # 指定时区    \n      volumes:     \n        - /opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql   # 映射数据卷 \n```\n\n### 3.使用docker-compose命令管理容器\n\n```bash\n在使用docker-compose的命令时，默认会在当前目录下找docker-compose.yml文件 \n#1.基于docker-compose.yml启动管理的容器\ndocker-compose up -d \n#2.关闭并删除容器\ndocker-compose down \n#3.开启|关闭|重启已经存在的由docker-compose维护的容器\ndocker-compose start|stop|restart \n#4.查看由docker-compose管理的容器\ndocker-compose ps \n#5.查看日志\ndocker-compose logs -f\n```\n\n### 4.docker-compose配合Dockerfile使用\n\n\n使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器\n\n## CI、CD介绍及准备![Screenshot_20200807_004021_tv.danmaku.bili](https://i.loli.net/2020/08/08/apNKYu5iIt31cPS.jpg)\n\n\n\n### CI（continuous intergration）持续集成\n\n持续集成：编写代码时，完成了一个功能后，立即提交代码到Git仓库中，将项目重新的构建并且测试。\n\n1.快速发现错误。\n2.防止代码偏离主分支。\n\n实现CI，需要使用到Gitlab远程仓库，先通过Docker搭建Gitlab\n创建一个全新的虚拟机，并且至少指定4G的运行内存，4G运行内存是Gitlab推荐的内存大小。\n并且安装Docker以及Docker-Compose\n\n### CD 持续交付/部署（Continuous Delivery / Deployment）\n\n完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。\n\n在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。\n\n对于一个成熟的 CI/CD 管道来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。由于在生产之前的管道阶段没有手动门控，因此持续部署在很大程度上都得依赖精心设计的测试自动化。\n\n# Docker Machine\n\n### 简介\n\nDocker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。\n\nDocker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。\n\nDocker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。\n\n使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。","source":"_posts/docker笔记.md","raw":"---\ntitle: docker笔记\ntags:\n  - Docker\ncategories:\n  - Docker\ntop: false\ndate: 2020-07-15 21:33:18\n---\n\n<table bgcolor=#343a40 >\n    <tr>\n        <td><img src='https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP' ></td>\n  </tr>\n    </table>\n## 镜像的操作\n\n### 1.拉取镜像\n\n```bash\n从中央仓库拉取镜像到本地\ndocker pull 镜像名称[:tag]\n#举个栗子:docker pull daocloud.io/library/tomcat:8.5.15-jre8\n```\n\n### 2.查看本地全部镜像\n\n```bash\n查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小\ndocker images\n```\n\n### 3.删除本地镜像\n\n```bash\n镜像会占用磁盘空间，可以直接手动删除，标识通过查看获取\ndocker rmi #镜像的标识\n```\n\n### 4.镜像的导入导出\n\n```bash\n如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null，需要手动修改\n#将本地的镜像导出\ndocker save -o 导出的路径 镜像id\n#加载本地的镜像文件\ndocker load -i 镜像文件\n#修改镜像文件docker tag 镜像id 新镜像名称：版本\n```\n\n## 容器的操作\n\n### 1.运行容器\n\n```bash\n#运行容器需要定制具体镜像，如果镜像不存在，会直接下载\n#简单操作\ndocker run 镜像的标识|镜像的名称[:tag]\n#常用的参数\ndocker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]\n#-d:代表后台运行容器\n#-p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口\n#--name 容器名称:指定容器的名称\n\n### 例：运行MySQL容器\n\ndocker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4\n\n```\n\n### 2.查看正在运行的容器\n\n```bash\n查看全部正在运行的容器信息\ndocker ps [-qa]\n#-a 查看全部的容器，包括没有运行\n#-q 只查看容器的标识\n```\n\n### 3.查看容器日志\n\n```bash\n查看容器日志，以查看容器运行的信息\ndocker logs -f 容器id\n#-f：可以滚动查看日志的最后几行\n```\n\n### 4.进入容器的内部\n\n```bash\n可以进入容器的内部进行操作\ndocker exec -it 容器id bash\n```\n\n### 5.复制内容到容器\n\n```bash\n将宿主机的文件复制到容器内部的指定目录\ndocker cp 文件名称 容器id:容器内部路径\n```\n\n### 6.重启&启动&停止&删除容器\n\n```bash\n容器的启动，停止，删除等操作\n#重新启动容器\ndocker restart 容器id\n#启动停止运行的容器\ndocker start 容器id \n#停止指定的容器(删除容器前，需要先停止容器)\ndocker stop 容器id\n#停止全部容器\ndocker stop $(docker ps -qa)\n#删除指定容器\ndocker rm 容器id\n#删除全部容器\ndocker rm $(docker ps -qa)\n```\n\n## 数据卷\n\n数据卷：将宿主机的一个目录映射到容器的一个目录中。\n\n可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。\n\n### 1.创建数据卷\n\n```bash\n#创建数据卷后，默认会存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data\ndocker volume create 数据卷名称\n```\n\n### 2.查看全部数据卷\n\n```bash\n#查看全部数据卷信息\ndocker volume ls\n```\n\n### 3.查看数据卷详情\n\n```bash\n#查看数据卷的详细信息，可以查询到存放的路径，创建时间等等\ndocker volume inspect 数据卷名称\n```\n\n### 4.删除数据卷\n\n```bash\n#删除指定的数据卷\ndocker volume rm 数据卷名称\n```\n\n### 5.容器映射数据卷\n\n```bash\n#通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。\ndocker run -d -p 8080:8080 --name mysql -v 数据卷名称:容器内部的路径 镜像id \n#通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。\ndocker run -d -p 8080:8080 --name mysql -v 路径(/root/自己创建的文件夹):容器内部的路径 镜像id\n```\n\n\n\n## Docker Dockerfile\n\n### 什么是 Dockerfile？\n\nDockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。\n\n### 使用 Dockerfile 定制镜像\n\n```dockerfile\n创建自定义镜像就需要创建一个Dockerfiler,如下为Dockerfile的语言\n \nfrom：指定当前自定义镜像依赖的环境\ncopy：将相对路径下的内容复制到自定义镜像中\nworkdir：声明镜像的默认工作目录\nrun：执行的命令，可以编写多个\ncmd：需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）\n \n```\n\n**1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）**\n\n在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：\n\n```shell\nFROM nginx\nRUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html\n```\n\n**2、FROM 和 RUN 指令的作用**\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下俩种格式：\n\nshell 格式：\n\n```\nRUN <命令行命令>\n# <命令行命令> 等同于，在终端操作的 shell 命令。\n```\n\nexec 格式：\n\n```shell\nRUN [\"可执行文件\", \"参数1\", \"参数2\"]\n# 例如：\n# RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline\n```\n\n**注意**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大\n\n### 开始构建镜像\n\n在 Dockerfile 文件的存放目录下，执行构建动作。\n\n以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。\n\n**注**：最后的 **.** 代表本次执行的上下文路径，下一节会介绍。\n\n```shell\n#编写完Dockerfile后需要通过命令将其制作为镜像，并且要在Dockerfile的当前目录下，之后即可在镜像中查看到指定的镜像信息，注意最后的 .\ndocker build -t 镜像名称[:tag] ./\n\n$ docker build -t nginx:test .\n```\n\n上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。\n\n**解析**：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。\n\n如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。\n\n>  **注意**：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。\n\n# Docker Compose\n\n### Compose 简介\n\nCompose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。\n\n如果你还不了解 YML 文件配置，可以先阅读 [YAML 入门教程](https://www.runoob.com/w3cnote/yaml-intro.html)。\n\nCompose 使用的三个步骤：\n\n- 使用 Dockerfile 定义应用程序的环境。\n- 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。\n- 最后，执行 docker-compose up 命令来启动并运行整个应用程序。\n\n### 1.下载并安装Docker-Compose\n\n### 1.1下载Docker-Compose\n\n```bash\n#去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose下载路径：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64\n```\n\n### 1.2设置权限\n\n```bash\n#需要将DockerCompose文件的名称修改一下，给予DockerCompose文件一个可执行的权限\nmv docker-compose-Linux-x86_64 docker-compose\nchmod 777 docker-compose\n```\n\n### 1.3配置环境变量\n\n```bash\n#方便后期操作，配置一个环境变量\n#将docker-compose文件移动到了/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到了PATH中 \nmv docker-compose /usr/local/bin\nvi /etc/profile\n#添加内容：export PATH=$JAVA_HOME:/usr/local/bin:$PATH\nsource /etc/profile\n```\n\n### 1.4测试\n\n```bash\n在任意目录下输入\ndocker-compose\n```\n\n### 2.Docker-Compose管理MySQL和Tomcat容器\n\n```yaml\n# yml文件以key:value方式来指定配置信息\n# 多个配置信息以换行+缩进的方式来区分\n# 在docker-compose.yml文件中，不要使用制表符 \n\nversion: '3.1'\nservices:  \n  mysql:           # 服务的名称    \n    restart: always   # 代表只要docker启动，那么这个容器就跟着一起启动    \n    image: daocloud.io/library/mysql:5.7.4  # 指定镜像路径    \n    container_name: mysql  # 指定容器名称    \n    ports:      \n      - 3306:3306   #  指定端口号的映射    \n    environment:      \n      MYSQL_ROOT_PASSWORD: root   # 指定MySQL的ROOT用户登录密码      \n      TZ: Asia/Shanghai        # 指定时区    \n      volumes:     \n        - /opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql   # 映射数据卷 \n```\n\n### 3.使用docker-compose命令管理容器\n\n```bash\n在使用docker-compose的命令时，默认会在当前目录下找docker-compose.yml文件 \n#1.基于docker-compose.yml启动管理的容器\ndocker-compose up -d \n#2.关闭并删除容器\ndocker-compose down \n#3.开启|关闭|重启已经存在的由docker-compose维护的容器\ndocker-compose start|stop|restart \n#4.查看由docker-compose管理的容器\ndocker-compose ps \n#5.查看日志\ndocker-compose logs -f\n```\n\n### 4.docker-compose配合Dockerfile使用\n\n\n使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器\n\n## CI、CD介绍及准备![Screenshot_20200807_004021_tv.danmaku.bili](https://i.loli.net/2020/08/08/apNKYu5iIt31cPS.jpg)\n\n\n\n### CI（continuous intergration）持续集成\n\n持续集成：编写代码时，完成了一个功能后，立即提交代码到Git仓库中，将项目重新的构建并且测试。\n\n1.快速发现错误。\n2.防止代码偏离主分支。\n\n实现CI，需要使用到Gitlab远程仓库，先通过Docker搭建Gitlab\n创建一个全新的虚拟机，并且至少指定4G的运行内存，4G运行内存是Gitlab推荐的内存大小。\n并且安装Docker以及Docker-Compose\n\n### CD 持续交付/部署（Continuous Delivery / Deployment）\n\n完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。\n\n在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。\n\n对于一个成熟的 CI/CD 管道来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。由于在生产之前的管道阶段没有手动门控，因此持续部署在很大程度上都得依赖精心设计的测试自动化。\n\n# Docker Machine\n\n### 简介\n\nDocker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。\n\nDocker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。\n\nDocker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。\n\n使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。","slug":"docker笔记","published":1,"updated":"2022-08-25T14:12:05.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz395002n12mj6sxh3lf4","content":"<table bgcolor=\"#343a40\">\n    <tbody><tr>\n        <td><img src=\"https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP\"></td>\n  </tr>\n    </tbody></table>\n## 镜像的操作\n\n<h3 id=\"1-拉取镜像\"><a href=\"#1-拉取镜像\" class=\"headerlink\" title=\"1.拉取镜像\"></a>1.拉取镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">从中央仓库拉取镜像到本地\ndocker pull 镜像名称<span class=\"token punctuation\">[</span>:tag<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#举个栗子:docker pull daocloud.io/library/tomcat:8.5.15-jre8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-查看本地全部镜像\"><a href=\"#2-查看本地全部镜像\" class=\"headerlink\" title=\"2.查看本地全部镜像\"></a>2.查看本地全部镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小\ndocker images<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-删除本地镜像\"><a href=\"#3-删除本地镜像\" class=\"headerlink\" title=\"3.删除本地镜像\"></a>3.删除本地镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">镜像会占用磁盘空间，可以直接手动删除，标识通过查看获取\ndocker rmi <span class=\"token comment\">#镜像的标识</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-镜像的导入导出\"><a href=\"#4-镜像的导入导出\" class=\"headerlink\" title=\"4.镜像的导入导出\"></a>4.镜像的导入导出</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null，需要手动修改\n<span class=\"token comment\">#将本地的镜像导出</span>\ndocker save -o 导出的路径 镜像id\n<span class=\"token comment\">#加载本地的镜像文件</span>\ndocker load -i 镜像文件\n<span class=\"token comment\">#修改镜像文件docker tag 镜像id 新镜像名称：版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"容器的操作\"><a href=\"#容器的操作\" class=\"headerlink\" title=\"容器的操作\"></a>容器的操作</h2><h3 id=\"1-运行容器\"><a href=\"#1-运行容器\" class=\"headerlink\" title=\"1.运行容器\"></a>1.运行容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#运行容器需要定制具体镜像，如果镜像不存在，会直接下载</span>\n<span class=\"token comment\">#简单操作</span>\ndocker run 镜像的标识<span class=\"token operator\">|</span>镜像的名称<span class=\"token punctuation\">[</span>:tag<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#常用的参数</span>\ndocker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识<span class=\"token operator\">|</span>镜像名称<span class=\"token punctuation\">[</span>:tag<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#-d:代表后台运行容器</span>\n<span class=\"token comment\">#-p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口</span>\n<span class=\"token comment\">#--name 容器名称:指定容器的名称</span>\n\n<span class=\"token comment\">### 例：运行MySQL容器</span>\n\ndocker run -d -p <span class=\"token number\">3306</span>:3306 --name mysql -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>root daocloud.io/library/mysql:5.7.4\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-查看正在运行的容器\"><a href=\"#2-查看正在运行的容器\" class=\"headerlink\" title=\"2.查看正在运行的容器\"></a>2.查看正在运行的容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看全部正在运行的容器信息\ndocker <span class=\"token function\">ps</span> <span class=\"token punctuation\">[</span>-qa<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#-a 查看全部的容器，包括没有运行</span>\n<span class=\"token comment\">#-q 只查看容器的标识</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-查看容器日志\"><a href=\"#3-查看容器日志\" class=\"headerlink\" title=\"3.查看容器日志\"></a>3.查看容器日志</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看容器日志，以查看容器运行的信息\ndocker logs -f 容器id\n<span class=\"token comment\">#-f：可以滚动查看日志的最后几行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-进入容器的内部\"><a href=\"#4-进入容器的内部\" class=\"headerlink\" title=\"4.进入容器的内部\"></a>4.进入容器的内部</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">可以进入容器的内部进行操作\ndocker <span class=\"token builtin class-name\">exec</span> -it 容器id <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-复制内容到容器\"><a href=\"#5-复制内容到容器\" class=\"headerlink\" title=\"5.复制内容到容器\"></a>5.复制内容到容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">将宿主机的文件复制到容器内部的指定目录\ndocker <span class=\"token function\">cp</span> 文件名称 容器id:容器内部路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-重启-amp-启动-amp-停止-amp-删除容器\"><a href=\"#6-重启-amp-启动-amp-停止-amp-删除容器\" class=\"headerlink\" title=\"6.重启&amp;启动&amp;停止&amp;删除容器\"></a>6.重启&amp;启动&amp;停止&amp;删除容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">容器的启动，停止，删除等操作\n<span class=\"token comment\">#重新启动容器</span>\ndocker restart 容器id\n<span class=\"token comment\">#启动停止运行的容器</span>\ndocker start 容器id \n<span class=\"token comment\">#停止指定的容器(删除容器前，需要先停止容器)</span>\ndocker stop 容器id\n<span class=\"token comment\">#停止全部容器</span>\ndocker stop <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -qa<span class=\"token variable\">)</span></span>\n<span class=\"token comment\">#删除指定容器</span>\ndocker <span class=\"token function\">rm</span> 容器id\n<span class=\"token comment\">#删除全部容器</span>\ndocker <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -qa<span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h2><p>数据卷：将宿主机的一个目录映射到容器的一个目录中。</p>\n<p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p>\n<h3 id=\"1-创建数据卷\"><a href=\"#1-创建数据卷\" class=\"headerlink\" title=\"1.创建数据卷\"></a>1.创建数据卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#创建数据卷后，默认会存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data</span>\ndocker volume create 数据卷名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-查看全部数据卷\"><a href=\"#2-查看全部数据卷\" class=\"headerlink\" title=\"2.查看全部数据卷\"></a>2.查看全部数据卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看全部数据卷信息</span>\ndocker volume <span class=\"token function\">ls</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-查看数据卷详情\"><a href=\"#3-查看数据卷详情\" class=\"headerlink\" title=\"3.查看数据卷详情\"></a>3.查看数据卷详情</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看数据卷的详细信息，可以查询到存放的路径，创建时间等等</span>\ndocker volume inspect 数据卷名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-删除数据卷\"><a href=\"#4-删除数据卷\" class=\"headerlink\" title=\"4.删除数据卷\"></a>4.删除数据卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#删除指定的数据卷</span>\ndocker volume <span class=\"token function\">rm</span> 数据卷名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-容器映射数据卷\"><a href=\"#5-容器映射数据卷\" class=\"headerlink\" title=\"5.容器映射数据卷\"></a>5.容器映射数据卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</span>\ndocker run -d -p <span class=\"token number\">8080</span>:8080 --name mysql -v 数据卷名称:容器内部的路径 镜像id \n<span class=\"token comment\">#通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。</span>\ndocker run -d -p <span class=\"token number\">8080</span>:8080 --name mysql -v 路径<span class=\"token punctuation\">(</span>/root/自己创建的文件夹<span class=\"token punctuation\">)</span>:容器内部的路径 镜像id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Docker-Dockerfile\"><a href=\"#Docker-Dockerfile\" class=\"headerlink\" title=\"Docker Dockerfile\"></a>Docker Dockerfile</h2><h3 id=\"什么是-Dockerfile？\"><a href=\"#什么是-Dockerfile？\" class=\"headerlink\" title=\"什么是 Dockerfile？\"></a>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>\n<h3 id=\"使用-Dockerfile-定制镜像\"><a href=\"#使用-Dockerfile-定制镜像\" class=\"headerlink\" title=\"使用 Dockerfile 定制镜像\"></a>使用 Dockerfile 定制镜像</h3><pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">创建自定义镜像就需要创建一个Dockerfiler,如下为Dockerfile的语言\n \nfrom：指定当前自定义镜像依赖的环境\ncopy：将相对路径下的内容复制到自定义镜像中\nworkdir：声明镜像的默认工作目录\nrun：执行的命令，可以编写多个\ncmd：需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p>\n<p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">FROM nginx\nRUN <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'这是一个本地构建的nginx镜像'</span> <span class=\"token operator\">&gt;</span> /usr/share/nginx/html/index.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>2、FROM 和 RUN 指令的作用</strong></p>\n<p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p>\n<p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p>\n<p>shell 格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">RUN &lt;命令行命令&gt;\n# &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>exec 格式：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">RUN <span class=\"token punctuation\">[</span><span class=\"token string\">\"可执行文件\"</span>, <span class=\"token string\">\"参数1\"</span>, <span class=\"token string\">\"参数2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 例如：</span>\n<span class=\"token comment\"># RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大</p>\n<h3 id=\"开始构建镜像\"><a href=\"#开始构建镜像\" class=\"headerlink\" title=\"开始构建镜像\"></a>开始构建镜像</h3><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p>\n<p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。</p>\n<p><strong>注</strong>：最后的 <strong>.</strong> 代表本次执行的上下文路径，下一节会介绍。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\">#编写完Dockerfile后需要通过命令将其制作为镜像，并且要在Dockerfile的当前目录下，之后即可在镜像中查看到指定的镜像信息，注意最后的 .</span>\ndocker build -t 镜像名称<span class=\"token punctuation\">[</span>:tag<span class=\"token punctuation\">]</span> ./\n\n$ docker build -t nginx:test <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>\n<p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>\n<p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p>\n<blockquote>\n<p> <strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p>\n</blockquote>\n<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h1><h3 id=\"Compose-简介\"><a href=\"#Compose-简介\" class=\"headerlink\" title=\"Compose 简介\"></a>Compose 简介</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>\n<p>如果你还不了解 YML 文件配置，可以先阅读 <a href=\"https://www.runoob.com/w3cnote/yaml-intro.html\">YAML 入门教程</a>。</p>\n<p>Compose 使用的三个步骤：</p>\n<ul>\n<li>使用 Dockerfile 定义应用程序的环境。</li>\n<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>\n<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>\n</ul>\n<h3 id=\"1-下载并安装Docker-Compose\"><a href=\"#1-下载并安装Docker-Compose\" class=\"headerlink\" title=\"1.下载并安装Docker-Compose\"></a>1.下载并安装Docker-Compose</h3><h3 id=\"1-1下载Docker-Compose\"><a href=\"#1-1下载Docker-Compose\" class=\"headerlink\" title=\"1.1下载Docker-Compose\"></a>1.1下载Docker-Compose</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose下载路径：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"1-2设置权限\"><a href=\"#1-2设置权限\" class=\"headerlink\" title=\"1.2设置权限\"></a>1.2设置权限</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#需要将DockerCompose文件的名称修改一下，给予DockerCompose文件一个可执行的权限</span>\n<span class=\"token function\">mv</span> docker-compose-Linux-x86_64 docker-compose\n<span class=\"token function\">chmod</span> <span class=\"token number\">777</span> docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-3配置环境变量\"><a href=\"#1-3配置环境变量\" class=\"headerlink\" title=\"1.3配置环境变量\"></a>1.3配置环境变量</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#方便后期操作，配置一个环境变量</span>\n<span class=\"token comment\">#将docker-compose文件移动到了/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到了PATH中 </span>\n<span class=\"token function\">mv</span> docker-compose /usr/local/bin\n<span class=\"token function\">vi</span> /etc/profile\n<span class=\"token comment\">#添加内容：export PATH=$JAVA_HOME:/usr/local/bin:$PATH</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-4测试\"><a href=\"#1-4测试\" class=\"headerlink\" title=\"1.4测试\"></a>1.4测试</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">在任意目录下输入\ndocker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-Docker-Compose管理MySQL和Tomcat容器\"><a href=\"#2-Docker-Compose管理MySQL和Tomcat容器\" class=\"headerlink\" title=\"2.Docker-Compose管理MySQL和Tomcat容器\"></a>2.Docker-Compose管理MySQL和Tomcat容器</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># yml文件以key:value方式来指定配置信息</span>\n<span class=\"token comment\"># 多个配置信息以换行+缩进的方式来区分</span>\n<span class=\"token comment\"># 在docker-compose.yml文件中，不要使用制表符 </span>\n\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>  \n  <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 服务的名称    </span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always   <span class=\"token comment\"># 代表只要docker启动，那么这个容器就跟着一起启动    </span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> daocloud.io/library/mysql<span class=\"token punctuation\">:</span>5.7.4  <span class=\"token comment\"># 指定镜像路径    </span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql  <span class=\"token comment\"># 指定容器名称    </span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>      \n      <span class=\"token punctuation\">-</span> 3306<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>   <span class=\"token comment\">#  指定端口号的映射    </span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>      \n      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> root   <span class=\"token comment\"># 指定MySQL的ROOT用户登录密码      </span>\n      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai        <span class=\"token comment\"># 指定时区    </span>\n      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>     \n        <span class=\"token punctuation\">-</span> /opt/docker_mysql_tomcat/mysql_data<span class=\"token punctuation\">:</span>/var/lib/mysql   <span class=\"token comment\"># 映射数据卷 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-使用docker-compose命令管理容器\"><a href=\"#3-使用docker-compose命令管理容器\" class=\"headerlink\" title=\"3.使用docker-compose命令管理容器\"></a>3.使用docker-compose命令管理容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">在使用docker-compose的命令时，默认会在当前目录下找docker-compose.yml文件 \n<span class=\"token comment\">#1.基于docker-compose.yml启动管理的容器</span>\ndocker-compose up -d \n<span class=\"token comment\">#2.关闭并删除容器</span>\ndocker-compose down \n<span class=\"token comment\">#3.开启|关闭|重启已经存在的由docker-compose维护的容器</span>\ndocker-compose start<span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>restart \n<span class=\"token comment\">#4.查看由docker-compose管理的容器</span>\ndocker-compose <span class=\"token function\">ps</span> \n<span class=\"token comment\">#5.查看日志</span>\ndocker-compose logs -f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-docker-compose配合Dockerfile使用\"><a href=\"#4-docker-compose配合Dockerfile使用\" class=\"headerlink\" title=\"4.docker-compose配合Dockerfile使用\"></a>4.docker-compose配合Dockerfile使用</h3><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p>\n<h2 id=\"CI、CD介绍及准备\"><a href=\"#CI、CD介绍及准备\" class=\"headerlink\" title=\"CI、CD介绍及准备\"></a>CI、CD介绍及准备<img src=\"https://i.loli.net/2020/08/08/apNKYu5iIt31cPS.jpg\" alt=\"Screenshot_20200807_004021_tv.danmaku.bili\"></h2><h3 id=\"CI（continuous-intergration）持续集成\"><a href=\"#CI（continuous-intergration）持续集成\" class=\"headerlink\" title=\"CI（continuous intergration）持续集成\"></a>CI（continuous intergration）持续集成</h3><p>持续集成：编写代码时，完成了一个功能后，立即提交代码到Git仓库中，将项目重新的构建并且测试。</p>\n<p>1.快速发现错误。<br>2.防止代码偏离主分支。</p>\n<p>实现CI，需要使用到Gitlab远程仓库，先通过Docker搭建Gitlab<br>创建一个全新的虚拟机，并且至少指定4G的运行内存，4G运行内存是Gitlab推荐的内存大小。<br>并且安装Docker以及Docker-Compose</p>\n<h3 id=\"CD-持续交付-部署（Continuous-Delivery-Deployment）\"><a href=\"#CD-持续交付-部署（Continuous-Delivery-Deployment）\" class=\"headerlink\" title=\"CD 持续交付/部署（Continuous Delivery / Deployment）\"></a>CD 持续交付/部署（Continuous Delivery / Deployment）</h3><p>完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。</p>\n<p>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。</p>\n<p>对于一个成熟的 CI/CD 管道来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。由于在生产之前的管道阶段没有手动门控，因此持续部署在很大程度上都得依赖精心设计的测试自动化。</p>\n<h1 id=\"Docker-Machine\"><a href=\"#Docker-Machine\" class=\"headerlink\" title=\"Docker Machine\"></a>Docker Machine</h1><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p>\n<p>Docker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。</p>\n<p>Docker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。</p>\n<p>使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<table bgcolor=#343a40 >\n    <tr>\n        <td><img src='https://www.docker.com/sites/default/files/d8/styles/medium/public/2020-04/dockercon2020_logobl.png?itok=Z6k3qZKP' ></td>\n  </tr>\n    </table>\n## 镜像的操作\n\n<h3 id=\"1-拉取镜像\"><a href=\"#1-拉取镜像\" class=\"headerlink\" title=\"1.拉取镜像\"></a>1.拉取镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">从中央仓库拉取镜像到本地\ndocker pull 镜像名称<span class=\"token punctuation\">[</span>:tag<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#举个栗子:docker pull daocloud.io/library/tomcat:8.5.15-jre8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-查看本地全部镜像\"><a href=\"#2-查看本地全部镜像\" class=\"headerlink\" title=\"2.查看本地全部镜像\"></a>2.查看本地全部镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小\ndocker images<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-删除本地镜像\"><a href=\"#3-删除本地镜像\" class=\"headerlink\" title=\"3.删除本地镜像\"></a>3.删除本地镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">镜像会占用磁盘空间，可以直接手动删除，标识通过查看获取\ndocker rmi <span class=\"token comment\">#镜像的标识</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-镜像的导入导出\"><a href=\"#4-镜像的导入导出\" class=\"headerlink\" title=\"4.镜像的导入导出\"></a>4.镜像的导入导出</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null，需要手动修改\n<span class=\"token comment\">#将本地的镜像导出</span>\ndocker save -o 导出的路径 镜像id\n<span class=\"token comment\">#加载本地的镜像文件</span>\ndocker load -i 镜像文件\n<span class=\"token comment\">#修改镜像文件docker tag 镜像id 新镜像名称：版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"容器的操作\"><a href=\"#容器的操作\" class=\"headerlink\" title=\"容器的操作\"></a>容器的操作</h2><h3 id=\"1-运行容器\"><a href=\"#1-运行容器\" class=\"headerlink\" title=\"1.运行容器\"></a>1.运行容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#运行容器需要定制具体镜像，如果镜像不存在，会直接下载</span>\n<span class=\"token comment\">#简单操作</span>\ndocker run 镜像的标识<span class=\"token operator\">|</span>镜像的名称<span class=\"token punctuation\">[</span>:tag<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#常用的参数</span>\ndocker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识<span class=\"token operator\">|</span>镜像名称<span class=\"token punctuation\">[</span>:tag<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#-d:代表后台运行容器</span>\n<span class=\"token comment\">#-p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口</span>\n<span class=\"token comment\">#--name 容器名称:指定容器的名称</span>\n\n<span class=\"token comment\">### 例：运行MySQL容器</span>\n\ndocker run -d -p <span class=\"token number\">3306</span>:3306 --name mysql -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>root daocloud.io/library/mysql:5.7.4\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-查看正在运行的容器\"><a href=\"#2-查看正在运行的容器\" class=\"headerlink\" title=\"2.查看正在运行的容器\"></a>2.查看正在运行的容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看全部正在运行的容器信息\ndocker <span class=\"token function\">ps</span> <span class=\"token punctuation\">[</span>-qa<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#-a 查看全部的容器，包括没有运行</span>\n<span class=\"token comment\">#-q 只查看容器的标识</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-查看容器日志\"><a href=\"#3-查看容器日志\" class=\"headerlink\" title=\"3.查看容器日志\"></a>3.查看容器日志</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看容器日志，以查看容器运行的信息\ndocker logs -f 容器id\n<span class=\"token comment\">#-f：可以滚动查看日志的最后几行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-进入容器的内部\"><a href=\"#4-进入容器的内部\" class=\"headerlink\" title=\"4.进入容器的内部\"></a>4.进入容器的内部</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">可以进入容器的内部进行操作\ndocker <span class=\"token builtin class-name\">exec</span> -it 容器id <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-复制内容到容器\"><a href=\"#5-复制内容到容器\" class=\"headerlink\" title=\"5.复制内容到容器\"></a>5.复制内容到容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">将宿主机的文件复制到容器内部的指定目录\ndocker <span class=\"token function\">cp</span> 文件名称 容器id:容器内部路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-重启-amp-启动-amp-停止-amp-删除容器\"><a href=\"#6-重启-amp-启动-amp-停止-amp-删除容器\" class=\"headerlink\" title=\"6.重启&amp;启动&amp;停止&amp;删除容器\"></a>6.重启&amp;启动&amp;停止&amp;删除容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">容器的启动，停止，删除等操作\n<span class=\"token comment\">#重新启动容器</span>\ndocker restart 容器id\n<span class=\"token comment\">#启动停止运行的容器</span>\ndocker start 容器id \n<span class=\"token comment\">#停止指定的容器(删除容器前，需要先停止容器)</span>\ndocker stop 容器id\n<span class=\"token comment\">#停止全部容器</span>\ndocker stop <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -qa<span class=\"token variable\">)</span></span>\n<span class=\"token comment\">#删除指定容器</span>\ndocker <span class=\"token function\">rm</span> 容器id\n<span class=\"token comment\">#删除全部容器</span>\ndocker <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -qa<span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h2><p>数据卷：将宿主机的一个目录映射到容器的一个目录中。</p>\n<p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p>\n<h3 id=\"1-创建数据卷\"><a href=\"#1-创建数据卷\" class=\"headerlink\" title=\"1.创建数据卷\"></a>1.创建数据卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#创建数据卷后，默认会存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data</span>\ndocker volume create 数据卷名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-查看全部数据卷\"><a href=\"#2-查看全部数据卷\" class=\"headerlink\" title=\"2.查看全部数据卷\"></a>2.查看全部数据卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看全部数据卷信息</span>\ndocker volume <span class=\"token function\">ls</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-查看数据卷详情\"><a href=\"#3-查看数据卷详情\" class=\"headerlink\" title=\"3.查看数据卷详情\"></a>3.查看数据卷详情</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看数据卷的详细信息，可以查询到存放的路径，创建时间等等</span>\ndocker volume inspect 数据卷名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-删除数据卷\"><a href=\"#4-删除数据卷\" class=\"headerlink\" title=\"4.删除数据卷\"></a>4.删除数据卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#删除指定的数据卷</span>\ndocker volume <span class=\"token function\">rm</span> 数据卷名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-容器映射数据卷\"><a href=\"#5-容器映射数据卷\" class=\"headerlink\" title=\"5.容器映射数据卷\"></a>5.容器映射数据卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</span>\ndocker run -d -p <span class=\"token number\">8080</span>:8080 --name mysql -v 数据卷名称:容器内部的路径 镜像id \n<span class=\"token comment\">#通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。</span>\ndocker run -d -p <span class=\"token number\">8080</span>:8080 --name mysql -v 路径<span class=\"token punctuation\">(</span>/root/自己创建的文件夹<span class=\"token punctuation\">)</span>:容器内部的路径 镜像id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Docker-Dockerfile\"><a href=\"#Docker-Dockerfile\" class=\"headerlink\" title=\"Docker Dockerfile\"></a>Docker Dockerfile</h2><h3 id=\"什么是-Dockerfile？\"><a href=\"#什么是-Dockerfile？\" class=\"headerlink\" title=\"什么是 Dockerfile？\"></a>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>\n<h3 id=\"使用-Dockerfile-定制镜像\"><a href=\"#使用-Dockerfile-定制镜像\" class=\"headerlink\" title=\"使用 Dockerfile 定制镜像\"></a>使用 Dockerfile 定制镜像</h3><pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">创建自定义镜像就需要创建一个Dockerfiler,如下为Dockerfile的语言\n \nfrom：指定当前自定义镜像依赖的环境\ncopy：将相对路径下的内容复制到自定义镜像中\nworkdir：声明镜像的默认工作目录\nrun：执行的命令，可以编写多个\ncmd：需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p>\n<p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">FROM nginx\nRUN <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'这是一个本地构建的nginx镜像'</span> <span class=\"token operator\">></span> /usr/share/nginx/html/index.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>2、FROM 和 RUN 指令的作用</strong></p>\n<p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p>\n<p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p>\n<p>shell 格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">RUN &lt;命令行命令&gt;\n# &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>exec 格式：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">RUN <span class=\"token punctuation\">[</span><span class=\"token string\">\"可执行文件\"</span>, <span class=\"token string\">\"参数1\"</span>, <span class=\"token string\">\"参数2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 例如：</span>\n<span class=\"token comment\"># RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大</p>\n<h3 id=\"开始构建镜像\"><a href=\"#开始构建镜像\" class=\"headerlink\" title=\"开始构建镜像\"></a>开始构建镜像</h3><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p>\n<p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。</p>\n<p><strong>注</strong>：最后的 <strong>.</strong> 代表本次执行的上下文路径，下一节会介绍。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\">#编写完Dockerfile后需要通过命令将其制作为镜像，并且要在Dockerfile的当前目录下，之后即可在镜像中查看到指定的镜像信息，注意最后的 .</span>\ndocker build -t 镜像名称<span class=\"token punctuation\">[</span>:tag<span class=\"token punctuation\">]</span> ./\n\n$ docker build -t nginx:test <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>\n<p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>\n<p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p>\n<blockquote>\n<p> <strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p>\n</blockquote>\n<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h1><h3 id=\"Compose-简介\"><a href=\"#Compose-简介\" class=\"headerlink\" title=\"Compose 简介\"></a>Compose 简介</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>\n<p>如果你还不了解 YML 文件配置，可以先阅读 <a href=\"https://www.runoob.com/w3cnote/yaml-intro.html\">YAML 入门教程</a>。</p>\n<p>Compose 使用的三个步骤：</p>\n<ul>\n<li>使用 Dockerfile 定义应用程序的环境。</li>\n<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>\n<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>\n</ul>\n<h3 id=\"1-下载并安装Docker-Compose\"><a href=\"#1-下载并安装Docker-Compose\" class=\"headerlink\" title=\"1.下载并安装Docker-Compose\"></a>1.下载并安装Docker-Compose</h3><h3 id=\"1-1下载Docker-Compose\"><a href=\"#1-1下载Docker-Compose\" class=\"headerlink\" title=\"1.1下载Docker-Compose\"></a>1.1下载Docker-Compose</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose下载路径：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"1-2设置权限\"><a href=\"#1-2设置权限\" class=\"headerlink\" title=\"1.2设置权限\"></a>1.2设置权限</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#需要将DockerCompose文件的名称修改一下，给予DockerCompose文件一个可执行的权限</span>\n<span class=\"token function\">mv</span> docker-compose-Linux-x86_64 docker-compose\n<span class=\"token function\">chmod</span> <span class=\"token number\">777</span> docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-3配置环境变量\"><a href=\"#1-3配置环境变量\" class=\"headerlink\" title=\"1.3配置环境变量\"></a>1.3配置环境变量</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#方便后期操作，配置一个环境变量</span>\n<span class=\"token comment\">#将docker-compose文件移动到了/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到了PATH中 </span>\n<span class=\"token function\">mv</span> docker-compose /usr/local/bin\n<span class=\"token function\">vi</span> /etc/profile\n<span class=\"token comment\">#添加内容：export PATH=$JAVA_HOME:/usr/local/bin:$PATH</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-4测试\"><a href=\"#1-4测试\" class=\"headerlink\" title=\"1.4测试\"></a>1.4测试</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">在任意目录下输入\ndocker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-Docker-Compose管理MySQL和Tomcat容器\"><a href=\"#2-Docker-Compose管理MySQL和Tomcat容器\" class=\"headerlink\" title=\"2.Docker-Compose管理MySQL和Tomcat容器\"></a>2.Docker-Compose管理MySQL和Tomcat容器</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># yml文件以key:value方式来指定配置信息</span>\n<span class=\"token comment\"># 多个配置信息以换行+缩进的方式来区分</span>\n<span class=\"token comment\"># 在docker-compose.yml文件中，不要使用制表符 </span>\n\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>  \n  <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 服务的名称    </span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always   <span class=\"token comment\"># 代表只要docker启动，那么这个容器就跟着一起启动    </span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> daocloud.io/library/mysql<span class=\"token punctuation\">:</span>5.7.4  <span class=\"token comment\"># 指定镜像路径    </span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql  <span class=\"token comment\"># 指定容器名称    </span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>      \n      <span class=\"token punctuation\">-</span> 3306<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>   <span class=\"token comment\">#  指定端口号的映射    </span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>      \n      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> root   <span class=\"token comment\"># 指定MySQL的ROOT用户登录密码      </span>\n      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai        <span class=\"token comment\"># 指定时区    </span>\n      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>     \n        <span class=\"token punctuation\">-</span> /opt/docker_mysql_tomcat/mysql_data<span class=\"token punctuation\">:</span>/var/lib/mysql   <span class=\"token comment\"># 映射数据卷 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-使用docker-compose命令管理容器\"><a href=\"#3-使用docker-compose命令管理容器\" class=\"headerlink\" title=\"3.使用docker-compose命令管理容器\"></a>3.使用docker-compose命令管理容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">在使用docker-compose的命令时，默认会在当前目录下找docker-compose.yml文件 \n<span class=\"token comment\">#1.基于docker-compose.yml启动管理的容器</span>\ndocker-compose up -d \n<span class=\"token comment\">#2.关闭并删除容器</span>\ndocker-compose down \n<span class=\"token comment\">#3.开启|关闭|重启已经存在的由docker-compose维护的容器</span>\ndocker-compose start<span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>restart \n<span class=\"token comment\">#4.查看由docker-compose管理的容器</span>\ndocker-compose <span class=\"token function\">ps</span> \n<span class=\"token comment\">#5.查看日志</span>\ndocker-compose logs -f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-docker-compose配合Dockerfile使用\"><a href=\"#4-docker-compose配合Dockerfile使用\" class=\"headerlink\" title=\"4.docker-compose配合Dockerfile使用\"></a>4.docker-compose配合Dockerfile使用</h3><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p>\n<h2 id=\"CI、CD介绍及准备\"><a href=\"#CI、CD介绍及准备\" class=\"headerlink\" title=\"CI、CD介绍及准备\"></a>CI、CD介绍及准备<img src=\"https://i.loli.net/2020/08/08/apNKYu5iIt31cPS.jpg\" alt=\"Screenshot_20200807_004021_tv.danmaku.bili\"></h2><h3 id=\"CI（continuous-intergration）持续集成\"><a href=\"#CI（continuous-intergration）持续集成\" class=\"headerlink\" title=\"CI（continuous intergration）持续集成\"></a>CI（continuous intergration）持续集成</h3><p>持续集成：编写代码时，完成了一个功能后，立即提交代码到Git仓库中，将项目重新的构建并且测试。</p>\n<p>1.快速发现错误。<br>2.防止代码偏离主分支。</p>\n<p>实现CI，需要使用到Gitlab远程仓库，先通过Docker搭建Gitlab<br>创建一个全新的虚拟机，并且至少指定4G的运行内存，4G运行内存是Gitlab推荐的内存大小。<br>并且安装Docker以及Docker-Compose</p>\n<h3 id=\"CD-持续交付-部署（Continuous-Delivery-Deployment）\"><a href=\"#CD-持续交付-部署（Continuous-Delivery-Deployment）\" class=\"headerlink\" title=\"CD 持续交付/部署（Continuous Delivery / Deployment）\"></a>CD 持续交付/部署（Continuous Delivery / Deployment）</h3><p>完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。</p>\n<p>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。</p>\n<p>对于一个成熟的 CI/CD 管道来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。由于在生产之前的管道阶段没有手动门控，因此持续部署在很大程度上都得依赖精心设计的测试自动化。</p>\n<h1 id=\"Docker-Machine\"><a href=\"#Docker-Machine\" class=\"headerlink\" title=\"Docker Machine\"></a>Docker Machine</h1><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p>\n<p>Docker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。</p>\n<p>Docker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。</p>\n<p>使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p>\n"},{"title":"python list, tuple的底层细节","top":false,"date":"2020-08-10T06:34:04.000Z","_content":"\n## 列表和元组\n\n列表和元组的区别是显然的：列表是动态的，其大小可以该标；\n\n而元组是不可变的，一旦创建就不能修改。\n\n### 实现细节\n\n**在CPython中，列表被实现为长度可变的数组。**\n\n从细节上看，Python中的列表是由**对其它对象的引用组成的连续数组**。指向这个数组的指针及其长度被保存在一个列表头结构中。这意味着，每次添加或删除一个元素时，由引用组成的数组需要该标大小（重新分配）。幸运的是，Python在创建这些数组时采用了指数过分配，所以并不是每次操作都需要改变数组的大小。但是，也因为这个原因添加或取出元素的平摊复杂度较低。\n\n> 利用 list.insert(i,item) 方法在任意位置插入一个元素——复杂度O(N)\n> 利用 list.pop(i) 或 list.remove(value) 删除一个元素——复杂度O(N)\n\n可以采用时间复杂度来衡量：\n\nindex() O(1)\nappend O(1)\npop() O(1)\npop(i) O(n)\ninsert(i,item) O(n)\ndel operator O(n)\niteration O(n)\ncontains(in) O(n)\nget slice[x:y] O(k)\ndel slice O(n)\nset slice O(n+k)\nreverse O(n)\nconcatenate O(k)\nsort O(nlogn)\nmultiply O(nk)\n\n## \n\n##### 列表和元组的区别是显然的：\n\n\n\nlist和tuple在c实现上是很相似的，对于元素数量大的时候，\n都是一个数组指针，指针指向相应的对象，找不到tuple比list快的理由。\n但对于小对象来说，tuple会有一个对象池，所以小的、重复的使用tuple还有益处的。\n\n为什么要有tuple，还有很多的合理性。\n实际情况中的确也有不少大小固定的列表结构，例如二维地理坐标等；\n另外tuple也给元素天然地赋予了只读属性。\n\n\n\n[参考https://blog.csdn.net/siyue0211/article/details/80560783](https://blog.csdn.net/siyue0211/article/details/80560783)","source":"_posts/pythonlistdict的底层细节.md","raw":"---\ntitle: python list, tuple的底层细节\ntags:\n  - Python\ncategories:\n  - Python\ntop: false\ndate: 2020-08-10 14:34:04\n---\n\n## 列表和元组\n\n列表和元组的区别是显然的：列表是动态的，其大小可以该标；\n\n而元组是不可变的，一旦创建就不能修改。\n\n### 实现细节\n\n**在CPython中，列表被实现为长度可变的数组。**\n\n从细节上看，Python中的列表是由**对其它对象的引用组成的连续数组**。指向这个数组的指针及其长度被保存在一个列表头结构中。这意味着，每次添加或删除一个元素时，由引用组成的数组需要该标大小（重新分配）。幸运的是，Python在创建这些数组时采用了指数过分配，所以并不是每次操作都需要改变数组的大小。但是，也因为这个原因添加或取出元素的平摊复杂度较低。\n\n> 利用 list.insert(i,item) 方法在任意位置插入一个元素——复杂度O(N)\n> 利用 list.pop(i) 或 list.remove(value) 删除一个元素——复杂度O(N)\n\n可以采用时间复杂度来衡量：\n\nindex() O(1)\nappend O(1)\npop() O(1)\npop(i) O(n)\ninsert(i,item) O(n)\ndel operator O(n)\niteration O(n)\ncontains(in) O(n)\nget slice[x:y] O(k)\ndel slice O(n)\nset slice O(n+k)\nreverse O(n)\nconcatenate O(k)\nsort O(nlogn)\nmultiply O(nk)\n\n## \n\n##### 列表和元组的区别是显然的：\n\n\n\nlist和tuple在c实现上是很相似的，对于元素数量大的时候，\n都是一个数组指针，指针指向相应的对象，找不到tuple比list快的理由。\n但对于小对象来说，tuple会有一个对象池，所以小的、重复的使用tuple还有益处的。\n\n为什么要有tuple，还有很多的合理性。\n实际情况中的确也有不少大小固定的列表结构，例如二维地理坐标等；\n另外tuple也给元素天然地赋予了只读属性。\n\n\n\n[参考https://blog.csdn.net/siyue0211/article/details/80560783](https://blog.csdn.net/siyue0211/article/details/80560783)","slug":"pythonlistdict的底层细节","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz395002p12mj978vf061","content":"<h2 id=\"列表和元组\"><a href=\"#列表和元组\" class=\"headerlink\" title=\"列表和元组\"></a>列表和元组</h2><p>列表和元组的区别是显然的：列表是动态的，其大小可以该标；</p>\n<p>而元组是不可变的，一旦创建就不能修改。</p>\n<h3 id=\"实现细节\"><a href=\"#实现细节\" class=\"headerlink\" title=\"实现细节\"></a>实现细节</h3><p><strong>在CPython中，列表被实现为长度可变的数组。</strong></p>\n<p>从细节上看，Python中的列表是由<strong>对其它对象的引用组成的连续数组</strong>。指向这个数组的指针及其长度被保存在一个列表头结构中。这意味着，每次添加或删除一个元素时，由引用组成的数组需要该标大小（重新分配）。幸运的是，Python在创建这些数组时采用了指数过分配，所以并不是每次操作都需要改变数组的大小。但是，也因为这个原因添加或取出元素的平摊复杂度较低。</p>\n<blockquote>\n<p>利用 list.insert(i,item) 方法在任意位置插入一个元素——复杂度O(N)<br>利用 list.pop(i) 或 list.remove(value) 删除一个元素——复杂度O(N)</p>\n</blockquote>\n<p>可以采用时间复杂度来衡量：</p>\n<p>index() O(1)<br>append O(1)<br>pop() O(1)<br>pop(i) O(n)<br>insert(i,item) O(n)<br>del operator O(n)<br>iteration O(n)<br>contains(in) O(n)<br>get slice[x:y] O(k)<br>del slice O(n)<br>set slice O(n+k)<br>reverse O(n)<br>concatenate O(k)<br>sort O(nlogn)<br>multiply O(nk)</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h5 id=\"列表和元组的区别是显然的：\"><a href=\"#列表和元组的区别是显然的：\" class=\"headerlink\" title=\"列表和元组的区别是显然的：\"></a>列表和元组的区别是显然的：</h5><p>list和tuple在c实现上是很相似的，对于元素数量大的时候，<br>都是一个数组指针，指针指向相应的对象，找不到tuple比list快的理由。<br>但对于小对象来说，tuple会有一个对象池，所以小的、重复的使用tuple还有益处的。</p>\n<p>为什么要有tuple，还有很多的合理性。<br>实际情况中的确也有不少大小固定的列表结构，例如二维地理坐标等；<br>另外tuple也给元素天然地赋予了只读属性。</p>\n<p><a href=\"https://blog.csdn.net/siyue0211/article/details/80560783\">参考https://blog.csdn.net/siyue0211/article/details/80560783</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"列表和元组\"><a href=\"#列表和元组\" class=\"headerlink\" title=\"列表和元组\"></a>列表和元组</h2><p>列表和元组的区别是显然的：列表是动态的，其大小可以该标；</p>\n<p>而元组是不可变的，一旦创建就不能修改。</p>\n<h3 id=\"实现细节\"><a href=\"#实现细节\" class=\"headerlink\" title=\"实现细节\"></a>实现细节</h3><p><strong>在CPython中，列表被实现为长度可变的数组。</strong></p>\n<p>从细节上看，Python中的列表是由<strong>对其它对象的引用组成的连续数组</strong>。指向这个数组的指针及其长度被保存在一个列表头结构中。这意味着，每次添加或删除一个元素时，由引用组成的数组需要该标大小（重新分配）。幸运的是，Python在创建这些数组时采用了指数过分配，所以并不是每次操作都需要改变数组的大小。但是，也因为这个原因添加或取出元素的平摊复杂度较低。</p>\n<blockquote>\n<p>利用 list.insert(i,item) 方法在任意位置插入一个元素——复杂度O(N)<br>利用 list.pop(i) 或 list.remove(value) 删除一个元素——复杂度O(N)</p>\n</blockquote>\n<p>可以采用时间复杂度来衡量：</p>\n<p>index() O(1)<br>append O(1)<br>pop() O(1)<br>pop(i) O(n)<br>insert(i,item) O(n)<br>del operator O(n)<br>iteration O(n)<br>contains(in) O(n)<br>get slice[x:y] O(k)<br>del slice O(n)<br>set slice O(n+k)<br>reverse O(n)<br>concatenate O(k)<br>sort O(nlogn)<br>multiply O(nk)</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h5 id=\"列表和元组的区别是显然的：\"><a href=\"#列表和元组的区别是显然的：\" class=\"headerlink\" title=\"列表和元组的区别是显然的：\"></a>列表和元组的区别是显然的：</h5><p>list和tuple在c实现上是很相似的，对于元素数量大的时候，<br>都是一个数组指针，指针指向相应的对象，找不到tuple比list快的理由。<br>但对于小对象来说，tuple会有一个对象池，所以小的、重复的使用tuple还有益处的。</p>\n<p>为什么要有tuple，还有很多的合理性。<br>实际情况中的确也有不少大小固定的列表结构，例如二维地理坐标等；<br>另外tuple也给元素天然地赋予了只读属性。</p>\n<p><a href=\"https://blog.csdn.net/siyue0211/article/details/80560783\">参考https://blog.csdn.net/siyue0211/article/details/80560783</a></p>\n"},{"title":"python小结(一)","top":false,"date":"2020-06-20T06:34:04.000Z","_content":"# python小结(一)\n\n## 1. 列出几个常用Python标准库\n\n```bash\nos, math, random, time, datetime,re, copy, csv, logging, json\n```\n## 2. python 内建数据类型有哪些\n\n1. **Booleans［布尔型］** 或为 `True［真］` 或为 `False［假］`。\n2. **Numbers［数值型］** 可以是 Integers［整数］（`1` 和 `2`）、Floats［浮点数］（`1.1` 和 `1.2`）、Fractions［分数］（`1/2` 和 `2/3`）；甚至是 [Complex Number［复数］](http://en.wikipedia.org/wiki/Complex_number)。\n3. **Strings［字符串型］** 是 Unicode 字符序列，*例如：* 一份 html 文档。\n4. **Bytes［字节］** 和 **Byte Arrays［字节数组］**， *例如:* 一份 jpeg 图像文件。\n5. **Lists［列表］** 是值的有序序列。\n6. **Tuples［元组］** 是有序而不可变的值序列。\n7. **Sets［集合］** 是装满无序值的包裹。\n8. **Dictionaries［字典］** 是键值对的无序包裹。\n\n## 3. 简述 with 方法打开处理文件帮我们做了什么\n\n```python\nfile = open('a.txt','w')\ntry:\n    file.write('test')\nexcept:\n    pass\nfinally:\n    file.close()\n# with方法相当于以上代码finally中的file.close()操作\n```\n\n## 4. 列出 Python 中可变数据类型和不可变数据类型，为什么\n> 不可变数据：Number（数字）、String（字符串）、Tuple（元组）；\n> 可变数据：List（列表）、Dictionary（字典）、Sets（集合）\n\n|          | list | tuple | set          | dict               |\n| :------: | ---- | ----- | ------------ | ------------------ |\n| 可否读写 | 读写 | 只读  | 读写         | 读写               |\n| 可否重复 | 是   | 是    | 否           | 是                 |\n| 存储方式 | 值   | 值    | 键(不能重复) | 键值对(键不能重复) |\n| 是否有序 | 有序 | 有序  | 无序         | 无序，自动正序     |\n|          |      |       |              |                    |\n\n\n\n## 5. Python 获取当前日期\n\n```python\nimport time\nnow = time.strftime(\"%Y-%m-%d %H:%M:%S %A\")\nprint(now)\n```\n\n## 6. 统计字符串每个单词出现的次数\n\n```python\ndef count(str):\n    count_words = str.lower().split()\n    count_word = {}\n    for word in count_words:\n        if word not in count_word.keys():\n            count_word[word] = 1\n        else:\n            count_word[word] += 1\n    return count_word\n\nprint(count('I can because i think i can'))\n# {'i': 3, 'can': 2, 'because': 1, 'think': 1}\n\n# 方法二\n# from collections import Counter\n\n# str = 'I can because i think i can'\n# counts = Counter(str.lower().split())\n# print(counts, type(counts), help(counts))\n```\n\n\n\n## 7. 用 Python 删除文件和用 Linux 命令删除文件的方法\n\n```python\nimport os\n# python删除文件\nos.remove(path)\n# python删除目录\nos.removedirs(path)\n```\n\n```bash\nrm [选项] 文件\n\n选项说明：\n-f　　　　-force　　　　　　忽略不存在的文件，强制删除，无任何提示\n-i　　　　--interactive　　　 进行交互式地删除\n-r | -R　　--recursive　　　  递归式地删除列出的目录下的所有目录和文件\n-v　　　   --verbose　　　　详细显示进行的步骤\n```\n\n##  8. 举例说明异常模块中 try except else finally 的相关意义\n\n```python\ntry:\n    ------code-----\nexcept Exception as e: # 抛出异常之后将会执行\n    print(e)\nelse:  # 没有异常将会执行\n    print('no Exception')\nfinally:  # 有没有异常都会执行\n    print('execute is finish')\n```\n\n## 9. 遇到报错如何处理\n\n```Python\n查看报错行和错误类型，debug找出问题所在进行处理。\n常见错误类型有以下几种：\n1. TypeError: cannot concatenate 'str' and 'int' objects  \n    不能连接str和int对象\n2. IndexError: list index out of range\n    索引错误:列表索引超出范围\n3. IndentationError: expected an indented block\n    缩进错误:预期一个缩进快(意思需要一个缩进块)\n4. IndentationError: unexpected indent\n    缩进错误:意外缩进(这里不应缩进)\n5. TypeError: 'tuple' object does not support item assignment\n    类型错误：元组对象不支持元素值重新分配，也就是不能尝试去修改元组中的任一个元素的值\n6. SyntaxError: invalid syntax\n    语法错误 非法的语法\n7. AttributeError: 'tuple' object has no attribute 'remove'\n    attribute 属性 object对象\n8. KeyError: 'XXX'\n    key键错误，没有指定的键值'XXX'\n```\n\n## 10. 在浏览器输入 URL，按下回车后的流程\n\n> 1. URL 解析\n> 2. DNS 查询\n> 3. TCP 连接\n> 4. 处理请求\n> 5. 接受响应\n> 6. 渲染页面\n\n\t1. 浏览器向 DNS 服务器请求解析该 URL 中域名对应的 IP 地址；\n\t2. 解析出 IP 地址之后，根据该 IP 地址和端口，和服务器建立 TCP 连接；\n\t3. 浏览器发出读取文件(URL 中域名和后面部分对应的文件)的HTTP 请求，该请求报文作为TCP 三次握手的第三个报文的数据发送给服务器；\n\t4. 服务器对浏览器的请求作出响应，并把对应的html文本发送给浏览器；\n\t5. 释放 TCP连接；\n\t6. 浏览器将html文本渲染显示内容。\n1、首先进行缓存查找、如果找不到就进行DNS解析，解析出对应的IP地址\n\n2、建立TCP连接，也就是三次握手\n\n3、客户端向服务器发送http请求（协议版本号、目标主机地址、请求资源目录等）\n\n4、服务器处理请求（对收到的http请求进行解析，做出相应的处理（包括：响应类型、响应描述信息、响应结果等））\n\n5、浏览器解析网页（对收到的响应进行解析）\n\n6、保持或释放连接\n\n##### ***\\*小结TCP与UDP的区别：\\****\n\n1.基于连接与无连接； \n2.对系统资源的要求（TCP较多，UDP少）； \n3.UDP程序结构较简单； \n4.流模式与数据报模式 ；\n5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。\n\n三次握手\n\n![三次握手](https://i.loli.net/2020/08/18/ty39nKZ6HzuT4vN.png)\n\n四次挥手\n\n![四次挥手](https://i.loli.net/2020/08/18/hSQbi5rINZc4KoO.png)","source":"_posts/python小结(一).md","raw":"---\ntitle: python小结(一)\ntags:\n  - Python\ncategories:\n  - Python\ntop: false\ndate: 2020-06-20 14:34:04\n---\n# python小结(一)\n\n## 1. 列出几个常用Python标准库\n\n```bash\nos, math, random, time, datetime,re, copy, csv, logging, json\n```\n## 2. python 内建数据类型有哪些\n\n1. **Booleans［布尔型］** 或为 `True［真］` 或为 `False［假］`。\n2. **Numbers［数值型］** 可以是 Integers［整数］（`1` 和 `2`）、Floats［浮点数］（`1.1` 和 `1.2`）、Fractions［分数］（`1/2` 和 `2/3`）；甚至是 [Complex Number［复数］](http://en.wikipedia.org/wiki/Complex_number)。\n3. **Strings［字符串型］** 是 Unicode 字符序列，*例如：* 一份 html 文档。\n4. **Bytes［字节］** 和 **Byte Arrays［字节数组］**， *例如:* 一份 jpeg 图像文件。\n5. **Lists［列表］** 是值的有序序列。\n6. **Tuples［元组］** 是有序而不可变的值序列。\n7. **Sets［集合］** 是装满无序值的包裹。\n8. **Dictionaries［字典］** 是键值对的无序包裹。\n\n## 3. 简述 with 方法打开处理文件帮我们做了什么\n\n```python\nfile = open('a.txt','w')\ntry:\n    file.write('test')\nexcept:\n    pass\nfinally:\n    file.close()\n# with方法相当于以上代码finally中的file.close()操作\n```\n\n## 4. 列出 Python 中可变数据类型和不可变数据类型，为什么\n> 不可变数据：Number（数字）、String（字符串）、Tuple（元组）；\n> 可变数据：List（列表）、Dictionary（字典）、Sets（集合）\n\n|          | list | tuple | set          | dict               |\n| :------: | ---- | ----- | ------------ | ------------------ |\n| 可否读写 | 读写 | 只读  | 读写         | 读写               |\n| 可否重复 | 是   | 是    | 否           | 是                 |\n| 存储方式 | 值   | 值    | 键(不能重复) | 键值对(键不能重复) |\n| 是否有序 | 有序 | 有序  | 无序         | 无序，自动正序     |\n|          |      |       |              |                    |\n\n\n\n## 5. Python 获取当前日期\n\n```python\nimport time\nnow = time.strftime(\"%Y-%m-%d %H:%M:%S %A\")\nprint(now)\n```\n\n## 6. 统计字符串每个单词出现的次数\n\n```python\ndef count(str):\n    count_words = str.lower().split()\n    count_word = {}\n    for word in count_words:\n        if word not in count_word.keys():\n            count_word[word] = 1\n        else:\n            count_word[word] += 1\n    return count_word\n\nprint(count('I can because i think i can'))\n# {'i': 3, 'can': 2, 'because': 1, 'think': 1}\n\n# 方法二\n# from collections import Counter\n\n# str = 'I can because i think i can'\n# counts = Counter(str.lower().split())\n# print(counts, type(counts), help(counts))\n```\n\n\n\n## 7. 用 Python 删除文件和用 Linux 命令删除文件的方法\n\n```python\nimport os\n# python删除文件\nos.remove(path)\n# python删除目录\nos.removedirs(path)\n```\n\n```bash\nrm [选项] 文件\n\n选项说明：\n-f　　　　-force　　　　　　忽略不存在的文件，强制删除，无任何提示\n-i　　　　--interactive　　　 进行交互式地删除\n-r | -R　　--recursive　　　  递归式地删除列出的目录下的所有目录和文件\n-v　　　   --verbose　　　　详细显示进行的步骤\n```\n\n##  8. 举例说明异常模块中 try except else finally 的相关意义\n\n```python\ntry:\n    ------code-----\nexcept Exception as e: # 抛出异常之后将会执行\n    print(e)\nelse:  # 没有异常将会执行\n    print('no Exception')\nfinally:  # 有没有异常都会执行\n    print('execute is finish')\n```\n\n## 9. 遇到报错如何处理\n\n```Python\n查看报错行和错误类型，debug找出问题所在进行处理。\n常见错误类型有以下几种：\n1. TypeError: cannot concatenate 'str' and 'int' objects  \n    不能连接str和int对象\n2. IndexError: list index out of range\n    索引错误:列表索引超出范围\n3. IndentationError: expected an indented block\n    缩进错误:预期一个缩进快(意思需要一个缩进块)\n4. IndentationError: unexpected indent\n    缩进错误:意外缩进(这里不应缩进)\n5. TypeError: 'tuple' object does not support item assignment\n    类型错误：元组对象不支持元素值重新分配，也就是不能尝试去修改元组中的任一个元素的值\n6. SyntaxError: invalid syntax\n    语法错误 非法的语法\n7. AttributeError: 'tuple' object has no attribute 'remove'\n    attribute 属性 object对象\n8. KeyError: 'XXX'\n    key键错误，没有指定的键值'XXX'\n```\n\n## 10. 在浏览器输入 URL，按下回车后的流程\n\n> 1. URL 解析\n> 2. DNS 查询\n> 3. TCP 连接\n> 4. 处理请求\n> 5. 接受响应\n> 6. 渲染页面\n\n\t1. 浏览器向 DNS 服务器请求解析该 URL 中域名对应的 IP 地址；\n\t2. 解析出 IP 地址之后，根据该 IP 地址和端口，和服务器建立 TCP 连接；\n\t3. 浏览器发出读取文件(URL 中域名和后面部分对应的文件)的HTTP 请求，该请求报文作为TCP 三次握手的第三个报文的数据发送给服务器；\n\t4. 服务器对浏览器的请求作出响应，并把对应的html文本发送给浏览器；\n\t5. 释放 TCP连接；\n\t6. 浏览器将html文本渲染显示内容。\n1、首先进行缓存查找、如果找不到就进行DNS解析，解析出对应的IP地址\n\n2、建立TCP连接，也就是三次握手\n\n3、客户端向服务器发送http请求（协议版本号、目标主机地址、请求资源目录等）\n\n4、服务器处理请求（对收到的http请求进行解析，做出相应的处理（包括：响应类型、响应描述信息、响应结果等））\n\n5、浏览器解析网页（对收到的响应进行解析）\n\n6、保持或释放连接\n\n##### ***\\*小结TCP与UDP的区别：\\****\n\n1.基于连接与无连接； \n2.对系统资源的要求（TCP较多，UDP少）； \n3.UDP程序结构较简单； \n4.流模式与数据报模式 ；\n5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。\n\n三次握手\n\n![三次握手](https://i.loli.net/2020/08/18/ty39nKZ6HzuT4vN.png)\n\n四次挥手\n\n![四次挥手](https://i.loli.net/2020/08/18/hSQbi5rINZc4KoO.png)","slug":"python小结(一)","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz396002r12mjcz16gmgc","content":"<h1 id=\"python小结-一\"><a href=\"#python小结-一\" class=\"headerlink\" title=\"python小结(一)\"></a>python小结(一)</h1><h2 id=\"1-列出几个常用Python标准库\"><a href=\"#1-列出几个常用Python标准库\" class=\"headerlink\" title=\"1. 列出几个常用Python标准库\"></a>1. 列出几个常用Python标准库</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">os, math, random, time, datetime,re, copy, csv, logging, json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"2-python-内建数据类型有哪些\"><a href=\"#2-python-内建数据类型有哪些\" class=\"headerlink\" title=\"2. python 内建数据类型有哪些\"></a>2. python 内建数据类型有哪些</h2><ol>\n<li><strong>Booleans［布尔型］</strong> 或为 <code>True［真］</code> 或为 <code>False［假］</code>。</li>\n<li><strong>Numbers［数值型］</strong> 可以是 Integers［整数］（<code>1</code> 和 <code>2</code>）、Floats［浮点数］（<code>1.1</code> 和 <code>1.2</code>）、Fractions［分数］（<code>1/2</code> 和 <code>2/3</code>）；甚至是 <a href=\"http://en.wikipedia.org/wiki/Complex_number\">Complex Number［复数］</a>。</li>\n<li><strong>Strings［字符串型］</strong> 是 Unicode 字符序列，<em>例如：</em> 一份 html 文档。</li>\n<li><strong>Bytes［字节］</strong> 和 <strong>Byte Arrays［字节数组］</strong>， <em>例如:</em> 一份 jpeg 图像文件。</li>\n<li><strong>Lists［列表］</strong> 是值的有序序列。</li>\n<li><strong>Tuples［元组］</strong> 是有序而不可变的值序列。</li>\n<li><strong>Sets［集合］</strong> 是装满无序值的包裹。</li>\n<li><strong>Dictionaries［字典］</strong> 是键值对的无序包裹。</li>\n</ol>\n<h2 id=\"3-简述-with-方法打开处理文件帮我们做了什么\"><a href=\"#3-简述-with-方法打开处理文件帮我们做了什么\" class=\"headerlink\" title=\"3. 简述 with 方法打开处理文件帮我们做了什么\"></a>3. 简述 with 方法打开处理文件帮我们做了什么</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># with方法相当于以上代码finally中的file.close()操作</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-列出-Python-中可变数据类型和不可变数据类型，为什么\"><a href=\"#4-列出-Python-中可变数据类型和不可变数据类型，为什么\" class=\"headerlink\" title=\"4. 列出 Python 中可变数据类型和不可变数据类型，为什么\"></a>4. 列出 Python 中可变数据类型和不可变数据类型，为什么</h2><blockquote>\n<p>不可变数据：Number（数字）、String（字符串）、Tuple（元组）；<br>可变数据：List（列表）、Dictionary（字典）、Sets（集合）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th>list</th>\n<th>tuple</th>\n<th>set</th>\n<th>dict</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">可否读写</td>\n<td>读写</td>\n<td>只读</td>\n<td>读写</td>\n<td>读写</td>\n</tr>\n<tr>\n<td align=\"center\">可否重复</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td align=\"center\">存储方式</td>\n<td>值</td>\n<td>值</td>\n<td>键(不能重复)</td>\n<td>键值对(键不能重复)</td>\n</tr>\n<tr>\n<td align=\"center\">是否有序</td>\n<td>有序</td>\n<td>有序</td>\n<td>无序</td>\n<td>无序，自动正序</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"5-Python-获取当前日期\"><a href=\"#5-Python-获取当前日期\" class=\"headerlink\" title=\"5. Python 获取当前日期\"></a>5. Python 获取当前日期</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\nnow <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y-%m-%d %H:%M:%S %A\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-统计字符串每个单词出现的次数\"><a href=\"#6-统计字符串每个单词出现的次数\" class=\"headerlink\" title=\"6. 统计字符串每个单词出现的次数\"></a>6. 统计字符串每个单词出现的次数</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count_words <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    count_word <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> count_words<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> word <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> count_word<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            count_word<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            count_word<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> count_word\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'I can because i think i can'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {'i': 3, 'can': 2, 'because': 1, 'think': 1}</span>\n\n<span class=\"token comment\"># 方法二</span>\n<span class=\"token comment\"># from collections import Counter</span>\n\n<span class=\"token comment\"># str = 'I can because i think i can'</span>\n<span class=\"token comment\"># counts = Counter(str.lower().split())</span>\n<span class=\"token comment\"># print(counts, type(counts), help(counts))</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"7-用-Python-删除文件和用-Linux-命令删除文件的方法\"><a href=\"#7-用-Python-删除文件和用-Linux-命令删除文件的方法\" class=\"headerlink\" title=\"7. 用 Python 删除文件和用 Linux 命令删除文件的方法\"></a>7. 用 Python 删除文件和用 Linux 命令删除文件的方法</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token comment\"># python删除文件</span>\nos<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># python删除目录</span>\nos<span class=\"token punctuation\">.</span>removedirs<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件\n\n选项说明：\n-f　　　　-force　　　　　　忽略不存在的文件，强制删除，无任何提示\n-i　　　　--interactive　　　 进行交互式地删除\n-r <span class=\"token operator\">|</span> -R　　--recursive　　　  递归式地删除列出的目录下的所有目录和文件\n-v　　　   --verbose　　　　详细显示进行的步骤<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-举例说明异常模块中-try-except-else-finally-的相关意义\"><a href=\"#8-举例说明异常模块中-try-except-else-finally-的相关意义\" class=\"headerlink\" title=\"8. 举例说明异常模块中 try except else finally 的相关意义\"></a>8. 举例说明异常模块中 try except else finally 的相关意义</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>code<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 抛出异常之后将会执行</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 没有异常将会执行</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'no Exception'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 有没有异常都会执行</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'execute is finish'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"9-遇到报错如何处理\"><a href=\"#9-遇到报错如何处理\" class=\"headerlink\" title=\"9. 遇到报错如何处理\"></a>9. 遇到报错如何处理</h2><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">查看报错行和错误类型，debug找出问题所在进行处理。\n常见错误类型有以下几种：\n1. TypeError: cannot concatenate 'str' and 'int' objects  \n    不能连接str和int对象\n2. IndexError: list index out of range\n    索引错误:列表索引超出范围\n3. IndentationError: expected an indented block\n    缩进错误:预期一个缩进快(意思需要一个缩进块)\n4. IndentationError: unexpected indent\n    缩进错误:意外缩进(这里不应缩进)\n5. TypeError: 'tuple' object does not support item assignment\n    类型错误：元组对象不支持元素值重新分配，也就是不能尝试去修改元组中的任一个元素的值\n6. SyntaxError: invalid syntax\n    语法错误 非法的语法\n7. AttributeError: 'tuple' object has no attribute 'remove'\n    attribute 属性 object对象\n8. KeyError: 'XXX'\n    key键错误，没有指定的键值'XXX'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"10-在浏览器输入-URL，按下回车后的流程\"><a href=\"#10-在浏览器输入-URL，按下回车后的流程\" class=\"headerlink\" title=\"10. 在浏览器输入 URL，按下回车后的流程\"></a>10. 在浏览器输入 URL，按下回车后的流程</h2><blockquote>\n<ol>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>处理请求</li>\n<li>接受响应</li>\n<li>渲染页面</li>\n</ol>\n</blockquote>\n<pre><code>1. 浏览器向 DNS 服务器请求解析该 URL 中域名对应的 IP 地址；\n2. 解析出 IP 地址之后，根据该 IP 地址和端口，和服务器建立 TCP 连接；\n3. 浏览器发出读取文件(URL 中域名和后面部分对应的文件)的HTTP 请求，该请求报文作为TCP 三次握手的第三个报文的数据发送给服务器；\n4. 服务器对浏览器的请求作出响应，并把对应的html文本发送给浏览器；\n5. 释放 TCP连接；\n6. 浏览器将html文本渲染显示内容。</code></pre>\n<p>1、首先进行缓存查找、如果找不到就进行DNS解析，解析出对应的IP地址</p>\n<p>2、建立TCP连接，也就是三次握手</p>\n<p>3、客户端向服务器发送http请求（协议版本号、目标主机地址、请求资源目录等）</p>\n<p>4、服务器处理请求（对收到的http请求进行解析，做出相应的处理（包括：响应类型、响应描述信息、响应结果等））</p>\n<p>5、浏览器解析网页（对收到的响应进行解析）</p>\n<p>6、保持或释放连接</p>\n<h5 id=\"小结TCP与UDP的区别：\"><a href=\"#小结TCP与UDP的区别：\" class=\"headerlink\" title=\"\\小结TCP与UDP的区别：**\"></a><strong><em>\\</em>小结TCP与UDP的区别：**</strong></h5><p>1.基于连接与无连接；<br>2.对系统资源的要求（TCP较多，UDP少）；<br>3.UDP程序结构较简单；<br>4.流模式与数据报模式 ；<br>5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。</p>\n<p>三次握手</p>\n<p><img src=\"https://i.loli.net/2020/08/18/ty39nKZ6HzuT4vN.png\" alt=\"三次握手\"></p>\n<p>四次挥手</p>\n<p><img src=\"https://i.loli.net/2020/08/18/hSQbi5rINZc4KoO.png\" alt=\"四次挥手\"></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"python小结-一\"><a href=\"#python小结-一\" class=\"headerlink\" title=\"python小结(一)\"></a>python小结(一)</h1><h2 id=\"1-列出几个常用Python标准库\"><a href=\"#1-列出几个常用Python标准库\" class=\"headerlink\" title=\"1. 列出几个常用Python标准库\"></a>1. 列出几个常用Python标准库</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">os, math, random, time, datetime,re, copy, csv, logging, json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"2-python-内建数据类型有哪些\"><a href=\"#2-python-内建数据类型有哪些\" class=\"headerlink\" title=\"2. python 内建数据类型有哪些\"></a>2. python 内建数据类型有哪些</h2><ol>\n<li><strong>Booleans［布尔型］</strong> 或为 <code>True［真］</code> 或为 <code>False［假］</code>。</li>\n<li><strong>Numbers［数值型］</strong> 可以是 Integers［整数］（<code>1</code> 和 <code>2</code>）、Floats［浮点数］（<code>1.1</code> 和 <code>1.2</code>）、Fractions［分数］（<code>1/2</code> 和 <code>2/3</code>）；甚至是 <a href=\"http://en.wikipedia.org/wiki/Complex_number\">Complex Number［复数］</a>。</li>\n<li><strong>Strings［字符串型］</strong> 是 Unicode 字符序列，<em>例如：</em> 一份 html 文档。</li>\n<li><strong>Bytes［字节］</strong> 和 <strong>Byte Arrays［字节数组］</strong>， <em>例如:</em> 一份 jpeg 图像文件。</li>\n<li><strong>Lists［列表］</strong> 是值的有序序列。</li>\n<li><strong>Tuples［元组］</strong> 是有序而不可变的值序列。</li>\n<li><strong>Sets［集合］</strong> 是装满无序值的包裹。</li>\n<li><strong>Dictionaries［字典］</strong> 是键值对的无序包裹。</li>\n</ol>\n<h2 id=\"3-简述-with-方法打开处理文件帮我们做了什么\"><a href=\"#3-简述-with-方法打开处理文件帮我们做了什么\" class=\"headerlink\" title=\"3. 简述 with 方法打开处理文件帮我们做了什么\"></a>3. 简述 with 方法打开处理文件帮我们做了什么</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># with方法相当于以上代码finally中的file.close()操作</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-列出-Python-中可变数据类型和不可变数据类型，为什么\"><a href=\"#4-列出-Python-中可变数据类型和不可变数据类型，为什么\" class=\"headerlink\" title=\"4. 列出 Python 中可变数据类型和不可变数据类型，为什么\"></a>4. 列出 Python 中可变数据类型和不可变数据类型，为什么</h2><blockquote>\n<p>不可变数据：Number（数字）、String（字符串）、Tuple（元组）；<br>可变数据：List（列表）、Dictionary（字典）、Sets（集合）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th>list</th>\n<th>tuple</th>\n<th>set</th>\n<th>dict</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">可否读写</td>\n<td>读写</td>\n<td>只读</td>\n<td>读写</td>\n<td>读写</td>\n</tr>\n<tr>\n<td align=\"center\">可否重复</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td align=\"center\">存储方式</td>\n<td>值</td>\n<td>值</td>\n<td>键(不能重复)</td>\n<td>键值对(键不能重复)</td>\n</tr>\n<tr>\n<td align=\"center\">是否有序</td>\n<td>有序</td>\n<td>有序</td>\n<td>无序</td>\n<td>无序，自动正序</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"5-Python-获取当前日期\"><a href=\"#5-Python-获取当前日期\" class=\"headerlink\" title=\"5. Python 获取当前日期\"></a>5. Python 获取当前日期</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\nnow <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y-%m-%d %H:%M:%S %A\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-统计字符串每个单词出现的次数\"><a href=\"#6-统计字符串每个单词出现的次数\" class=\"headerlink\" title=\"6. 统计字符串每个单词出现的次数\"></a>6. 统计字符串每个单词出现的次数</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count_words <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    count_word <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> count_words<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> word <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> count_word<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            count_word<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            count_word<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> count_word\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'I can because i think i can'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;'i': 3, 'can': 2, 'because': 1, 'think': 1&#125;</span>\n\n<span class=\"token comment\"># 方法二</span>\n<span class=\"token comment\"># from collections import Counter</span>\n\n<span class=\"token comment\"># str = 'I can because i think i can'</span>\n<span class=\"token comment\"># counts = Counter(str.lower().split())</span>\n<span class=\"token comment\"># print(counts, type(counts), help(counts))</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"7-用-Python-删除文件和用-Linux-命令删除文件的方法\"><a href=\"#7-用-Python-删除文件和用-Linux-命令删除文件的方法\" class=\"headerlink\" title=\"7. 用 Python 删除文件和用 Linux 命令删除文件的方法\"></a>7. 用 Python 删除文件和用 Linux 命令删除文件的方法</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token comment\"># python删除文件</span>\nos<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># python删除目录</span>\nos<span class=\"token punctuation\">.</span>removedirs<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件\n\n选项说明：\n-f　　　　-force　　　　　　忽略不存在的文件，强制删除，无任何提示\n-i　　　　--interactive　　　 进行交互式地删除\n-r <span class=\"token operator\">|</span> -R　　--recursive　　　  递归式地删除列出的目录下的所有目录和文件\n-v　　　   --verbose　　　　详细显示进行的步骤<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-举例说明异常模块中-try-except-else-finally-的相关意义\"><a href=\"#8-举例说明异常模块中-try-except-else-finally-的相关意义\" class=\"headerlink\" title=\"8. 举例说明异常模块中 try except else finally 的相关意义\"></a>8. 举例说明异常模块中 try except else finally 的相关意义</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>code<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 抛出异常之后将会执行</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 没有异常将会执行</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'no Exception'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 有没有异常都会执行</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'execute is finish'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"9-遇到报错如何处理\"><a href=\"#9-遇到报错如何处理\" class=\"headerlink\" title=\"9. 遇到报错如何处理\"></a>9. 遇到报错如何处理</h2><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">查看报错行和错误类型，debug找出问题所在进行处理。\n常见错误类型有以下几种：\n1. TypeError: cannot concatenate &#39;str&#39; and &#39;int&#39; objects  \n    不能连接str和int对象\n2. IndexError: list index out of range\n    索引错误:列表索引超出范围\n3. IndentationError: expected an indented block\n    缩进错误:预期一个缩进快(意思需要一个缩进块)\n4. IndentationError: unexpected indent\n    缩进错误:意外缩进(这里不应缩进)\n5. TypeError: &#39;tuple&#39; object does not support item assignment\n    类型错误：元组对象不支持元素值重新分配，也就是不能尝试去修改元组中的任一个元素的值\n6. SyntaxError: invalid syntax\n    语法错误 非法的语法\n7. AttributeError: &#39;tuple&#39; object has no attribute &#39;remove&#39;\n    attribute 属性 object对象\n8. KeyError: &#39;XXX&#39;\n    key键错误，没有指定的键值&#39;XXX&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"10-在浏览器输入-URL，按下回车后的流程\"><a href=\"#10-在浏览器输入-URL，按下回车后的流程\" class=\"headerlink\" title=\"10. 在浏览器输入 URL，按下回车后的流程\"></a>10. 在浏览器输入 URL，按下回车后的流程</h2><blockquote>\n<ol>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>处理请求</li>\n<li>接受响应</li>\n<li>渲染页面</li>\n</ol>\n</blockquote>\n<pre><code>1. 浏览器向 DNS 服务器请求解析该 URL 中域名对应的 IP 地址；\n2. 解析出 IP 地址之后，根据该 IP 地址和端口，和服务器建立 TCP 连接；\n3. 浏览器发出读取文件(URL 中域名和后面部分对应的文件)的HTTP 请求，该请求报文作为TCP 三次握手的第三个报文的数据发送给服务器；\n4. 服务器对浏览器的请求作出响应，并把对应的html文本发送给浏览器；\n5. 释放 TCP连接；\n6. 浏览器将html文本渲染显示内容。</code></pre>\n<p>1、首先进行缓存查找、如果找不到就进行DNS解析，解析出对应的IP地址</p>\n<p>2、建立TCP连接，也就是三次握手</p>\n<p>3、客户端向服务器发送http请求（协议版本号、目标主机地址、请求资源目录等）</p>\n<p>4、服务器处理请求（对收到的http请求进行解析，做出相应的处理（包括：响应类型、响应描述信息、响应结果等））</p>\n<p>5、浏览器解析网页（对收到的响应进行解析）</p>\n<p>6、保持或释放连接</p>\n<h5 id=\"小结TCP与UDP的区别：\"><a href=\"#小结TCP与UDP的区别：\" class=\"headerlink\" title=\"\\小结TCP与UDP的区别：**\"></a><strong><em>\\</em>小结TCP与UDP的区别：**</strong></h5><p>1.基于连接与无连接；<br>2.对系统资源的要求（TCP较多，UDP少）；<br>3.UDP程序结构较简单；<br>4.流模式与数据报模式 ；<br>5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。</p>\n<p>三次握手</p>\n<p><img src=\"https://i.loli.net/2020/08/18/ty39nKZ6HzuT4vN.png\" alt=\"三次握手\"></p>\n<p>四次挥手</p>\n<p><img src=\"https://i.loli.net/2020/08/18/hSQbi5rINZc4KoO.png\" alt=\"四次挥手\"></p>\n"},{"title":"python小结(二)","top":false,"date":"2020-06-21T06:34:04.000Z","_content":"# python小结(二)\n\n# 语言特性和编码规范\n\n## 1. 简述解释型和编译型编程语言\n\n```\n解释型:就是边解释边执行\n编译性:编译后再执行\n```\n\n## 2. Python3 和 2 之间的区别\n\n```python\n1.print函数:（Python3中print为一个函数，必须用括号括起来；Python2中print为class）\n2.通过input()解析用户的输入：（Python3中input得到的为str；Python2的input的到的为int型，Python2的raw_input得到的为str类型）\n3.整数：Python3中/表示真除，%表示取余，//结果取整；Python2中带上小数点/表示真除，%表示取余，//结果取整\n4.xrange模块改为range\n5.比较操作符区别：Python2中任意两个对象都可以比较，Python3中只有同一数据类型的对象可以比较\n6.编码：Python2中使用 ASCII 码作为默认编码方式，Python3默认使用utf-8编码\n```\n\n## 3. range和 xrange 的区别\n\n```python\n1.range返回的是一个list对象，而xrange返回的是一个生成器对象(xrange object)。\n2.xrange则不会直接生成一个list，而是每次调用返回其中的一个值，内存空间使用极少，因而性能非常好。python3 取消了xrange（）函数\n```\n\n## 4. 什么是PEP8\n\n```python\n《Python Enhancement Proposal #8》（8 号 Python 增强提案）又叫 PEP8，他针对的 Python 代码格式而编订的风格指南。\n1.缩进。4个空格的缩进（编辑器都可以完成此功能），不使用Tab，更不能混合使用Tab和空格。\n2.每行最大长度79，换行可以使用反斜杠，最好使用圆括号。换行点要在操作符的后边敲回车。\n3.类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。\n4.模块导入的顺序：按标准、三方和自己编写顺序依次导入，之间空一行。\n5.不要在一句import中写多个库，比如import os, sys不推荐\n6.避免不必要的空格\n7.注释必须要有\n8.函数命名要遵循规范\n9.尽可能使用‘is’‘is not’取代‘==’，比如if x is not None 要优于if x。\n10.使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。\n11.异常中try的代码尽可能少。\n```\n\n# 5. 类型注释\n\n```python\ndef greeting(name: str) -> str:\n    return 'Hello ' + name\n\n# python3.6后增加了类型注解\na: int = 123\nb: str = 'hello'\n\n# 更进一步，如果你需要指明一个全部由整数组成的列表：\nfrom typing import List\nl: List[int] = [1, 2, 3]\n```\n\n> 在函数 `greeting` 中，参数 `name` 预期是 [`str`](https://docs.python.org/zh-cn/3/library/stdtypes.html#str) 类型，并且返回 [`str`](https://docs.python.org/zh-cn/3/library/stdtypes.html#str) 类型。子类型允许作为参数。","source":"_posts/python小结(二).md","raw":"---\ntitle: python小结(二)\ntags:\n  - Python\ncategories:\n  - Python\ntop: false\ndate: 2020-06-21 14:34:04\n---\n# python小结(二)\n\n# 语言特性和编码规范\n\n## 1. 简述解释型和编译型编程语言\n\n```\n解释型:就是边解释边执行\n编译性:编译后再执行\n```\n\n## 2. Python3 和 2 之间的区别\n\n```python\n1.print函数:（Python3中print为一个函数，必须用括号括起来；Python2中print为class）\n2.通过input()解析用户的输入：（Python3中input得到的为str；Python2的input的到的为int型，Python2的raw_input得到的为str类型）\n3.整数：Python3中/表示真除，%表示取余，//结果取整；Python2中带上小数点/表示真除，%表示取余，//结果取整\n4.xrange模块改为range\n5.比较操作符区别：Python2中任意两个对象都可以比较，Python3中只有同一数据类型的对象可以比较\n6.编码：Python2中使用 ASCII 码作为默认编码方式，Python3默认使用utf-8编码\n```\n\n## 3. range和 xrange 的区别\n\n```python\n1.range返回的是一个list对象，而xrange返回的是一个生成器对象(xrange object)。\n2.xrange则不会直接生成一个list，而是每次调用返回其中的一个值，内存空间使用极少，因而性能非常好。python3 取消了xrange（）函数\n```\n\n## 4. 什么是PEP8\n\n```python\n《Python Enhancement Proposal #8》（8 号 Python 增强提案）又叫 PEP8，他针对的 Python 代码格式而编订的风格指南。\n1.缩进。4个空格的缩进（编辑器都可以完成此功能），不使用Tab，更不能混合使用Tab和空格。\n2.每行最大长度79，换行可以使用反斜杠，最好使用圆括号。换行点要在操作符的后边敲回车。\n3.类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。\n4.模块导入的顺序：按标准、三方和自己编写顺序依次导入，之间空一行。\n5.不要在一句import中写多个库，比如import os, sys不推荐\n6.避免不必要的空格\n7.注释必须要有\n8.函数命名要遵循规范\n9.尽可能使用‘is’‘is not’取代‘==’，比如if x is not None 要优于if x。\n10.使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。\n11.异常中try的代码尽可能少。\n```\n\n# 5. 类型注释\n\n```python\ndef greeting(name: str) -> str:\n    return 'Hello ' + name\n\n# python3.6后增加了类型注解\na: int = 123\nb: str = 'hello'\n\n# 更进一步，如果你需要指明一个全部由整数组成的列表：\nfrom typing import List\nl: List[int] = [1, 2, 3]\n```\n\n> 在函数 `greeting` 中，参数 `name` 预期是 [`str`](https://docs.python.org/zh-cn/3/library/stdtypes.html#str) 类型，并且返回 [`str`](https://docs.python.org/zh-cn/3/library/stdtypes.html#str) 类型。子类型允许作为参数。","slug":"python小结(二)","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz396002v12mj81q563e8","content":"<h1 id=\"python小结-二\"><a href=\"#python小结-二\" class=\"headerlink\" title=\"python小结(二)\"></a>python小结(二)</h1><h1 id=\"语言特性和编码规范\"><a href=\"#语言特性和编码规范\" class=\"headerlink\" title=\"语言特性和编码规范\"></a>语言特性和编码规范</h1><h2 id=\"1-简述解释型和编译型编程语言\"><a href=\"#1-简述解释型和编译型编程语言\" class=\"headerlink\" title=\"1. 简述解释型和编译型编程语言\"></a>1. 简述解释型和编译型编程语言</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">解释型:就是边解释边执行\n编译性:编译后再执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-Python3-和-2-之间的区别\"><a href=\"#2-Python3-和-2-之间的区别\" class=\"headerlink\" title=\"2. Python3 和 2 之间的区别\"></a>2. Python3 和 2 之间的区别</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">print</span>函数<span class=\"token punctuation\">:</span>（Python3中<span class=\"token keyword\">print</span>为一个函数，必须用括号括起来；Python2中<span class=\"token keyword\">print</span>为<span class=\"token keyword\">class</span>）\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>通过<span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>解析用户的输入：（Python3中<span class=\"token builtin\">input</span>得到的为<span class=\"token builtin\">str</span>；Python2的<span class=\"token builtin\">input</span>的到的为<span class=\"token builtin\">int</span>型，Python2的<span class=\"token builtin\">raw_input</span>得到的为<span class=\"token builtin\">str</span>类型）\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>整数：Python3中<span class=\"token operator\">/</span>表示真除，<span class=\"token operator\">%</span>表示取余，<span class=\"token operator\">//</span>结果取整；Python2中带上小数点<span class=\"token operator\">/</span>表示真除，<span class=\"token operator\">%</span>表示取余，<span class=\"token operator\">//</span>结果取整\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">xrange</span>模块改为<span class=\"token builtin\">range</span>\n<span class=\"token number\">5</span><span class=\"token punctuation\">.</span>比较操作符区别：Python2中任意两个对象都可以比较，Python3中只有同一数据类型的对象可以比较\n<span class=\"token number\">6</span><span class=\"token punctuation\">.</span>编码：Python2中使用 ASCII 码作为默认编码方式，Python3默认使用utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>编码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-range和-xrange-的区别\"><a href=\"#3-range和-xrange-的区别\" class=\"headerlink\" title=\"3. range和 xrange 的区别\"></a>3. range和 xrange 的区别</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">range</span>返回的是一个<span class=\"token builtin\">list</span>对象，而<span class=\"token builtin\">xrange</span>返回的是一个生成器对象<span class=\"token punctuation\">(</span><span class=\"token builtin\">xrange</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span>。\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">xrange</span>则不会直接生成一个<span class=\"token builtin\">list</span>，而是每次调用返回其中的一个值，内存空间使用极少，因而性能非常好。python3 取消了<span class=\"token builtin\">xrange</span>（）函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-什么是PEP8\"><a href=\"#4-什么是PEP8\" class=\"headerlink\" title=\"4. 什么是PEP8\"></a>4. 什么是PEP8</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">《Python Enhancement Proposal <span class=\"token comment\">#8》（8 号 Python 增强提案）又叫 PEP8，他针对的 Python 代码格式而编订的风格指南。</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span>缩进。<span class=\"token number\">4</span>个空格的缩进（编辑器都可以完成此功能），不使用Tab，更不能混合使用Tab和空格。\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>每行最大长度<span class=\"token number\">79</span>，换行可以使用反斜杠，最好使用圆括号。换行点要在操作符的后边敲回车。\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>类和top<span class=\"token operator\">-</span>level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span>模块导入的顺序：按标准、三方和自己编写顺序依次导入，之间空一行。\n<span class=\"token number\">5</span><span class=\"token punctuation\">.</span>不要在一句<span class=\"token keyword\">import</span>中写多个库，比如<span class=\"token keyword\">import</span> os<span class=\"token punctuation\">,</span> sys不推荐\n<span class=\"token number\">6</span><span class=\"token punctuation\">.</span>避免不必要的空格\n<span class=\"token number\">7</span><span class=\"token punctuation\">.</span>注释必须要有\n<span class=\"token number\">8</span><span class=\"token punctuation\">.</span>函数命名要遵循规范\n<span class=\"token number\">9</span><span class=\"token punctuation\">.</span>尽可能使用‘<span class=\"token keyword\">is</span>’‘<span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span>’取代‘<span class=\"token operator\">==</span>’，比如<span class=\"token keyword\">if</span> x <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> 要优于<span class=\"token keyword\">if</span> x。\n<span class=\"token number\">10</span><span class=\"token punctuation\">.</span>使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。\n<span class=\"token number\">11</span><span class=\"token punctuation\">.</span>异常中<span class=\"token keyword\">try</span>的代码尽可能少。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"5-类型注释\"><a href=\"#5-类型注释\" class=\"headerlink\" title=\"5. 类型注释\"></a>5. 类型注释</h1><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> name\n\n<span class=\"token comment\"># python3.6后增加了类型注解</span>\na<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\nb<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n\n<span class=\"token comment\"># 更进一步，如果你需要指明一个全部由整数组成的列表：</span>\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\nl<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>在函数 <code>greeting</code> 中，参数 <code>name</code> 预期是 <a href=\"https://docs.python.org/zh-cn/3/library/stdtypes.html#str\"><code>str</code></a> 类型，并且返回 <a href=\"https://docs.python.org/zh-cn/3/library/stdtypes.html#str\"><code>str</code></a> 类型。子类型允许作为参数。</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"python小结-二\"><a href=\"#python小结-二\" class=\"headerlink\" title=\"python小结(二)\"></a>python小结(二)</h1><h1 id=\"语言特性和编码规范\"><a href=\"#语言特性和编码规范\" class=\"headerlink\" title=\"语言特性和编码规范\"></a>语言特性和编码规范</h1><h2 id=\"1-简述解释型和编译型编程语言\"><a href=\"#1-简述解释型和编译型编程语言\" class=\"headerlink\" title=\"1. 简述解释型和编译型编程语言\"></a>1. 简述解释型和编译型编程语言</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">解释型:就是边解释边执行\n编译性:编译后再执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-Python3-和-2-之间的区别\"><a href=\"#2-Python3-和-2-之间的区别\" class=\"headerlink\" title=\"2. Python3 和 2 之间的区别\"></a>2. Python3 和 2 之间的区别</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">print</span>函数<span class=\"token punctuation\">:</span>（Python3中<span class=\"token keyword\">print</span>为一个函数，必须用括号括起来；Python2中<span class=\"token keyword\">print</span>为<span class=\"token keyword\">class</span>）\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>通过<span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>解析用户的输入：（Python3中<span class=\"token builtin\">input</span>得到的为<span class=\"token builtin\">str</span>；Python2的<span class=\"token builtin\">input</span>的到的为<span class=\"token builtin\">int</span>型，Python2的<span class=\"token builtin\">raw_input</span>得到的为<span class=\"token builtin\">str</span>类型）\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>整数：Python3中<span class=\"token operator\">/</span>表示真除，<span class=\"token operator\">%</span>表示取余，<span class=\"token operator\">//</span>结果取整；Python2中带上小数点<span class=\"token operator\">/</span>表示真除，<span class=\"token operator\">%</span>表示取余，<span class=\"token operator\">//</span>结果取整\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">xrange</span>模块改为<span class=\"token builtin\">range</span>\n<span class=\"token number\">5</span><span class=\"token punctuation\">.</span>比较操作符区别：Python2中任意两个对象都可以比较，Python3中只有同一数据类型的对象可以比较\n<span class=\"token number\">6</span><span class=\"token punctuation\">.</span>编码：Python2中使用 ASCII 码作为默认编码方式，Python3默认使用utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>编码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-range和-xrange-的区别\"><a href=\"#3-range和-xrange-的区别\" class=\"headerlink\" title=\"3. range和 xrange 的区别\"></a>3. range和 xrange 的区别</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">range</span>返回的是一个<span class=\"token builtin\">list</span>对象，而<span class=\"token builtin\">xrange</span>返回的是一个生成器对象<span class=\"token punctuation\">(</span><span class=\"token builtin\">xrange</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span>。\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">xrange</span>则不会直接生成一个<span class=\"token builtin\">list</span>，而是每次调用返回其中的一个值，内存空间使用极少，因而性能非常好。python3 取消了<span class=\"token builtin\">xrange</span>（）函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-什么是PEP8\"><a href=\"#4-什么是PEP8\" class=\"headerlink\" title=\"4. 什么是PEP8\"></a>4. 什么是PEP8</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">《Python Enhancement Proposal <span class=\"token comment\">#8》（8 号 Python 增强提案）又叫 PEP8，他针对的 Python 代码格式而编订的风格指南。</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span>缩进。<span class=\"token number\">4</span>个空格的缩进（编辑器都可以完成此功能），不使用Tab，更不能混合使用Tab和空格。\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>每行最大长度<span class=\"token number\">79</span>，换行可以使用反斜杠，最好使用圆括号。换行点要在操作符的后边敲回车。\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>类和top<span class=\"token operator\">-</span>level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span>模块导入的顺序：按标准、三方和自己编写顺序依次导入，之间空一行。\n<span class=\"token number\">5</span><span class=\"token punctuation\">.</span>不要在一句<span class=\"token keyword\">import</span>中写多个库，比如<span class=\"token keyword\">import</span> os<span class=\"token punctuation\">,</span> sys不推荐\n<span class=\"token number\">6</span><span class=\"token punctuation\">.</span>避免不必要的空格\n<span class=\"token number\">7</span><span class=\"token punctuation\">.</span>注释必须要有\n<span class=\"token number\">8</span><span class=\"token punctuation\">.</span>函数命名要遵循规范\n<span class=\"token number\">9</span><span class=\"token punctuation\">.</span>尽可能使用‘<span class=\"token keyword\">is</span>’‘<span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span>’取代‘<span class=\"token operator\">==</span>’，比如<span class=\"token keyword\">if</span> x <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> 要优于<span class=\"token keyword\">if</span> x。\n<span class=\"token number\">10</span><span class=\"token punctuation\">.</span>使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。\n<span class=\"token number\">11</span><span class=\"token punctuation\">.</span>异常中<span class=\"token keyword\">try</span>的代码尽可能少。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"5-类型注释\"><a href=\"#5-类型注释\" class=\"headerlink\" title=\"5. 类型注释\"></a>5. 类型注释</h1><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> name\n\n<span class=\"token comment\"># python3.6后增加了类型注解</span>\na<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\nb<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n\n<span class=\"token comment\"># 更进一步，如果你需要指明一个全部由整数组成的列表：</span>\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\nl<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>在函数 <code>greeting</code> 中，参数 <code>name</code> 预期是 <a href=\"https://docs.python.org/zh-cn/3/library/stdtypes.html#str\"><code>str</code></a> 类型，并且返回 <a href=\"https://docs.python.org/zh-cn/3/library/stdtypes.html#str\"><code>str</code></a> 类型。子类型允许作为参数。</p>\n</blockquote>\n"},{"title":"python小结(三)","top":false,"date":"2020-06-22T06:34:04.000Z","_content":"# python小结(三)\n\n# 字符串相关操作\n\n* in ,not , is\n\n* 串取值方法：可以通过下标进行取值，切片\n\n* endswith、startswith、isalnum、isalpha方法：\n\n   #isalnum判断输入的字符串是否包含数字和字母 \n\n   #isalpha判断输入的字符串是否是英文字母，返回结果为布尔值\n\n* 判断输入的字符串是否为数字：isdigit()\n\n* #去除空格： strip()\n\n* 字符串的join方法:  \n\n  #join是用来通过 某个字符串 拼接 一个可迭代对象的每个元素--->join(可迭代对象参数类型)  \n\n  #另一种方法将列表转换为字符串\n\n* 替换replace字符串\n\n* 查找find，index字符串\n\n* 切割字符串spilt,返回结果类型为list\n\n* 字符串随机生成大小写字母、数字 :   # import string\n\n* count  计数\n\n* 字符串中大小写字母的判断与转换 #islower() isupper()\n\n## 1. 如何python的可变与不可变数据类型\n\n​\t\tpython中的不可变数据类型，**不允许变量的值发生变化**，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象，内部会有一个引用计数来记录有多少个变量引用这个对象；\n\n​\t\t可变数据类型，**允许变量的值发生变化**，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。\n\n## 2. 将\"hello world\"转换为首字母大写\"Hello World\"\n\n```python\na = 'hello world'\na.capitalize()\na.title()\n```\n\n## 3. 如何检测字符串中只含有数字\n\n```python\nIn [74]: s = '1231413354'                                                              \n\nIn [76]: d = '3213dasd'                                                                \n\nIn [77]: d.isalnum()                                                                   \nOut[77]: True\n\nIn [78]: d.isdigit()                                                                   \nOut[78]: False\n\nIn [79]: s.isdigit()                                                                   \nOut[79]: True\n\n```\n\n## 4. 将字符串\"ilovechina\"进行反转\n\n```python\nIn [83]: a = 'ilovechina'                                                              \n\nIn [84]: a[::-1]                                                                       \nOut[84]: 'anihcevoli'\n```\n\n## 5. Python 中的字符串格式化方式\n\n```\n%  和 format()\n```\n\n## 6. 有一个字符串开头和末尾都有空格，比如“ adabdw ”,要求写一个函数把这个字符串的前后空格都去掉。\n\n```python\nIn [87]: a = ' adabdw '                                                                \n\nIn [88]: a.strip()                                                                     \nOut[88]: 'adabdw'\n```\n\n\n\n## 7. 获取字符串”123456“最后的两个字符\n\n```python\nIn [89]: a = '123456'                                                                  \n\nIn [90]: a[-2:]                                                                        \nOut[90]: '56'\n\n```\n\n\n\n## 8. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作\n\n![utf-8/ gbk/ unicode](https://img-blog.csdn.net/20160629145559498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n```python\nIn [135]: s = '你好'                                                                   \n\nIn [136]: s.encode('gbk')                                                              \nOut[136]: b'\\xc4\\xe3\\xba\\xc3'  # 发现是4个字符，说明gbk是用两个字节表示一个汉字\n\nIn [137]: s.encode('gbk').decode('gbk')                                                \nOut[137]: '你好'\n\nIn [138]: s.decode()                                                                   \n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-138-036e9cb0ee35> in <module>\n----> 1 s.decode()\n\nAttributeError: 'str' object has no attribute 'decode'\n\n# 无法解码出来，说明中文的默认解码方式是utf-8' \n```\n\n> ***\\*硬盘中一般编码都是uft-8\\**，而在内存中采用\\**unicode\\**编码方式。**\n>\n> **python中的str其实显示的就是读取unicode,str的内存格式就是unicode，所以理解为str就是unicode,unicode就是str。**\n>\n> **另外而utf-8与unicode编码中的字符部分的编码方式是一样的，所以英文显示没有区别。**\n\n## 9.  s=\"info：xiaoZhang 33 shandong\"，用正则切分字符串输出['info', 'xiaoZhang', '33', 'shandong']， a = \"你好 中国 \"，去除多余空格只留一个空格。\n\n```python\nIn [151]: s                                                                            \nOut[151]: 'info：xiaoZhang 33 shandong'\n    \nIn [152]: re.findall('[^:\\s]+',s)                                                      \nOut[152]: ['info：xiaoZhang', '33', 'shandong'] \n    # \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。\n\nIn [153]: re.findall('[a-zA-Z0-9]+',s)                                                 \nOut[153]: ['info', 'xiaoZhang', '33', 'shandong']\n\n\n```\n\n","source":"_posts/python小结(三).md","raw":"---\ntitle: python小结(三)\ntags:\n  - Python\ncategories:\n  - Python\ntop: false\ndate: 2020-06-22 14:34:04\n---\n# python小结(三)\n\n# 字符串相关操作\n\n* in ,not , is\n\n* 串取值方法：可以通过下标进行取值，切片\n\n* endswith、startswith、isalnum、isalpha方法：\n\n   #isalnum判断输入的字符串是否包含数字和字母 \n\n   #isalpha判断输入的字符串是否是英文字母，返回结果为布尔值\n\n* 判断输入的字符串是否为数字：isdigit()\n\n* #去除空格： strip()\n\n* 字符串的join方法:  \n\n  #join是用来通过 某个字符串 拼接 一个可迭代对象的每个元素--->join(可迭代对象参数类型)  \n\n  #另一种方法将列表转换为字符串\n\n* 替换replace字符串\n\n* 查找find，index字符串\n\n* 切割字符串spilt,返回结果类型为list\n\n* 字符串随机生成大小写字母、数字 :   # import string\n\n* count  计数\n\n* 字符串中大小写字母的判断与转换 #islower() isupper()\n\n## 1. 如何python的可变与不可变数据类型\n\n​\t\tpython中的不可变数据类型，**不允许变量的值发生变化**，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象，内部会有一个引用计数来记录有多少个变量引用这个对象；\n\n​\t\t可变数据类型，**允许变量的值发生变化**，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。\n\n## 2. 将\"hello world\"转换为首字母大写\"Hello World\"\n\n```python\na = 'hello world'\na.capitalize()\na.title()\n```\n\n## 3. 如何检测字符串中只含有数字\n\n```python\nIn [74]: s = '1231413354'                                                              \n\nIn [76]: d = '3213dasd'                                                                \n\nIn [77]: d.isalnum()                                                                   \nOut[77]: True\n\nIn [78]: d.isdigit()                                                                   \nOut[78]: False\n\nIn [79]: s.isdigit()                                                                   \nOut[79]: True\n\n```\n\n## 4. 将字符串\"ilovechina\"进行反转\n\n```python\nIn [83]: a = 'ilovechina'                                                              \n\nIn [84]: a[::-1]                                                                       \nOut[84]: 'anihcevoli'\n```\n\n## 5. Python 中的字符串格式化方式\n\n```\n%  和 format()\n```\n\n## 6. 有一个字符串开头和末尾都有空格，比如“ adabdw ”,要求写一个函数把这个字符串的前后空格都去掉。\n\n```python\nIn [87]: a = ' adabdw '                                                                \n\nIn [88]: a.strip()                                                                     \nOut[88]: 'adabdw'\n```\n\n\n\n## 7. 获取字符串”123456“最后的两个字符\n\n```python\nIn [89]: a = '123456'                                                                  \n\nIn [90]: a[-2:]                                                                        \nOut[90]: '56'\n\n```\n\n\n\n## 8. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作\n\n![utf-8/ gbk/ unicode](https://img-blog.csdn.net/20160629145559498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n```python\nIn [135]: s = '你好'                                                                   \n\nIn [136]: s.encode('gbk')                                                              \nOut[136]: b'\\xc4\\xe3\\xba\\xc3'  # 发现是4个字符，说明gbk是用两个字节表示一个汉字\n\nIn [137]: s.encode('gbk').decode('gbk')                                                \nOut[137]: '你好'\n\nIn [138]: s.decode()                                                                   \n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-138-036e9cb0ee35> in <module>\n----> 1 s.decode()\n\nAttributeError: 'str' object has no attribute 'decode'\n\n# 无法解码出来，说明中文的默认解码方式是utf-8' \n```\n\n> ***\\*硬盘中一般编码都是uft-8\\**，而在内存中采用\\**unicode\\**编码方式。**\n>\n> **python中的str其实显示的就是读取unicode,str的内存格式就是unicode，所以理解为str就是unicode,unicode就是str。**\n>\n> **另外而utf-8与unicode编码中的字符部分的编码方式是一样的，所以英文显示没有区别。**\n\n## 9.  s=\"info：xiaoZhang 33 shandong\"，用正则切分字符串输出['info', 'xiaoZhang', '33', 'shandong']， a = \"你好 中国 \"，去除多余空格只留一个空格。\n\n```python\nIn [151]: s                                                                            \nOut[151]: 'info：xiaoZhang 33 shandong'\n    \nIn [152]: re.findall('[^:\\s]+',s)                                                      \nOut[152]: ['info：xiaoZhang', '33', 'shandong'] \n    # \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。\n\nIn [153]: re.findall('[a-zA-Z0-9]+',s)                                                 \nOut[153]: ['info', 'xiaoZhang', '33', 'shandong']\n\n\n```\n\n","slug":"python小结(三)","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz396002y12mj1skraks8","content":"<h1 id=\"python小结-三\"><a href=\"#python小结-三\" class=\"headerlink\" title=\"python小结(三)\"></a>python小结(三)</h1><h1 id=\"字符串相关操作\"><a href=\"#字符串相关操作\" class=\"headerlink\" title=\"字符串相关操作\"></a>字符串相关操作</h1><ul>\n<li><p>in ,not , is</p>\n</li>\n<li><p>串取值方法：可以通过下标进行取值，切片</p>\n</li>\n<li><p>endswith、startswith、isalnum、isalpha方法：</p>\n<p> #isalnum判断输入的字符串是否包含数字和字母 </p>\n<p> #isalpha判断输入的字符串是否是英文字母，返回结果为布尔值</p>\n</li>\n<li><p>判断输入的字符串是否为数字：isdigit()</p>\n</li>\n<li><p>#去除空格： strip()</p>\n</li>\n<li><p>字符串的join方法:  </p>\n<p>#join是用来通过 某个字符串 拼接 一个可迭代对象的每个元素—&gt;join(可迭代对象参数类型)  </p>\n<p>#另一种方法将列表转换为字符串</p>\n</li>\n<li><p>替换replace字符串</p>\n</li>\n<li><p>查找find，index字符串</p>\n</li>\n<li><p>切割字符串spilt,返回结果类型为list</p>\n</li>\n<li><p>字符串随机生成大小写字母、数字 :   # import string</p>\n</li>\n<li><p>count  计数</p>\n</li>\n<li><p>字符串中大小写字母的判断与转换 #islower() isupper()</p>\n</li>\n</ul>\n<h2 id=\"1-如何python的可变与不可变数据类型\"><a href=\"#1-如何python的可变与不可变数据类型\" class=\"headerlink\" title=\"1. 如何python的可变与不可变数据类型\"></a>1. 如何python的可变与不可变数据类型</h2><p>​        python中的不可变数据类型，<strong>不允许变量的值发生变化</strong>，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象，内部会有一个引用计数来记录有多少个变量引用这个对象；</p>\n<p>​        可变数据类型，<strong>允许变量的值发生变化</strong>，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。</p>\n<h2 id=\"2-将”hello-world”转换为首字母大写”Hello-World”\"><a href=\"#2-将”hello-world”转换为首字母大写”Hello-World”\" class=\"headerlink\" title=\"2. 将”hello world”转换为首字母大写”Hello World”\"></a>2. 将”hello world”转换为首字母大写”Hello World”</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span>\na<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-如何检测字符串中只含有数字\"><a href=\"#3-如何检测字符串中只含有数字\" class=\"headerlink\" title=\"3. 如何检测字符串中只含有数字\"></a>3. 如何检测字符串中只含有数字</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">74</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'1231413354'</span>                                                              \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">76</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> d <span class=\"token operator\">=</span> <span class=\"token string\">'3213dasd'</span>                                                                \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">77</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                   \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">77</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">78</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                   \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">78</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">79</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                   \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">79</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-将字符串”ilovechina”进行反转\"><a href=\"#4-将字符串”ilovechina”进行反转\" class=\"headerlink\" title=\"4. 将字符串”ilovechina”进行反转\"></a>4. 将字符串”ilovechina”进行反转</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">83</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'ilovechina'</span>                                                              \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>                                                                       \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anihcevoli'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-Python-中的字符串格式化方式\"><a href=\"#5-Python-中的字符串格式化方式\" class=\"headerlink\" title=\"5. Python 中的字符串格式化方式\"></a>5. Python 中的字符串格式化方式</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">%  和 format()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"6-有一个字符串开头和末尾都有空格，比如“-adabdw-”-要求写一个函数把这个字符串的前后空格都去掉。\"><a href=\"#6-有一个字符串开头和末尾都有空格，比如“-adabdw-”-要求写一个函数把这个字符串的前后空格都去掉。\" class=\"headerlink\" title=\"6. 有一个字符串开头和末尾都有空格，比如“ adabdw ”,要求写一个函数把这个字符串的前后空格都去掉。\"></a>6. 有一个字符串开头和末尾都有空格，比如“ adabdw ”,要求写一个函数把这个字符串的前后空格都去掉。</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">87</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token string\">' adabdw '</span>                                                                \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">88</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                     \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">88</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'adabdw'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"7-获取字符串”123456“最后的两个字符\"><a href=\"#7-获取字符串”123456“最后的两个字符\" class=\"headerlink\" title=\"7. 获取字符串”123456“最后的两个字符\"></a>7. 获取字符串”123456“最后的两个字符</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">89</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span>                                                                  \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>                                                                        \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'56'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"8-一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作\"><a href=\"#8-一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作\" class=\"headerlink\" title=\"8. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作\"></a>8. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作</h2><p><img src=\"https://img-blog.csdn.net/20160629145559498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"utf-8/ gbk/ unicode\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">135</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'你好'</span>                                                                   \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">136</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span>                                                              \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">136</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\xc4\\xe3\\xba\\xc3'</span>  <span class=\"token comment\"># 发现是4个字符，说明gbk是用两个字节表示一个汉字</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">137</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span>                                                \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">137</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'你好'</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">138</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                   \n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\nAttributeError                            Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>ipython<span class=\"token operator\">-</span><span class=\"token builtin\">input</span><span class=\"token operator\">-</span><span class=\"token number\">138</span><span class=\"token operator\">-</span><span class=\"token number\">036e9cb0ee35</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> s<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nAttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'str'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'decode'</span>\n\n<span class=\"token comment\"># 无法解码出来，说明中文的默认解码方式是utf-8' </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><strong><em>\\</em>硬盘中一般编码都是uft-8\\</strong>，而在内存中采用*<em>unicode*</em>编码方式。**</p>\n<p><strong>python中的str其实显示的就是读取unicode,str的内存格式就是unicode，所以理解为str就是unicode,unicode就是str。</strong></p>\n<p><strong>另外而utf-8与unicode编码中的字符部分的编码方式是一样的，所以英文显示没有区别。</strong></p>\n</blockquote>\n<h2 id=\"9-s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-，-a-“你好-中国-“，去除多余空格只留一个空格。\"><a href=\"#9-s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-，-a-“你好-中国-“，去除多余空格只留一个空格。\" class=\"headerlink\" title=\"9.  s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]， a = “你好 中国 “，去除多余空格只留一个空格。\"></a>9.  s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]， a = “你好 中国 “，去除多余空格只留一个空格。</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">151</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s                                                                            \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">151</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'info：xiaoZhang 33 shandong'</span>\n    \nIn <span class=\"token punctuation\">[</span><span class=\"token number\">152</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'[^:\\s]+'</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>                                                      \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">152</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'info：xiaoZhang'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'33'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shandong'</span><span class=\"token punctuation\">]</span> \n    <span class=\"token comment\"># \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">153</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'[a-zA-Z0-9]+'</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>                                                 \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">153</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xiaoZhang'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'33'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shandong'</span><span class=\"token punctuation\">]</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"python小结-三\"><a href=\"#python小结-三\" class=\"headerlink\" title=\"python小结(三)\"></a>python小结(三)</h1><h1 id=\"字符串相关操作\"><a href=\"#字符串相关操作\" class=\"headerlink\" title=\"字符串相关操作\"></a>字符串相关操作</h1><ul>\n<li><p>in ,not , is</p>\n</li>\n<li><p>串取值方法：可以通过下标进行取值，切片</p>\n</li>\n<li><p>endswith、startswith、isalnum、isalpha方法：</p>\n<p> #isalnum判断输入的字符串是否包含数字和字母 </p>\n<p> #isalpha判断输入的字符串是否是英文字母，返回结果为布尔值</p>\n</li>\n<li><p>判断输入的字符串是否为数字：isdigit()</p>\n</li>\n<li><p>#去除空格： strip()</p>\n</li>\n<li><p>字符串的join方法:  </p>\n<p>#join是用来通过 某个字符串 拼接 一个可迭代对象的每个元素—&gt;join(可迭代对象参数类型)  </p>\n<p>#另一种方法将列表转换为字符串</p>\n</li>\n<li><p>替换replace字符串</p>\n</li>\n<li><p>查找find，index字符串</p>\n</li>\n<li><p>切割字符串spilt,返回结果类型为list</p>\n</li>\n<li><p>字符串随机生成大小写字母、数字 :   # import string</p>\n</li>\n<li><p>count  计数</p>\n</li>\n<li><p>字符串中大小写字母的判断与转换 #islower() isupper()</p>\n</li>\n</ul>\n<h2 id=\"1-如何python的可变与不可变数据类型\"><a href=\"#1-如何python的可变与不可变数据类型\" class=\"headerlink\" title=\"1. 如何python的可变与不可变数据类型\"></a>1. 如何python的可变与不可变数据类型</h2><p>​        python中的不可变数据类型，<strong>不允许变量的值发生变化</strong>，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象，内部会有一个引用计数来记录有多少个变量引用这个对象；</p>\n<p>​        可变数据类型，<strong>允许变量的值发生变化</strong>，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。</p>\n<h2 id=\"2-将”hello-world”转换为首字母大写”Hello-World”\"><a href=\"#2-将”hello-world”转换为首字母大写”Hello-World”\" class=\"headerlink\" title=\"2. 将”hello world”转换为首字母大写”Hello World”\"></a>2. 将”hello world”转换为首字母大写”Hello World”</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span>\na<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-如何检测字符串中只含有数字\"><a href=\"#3-如何检测字符串中只含有数字\" class=\"headerlink\" title=\"3. 如何检测字符串中只含有数字\"></a>3. 如何检测字符串中只含有数字</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">74</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'1231413354'</span>                                                              \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">76</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> d <span class=\"token operator\">=</span> <span class=\"token string\">'3213dasd'</span>                                                                \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">77</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                   \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">77</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">78</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                   \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">78</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">79</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                   \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">79</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-将字符串”ilovechina”进行反转\"><a href=\"#4-将字符串”ilovechina”进行反转\" class=\"headerlink\" title=\"4. 将字符串”ilovechina”进行反转\"></a>4. 将字符串”ilovechina”进行反转</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">83</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'ilovechina'</span>                                                              \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>                                                                       \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anihcevoli'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-Python-中的字符串格式化方式\"><a href=\"#5-Python-中的字符串格式化方式\" class=\"headerlink\" title=\"5. Python 中的字符串格式化方式\"></a>5. Python 中的字符串格式化方式</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">%  和 format()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"6-有一个字符串开头和末尾都有空格，比如“-adabdw-”-要求写一个函数把这个字符串的前后空格都去掉。\"><a href=\"#6-有一个字符串开头和末尾都有空格，比如“-adabdw-”-要求写一个函数把这个字符串的前后空格都去掉。\" class=\"headerlink\" title=\"6. 有一个字符串开头和末尾都有空格，比如“ adabdw ”,要求写一个函数把这个字符串的前后空格都去掉。\"></a>6. 有一个字符串开头和末尾都有空格，比如“ adabdw ”,要求写一个函数把这个字符串的前后空格都去掉。</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">87</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token string\">' adabdw '</span>                                                                \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">88</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                     \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">88</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'adabdw'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"7-获取字符串”123456“最后的两个字符\"><a href=\"#7-获取字符串”123456“最后的两个字符\" class=\"headerlink\" title=\"7. 获取字符串”123456“最后的两个字符\"></a>7. 获取字符串”123456“最后的两个字符</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">89</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span>                                                                  \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>                                                                        \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'56'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"8-一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作\"><a href=\"#8-一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作\" class=\"headerlink\" title=\"8. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作\"></a>8. 一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作</h2><p><img src=\"https://img-blog.csdn.net/20160629145559498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"utf-8/ gbk/ unicode\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">135</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'你好'</span>                                                                   \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">136</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span>                                                              \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">136</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">b'\\xc4\\xe3\\xba\\xc3'</span>  <span class=\"token comment\"># 发现是4个字符，说明gbk是用两个字节表示一个汉字</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">137</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span>                                                \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">137</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'你好'</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">138</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                                                   \n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\nAttributeError                            Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>ipython<span class=\"token operator\">-</span><span class=\"token builtin\">input</span><span class=\"token operator\">-</span><span class=\"token number\">138</span><span class=\"token operator\">-</span><span class=\"token number\">036e9cb0ee35</span><span class=\"token operator\">></span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> s<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nAttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'str'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'decode'</span>\n\n<span class=\"token comment\"># 无法解码出来，说明中文的默认解码方式是utf-8' </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><strong><em>\\</em>硬盘中一般编码都是uft-8\\</strong>，而在内存中采用*<em>unicode*</em>编码方式。**</p>\n<p><strong>python中的str其实显示的就是读取unicode,str的内存格式就是unicode，所以理解为str就是unicode,unicode就是str。</strong></p>\n<p><strong>另外而utf-8与unicode编码中的字符部分的编码方式是一样的，所以英文显示没有区别。</strong></p>\n</blockquote>\n<h2 id=\"9-s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-，-a-“你好-中国-“，去除多余空格只留一个空格。\"><a href=\"#9-s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-，-a-“你好-中国-“，去除多余空格只留一个空格。\" class=\"headerlink\" title=\"9.  s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]， a = “你好 中国 “，去除多余空格只留一个空格。\"></a>9.  s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]， a = “你好 中国 “，去除多余空格只留一个空格。</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">151</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> s                                                                            \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">151</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'info：xiaoZhang 33 shandong'</span>\n    \nIn <span class=\"token punctuation\">[</span><span class=\"token number\">152</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'[^:\\s]+'</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>                                                      \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">152</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'info：xiaoZhang'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'33'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shandong'</span><span class=\"token punctuation\">]</span> \n    <span class=\"token comment\"># \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">153</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'[a-zA-Z0-9]+'</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>                                                 \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">153</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xiaoZhang'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'33'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shandong'</span><span class=\"token punctuation\">]</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"python小结(六)","top":false,"date":"2020-06-26T06:34:04.000Z","_content":"# python小结(六)\n\n### 正则\n\n```python\n# 邮箱\n'^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+&'\n```\n\n\n\n### 排序算法\n\n###### 冒泡排序 (O(n2))\n\n```\ndef bubble_sort(li):\n    for i in range(len(li)-1):  #第i趟\n        exchange = False\n        for j in range(len(li)-i-1):\n            if li[j] > li[j+1]:\n                li[j], li[j+1] = li[j+1], li[j]\n                exchange = True\n        if not exchange:\n            return\n```\n\n###### 选择排序 (O(n2))\n\n```python\ndef select_sort_simple(li):\n    li_new = []\n    for i in range(len(li)):\n        min_val = min(li)\n        li_new.append(min_val)\n        li.remove(min_val)\n    return li_new\n\n\ndef select_sort(li):\n    for i in range(len(li)-1): # i是第几趟\n        min_loc = i\n        for j in range(i+1, len(li)):\n            if li[j] < li[min_loc]:\n                min_loc = j\n        li[i], li[min_loc] = li[min_loc], li[i]\n    return li\n```\n\n###### 快速排序 (O(nlogn))\n\n```python\ndef partition(li, left, right):\n    tmp = li[left]\n    while left < right:\n        while left < right and li[right] >= tmp: #从右面找比tmp小的数\n            right -= 1      # 往左走一步\n        li[left] = li[right] #把右边的值写到左边空位上\n        # print(li, 'right')\n        while left < right and li[left] <= tmp:\n            left += 1\n        li[right] = li[left] #把左边的值写到右边空位上\n        # print(li, 'left')\n    li[left] = tmp      # 把tmp归位\n    return left\n\n\ndef _quick_sort(li, left, right):\n    if left<right:  # 至少两个元素\n        mid = partition(li, left, right)\n        _quick_sort(li, left, mid-1)\n        _quick_sort(li, mid+1, right)\n    return li\n\n# 方案二\ndef quick_sorts(li):\n    if len(li) < 2:\n        return li\n    else:\n        pivot = li[0]\n        less = [i for i in li[1:] if i < pivot]\n        greater = [j for j in li[1:] if j > pivot]\n        return quick_sorts(less) + [pivot] + quick_sorts(greater)\n```\n\n##### 查找\n\n###### 顺序查找\n\n```python\ndef linear_search(li, val):\n    for ind, v in enumerate(li):\n        if v == val:\n            return ind\n    else:\n        return None\n```\n\n###### 二分查找\n\n```python\ndef binary_search(li, val):\n    left = 0\n    right = len(li) - 1\n    while left <= right:           # 候选区有值\n        mid = (left + right) // 2\n        if li[mid] == val:\n            return mid\n        else li[mid] > val:      # 带查找的值在mid左侧\n            right = mid - 1\n        else :                  # 带查找的值在mid右侧\n            left = mid + 1\n    else:\n        return None\n```\n\n","source":"_posts/python小结(六).md","raw":"---\ntitle: python小结(六)\ntags:\n  - Python\ncategories:\n  - Python\ntop: false\ndate: 2020-06-26 14:34:04\n---\n# python小结(六)\n\n### 正则\n\n```python\n# 邮箱\n'^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+&'\n```\n\n\n\n### 排序算法\n\n###### 冒泡排序 (O(n2))\n\n```\ndef bubble_sort(li):\n    for i in range(len(li)-1):  #第i趟\n        exchange = False\n        for j in range(len(li)-i-1):\n            if li[j] > li[j+1]:\n                li[j], li[j+1] = li[j+1], li[j]\n                exchange = True\n        if not exchange:\n            return\n```\n\n###### 选择排序 (O(n2))\n\n```python\ndef select_sort_simple(li):\n    li_new = []\n    for i in range(len(li)):\n        min_val = min(li)\n        li_new.append(min_val)\n        li.remove(min_val)\n    return li_new\n\n\ndef select_sort(li):\n    for i in range(len(li)-1): # i是第几趟\n        min_loc = i\n        for j in range(i+1, len(li)):\n            if li[j] < li[min_loc]:\n                min_loc = j\n        li[i], li[min_loc] = li[min_loc], li[i]\n    return li\n```\n\n###### 快速排序 (O(nlogn))\n\n```python\ndef partition(li, left, right):\n    tmp = li[left]\n    while left < right:\n        while left < right and li[right] >= tmp: #从右面找比tmp小的数\n            right -= 1      # 往左走一步\n        li[left] = li[right] #把右边的值写到左边空位上\n        # print(li, 'right')\n        while left < right and li[left] <= tmp:\n            left += 1\n        li[right] = li[left] #把左边的值写到右边空位上\n        # print(li, 'left')\n    li[left] = tmp      # 把tmp归位\n    return left\n\n\ndef _quick_sort(li, left, right):\n    if left<right:  # 至少两个元素\n        mid = partition(li, left, right)\n        _quick_sort(li, left, mid-1)\n        _quick_sort(li, mid+1, right)\n    return li\n\n# 方案二\ndef quick_sorts(li):\n    if len(li) < 2:\n        return li\n    else:\n        pivot = li[0]\n        less = [i for i in li[1:] if i < pivot]\n        greater = [j for j in li[1:] if j > pivot]\n        return quick_sorts(less) + [pivot] + quick_sorts(greater)\n```\n\n##### 查找\n\n###### 顺序查找\n\n```python\ndef linear_search(li, val):\n    for ind, v in enumerate(li):\n        if v == val:\n            return ind\n    else:\n        return None\n```\n\n###### 二分查找\n\n```python\ndef binary_search(li, val):\n    left = 0\n    right = len(li) - 1\n    while left <= right:           # 候选区有值\n        mid = (left + right) // 2\n        if li[mid] == val:\n            return mid\n        else li[mid] > val:      # 带查找的值在mid左侧\n            right = mid - 1\n        else :                  # 带查找的值在mid右侧\n            left = mid + 1\n    else:\n        return None\n```\n\n","slug":"python小结(六)","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz396003212mjekps434m","content":"<h1 id=\"python小结-六\"><a href=\"#python小结-六\" class=\"headerlink\" title=\"python小结(六)\"></a>python小结(六)</h1><h3 id=\"正则\"><a href=\"#正则\" class=\"headerlink\" title=\"正则\"></a>正则</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 邮箱</span>\n<span class=\"token string\">'^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+&amp;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><h6 id=\"冒泡排序-O-n2\"><a href=\"#冒泡排序-O-n2\" class=\"headerlink\" title=\"冒泡排序 (O(n2))\"></a>冒泡排序 (O(n2))</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">def bubble_sort(li):\n    for i in range(len(li)-1):  #第i趟\n        exchange = False\n        for j in range(len(li)-i-1):\n            if li[j] &gt; li[j+1]:\n                li[j], li[j+1] = li[j+1], li[j]\n                exchange = True\n        if not exchange:\n            return<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"选择排序-O-n2\"><a href=\"#选择排序-O-n2\" class=\"headerlink\" title=\"选择排序 (O(n2))\"></a>选择排序 (O(n2))</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">select_sort_simple</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    li_new <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        min_val <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n        li_new<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>min_val<span class=\"token punctuation\">)</span>\n        li<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>min_val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> li_new\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_sort</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># i是第几趟</span>\n        min_loc <span class=\"token operator\">=</span> i\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> li<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> li<span class=\"token punctuation\">[</span>min_loc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                min_loc <span class=\"token operator\">=</span> j\n        li<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> li<span class=\"token punctuation\">[</span>min_loc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span>min_loc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> li<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> li<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"快速排序-O-nlogn\"><a href=\"#快速排序-O-nlogn\" class=\"headerlink\" title=\"快速排序 (O(nlogn))\"></a>快速排序 (O(nlogn))</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    tmp <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right <span class=\"token keyword\">and</span> li<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> tmp<span class=\"token punctuation\">:</span> <span class=\"token comment\">#从右面找比tmp小的数</span>\n            right <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>      <span class=\"token comment\"># 往左走一步</span>\n        li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token comment\">#把右边的值写到左边空位上</span>\n        <span class=\"token comment\"># print(li, 'right')</span>\n        <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right <span class=\"token keyword\">and</span> li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> tmp<span class=\"token punctuation\">:</span>\n            left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        li<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token comment\">#把左边的值写到右边空位上</span>\n        <span class=\"token comment\"># print(li, 'left')</span>\n    li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp      <span class=\"token comment\"># 把tmp归位</span>\n    <span class=\"token keyword\">return</span> left\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_quick_sort</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 至少两个元素</span>\n        mid <span class=\"token operator\">=</span> partition<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n        _quick_sort<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        _quick_sort<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> li\n\n<span class=\"token comment\"># 方案二</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">quick_sorts</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> li\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        pivot <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        less <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">]</span>\n        greater <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>j <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> j <span class=\"token operator\">&gt;</span> pivot<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> quick_sorts<span class=\"token punctuation\">(</span>less<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> quick_sorts<span class=\"token punctuation\">(</span>greater<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h5><h6 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">linear_search</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> ind<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> ind\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    right <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 候选区有值</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">if</span> li<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mid\n        <span class=\"token keyword\">else</span> li<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> val<span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 带查找的值在mid左侧</span>\n            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>                  <span class=\"token comment\"># 带查找的值在mid右侧</span>\n            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"python小结-六\"><a href=\"#python小结-六\" class=\"headerlink\" title=\"python小结(六)\"></a>python小结(六)</h1><h3 id=\"正则\"><a href=\"#正则\" class=\"headerlink\" title=\"正则\"></a>正则</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 邮箱</span>\n<span class=\"token string\">'^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+&amp;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><h6 id=\"冒泡排序-O-n2\"><a href=\"#冒泡排序-O-n2\" class=\"headerlink\" title=\"冒泡排序 (O(n2))\"></a>冒泡排序 (O(n2))</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">def bubble_sort(li):\n    for i in range(len(li)-1):  #第i趟\n        exchange &#x3D; False\n        for j in range(len(li)-i-1):\n            if li[j] &gt; li[j+1]:\n                li[j], li[j+1] &#x3D; li[j+1], li[j]\n                exchange &#x3D; True\n        if not exchange:\n            return<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"选择排序-O-n2\"><a href=\"#选择排序-O-n2\" class=\"headerlink\" title=\"选择排序 (O(n2))\"></a>选择排序 (O(n2))</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">select_sort_simple</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    li_new <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        min_val <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n        li_new<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>min_val<span class=\"token punctuation\">)</span>\n        li<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>min_val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> li_new\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_sort</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># i是第几趟</span>\n        min_loc <span class=\"token operator\">=</span> i\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> li<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> li<span class=\"token punctuation\">[</span>min_loc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                min_loc <span class=\"token operator\">=</span> j\n        li<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> li<span class=\"token punctuation\">[</span>min_loc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span>min_loc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> li<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> li<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"快速排序-O-nlogn\"><a href=\"#快速排序-O-nlogn\" class=\"headerlink\" title=\"快速排序 (O(nlogn))\"></a>快速排序 (O(nlogn))</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    tmp <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right <span class=\"token keyword\">and</span> li<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> tmp<span class=\"token punctuation\">:</span> <span class=\"token comment\">#从右面找比tmp小的数</span>\n            right <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>      <span class=\"token comment\"># 往左走一步</span>\n        li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token comment\">#把右边的值写到左边空位上</span>\n        <span class=\"token comment\"># print(li, 'right')</span>\n        <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right <span class=\"token keyword\">and</span> li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> tmp<span class=\"token punctuation\">:</span>\n            left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        li<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token comment\">#把左边的值写到右边空位上</span>\n        <span class=\"token comment\"># print(li, 'left')</span>\n    li<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp      <span class=\"token comment\"># 把tmp归位</span>\n    <span class=\"token keyword\">return</span> left\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_quick_sort</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 至少两个元素</span>\n        mid <span class=\"token operator\">=</span> partition<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n        _quick_sort<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        _quick_sort<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> li\n\n<span class=\"token comment\"># 方案二</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">quick_sorts</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> li\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        pivot <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        less <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">]</span>\n        greater <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>j <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> j <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> quick_sorts<span class=\"token punctuation\">(</span>less<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> quick_sorts<span class=\"token punctuation\">(</span>greater<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h5><h6 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">linear_search</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> ind<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> ind\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    right <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 候选区有值</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">if</span> li<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mid\n        <span class=\"token keyword\">else</span> li<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> val<span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 带查找的值在mid左侧</span>\n            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>                  <span class=\"token comment\"># 带查找的值在mid右侧</span>\n            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"python小结(七)","top":false,"date":"2020-06-29T06:34:04.000Z","_content":"# python小结(七)\n\n## 技术性问题\n\n1. 简述函数式编程\n\n   > 函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。 -- wiki\n   >\n   > https://www.jianshu.com/p/856475c7fa01\n   >\n   > https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080\n\n   ```python\n   概念：\n   1、函数是一等公民。所谓“一等公民”，指的是函数与其他数据类型一样，处于平等地位，可以复制给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。\n   \n   2、不可改变量。在函数式编程中，我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式。这里说的‘变量’是不能被小改的。所有的变量只能被赋值一次初值\n   \n   3、map & reduce 他们是最常用的函数式编程\n   >>> def f(x):\n   ...     return x * x\n   ...\n   >>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n   >>> list(r)\n   [1, 4, 9, 16, 25, 36, 49, 64, 81]\n   \n   # reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：\n   >>> from functools import reduce\n   >>> def add(x, y):\n   ...     return x + y\n   ...\n   >>> reduce(add, [1, 3, 5, 7, 9])\n   25\n   特性：\n   \n   函数是 “一等公民”\n   只用 “表达式”，不用 “语句”\n   没有 “副作用”\n   不修改状态\n   引用透明（函数运行只靠参数）\n   ```\n\n   \n\n2. 什么是匿名函数，有什么局限性\n\n   ```shell\n   lambda 表达式是 Python 中创建匿名函数的一个特殊语法. 我称 lambda 语法本身为 lambda 表达式，而它返回的函数我称之为 lambda 函数。或者称为匿名函数。\n   Python 的 lambda 表达式允许在一行代码中创建一个函数并传递。\n   >>>def square(x) :            # 计算平方数\n   ...     return x ** 2\n   ... \n   >>> map(square, [1,2,3,4,5])   # 计算列表各个元素的平方\n   [1, 4, 9, 16, 25]\n   >>> map(lambda x: x ** 2, [1, 2, 3, 4, 5])  # 使用 lambda 匿名函数\n   [1, 4, 9, 16, 25]\n    \n   # 提供了两个列表，对相同位置的列表数据进行相加\n   >>> map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])\n   [3, 7, 11, 15, 19]\n   lambda 表达式可以写出非常简练的代码，但是缺点也非常明显：难于理解，降低了可读性和性能。\n   lamda优点：\n   \n   代码简洁\n   不增加额外变量\n   lambda 表达式与命名函数的主要不同点:\n   可以立刻传递(无需变量)\n   在内部只能包含一行代码\n   自动返回结果\n   既没有文档字符串, 也没有名称\n   ```\n\n   \n\n3. 如何捕捉异常，常用的异常处理机制有哪些\n\n   ```python\n   捕捉异常可以使用try/except语句。try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。\n   \n   如果你不想在异常发生时结束你的程序，只需在try里捕获它。\n   \n   try:\n   <语句>        #运行别的代码\n   except <名字>：\n   <语句>        #如果在try部份引发了'name'异常\n   except <名字>，<数据>:\n   <语句>        #如果引发了'name'异常，获得附加的数据\n   else:\n   <语句>        #如果没有异常发生\n   \n   sys模块获取异常\n           另一种获取异常信息的途径是通过sys模块中的exc_info()函数。该函数回返回一个三元组:(异常类，异常类的实例，跟中记录对象)。\n   ```\n\n   \n\n4. copy() 和 deepcopy() 的区别\n\n   ```python\n   浅复制：仅拷贝基本数据类型，字典 copy 方法和copy.copy()方法，也是浅复制；\n   深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。\n   ```\n\n   \n\n5. 函数装饰器有什么作用 **\n\n   ```python\n   装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。\n   \n   # 测试代码运行时间的装饰器\n   import time\n   \n   def cal_time(func):\n       def wrapper(*arg, **kwargs):\n           t1 = time.time()\n           result = func(*arg, **kwargs)\n           t2 = time.time()\n           print('%s running time: %s secs.'%(func.__name__, t2 - t1))\n           return result\n       return wrapper\n   ```\n\n   \n\n6. 新式类和旧式类的区别，如何确保使用的是新式类\n\n   ```python\n   1、新式类都从object继承，经典类不需要。\n   \n   2、新式类的MRO(method resolution order 基类搜索顺序)算法采用C3算法广度优先搜索，而旧式类的MRO算法是采用深度优先搜索\n   \n   3、新式类相同父类只执行一次构造函数，经典类重复执行多次。\n   \n   在Python 3.x中取消了经典类，默认都是新式类，并且不必显式的继承object：\n   class Person(object):\n       pass\n   class Person():\n       pass\n   class Person:\n       pass\n   三种写法并无区别，推荐第一种\n   ```\n\n   \n\n7. 简述Python的作用域以及Python搜索变量的顺序\n\n   ```\n   python中的作用域分4种情况：\n   \n   （1）L：local，局部作用域，即函数中定义的变量；\n   \n   （2）E：enclosing，嵌套的父级函数的局部作用域，即包含此函数的上级函数的局部作用域，但不是全局的；\n   \n   （3）G：globa，全局变量，就是模块级别定义的变量；\n   \n   （4）B：built-in，系统固定模块里面的变量，比如int, bytearray等。\n   \n   搜索变量的优先级顺序依次是：局部作用域>外层作用域>当前模块中的全局>python内置作用域，也就是LEGB。\n   ```\n\n   \n\n8. 简述 ____new____ 和 ____init____的区别\n\n   ```python\n   __init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数\n   \n   1、__new__至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别\n   \n   2、__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以return父类（通过super(当前类名, cls)）__new__出来的实例，或者直接是object的__new__出来的实例\n   \n   3、__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值\n   \n   4、如果__new__创建的是当前类的实例，会自动调用__init__函数，通过return语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名，；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数。\n   \n   class A:\n       def __init__(self):\n           print('this is init method', self)\n   \n       def __new__(cls):\n           print('this is cls`s id', id(cls))\n           print('this is new method', object.__new__(cls))\n           return object.__new__(cls)\n   \n   a = A()\n   print('this is Class A of id', id(A))\n   \n   # this is cls`s id 94331320742352\n   # this is new method <__main__.A object at 0x7efd147af100>\n   # this is init method <__main__.A object at 0x7efd147af100>\n   # this is Class A of id 94331320742352\n   \n   init 和 new中的 self 和 cls 返回值的地址都一样 返回值是对象\n   cls 和 类id 一样，说明指向同一类\n   ```\n\n   \n\n9. #### Python的垃圾回收机制 **\n\n   ###### 引用计数、标记清除、分代回收\n\n   >  参考：http://coolpython.net/python_senior/memory/gc.html\n\n   ##### 1. 引用计数\n\n   ```python\n   class Pyobj:\n       def __del__(self):\n           print('对象被销毁')\n   \n   print(1)\n   obj = Pyobj()\n   obj = 6   # 让变量obj指向其他对象\n   print(2)\n   \n   # 1\n   # 对象被销毁\n   # 2\n   ```\n\n   ###### \t优点：\n\n   * 简单\n   * 实时性高，只要计数为0,对象就被销毁，内存被释放，回收内存的时间就会平摊到了平时\n\n   ###### \t缺点：\n\n   \t* 为了维护引用计数消耗了很多资源\n   \t* 循环引用，会导致内存泄露\n\n   ```python\n   # 循环引用\n   list1 = []\n   list2 = []\n   list1.append(list2)\n   list2.append(list1)\n   ```\n\n   list1 和 list2 的引用计数永远大于 0，除非手动操作，他们不可能被GC回收。\n\n   2. ##### 标记清除\n\n   * 引用计数，并不能解决所有的问题，一旦出现了循环引用，那么，这些对象的引用次数永远都是大于0的，但是这些对象都是不可用的垃圾数据。\n\n     ```python\n   import gc\n     \n\n     class DictA(dict):\n         def __del__(self):\n             print('DictA对象被销毁')\n     \n     \n     class DictB(dict):\n         def __del__(self):\n             print('DictB对象被销毁')\n             \n     a = DictA()\n     b = DictB()\n     \n     a['b'] = b      # 循环引用\n     b['a'] = a\n     \n     a = 1\n     b = 1\n     \n     print('ok')\n     # ok\n     # DictA对象被销毁\n     # DictB对象被销毁\n     \n     # 由于存在循环引用，因此，内存中DictA对象的引用计数是2，当a = 1被执行时，引用计数减少为1，但仍然大于0，不会被回收，DictB的对象同样如此\n     ```\n     \n     #### 标记清除的原理\n     \n     标记清除可以处理这种循环引用的情况，它分为两个阶段\n     \n     ##### 第1阶段，标记阶段\n     \n     GC会把所有活动对象打上标记，这些活动的对象就如同一个点，他们之间的引用关系构成边，最终点和边构成了一个有向图，如下图所示\n     \n     ![标记清除](http://coolpython.net/pictures/python_senior/memory/gc-1583239758-4.jpg)\n     \n     ##### 第2阶段，搜索清除阶段\n     \n     从根对象（root）出发，沿着有向边遍历整个图，不可达的对象就是需要清理的垃圾对象。这个根对象就是全局对象，调用栈，寄存器。\n     \n     在上图中，从root出发后，可以到达 1 2 3 4，而5， 6， 7均不能到达，其中6和7互相引用，这3个对象都会被回收。\n     \n   3. #### 分代回收\n\n   * 分代回收建立标记清除的基础之上，是一种以空间换时间的操作方式。标记清除可以回收循环引用的垃圾，但是，回收的频次是需要控制的\n\n   * 分代回收，根据内存中对象的存活时间将他们分为3代，新生的对象放入到0代，如果一个对象能在第0代的垃圾回收过程中存活下来，GC就会将其放入到1代中，如果1代里的对象在第1代的垃圾回收过程中存活下来，则会进入到2代。\n\n     ##### 分代回收的触发机制\n\n     ```python\n     import gc\n     \n     print(gc.get_threshold())\n     \n     # (700, 10, 10)\n     '''\n     当分配对象的个数减去释放对象的个数的差值大于700时，就会产生一次0代回收\n     10次0代回收会导致一次1代回收\n     10次1代回收会导致一次2代回收\n     \n     对于第0代的对象来说，他们很可能就被使用一次，因此需要经常被回收。\n     \n     经过一轮一轮的回收后，能够活着成为第2代的对象，必然是那些使用频繁的对象，而且他们已经存活很久的时间了，大概率的，还会存活很久，因此，2代回收的就不那么频繁，\n     '''\n     ```\n\n     ```python\n     import gc\n     \n     gc.set_threshold(600, 10, 5)\n     print(gc.get_threshold())\n     \n     # 经过了上面的设置，0代和2代的回收会更加频繁\n     ```\n\n     \n\n10. Python中的 @property 有什么作用？如何实现成员变量的只读属性？\n\n    * python的@property是python的一种装饰器，是用来修饰方法的\n\n    * 我们可以使用@property装饰器来创建只读属性，@property装饰器会将方法转换为相同名称的只读属性,可以与所定义的属性配合使用，这样可以防止属性被修改。\n\n    ##### 1.修饰方法，是方法可以像属性一样访问。\n\n    ```python\n    class DataSet(object):\n      @property\n      def method_with_property(self): ##含有@property\n          return 15\n      def method_without_property(self): ##不含@property\n          return 15\n    \n    l = DataSet()\n    print(l.method_with_property) # 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。\n    print(l.method_without_property())  #没有加@property , 必须使用正常的调用方法的形式，即在后面加()\n    # 15\n    # 15\n    ```\n\n    ##### 2.与所定义的属性配合使用，这样可以防止属性被修改。\n\n    ```python\n    class DataSet(object):\n        def __init__(self):\n            self._images = 1\n            self._labels = 2 #定义属性的名称\n        @property\n        def images(self): #方法加入@property后，这个方法相当于一个属性，这个属性可以让用户进行使用，而且用户有没办法随意修改。\n            return self._images \n        @property\n        def labels(self):\n            return self._labels\n    l = DataSet()\n    #用户进行属性调用的时候，直接调用images即可，而不用知道属性名_images，因此用户无法更改属性，从而保护了类的属性。\n    print(l.images) # 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。\n    # 1\n    ```\n\n    \n\n11. *args 和 **kwargs 分别代表什么\n\n    ```\n    args和kwargs是python中的可变参数：args表示任意多个无名参数，返回一个tuple；kwargs表示关键字参数，返回一个dict。\n    ```\n\n    \n\n12. 有用过 with statement 吗？他的好处是什么？具体如何实现?\n\n    * with语句的作用是通过某种方式简化异常处理，它是所谓的上下文管理器的一种\n\n      > **with语句会在嵌套的代码执行之后，自动关闭文件**。这种做法的还有另一个优势就是，**无论嵌套的代码是以何种方式结束的，它都关闭文件**\n\n    \n\n13. 在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n    ```python\n    # 因为数组是有序的 可以从数组左下角开始找 然后往上移动\n    \n    class Solution:\n        # array 二维列表\n        def find(self, target, array):\n            for i in range(len(array) - 1, -1, -1):\n                if target == array[i][0]:\n                    return True\n                elif target > array[i][0]:\n                    for j in range(len(array[0])):  # len(array[0]) 表示小数组的长度\n                        if target == array[i][j]:\n                            return True\n                else:\n                    return False\n    \n    array = [[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]]\n    s = Solution()\n    print(s.find(8, array))\n    ```\n\n    ","source":"_posts/python小结(七).md","raw":"---\ntitle: python小结(七)\ntags:\n  - Python\ncategories:\n  - Python\ntop: false\ndate: 2020-06-29 14:34:04\n---\n# python小结(七)\n\n## 技术性问题\n\n1. 简述函数式编程\n\n   > 函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。 -- wiki\n   >\n   > https://www.jianshu.com/p/856475c7fa01\n   >\n   > https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080\n\n   ```python\n   概念：\n   1、函数是一等公民。所谓“一等公民”，指的是函数与其他数据类型一样，处于平等地位，可以复制给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。\n   \n   2、不可改变量。在函数式编程中，我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式。这里说的‘变量’是不能被小改的。所有的变量只能被赋值一次初值\n   \n   3、map & reduce 他们是最常用的函数式编程\n   >>> def f(x):\n   ...     return x * x\n   ...\n   >>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n   >>> list(r)\n   [1, 4, 9, 16, 25, 36, 49, 64, 81]\n   \n   # reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：\n   >>> from functools import reduce\n   >>> def add(x, y):\n   ...     return x + y\n   ...\n   >>> reduce(add, [1, 3, 5, 7, 9])\n   25\n   特性：\n   \n   函数是 “一等公民”\n   只用 “表达式”，不用 “语句”\n   没有 “副作用”\n   不修改状态\n   引用透明（函数运行只靠参数）\n   ```\n\n   \n\n2. 什么是匿名函数，有什么局限性\n\n   ```shell\n   lambda 表达式是 Python 中创建匿名函数的一个特殊语法. 我称 lambda 语法本身为 lambda 表达式，而它返回的函数我称之为 lambda 函数。或者称为匿名函数。\n   Python 的 lambda 表达式允许在一行代码中创建一个函数并传递。\n   >>>def square(x) :            # 计算平方数\n   ...     return x ** 2\n   ... \n   >>> map(square, [1,2,3,4,5])   # 计算列表各个元素的平方\n   [1, 4, 9, 16, 25]\n   >>> map(lambda x: x ** 2, [1, 2, 3, 4, 5])  # 使用 lambda 匿名函数\n   [1, 4, 9, 16, 25]\n    \n   # 提供了两个列表，对相同位置的列表数据进行相加\n   >>> map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])\n   [3, 7, 11, 15, 19]\n   lambda 表达式可以写出非常简练的代码，但是缺点也非常明显：难于理解，降低了可读性和性能。\n   lamda优点：\n   \n   代码简洁\n   不增加额外变量\n   lambda 表达式与命名函数的主要不同点:\n   可以立刻传递(无需变量)\n   在内部只能包含一行代码\n   自动返回结果\n   既没有文档字符串, 也没有名称\n   ```\n\n   \n\n3. 如何捕捉异常，常用的异常处理机制有哪些\n\n   ```python\n   捕捉异常可以使用try/except语句。try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。\n   \n   如果你不想在异常发生时结束你的程序，只需在try里捕获它。\n   \n   try:\n   <语句>        #运行别的代码\n   except <名字>：\n   <语句>        #如果在try部份引发了'name'异常\n   except <名字>，<数据>:\n   <语句>        #如果引发了'name'异常，获得附加的数据\n   else:\n   <语句>        #如果没有异常发生\n   \n   sys模块获取异常\n           另一种获取异常信息的途径是通过sys模块中的exc_info()函数。该函数回返回一个三元组:(异常类，异常类的实例，跟中记录对象)。\n   ```\n\n   \n\n4. copy() 和 deepcopy() 的区别\n\n   ```python\n   浅复制：仅拷贝基本数据类型，字典 copy 方法和copy.copy()方法，也是浅复制；\n   深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。\n   ```\n\n   \n\n5. 函数装饰器有什么作用 **\n\n   ```python\n   装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。\n   \n   # 测试代码运行时间的装饰器\n   import time\n   \n   def cal_time(func):\n       def wrapper(*arg, **kwargs):\n           t1 = time.time()\n           result = func(*arg, **kwargs)\n           t2 = time.time()\n           print('%s running time: %s secs.'%(func.__name__, t2 - t1))\n           return result\n       return wrapper\n   ```\n\n   \n\n6. 新式类和旧式类的区别，如何确保使用的是新式类\n\n   ```python\n   1、新式类都从object继承，经典类不需要。\n   \n   2、新式类的MRO(method resolution order 基类搜索顺序)算法采用C3算法广度优先搜索，而旧式类的MRO算法是采用深度优先搜索\n   \n   3、新式类相同父类只执行一次构造函数，经典类重复执行多次。\n   \n   在Python 3.x中取消了经典类，默认都是新式类，并且不必显式的继承object：\n   class Person(object):\n       pass\n   class Person():\n       pass\n   class Person:\n       pass\n   三种写法并无区别，推荐第一种\n   ```\n\n   \n\n7. 简述Python的作用域以及Python搜索变量的顺序\n\n   ```\n   python中的作用域分4种情况：\n   \n   （1）L：local，局部作用域，即函数中定义的变量；\n   \n   （2）E：enclosing，嵌套的父级函数的局部作用域，即包含此函数的上级函数的局部作用域，但不是全局的；\n   \n   （3）G：globa，全局变量，就是模块级别定义的变量；\n   \n   （4）B：built-in，系统固定模块里面的变量，比如int, bytearray等。\n   \n   搜索变量的优先级顺序依次是：局部作用域>外层作用域>当前模块中的全局>python内置作用域，也就是LEGB。\n   ```\n\n   \n\n8. 简述 ____new____ 和 ____init____的区别\n\n   ```python\n   __init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数\n   \n   1、__new__至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别\n   \n   2、__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以return父类（通过super(当前类名, cls)）__new__出来的实例，或者直接是object的__new__出来的实例\n   \n   3、__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值\n   \n   4、如果__new__创建的是当前类的实例，会自动调用__init__函数，通过return语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名，；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数。\n   \n   class A:\n       def __init__(self):\n           print('this is init method', self)\n   \n       def __new__(cls):\n           print('this is cls`s id', id(cls))\n           print('this is new method', object.__new__(cls))\n           return object.__new__(cls)\n   \n   a = A()\n   print('this is Class A of id', id(A))\n   \n   # this is cls`s id 94331320742352\n   # this is new method <__main__.A object at 0x7efd147af100>\n   # this is init method <__main__.A object at 0x7efd147af100>\n   # this is Class A of id 94331320742352\n   \n   init 和 new中的 self 和 cls 返回值的地址都一样 返回值是对象\n   cls 和 类id 一样，说明指向同一类\n   ```\n\n   \n\n9. #### Python的垃圾回收机制 **\n\n   ###### 引用计数、标记清除、分代回收\n\n   >  参考：http://coolpython.net/python_senior/memory/gc.html\n\n   ##### 1. 引用计数\n\n   ```python\n   class Pyobj:\n       def __del__(self):\n           print('对象被销毁')\n   \n   print(1)\n   obj = Pyobj()\n   obj = 6   # 让变量obj指向其他对象\n   print(2)\n   \n   # 1\n   # 对象被销毁\n   # 2\n   ```\n\n   ###### \t优点：\n\n   * 简单\n   * 实时性高，只要计数为0,对象就被销毁，内存被释放，回收内存的时间就会平摊到了平时\n\n   ###### \t缺点：\n\n   \t* 为了维护引用计数消耗了很多资源\n   \t* 循环引用，会导致内存泄露\n\n   ```python\n   # 循环引用\n   list1 = []\n   list2 = []\n   list1.append(list2)\n   list2.append(list1)\n   ```\n\n   list1 和 list2 的引用计数永远大于 0，除非手动操作，他们不可能被GC回收。\n\n   2. ##### 标记清除\n\n   * 引用计数，并不能解决所有的问题，一旦出现了循环引用，那么，这些对象的引用次数永远都是大于0的，但是这些对象都是不可用的垃圾数据。\n\n     ```python\n   import gc\n     \n\n     class DictA(dict):\n         def __del__(self):\n             print('DictA对象被销毁')\n     \n     \n     class DictB(dict):\n         def __del__(self):\n             print('DictB对象被销毁')\n             \n     a = DictA()\n     b = DictB()\n     \n     a['b'] = b      # 循环引用\n     b['a'] = a\n     \n     a = 1\n     b = 1\n     \n     print('ok')\n     # ok\n     # DictA对象被销毁\n     # DictB对象被销毁\n     \n     # 由于存在循环引用，因此，内存中DictA对象的引用计数是2，当a = 1被执行时，引用计数减少为1，但仍然大于0，不会被回收，DictB的对象同样如此\n     ```\n     \n     #### 标记清除的原理\n     \n     标记清除可以处理这种循环引用的情况，它分为两个阶段\n     \n     ##### 第1阶段，标记阶段\n     \n     GC会把所有活动对象打上标记，这些活动的对象就如同一个点，他们之间的引用关系构成边，最终点和边构成了一个有向图，如下图所示\n     \n     ![标记清除](http://coolpython.net/pictures/python_senior/memory/gc-1583239758-4.jpg)\n     \n     ##### 第2阶段，搜索清除阶段\n     \n     从根对象（root）出发，沿着有向边遍历整个图，不可达的对象就是需要清理的垃圾对象。这个根对象就是全局对象，调用栈，寄存器。\n     \n     在上图中，从root出发后，可以到达 1 2 3 4，而5， 6， 7均不能到达，其中6和7互相引用，这3个对象都会被回收。\n     \n   3. #### 分代回收\n\n   * 分代回收建立标记清除的基础之上，是一种以空间换时间的操作方式。标记清除可以回收循环引用的垃圾，但是，回收的频次是需要控制的\n\n   * 分代回收，根据内存中对象的存活时间将他们分为3代，新生的对象放入到0代，如果一个对象能在第0代的垃圾回收过程中存活下来，GC就会将其放入到1代中，如果1代里的对象在第1代的垃圾回收过程中存活下来，则会进入到2代。\n\n     ##### 分代回收的触发机制\n\n     ```python\n     import gc\n     \n     print(gc.get_threshold())\n     \n     # (700, 10, 10)\n     '''\n     当分配对象的个数减去释放对象的个数的差值大于700时，就会产生一次0代回收\n     10次0代回收会导致一次1代回收\n     10次1代回收会导致一次2代回收\n     \n     对于第0代的对象来说，他们很可能就被使用一次，因此需要经常被回收。\n     \n     经过一轮一轮的回收后，能够活着成为第2代的对象，必然是那些使用频繁的对象，而且他们已经存活很久的时间了，大概率的，还会存活很久，因此，2代回收的就不那么频繁，\n     '''\n     ```\n\n     ```python\n     import gc\n     \n     gc.set_threshold(600, 10, 5)\n     print(gc.get_threshold())\n     \n     # 经过了上面的设置，0代和2代的回收会更加频繁\n     ```\n\n     \n\n10. Python中的 @property 有什么作用？如何实现成员变量的只读属性？\n\n    * python的@property是python的一种装饰器，是用来修饰方法的\n\n    * 我们可以使用@property装饰器来创建只读属性，@property装饰器会将方法转换为相同名称的只读属性,可以与所定义的属性配合使用，这样可以防止属性被修改。\n\n    ##### 1.修饰方法，是方法可以像属性一样访问。\n\n    ```python\n    class DataSet(object):\n      @property\n      def method_with_property(self): ##含有@property\n          return 15\n      def method_without_property(self): ##不含@property\n          return 15\n    \n    l = DataSet()\n    print(l.method_with_property) # 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。\n    print(l.method_without_property())  #没有加@property , 必须使用正常的调用方法的形式，即在后面加()\n    # 15\n    # 15\n    ```\n\n    ##### 2.与所定义的属性配合使用，这样可以防止属性被修改。\n\n    ```python\n    class DataSet(object):\n        def __init__(self):\n            self._images = 1\n            self._labels = 2 #定义属性的名称\n        @property\n        def images(self): #方法加入@property后，这个方法相当于一个属性，这个属性可以让用户进行使用，而且用户有没办法随意修改。\n            return self._images \n        @property\n        def labels(self):\n            return self._labels\n    l = DataSet()\n    #用户进行属性调用的时候，直接调用images即可，而不用知道属性名_images，因此用户无法更改属性，从而保护了类的属性。\n    print(l.images) # 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。\n    # 1\n    ```\n\n    \n\n11. *args 和 **kwargs 分别代表什么\n\n    ```\n    args和kwargs是python中的可变参数：args表示任意多个无名参数，返回一个tuple；kwargs表示关键字参数，返回一个dict。\n    ```\n\n    \n\n12. 有用过 with statement 吗？他的好处是什么？具体如何实现?\n\n    * with语句的作用是通过某种方式简化异常处理，它是所谓的上下文管理器的一种\n\n      > **with语句会在嵌套的代码执行之后，自动关闭文件**。这种做法的还有另一个优势就是，**无论嵌套的代码是以何种方式结束的，它都关闭文件**\n\n    \n\n13. 在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n    ```python\n    # 因为数组是有序的 可以从数组左下角开始找 然后往上移动\n    \n    class Solution:\n        # array 二维列表\n        def find(self, target, array):\n            for i in range(len(array) - 1, -1, -1):\n                if target == array[i][0]:\n                    return True\n                elif target > array[i][0]:\n                    for j in range(len(array[0])):  # len(array[0]) 表示小数组的长度\n                        if target == array[i][j]:\n                            return True\n                else:\n                    return False\n    \n    array = [[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]]\n    s = Solution()\n    print(s.find(8, array))\n    ```\n\n    ","slug":"python小结(七)","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz397003512mjdz4k5sds","content":"<h1 id=\"python小结-七\"><a href=\"#python小结-七\" class=\"headerlink\" title=\"python小结(七)\"></a>python小结(七)</h1><h2 id=\"技术性问题\"><a href=\"#技术性问题\" class=\"headerlink\" title=\"技术性问题\"></a>技术性问题</h2><ol>\n<li><p>简述函数式编程</p>\n<blockquote>\n<p>函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。 – wiki</p>\n<p><a href=\"https://www.jianshu.com/p/856475c7fa01\">https://www.jianshu.com/p/856475c7fa01</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080\">https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080</a></p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">概念：\n<span class=\"token number\">1</span>、函数是一等公民。所谓“一等公民”，指的是函数与其他数据类型一样，处于平等地位，可以复制给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。\n\n<span class=\"token number\">2</span>、不可改变量。在函数式编程中，我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式。这里说的‘变量’是不能被小改的。所有的变量只能被赋值一次初值\n\n<span class=\"token number\">3</span>、<span class=\"token builtin\">map</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">reduce</span> 他们是最常用的函数式编程\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> r <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">81</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">25</span>\n特性：\n\n函数是 “一等公民”\n只用 “表达式”，不用 “语句”\n没有 “副作用”\n不修改状态\n引用透明（函数运行只靠参数）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>什么是匿名函数，有什么局限性</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lambda 表达式是 Python 中创建匿名函数的一个特殊语法. 我称 lambda 语法本身为 lambda 表达式，而它返回的函数我称之为 lambda 函数。或者称为匿名函数。\nPython 的 lambda 表达式允许在一行代码中创建一个函数并传递。\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>def square<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span>            <span class=\"token comment\"># 计算平方数</span>\n<span class=\"token punctuation\">..</span>.     <span class=\"token builtin class-name\">return</span> x ** <span class=\"token number\">2</span>\n<span class=\"token punctuation\">..</span>. \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> map<span class=\"token punctuation\">(</span>square, <span class=\"token punctuation\">[</span><span class=\"token number\">1,2</span>,3,4,5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 计算列表各个元素的平方</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">4</span>, <span class=\"token number\">9</span>, <span class=\"token number\">16</span>, <span class=\"token number\">25</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> map<span class=\"token punctuation\">(</span>lambda x: x ** <span class=\"token number\">2</span>, <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span>, <span class=\"token number\">4</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 使用 lambda 匿名函数</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">4</span>, <span class=\"token number\">9</span>, <span class=\"token number\">16</span>, <span class=\"token number\">25</span><span class=\"token punctuation\">]</span>\n \n<span class=\"token comment\"># 提供了两个列表，对相同位置的列表数据进行相加</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> map<span class=\"token punctuation\">(</span>lambda x, y: x + y, <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">3</span>, <span class=\"token number\">5</span>, <span class=\"token number\">7</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>, <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">4</span>, <span class=\"token number\">6</span>, <span class=\"token number\">8</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span>, <span class=\"token number\">7</span>, <span class=\"token number\">11</span>, <span class=\"token number\">15</span>, <span class=\"token number\">19</span><span class=\"token punctuation\">]</span>\nlambda 表达式可以写出非常简练的代码，但是缺点也非常明显：难于理解，降低了可读性和性能。\nlamda优点：\n\n代码简洁\n不增加额外变量\nlambda 表达式与命名函数的主要不同点:\n可以立刻传递<span class=\"token punctuation\">(</span>无需变量<span class=\"token punctuation\">)</span>\n在内部只能包含一行代码\n自动返回结果\n既没有文档字符串, 也没有名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>如何捕捉异常，常用的异常处理机制有哪些</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">捕捉异常可以使用<span class=\"token keyword\">try</span><span class=\"token operator\">/</span><span class=\"token keyword\">except</span>语句。<span class=\"token keyword\">try</span><span class=\"token operator\">/</span><span class=\"token keyword\">except</span>语句用来检测<span class=\"token keyword\">try</span>语句块中的错误，从而让<span class=\"token keyword\">except</span>语句捕获异常信息并处理。\n\n如果你不想在异常发生时结束你的程序，只需在<span class=\"token keyword\">try</span>里捕获它。\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">&gt;</span>        <span class=\"token comment\">#运行别的代码</span>\n<span class=\"token keyword\">except</span> <span class=\"token operator\">&lt;</span>名字<span class=\"token operator\">&gt;</span>：\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">&gt;</span>        <span class=\"token comment\">#如果在try部份引发了'name'异常</span>\n<span class=\"token keyword\">except</span> <span class=\"token operator\">&lt;</span>名字<span class=\"token operator\">&gt;</span>，<span class=\"token operator\">&lt;</span>数据<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">&gt;</span>        <span class=\"token comment\">#如果引发了'name'异常，获得附加的数据</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">&gt;</span>        <span class=\"token comment\">#如果没有异常发生</span>\n\nsys模块获取异常\n        另一种获取异常信息的途径是通过sys模块中的exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数。该函数回返回一个三元组<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>异常类，异常类的实例，跟中记录对象<span class=\"token punctuation\">)</span>。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>copy() 和 deepcopy() 的区别</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">浅复制：仅拷贝基本数据类型，字典 copy 方法和copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法，也是浅复制；\n深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>函数装饰器有什么作用 **</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。\n\n<span class=\"token comment\"># 测试代码运行时间的装饰器</span>\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cal_time</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        t1 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        t2 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s running time: %s secs.'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">,</span> t2 <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>新式类和旧式类的区别，如何确保使用的是新式类</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span>、新式类都从<span class=\"token builtin\">object</span>继承，经典类不需要。\n\n<span class=\"token number\">2</span>、新式类的MRO<span class=\"token punctuation\">(</span>method resolution order 基类搜索顺序<span class=\"token punctuation\">)</span>算法采用C3算法广度优先搜索，而旧式类的MRO算法是采用深度优先搜索\n\n<span class=\"token number\">3</span>、新式类相同父类只执行一次构造函数，经典类重复执行多次。\n\n在Python <span class=\"token number\">3.</span>x中取消了经典类，默认都是新式类，并且不必显式的继承<span class=\"token builtin\">object</span>：\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n三种写法并无区别，推荐第一种<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"7\">\n<li><p>简述Python的作用域以及Python搜索变量的顺序</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">python中的作用域分4种情况：\n\n（1）L：local，局部作用域，即函数中定义的变量；\n\n（2）E：enclosing，嵌套的父级函数的局部作用域，即包含此函数的上级函数的局部作用域，但不是全局的；\n\n（3）G：globa，全局变量，就是模块级别定义的变量；\n\n（4）B：built-in，系统固定模块里面的变量，比如int, bytearray等。\n\n搜索变量的优先级顺序依次是：局部作用域&gt;外层作用域&gt;当前模块中的全局&gt;python内置作用域，也就是LEGB。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"8\">\n<li><p>简述 <strong><strong>new</strong></strong> 和 ____init____的区别</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">__init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数\n\n<span class=\"token number\">1</span>、__new__至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别\n\n<span class=\"token number\">2</span>、__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以<span class=\"token keyword\">return</span>父类（通过<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>当前类名<span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">)</span>）__new__出来的实例，或者直接是<span class=\"token builtin\">object</span>的__new__出来的实例\n\n<span class=\"token number\">3</span>、__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值\n\n<span class=\"token number\">4</span>、如果__new__创建的是当前类的实例，会自动调用__init__函数，通过<span class=\"token keyword\">return</span>语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名，；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数。\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is init method'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is cls`s id'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is new method'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is Class A of id'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># this is cls`s id 94331320742352</span>\n<span class=\"token comment\"># this is new method &lt;__main__.A object at 0x7efd147af100&gt;</span>\n<span class=\"token comment\"># this is init method &lt;__main__.A object at 0x7efd147af100&gt;</span>\n<span class=\"token comment\"># this is Class A of id 94331320742352</span>\n\ninit 和 new中的 self 和 cls 返回值的地址都一样 返回值是对象\ncls 和 类<span class=\"token builtin\">id</span> 一样，说明指向同一类<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"9\">\n<li><h4 id=\"Python的垃圾回收机制\"><a href=\"#Python的垃圾回收机制\" class=\"headerlink\" title=\"Python的垃圾回收机制 **\"></a>Python的垃圾回收机制 **</h4><h6 id=\"引用计数、标记清除、分代回收\"><a href=\"#引用计数、标记清除、分代回收\" class=\"headerlink\" title=\"引用计数、标记清除、分代回收\"></a>引用计数、标记清除、分代回收</h6><blockquote>\n<p> 参考：<a href=\"http://coolpython.net/python_senior/memory/gc.html\">http://coolpython.net/python_senior/memory/gc.html</a></p>\n</blockquote>\n<h5 id=\"1-引用计数\"><a href=\"#1-引用计数\" class=\"headerlink\" title=\"1. 引用计数\"></a>1. 引用计数</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pyobj</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'对象被销毁'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nobj <span class=\"token operator\">=</span> Pyobj<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj <span class=\"token operator\">=</span> <span class=\"token number\">6</span>   <span class=\"token comment\"># 让变量obj指向其他对象</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1</span>\n<span class=\"token comment\"># 对象被销毁</span>\n<span class=\"token comment\"># 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h6><ul>\n<li>简单</li>\n<li>实时性高，只要计数为0,对象就被销毁，内存被释放，回收内存的时间就会平摊到了平时</li>\n</ul>\n<h6 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h6><pre><code>* 为了维护引用计数消耗了很多资源\n* 循环引用，会导致内存泄露</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 循环引用</span>\nlist1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nlist1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\nlist2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>list1 和 list2 的引用计数永远大于 0，除非手动操作，他们不可能被GC回收。</p>\n<ol start=\"2\">\n<li><h5 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h5></li>\n</ol>\n<ul>\n<li><p>引用计数，并不能解决所有的问题，一旦出现了循环引用，那么，这些对象的引用次数永远都是大于0的，但是这些对象都是不可用的垃圾数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> gc\n  \n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">DictA</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DictA对象被销毁'</span><span class=\"token punctuation\">)</span>\n  \n  \n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">DictB</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DictB对象被销毁'</span><span class=\"token punctuation\">)</span>\n          \n  a <span class=\"token operator\">=</span> DictA<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  b <span class=\"token operator\">=</span> DictB<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  a<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b      <span class=\"token comment\"># 循环引用</span>\n  b<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a\n  \n  a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  \n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># ok</span>\n  <span class=\"token comment\"># DictA对象被销毁</span>\n  <span class=\"token comment\"># DictB对象被销毁</span>\n  \n  <span class=\"token comment\"># 由于存在循环引用，因此，内存中DictA对象的引用计数是2，当a = 1被执行时，引用计数减少为1，但仍然大于0，不会被回收，DictB的对象同样如此</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"标记清除的原理\"><a href=\"#标记清除的原理\" class=\"headerlink\" title=\"标记清除的原理\"></a>标记清除的原理</h4><p>标记清除可以处理这种循环引用的情况，它分为两个阶段</p>\n<h5 id=\"第1阶段，标记阶段\"><a href=\"#第1阶段，标记阶段\" class=\"headerlink\" title=\"第1阶段，标记阶段\"></a>第1阶段，标记阶段</h5><p>GC会把所有活动对象打上标记，这些活动的对象就如同一个点，他们之间的引用关系构成边，最终点和边构成了一个有向图，如下图所示</p>\n<p><img src=\"http://coolpython.net/pictures/python_senior/memory/gc-1583239758-4.jpg\" alt=\"标记清除\"></p>\n<h5 id=\"第2阶段，搜索清除阶段\"><a href=\"#第2阶段，搜索清除阶段\" class=\"headerlink\" title=\"第2阶段，搜索清除阶段\"></a>第2阶段，搜索清除阶段</h5><p>从根对象（root）出发，沿着有向边遍历整个图，不可达的对象就是需要清理的垃圾对象。这个根对象就是全局对象，调用栈，寄存器。</p>\n<p>在上图中，从root出发后，可以到达 1 2 3 4，而5， 6， 7均不能到达，其中6和7互相引用，这3个对象都会被回收。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li><h4 id=\"分代回收\"><a href=\"#分代回收\" class=\"headerlink\" title=\"分代回收\"></a>分代回收</h4></li>\n</ol>\n<ul>\n<li><p>分代回收建立标记清除的基础之上，是一种以空间换时间的操作方式。标记清除可以回收循环引用的垃圾，但是，回收的频次是需要控制的</p>\n</li>\n<li><p>分代回收，根据内存中对象的存活时间将他们分为3代，新生的对象放入到0代，如果一个对象能在第0代的垃圾回收过程中存活下来，GC就会将其放入到1代中，如果1代里的对象在第1代的垃圾回收过程中存活下来，则会进入到2代。</p>\n<h5 id=\"分代回收的触发机制\"><a href=\"#分代回收的触发机制\" class=\"headerlink\" title=\"分代回收的触发机制\"></a>分代回收的触发机制</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> gc\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>gc<span class=\"token punctuation\">.</span>get_threshold<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># (700, 10, 10)</span>\n<span class=\"token triple-quoted-string string\">'''\n当分配对象的个数减去释放对象的个数的差值大于700时，就会产生一次0代回收\n10次0代回收会导致一次1代回收\n10次1代回收会导致一次2代回收\n\n对于第0代的对象来说，他们很可能就被使用一次，因此需要经常被回收。\n\n经过一轮一轮的回收后，能够活着成为第2代的对象，必然是那些使用频繁的对象，而且他们已经存活很久的时间了，大概率的，还会存活很久，因此，2代回收的就不那么频繁，\n'''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> gc\n\ngc<span class=\"token punctuation\">.</span>set_threshold<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>gc<span class=\"token punctuation\">.</span>get_threshold<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 经过了上面的设置，0代和2代的回收会更加频繁</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"10\">\n<li><p>Python中的 @property 有什么作用？如何实现成员变量的只读属性？</p>\n<ul>\n<li><p>python的@property是python的一种装饰器，是用来修饰方法的</p>\n</li>\n<li><p>我们可以使用@property装饰器来创建只读属性，@property装饰器会将方法转换为相同名称的只读属性,可以与所定义的属性配合使用，这样可以防止属性被修改。</p>\n</li>\n</ul>\n<h5 id=\"1-修饰方法，是方法可以像属性一样访问。\"><a href=\"#1-修饰方法，是方法可以像属性一样访问。\" class=\"headerlink\" title=\"1.修饰方法，是方法可以像属性一样访问。\"></a>1.修饰方法，是方法可以像属性一样访问。</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token decorator annotation punctuation\">@property</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">method_with_property</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">##含有@property</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">15</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">method_without_property</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">##不含@property</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">15</span>\n\nl <span class=\"token operator\">=</span> DataSet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>method_with_property<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>method_without_property<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#没有加@property , 必须使用正常的调用方法的形式，即在后面加()</span>\n<span class=\"token comment\"># 15</span>\n<span class=\"token comment\"># 15</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2-与所定义的属性配合使用，这样可以防止属性被修改。\"><a href=\"#2-与所定义的属性配合使用，这样可以防止属性被修改。\" class=\"headerlink\" title=\"2.与所定义的属性配合使用，这样可以防止属性被修改。\"></a>2.与所定义的属性配合使用，这样可以防止属性被修改。</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_images <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>_labels <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">#定义属性的名称</span>\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">images</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#方法加入@property后，这个方法相当于一个属性，这个属性可以让用户进行使用，而且用户有没办法随意修改。</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_images \n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">labels</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_labels\nl <span class=\"token operator\">=</span> DataSet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#用户进行属性调用的时候，直接调用images即可，而不用知道属性名_images，因此用户无法更改属性，从而保护了类的属性。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。</span>\n<span class=\"token comment\"># 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"11\">\n<li><p>*args 和 **kwargs 分别代表什么</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">args和kwargs是python中的可变参数：args表示任意多个无名参数，返回一个tuple；kwargs表示关键字参数，返回一个dict。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"12\">\n<li><p>有用过 with statement 吗？他的好处是什么？具体如何实现?</p>\n<ul>\n<li><p>with语句的作用是通过某种方式简化异常处理，它是所谓的上下文管理器的一种</p>\n<blockquote>\n<p><strong>with语句会在嵌套的代码执行之后，自动关闭文件</strong>。这种做法的还有另一个优势就是，<strong>无论嵌套的代码是以何种方式结束的，它都关闭文件</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"13\">\n<li><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 因为数组是有序的 可以从数组左下角开始找 然后往上移动</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># array 二维列表</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">elif</span> target <span class=\"token operator\">&gt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># len(array[0]) 表示小数组的长度</span>\n                    <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\narray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ol>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"python小结-七\"><a href=\"#python小结-七\" class=\"headerlink\" title=\"python小结(七)\"></a>python小结(七)</h1><h2 id=\"技术性问题\"><a href=\"#技术性问题\" class=\"headerlink\" title=\"技术性问题\"></a>技术性问题</h2><ol>\n<li><p>简述函数式编程</p>\n<blockquote>\n<p>函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。 – wiki</p>\n<p><a href=\"https://www.jianshu.com/p/856475c7fa01\">https://www.jianshu.com/p/856475c7fa01</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080\">https://www.liaoxuefeng.com/wiki/1016959663602400/1017329367486080</a></p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">概念：\n<span class=\"token number\">1</span>、函数是一等公民。所谓“一等公民”，指的是函数与其他数据类型一样，处于平等地位，可以复制给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。\n\n<span class=\"token number\">2</span>、不可改变量。在函数式编程中，我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式。这里说的‘变量’是不能被小改的。所有的变量只能被赋值一次初值\n\n<span class=\"token number\">3</span>、<span class=\"token builtin\">map</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">reduce</span> 他们是最常用的函数式编程\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> r <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">81</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">25</span>\n特性：\n\n函数是 “一等公民”\n只用 “表达式”，不用 “语句”\n没有 “副作用”\n不修改状态\n引用透明（函数运行只靠参数）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>什么是匿名函数，有什么局限性</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lambda 表达式是 Python 中创建匿名函数的一个特殊语法. 我称 lambda 语法本身为 lambda 表达式，而它返回的函数我称之为 lambda 函数。或者称为匿名函数。\nPython 的 lambda 表达式允许在一行代码中创建一个函数并传递。\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>def square<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span>            <span class=\"token comment\"># 计算平方数</span>\n<span class=\"token punctuation\">..</span>.     <span class=\"token builtin class-name\">return</span> x ** <span class=\"token number\">2</span>\n<span class=\"token punctuation\">..</span>. \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> map<span class=\"token punctuation\">(</span>square, <span class=\"token punctuation\">[</span><span class=\"token number\">1,2</span>,3,4,5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 计算列表各个元素的平方</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">4</span>, <span class=\"token number\">9</span>, <span class=\"token number\">16</span>, <span class=\"token number\">25</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> map<span class=\"token punctuation\">(</span>lambda x: x ** <span class=\"token number\">2</span>, <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span>, <span class=\"token number\">4</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 使用 lambda 匿名函数</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">4</span>, <span class=\"token number\">9</span>, <span class=\"token number\">16</span>, <span class=\"token number\">25</span><span class=\"token punctuation\">]</span>\n \n<span class=\"token comment\"># 提供了两个列表，对相同位置的列表数据进行相加</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> map<span class=\"token punctuation\">(</span>lambda x, y: x + y, <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">3</span>, <span class=\"token number\">5</span>, <span class=\"token number\">7</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>, <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">4</span>, <span class=\"token number\">6</span>, <span class=\"token number\">8</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span>, <span class=\"token number\">7</span>, <span class=\"token number\">11</span>, <span class=\"token number\">15</span>, <span class=\"token number\">19</span><span class=\"token punctuation\">]</span>\nlambda 表达式可以写出非常简练的代码，但是缺点也非常明显：难于理解，降低了可读性和性能。\nlamda优点：\n\n代码简洁\n不增加额外变量\nlambda 表达式与命名函数的主要不同点:\n可以立刻传递<span class=\"token punctuation\">(</span>无需变量<span class=\"token punctuation\">)</span>\n在内部只能包含一行代码\n自动返回结果\n既没有文档字符串, 也没有名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>如何捕捉异常，常用的异常处理机制有哪些</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">捕捉异常可以使用<span class=\"token keyword\">try</span><span class=\"token operator\">/</span><span class=\"token keyword\">except</span>语句。<span class=\"token keyword\">try</span><span class=\"token operator\">/</span><span class=\"token keyword\">except</span>语句用来检测<span class=\"token keyword\">try</span>语句块中的错误，从而让<span class=\"token keyword\">except</span>语句捕获异常信息并处理。\n\n如果你不想在异常发生时结束你的程序，只需在<span class=\"token keyword\">try</span>里捕获它。\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">></span>        <span class=\"token comment\">#运行别的代码</span>\n<span class=\"token keyword\">except</span> <span class=\"token operator\">&lt;</span>名字<span class=\"token operator\">></span>：\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">></span>        <span class=\"token comment\">#如果在try部份引发了'name'异常</span>\n<span class=\"token keyword\">except</span> <span class=\"token operator\">&lt;</span>名字<span class=\"token operator\">></span>，<span class=\"token operator\">&lt;</span>数据<span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">></span>        <span class=\"token comment\">#如果引发了'name'异常，获得附加的数据</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">&lt;</span>语句<span class=\"token operator\">></span>        <span class=\"token comment\">#如果没有异常发生</span>\n\nsys模块获取异常\n        另一种获取异常信息的途径是通过sys模块中的exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数。该函数回返回一个三元组<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>异常类，异常类的实例，跟中记录对象<span class=\"token punctuation\">)</span>。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>copy() 和 deepcopy() 的区别</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">浅复制：仅拷贝基本数据类型，字典 copy 方法和copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法，也是浅复制；\n深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>函数装饰器有什么作用 **</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。\n\n<span class=\"token comment\"># 测试代码运行时间的装饰器</span>\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cal_time</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        t1 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        t2 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s running time: %s secs.'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">,</span> t2 <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>新式类和旧式类的区别，如何确保使用的是新式类</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span>、新式类都从<span class=\"token builtin\">object</span>继承，经典类不需要。\n\n<span class=\"token number\">2</span>、新式类的MRO<span class=\"token punctuation\">(</span>method resolution order 基类搜索顺序<span class=\"token punctuation\">)</span>算法采用C3算法广度优先搜索，而旧式类的MRO算法是采用深度优先搜索\n\n<span class=\"token number\">3</span>、新式类相同父类只执行一次构造函数，经典类重复执行多次。\n\n在Python <span class=\"token number\">3.</span>x中取消了经典类，默认都是新式类，并且不必显式的继承<span class=\"token builtin\">object</span>：\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n三种写法并无区别，推荐第一种<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"7\">\n<li><p>简述Python的作用域以及Python搜索变量的顺序</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">python中的作用域分4种情况：\n\n（1）L：local，局部作用域，即函数中定义的变量；\n\n（2）E：enclosing，嵌套的父级函数的局部作用域，即包含此函数的上级函数的局部作用域，但不是全局的；\n\n（3）G：globa，全局变量，就是模块级别定义的变量；\n\n（4）B：built-in，系统固定模块里面的变量，比如int, bytearray等。\n\n搜索变量的优先级顺序依次是：局部作用域&gt;外层作用域&gt;当前模块中的全局&gt;python内置作用域，也就是LEGB。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"8\">\n<li><p>简述 <strong><strong>new</strong></strong> 和 ____init____的区别</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">__init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数\n\n<span class=\"token number\">1</span>、__new__至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别\n\n<span class=\"token number\">2</span>、__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以<span class=\"token keyword\">return</span>父类（通过<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>当前类名<span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">)</span>）__new__出来的实例，或者直接是<span class=\"token builtin\">object</span>的__new__出来的实例\n\n<span class=\"token number\">3</span>、__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值\n\n<span class=\"token number\">4</span>、如果__new__创建的是当前类的实例，会自动调用__init__函数，通过<span class=\"token keyword\">return</span>语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名，；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数。\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is init method'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is cls`s id'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is new method'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is Class A of id'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># this is cls`s id 94331320742352</span>\n<span class=\"token comment\"># this is new method &lt;__main__.A object at 0x7efd147af100></span>\n<span class=\"token comment\"># this is init method &lt;__main__.A object at 0x7efd147af100></span>\n<span class=\"token comment\"># this is Class A of id 94331320742352</span>\n\ninit 和 new中的 self 和 cls 返回值的地址都一样 返回值是对象\ncls 和 类<span class=\"token builtin\">id</span> 一样，说明指向同一类<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"9\">\n<li><h4 id=\"Python的垃圾回收机制\"><a href=\"#Python的垃圾回收机制\" class=\"headerlink\" title=\"Python的垃圾回收机制 **\"></a>Python的垃圾回收机制 **</h4><h6 id=\"引用计数、标记清除、分代回收\"><a href=\"#引用计数、标记清除、分代回收\" class=\"headerlink\" title=\"引用计数、标记清除、分代回收\"></a>引用计数、标记清除、分代回收</h6><blockquote>\n<p> 参考：<a href=\"http://coolpython.net/python_senior/memory/gc.html\">http://coolpython.net/python_senior/memory/gc.html</a></p>\n</blockquote>\n<h5 id=\"1-引用计数\"><a href=\"#1-引用计数\" class=\"headerlink\" title=\"1. 引用计数\"></a>1. 引用计数</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pyobj</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'对象被销毁'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nobj <span class=\"token operator\">=</span> Pyobj<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj <span class=\"token operator\">=</span> <span class=\"token number\">6</span>   <span class=\"token comment\"># 让变量obj指向其他对象</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1</span>\n<span class=\"token comment\"># 对象被销毁</span>\n<span class=\"token comment\"># 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h6><ul>\n<li>简单</li>\n<li>实时性高，只要计数为0,对象就被销毁，内存被释放，回收内存的时间就会平摊到了平时</li>\n</ul>\n<h6 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h6><pre><code>* 为了维护引用计数消耗了很多资源\n* 循环引用，会导致内存泄露</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 循环引用</span>\nlist1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nlist1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\nlist2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>list1 和 list2 的引用计数永远大于 0，除非手动操作，他们不可能被GC回收。</p>\n<ol start=\"2\">\n<li><h5 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h5></li>\n</ol>\n<ul>\n<li><p>引用计数，并不能解决所有的问题，一旦出现了循环引用，那么，这些对象的引用次数永远都是大于0的，但是这些对象都是不可用的垃圾数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> gc\n  \n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">DictA</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DictA对象被销毁'</span><span class=\"token punctuation\">)</span>\n  \n  \n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">DictB</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DictB对象被销毁'</span><span class=\"token punctuation\">)</span>\n          \n  a <span class=\"token operator\">=</span> DictA<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  b <span class=\"token operator\">=</span> DictB<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  a<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b      <span class=\"token comment\"># 循环引用</span>\n  b<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a\n  \n  a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  \n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># ok</span>\n  <span class=\"token comment\"># DictA对象被销毁</span>\n  <span class=\"token comment\"># DictB对象被销毁</span>\n  \n  <span class=\"token comment\"># 由于存在循环引用，因此，内存中DictA对象的引用计数是2，当a = 1被执行时，引用计数减少为1，但仍然大于0，不会被回收，DictB的对象同样如此</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"标记清除的原理\"><a href=\"#标记清除的原理\" class=\"headerlink\" title=\"标记清除的原理\"></a>标记清除的原理</h4><p>标记清除可以处理这种循环引用的情况，它分为两个阶段</p>\n<h5 id=\"第1阶段，标记阶段\"><a href=\"#第1阶段，标记阶段\" class=\"headerlink\" title=\"第1阶段，标记阶段\"></a>第1阶段，标记阶段</h5><p>GC会把所有活动对象打上标记，这些活动的对象就如同一个点，他们之间的引用关系构成边，最终点和边构成了一个有向图，如下图所示</p>\n<p><img src=\"http://coolpython.net/pictures/python_senior/memory/gc-1583239758-4.jpg\" alt=\"标记清除\"></p>\n<h5 id=\"第2阶段，搜索清除阶段\"><a href=\"#第2阶段，搜索清除阶段\" class=\"headerlink\" title=\"第2阶段，搜索清除阶段\"></a>第2阶段，搜索清除阶段</h5><p>从根对象（root）出发，沿着有向边遍历整个图，不可达的对象就是需要清理的垃圾对象。这个根对象就是全局对象，调用栈，寄存器。</p>\n<p>在上图中，从root出发后，可以到达 1 2 3 4，而5， 6， 7均不能到达，其中6和7互相引用，这3个对象都会被回收。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li><h4 id=\"分代回收\"><a href=\"#分代回收\" class=\"headerlink\" title=\"分代回收\"></a>分代回收</h4></li>\n</ol>\n<ul>\n<li><p>分代回收建立标记清除的基础之上，是一种以空间换时间的操作方式。标记清除可以回收循环引用的垃圾，但是，回收的频次是需要控制的</p>\n</li>\n<li><p>分代回收，根据内存中对象的存活时间将他们分为3代，新生的对象放入到0代，如果一个对象能在第0代的垃圾回收过程中存活下来，GC就会将其放入到1代中，如果1代里的对象在第1代的垃圾回收过程中存活下来，则会进入到2代。</p>\n<h5 id=\"分代回收的触发机制\"><a href=\"#分代回收的触发机制\" class=\"headerlink\" title=\"分代回收的触发机制\"></a>分代回收的触发机制</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> gc\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>gc<span class=\"token punctuation\">.</span>get_threshold<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># (700, 10, 10)</span>\n<span class=\"token triple-quoted-string string\">'''\n当分配对象的个数减去释放对象的个数的差值大于700时，就会产生一次0代回收\n10次0代回收会导致一次1代回收\n10次1代回收会导致一次2代回收\n\n对于第0代的对象来说，他们很可能就被使用一次，因此需要经常被回收。\n\n经过一轮一轮的回收后，能够活着成为第2代的对象，必然是那些使用频繁的对象，而且他们已经存活很久的时间了，大概率的，还会存活很久，因此，2代回收的就不那么频繁，\n'''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> gc\n\ngc<span class=\"token punctuation\">.</span>set_threshold<span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>gc<span class=\"token punctuation\">.</span>get_threshold<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 经过了上面的设置，0代和2代的回收会更加频繁</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"10\">\n<li><p>Python中的 @property 有什么作用？如何实现成员变量的只读属性？</p>\n<ul>\n<li><p>python的@property是python的一种装饰器，是用来修饰方法的</p>\n</li>\n<li><p>我们可以使用@property装饰器来创建只读属性，@property装饰器会将方法转换为相同名称的只读属性,可以与所定义的属性配合使用，这样可以防止属性被修改。</p>\n</li>\n</ul>\n<h5 id=\"1-修饰方法，是方法可以像属性一样访问。\"><a href=\"#1-修饰方法，是方法可以像属性一样访问。\" class=\"headerlink\" title=\"1.修饰方法，是方法可以像属性一样访问。\"></a>1.修饰方法，是方法可以像属性一样访问。</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token decorator annotation punctuation\">@property</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">method_with_property</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">##含有@property</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">15</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">method_without_property</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">##不含@property</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">15</span>\n\nl <span class=\"token operator\">=</span> DataSet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>method_with_property<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>method_without_property<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#没有加@property , 必须使用正常的调用方法的形式，即在后面加()</span>\n<span class=\"token comment\"># 15</span>\n<span class=\"token comment\"># 15</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2-与所定义的属性配合使用，这样可以防止属性被修改。\"><a href=\"#2-与所定义的属性配合使用，这样可以防止属性被修改。\" class=\"headerlink\" title=\"2.与所定义的属性配合使用，这样可以防止属性被修改。\"></a>2.与所定义的属性配合使用，这样可以防止属性被修改。</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_images <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>_labels <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">#定义属性的名称</span>\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">images</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#方法加入@property后，这个方法相当于一个属性，这个属性可以让用户进行使用，而且用户有没办法随意修改。</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_images \n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">labels</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_labels\nl <span class=\"token operator\">=</span> DataSet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#用户进行属性调用的时候，直接调用images即可，而不用知道属性名_images，因此用户无法更改属性，从而保护了类的属性。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 加了@property后，可以用调用属性的形式来调用方法,后面不需要加（）。</span>\n<span class=\"token comment\"># 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"11\">\n<li><p>*args 和 **kwargs 分别代表什么</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">args和kwargs是python中的可变参数：args表示任意多个无名参数，返回一个tuple；kwargs表示关键字参数，返回一个dict。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n</li>\n</ol>\n<ol start=\"12\">\n<li><p>有用过 with statement 吗？他的好处是什么？具体如何实现?</p>\n<ul>\n<li><p>with语句的作用是通过某种方式简化异常处理，它是所谓的上下文管理器的一种</p>\n<blockquote>\n<p><strong>with语句会在嵌套的代码执行之后，自动关闭文件</strong>。这种做法的还有另一个优势就是，<strong>无论嵌套的代码是以何种方式结束的，它都关闭文件</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"13\">\n<li><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 因为数组是有序的 可以从数组左下角开始找 然后往上移动</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># array 二维列表</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">elif</span> target <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># len(array[0]) 表示小数组的长度</span>\n                    <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\narray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ol>\n"},{"title":"python小结(五)","top":false,"date":"2020-06-25T06:34:04.000Z","_content":"# python小结(五)\n\n##### json序列化时，默认中文会变成unicode，如何避免\n\n```python\nimport json\njson.dumps({'dd':'你好'}, ensure_ascii=False)                     # '{\"dd\": \"你好\"}'\n```\n\n##### python递归的最大层数？998\n\n系统堆栈深度有一定限度，防止无限递归造成Python溢出崩溃\n\n```python\n#修改深度\nimport sys\nsys.setrecursionlimit(1500)\n```\n\n##### 用一行代码实现数值交换：\n\n```python\na = 1\nb = 2\nc=a;a=b;b=c\n```\n\n##### 文件操作时：xreadlines和readlines的区别？\n\n```\nread()会读取整个文件，将读取到底的文件内容放到一个字符串变量，返回str类型\nreadline()读取一行内容，放到一个字符串变量，返回str类型\nreadlines()读取文件所有内容，按行为单位放到一个列表中，返回list类型\nxreadlines()返回一个生成器，来循环操作文件的每一行\n```\n\n##### *arg和**kwarg作用\n\n```\ndef function(required_arg,*arg,**kwarg):    \n\tpass\n```\n\n*arg会把多出来的位置参数转化为tuple\n**kwarg会把关键字参数(key=value)转化为dict\n\n##### is和==的区别\n\n```\n对象：id(身份标识)、type(数据类型)和value(值)\nis判断对象所有信息，==比较值\n只有数值型和字符串型的情况下，a is b才为True，当a和b是tuple，list，dict或set型时，a is b为False\n```\n\n##### 简述Python的深浅拷贝以及应用场景？\n\n```\n浅复制：仅拷贝基本数据类型，字典 copy 方法和copy.copy()方法，也是浅复制；\n深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。\n```\n\n##### logging模块的作用？以及应用场景？\n\n```\nlogging模块定义的函数和类为应用程序和库的开发实现了一个灵活的事件日志系统\n\n\n```\n\n##### 简述容器、生成器、迭代器、可迭代对象 以及应用场景？\n\n容器：多元素组织的数据结构，可逐个迭代地获取，通常数据结构把元素存储在内存中（迭代器和生成器对象不放在内存）。\n可迭代对象：很多容器都是可迭代对象，实现了iter方法，还有打开状态的files、sockets可以返回一个迭代器的对象，。\n迭代器：带状态的对象，可以通过调用实现**iter**和**next**的对象都是迭代器，iter返回自身，next返回容器的下一个值。\n生成器：生成器是一类特殊的迭代器，不需要iter和next方法，直接使用yield返回，生成器一定是迭代器，生成器以一种懒加载的模式生成值。可以利用更少地中间变量写流式代码，相比其它容器对象更加节约内存和CPU\n生成器表达式：列表推导式，返回一个生成器对象。\n\n##### 谈谈你对闭包的理解？\n\n闭包使得局部变量在函数外被访问成为可能，函数作为函数的值返回，闭包本质上是一个特殊的函数，闭包将变量的值始终保存在函数中。闭包避免了使用全局变量，此外，闭包允许将函数与其所操作的某些数据（环境）关连起来。这一点与面向对象编程是非常类似的，在面向对象编程中，对象允许我们将某些数据（对象的属性）与一个或者多个方法相关联。当对象中只有一个方法时，这时使用闭包是更好的选择。所有函数都有一个 **closure**属性，如果这个函数是一个闭包的话，那么它返回的是一个由 cell 对象 组成的元组对象。cell 对象的cell_contents 属性就是闭包中的自由变量。\n\n##### Python 垃圾回收机制？\n\n72.魔法函数 **call**怎么使用?\n\n73.如何判断一个对象是函数还是方法？\n\n74.@classmethod 和@staticmethod 用法和区别\n\n75.Python 中的接口如何实现？\n\n76.Python 中的反射了解么?\n\n77.metaclass 作用？以及应用场景？\n\n78.hasattr() getattr() setattr()的用法\n\n```python\n# https://www.cnblogs.com/lizm166/p/10267858.html\nclass A():\n    name = 'python'\n    def func(self):\n        return 'Hello world'\n\nif hasattr(A, 'age'):\n    print(getattr(A, 'age'))\nelse:\n    setattr(A, 'age', 20)\n\ngetattr(A, 'age')\n# 结果：20\n```\n\n79.请列举你知道的 Python 的魔法方法及用途。\n\n80.如何知道一个 Python 对象的类型？\n\n81.Python 的传参是传值还是传址？\n\n\n\n","source":"_posts/python小结(五).md","raw":"---\ntitle: python小结(五)\ntags:\n  - Python\ncategories:\n  - Python\ntop: false\ndate: 2020-06-25 14:34:04\n---\n# python小结(五)\n\n##### json序列化时，默认中文会变成unicode，如何避免\n\n```python\nimport json\njson.dumps({'dd':'你好'}, ensure_ascii=False)                     # '{\"dd\": \"你好\"}'\n```\n\n##### python递归的最大层数？998\n\n系统堆栈深度有一定限度，防止无限递归造成Python溢出崩溃\n\n```python\n#修改深度\nimport sys\nsys.setrecursionlimit(1500)\n```\n\n##### 用一行代码实现数值交换：\n\n```python\na = 1\nb = 2\nc=a;a=b;b=c\n```\n\n##### 文件操作时：xreadlines和readlines的区别？\n\n```\nread()会读取整个文件，将读取到底的文件内容放到一个字符串变量，返回str类型\nreadline()读取一行内容，放到一个字符串变量，返回str类型\nreadlines()读取文件所有内容，按行为单位放到一个列表中，返回list类型\nxreadlines()返回一个生成器，来循环操作文件的每一行\n```\n\n##### *arg和**kwarg作用\n\n```\ndef function(required_arg,*arg,**kwarg):    \n\tpass\n```\n\n*arg会把多出来的位置参数转化为tuple\n**kwarg会把关键字参数(key=value)转化为dict\n\n##### is和==的区别\n\n```\n对象：id(身份标识)、type(数据类型)和value(值)\nis判断对象所有信息，==比较值\n只有数值型和字符串型的情况下，a is b才为True，当a和b是tuple，list，dict或set型时，a is b为False\n```\n\n##### 简述Python的深浅拷贝以及应用场景？\n\n```\n浅复制：仅拷贝基本数据类型，字典 copy 方法和copy.copy()方法，也是浅复制；\n深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。\n```\n\n##### logging模块的作用？以及应用场景？\n\n```\nlogging模块定义的函数和类为应用程序和库的开发实现了一个灵活的事件日志系统\n\n\n```\n\n##### 简述容器、生成器、迭代器、可迭代对象 以及应用场景？\n\n容器：多元素组织的数据结构，可逐个迭代地获取，通常数据结构把元素存储在内存中（迭代器和生成器对象不放在内存）。\n可迭代对象：很多容器都是可迭代对象，实现了iter方法，还有打开状态的files、sockets可以返回一个迭代器的对象，。\n迭代器：带状态的对象，可以通过调用实现**iter**和**next**的对象都是迭代器，iter返回自身，next返回容器的下一个值。\n生成器：生成器是一类特殊的迭代器，不需要iter和next方法，直接使用yield返回，生成器一定是迭代器，生成器以一种懒加载的模式生成值。可以利用更少地中间变量写流式代码，相比其它容器对象更加节约内存和CPU\n生成器表达式：列表推导式，返回一个生成器对象。\n\n##### 谈谈你对闭包的理解？\n\n闭包使得局部变量在函数外被访问成为可能，函数作为函数的值返回，闭包本质上是一个特殊的函数，闭包将变量的值始终保存在函数中。闭包避免了使用全局变量，此外，闭包允许将函数与其所操作的某些数据（环境）关连起来。这一点与面向对象编程是非常类似的，在面向对象编程中，对象允许我们将某些数据（对象的属性）与一个或者多个方法相关联。当对象中只有一个方法时，这时使用闭包是更好的选择。所有函数都有一个 **closure**属性，如果这个函数是一个闭包的话，那么它返回的是一个由 cell 对象 组成的元组对象。cell 对象的cell_contents 属性就是闭包中的自由变量。\n\n##### Python 垃圾回收机制？\n\n72.魔法函数 **call**怎么使用?\n\n73.如何判断一个对象是函数还是方法？\n\n74.@classmethod 和@staticmethod 用法和区别\n\n75.Python 中的接口如何实现？\n\n76.Python 中的反射了解么?\n\n77.metaclass 作用？以及应用场景？\n\n78.hasattr() getattr() setattr()的用法\n\n```python\n# https://www.cnblogs.com/lizm166/p/10267858.html\nclass A():\n    name = 'python'\n    def func(self):\n        return 'Hello world'\n\nif hasattr(A, 'age'):\n    print(getattr(A, 'age'))\nelse:\n    setattr(A, 'age', 20)\n\ngetattr(A, 'age')\n# 结果：20\n```\n\n79.请列举你知道的 Python 的魔法方法及用途。\n\n80.如何知道一个 Python 对象的类型？\n\n81.Python 的传参是传值还是传址？\n\n\n\n","slug":"python小结(五)","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz397003812mjg9611160","content":"<h1 id=\"python小结-五\"><a href=\"#python小结-五\" class=\"headerlink\" title=\"python小结(五)\"></a>python小结(五)</h1><h5 id=\"json序列化时，默认中文会变成unicode，如何避免\"><a href=\"#json序列化时，默认中文会变成unicode，如何避免\" class=\"headerlink\" title=\"json序列化时，默认中文会变成unicode，如何避免\"></a>json序列化时，默认中文会变成unicode，如何避免</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\njson<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'dd'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>                     <span class=\"token comment\"># '{\"dd\": \"你好\"}'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"python递归的最大层数？998\"><a href=\"#python递归的最大层数？998\" class=\"headerlink\" title=\"python递归的最大层数？998\"></a>python递归的最大层数？998</h5><p>系统堆栈深度有一定限度，防止无限递归造成Python溢出崩溃</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#修改深度</span>\n<span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"用一行代码实现数值交换：\"><a href=\"#用一行代码实现数值交换：\" class=\"headerlink\" title=\"用一行代码实现数值交换：\"></a>用一行代码实现数值交换：</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nc<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"文件操作时：xreadlines和readlines的区别？\"><a href=\"#文件操作时：xreadlines和readlines的区别？\" class=\"headerlink\" title=\"文件操作时：xreadlines和readlines的区别？\"></a>文件操作时：xreadlines和readlines的区别？</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">read()会读取整个文件，将读取到底的文件内容放到一个字符串变量，返回str类型\nreadline()读取一行内容，放到一个字符串变量，返回str类型\nreadlines()读取文件所有内容，按行为单位放到一个列表中，返回list类型\nxreadlines()返回一个生成器，来循环操作文件的每一行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"arg和-kwarg作用\"><a href=\"#arg和-kwarg作用\" class=\"headerlink\" title=\"*arg和**kwarg作用\"></a>*arg和**kwarg作用</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">def function(required_arg,*arg,**kwarg):    \n\tpass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>*arg会把多出来的位置参数转化为tuple<br>**kwarg会把关键字参数(key=value)转化为dict</p>\n<h5 id=\"is和-的区别\"><a href=\"#is和-的区别\" class=\"headerlink\" title=\"is和==的区别\"></a>is和==的区别</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">对象：id(身份标识)、type(数据类型)和value(值)\nis判断对象所有信息，==比较值\n只有数值型和字符串型的情况下，a is b才为True，当a和b是tuple，list，dict或set型时，a is b为False<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"简述Python的深浅拷贝以及应用场景？\"><a href=\"#简述Python的深浅拷贝以及应用场景？\" class=\"headerlink\" title=\"简述Python的深浅拷贝以及应用场景？\"></a>简述Python的深浅拷贝以及应用场景？</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">浅复制：仅拷贝基本数据类型，字典 copy 方法和copy.copy()方法，也是浅复制；\n深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"logging模块的作用？以及应用场景？\"><a href=\"#logging模块的作用？以及应用场景？\" class=\"headerlink\" title=\"logging模块的作用？以及应用场景？\"></a>logging模块的作用？以及应用场景？</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">logging模块定义的函数和类为应用程序和库的开发实现了一个灵活的事件日志系统\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"简述容器、生成器、迭代器、可迭代对象-以及应用场景？\"><a href=\"#简述容器、生成器、迭代器、可迭代对象-以及应用场景？\" class=\"headerlink\" title=\"简述容器、生成器、迭代器、可迭代对象 以及应用场景？\"></a>简述容器、生成器、迭代器、可迭代对象 以及应用场景？</h5><p>容器：多元素组织的数据结构，可逐个迭代地获取，通常数据结构把元素存储在内存中（迭代器和生成器对象不放在内存）。<br>可迭代对象：很多容器都是可迭代对象，实现了iter方法，还有打开状态的files、sockets可以返回一个迭代器的对象，。<br>迭代器：带状态的对象，可以通过调用实现<strong>iter</strong>和<strong>next</strong>的对象都是迭代器，iter返回自身，next返回容器的下一个值。<br>生成器：生成器是一类特殊的迭代器，不需要iter和next方法，直接使用yield返回，生成器一定是迭代器，生成器以一种懒加载的模式生成值。可以利用更少地中间变量写流式代码，相比其它容器对象更加节约内存和CPU<br>生成器表达式：列表推导式，返回一个生成器对象。</p>\n<h5 id=\"谈谈你对闭包的理解？\"><a href=\"#谈谈你对闭包的理解？\" class=\"headerlink\" title=\"谈谈你对闭包的理解？\"></a>谈谈你对闭包的理解？</h5><p>闭包使得局部变量在函数外被访问成为可能，函数作为函数的值返回，闭包本质上是一个特殊的函数，闭包将变量的值始终保存在函数中。闭包避免了使用全局变量，此外，闭包允许将函数与其所操作的某些数据（环境）关连起来。这一点与面向对象编程是非常类似的，在面向对象编程中，对象允许我们将某些数据（对象的属性）与一个或者多个方法相关联。当对象中只有一个方法时，这时使用闭包是更好的选择。所有函数都有一个 <strong>closure</strong>属性，如果这个函数是一个闭包的话，那么它返回的是一个由 cell 对象 组成的元组对象。cell 对象的cell_contents 属性就是闭包中的自由变量。</p>\n<h5 id=\"Python-垃圾回收机制？\"><a href=\"#Python-垃圾回收机制？\" class=\"headerlink\" title=\"Python 垃圾回收机制？\"></a>Python 垃圾回收机制？</h5><p>72.魔法函数 <strong>call</strong>怎么使用?</p>\n<p>73.如何判断一个对象是函数还是方法？</p>\n<p>74.@classmethod 和@staticmethod 用法和区别</p>\n<p>75.Python 中的接口如何实现？</p>\n<p>76.Python 中的反射了解么?</p>\n<p>77.metaclass 作用？以及应用场景？</p>\n<p>78.hasattr() getattr() setattr()的用法</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># https://www.cnblogs.com/lizm166/p/10267858.html</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">'python'</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello world'</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>79.请列举你知道的 Python 的魔法方法及用途。</p>\n<p>80.如何知道一个 Python 对象的类型？</p>\n<p>81.Python 的传参是传值还是传址？</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"python小结-五\"><a href=\"#python小结-五\" class=\"headerlink\" title=\"python小结(五)\"></a>python小结(五)</h1><h5 id=\"json序列化时，默认中文会变成unicode，如何避免\"><a href=\"#json序列化时，默认中文会变成unicode，如何避免\" class=\"headerlink\" title=\"json序列化时，默认中文会变成unicode，如何避免\"></a>json序列化时，默认中文会变成unicode，如何避免</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\njson<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'dd'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>                     <span class=\"token comment\"># '&#123;\"dd\": \"你好\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"python递归的最大层数？998\"><a href=\"#python递归的最大层数？998\" class=\"headerlink\" title=\"python递归的最大层数？998\"></a>python递归的最大层数？998</h5><p>系统堆栈深度有一定限度，防止无限递归造成Python溢出崩溃</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#修改深度</span>\n<span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"用一行代码实现数值交换：\"><a href=\"#用一行代码实现数值交换：\" class=\"headerlink\" title=\"用一行代码实现数值交换：\"></a>用一行代码实现数值交换：</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nc<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"文件操作时：xreadlines和readlines的区别？\"><a href=\"#文件操作时：xreadlines和readlines的区别？\" class=\"headerlink\" title=\"文件操作时：xreadlines和readlines的区别？\"></a>文件操作时：xreadlines和readlines的区别？</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">read()会读取整个文件，将读取到底的文件内容放到一个字符串变量，返回str类型\nreadline()读取一行内容，放到一个字符串变量，返回str类型\nreadlines()读取文件所有内容，按行为单位放到一个列表中，返回list类型\nxreadlines()返回一个生成器，来循环操作文件的每一行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"arg和-kwarg作用\"><a href=\"#arg和-kwarg作用\" class=\"headerlink\" title=\"*arg和**kwarg作用\"></a>*arg和**kwarg作用</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">def function(required_arg,*arg,**kwarg):    \n\tpass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>*arg会把多出来的位置参数转化为tuple<br>**kwarg会把关键字参数(key=value)转化为dict</p>\n<h5 id=\"is和-的区别\"><a href=\"#is和-的区别\" class=\"headerlink\" title=\"is和==的区别\"></a>is和==的区别</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">对象：id(身份标识)、type(数据类型)和value(值)\nis判断对象所有信息，&#x3D;&#x3D;比较值\n只有数值型和字符串型的情况下，a is b才为True，当a和b是tuple，list，dict或set型时，a is b为False<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"简述Python的深浅拷贝以及应用场景？\"><a href=\"#简述Python的深浅拷贝以及应用场景？\" class=\"headerlink\" title=\"简述Python的深浅拷贝以及应用场景？\"></a>简述Python的深浅拷贝以及应用场景？</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">浅复制：仅拷贝基本数据类型，字典 copy 方法和copy.copy()方法，也是浅复制；\n深复制：拷贝数据类型和引用，计算机开辟一块新内存用于存放复制对象。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"logging模块的作用？以及应用场景？\"><a href=\"#logging模块的作用？以及应用场景？\" class=\"headerlink\" title=\"logging模块的作用？以及应用场景？\"></a>logging模块的作用？以及应用场景？</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">logging模块定义的函数和类为应用程序和库的开发实现了一个灵活的事件日志系统\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"简述容器、生成器、迭代器、可迭代对象-以及应用场景？\"><a href=\"#简述容器、生成器、迭代器、可迭代对象-以及应用场景？\" class=\"headerlink\" title=\"简述容器、生成器、迭代器、可迭代对象 以及应用场景？\"></a>简述容器、生成器、迭代器、可迭代对象 以及应用场景？</h5><p>容器：多元素组织的数据结构，可逐个迭代地获取，通常数据结构把元素存储在内存中（迭代器和生成器对象不放在内存）。<br>可迭代对象：很多容器都是可迭代对象，实现了iter方法，还有打开状态的files、sockets可以返回一个迭代器的对象，。<br>迭代器：带状态的对象，可以通过调用实现<strong>iter</strong>和<strong>next</strong>的对象都是迭代器，iter返回自身，next返回容器的下一个值。<br>生成器：生成器是一类特殊的迭代器，不需要iter和next方法，直接使用yield返回，生成器一定是迭代器，生成器以一种懒加载的模式生成值。可以利用更少地中间变量写流式代码，相比其它容器对象更加节约内存和CPU<br>生成器表达式：列表推导式，返回一个生成器对象。</p>\n<h5 id=\"谈谈你对闭包的理解？\"><a href=\"#谈谈你对闭包的理解？\" class=\"headerlink\" title=\"谈谈你对闭包的理解？\"></a>谈谈你对闭包的理解？</h5><p>闭包使得局部变量在函数外被访问成为可能，函数作为函数的值返回，闭包本质上是一个特殊的函数，闭包将变量的值始终保存在函数中。闭包避免了使用全局变量，此外，闭包允许将函数与其所操作的某些数据（环境）关连起来。这一点与面向对象编程是非常类似的，在面向对象编程中，对象允许我们将某些数据（对象的属性）与一个或者多个方法相关联。当对象中只有一个方法时，这时使用闭包是更好的选择。所有函数都有一个 <strong>closure</strong>属性，如果这个函数是一个闭包的话，那么它返回的是一个由 cell 对象 组成的元组对象。cell 对象的cell_contents 属性就是闭包中的自由变量。</p>\n<h5 id=\"Python-垃圾回收机制？\"><a href=\"#Python-垃圾回收机制？\" class=\"headerlink\" title=\"Python 垃圾回收机制？\"></a>Python 垃圾回收机制？</h5><p>72.魔法函数 <strong>call</strong>怎么使用?</p>\n<p>73.如何判断一个对象是函数还是方法？</p>\n<p>74.@classmethod 和@staticmethod 用法和区别</p>\n<p>75.Python 中的接口如何实现？</p>\n<p>76.Python 中的反射了解么?</p>\n<p>77.metaclass 作用？以及应用场景？</p>\n<p>78.hasattr() getattr() setattr()的用法</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># https://www.cnblogs.com/lizm166/p/10267858.html</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">'python'</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello world'</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结果：20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>79.请列举你知道的 Python 的魔法方法及用途。</p>\n<p>80.如何知道一个 Python 对象的类型？</p>\n<p>81.Python 的传参是传值还是传址？</p>\n"},{"title":"python小结(四)","top":false,"date":"2020-06-24T06:34:04.000Z","_content":"# python小结(四)\n\n## 列表\n\n### 1.已知 AList = [1,2,3,1,2],对 AList 列表元素去重，写出具体过程。\n\n```python\nAList=[1,2,3,1,2]\nBList=[]\nfor i in AList:\n    if i not in BList:\n        BList.append(i)\nprint(BList)\n```\n\n\n\n### 2.如何实现 \"1,2,3\" 变成 [\"1\",\"2\",\"3\"]\n\n```python\nIn [163]: a = '1,2,3'                                                                  \nIn [164]: a.split(',')                                                                 \nOut[164]: ['1', '2', '3']\n\n```\n\n\n\n### 3.给定两个 list，A 和 B，找出相同元素和不同元素\n\n```python\nIn [165]: a = [1,2,3 ,5]                                                               \n\nIn [166]: b = [3, 5, 7, 9] \n\nIn [178]: set(set(a)&set(b))                                                           \nOut[178]: {3, 5}\n\nIn [179]: set(set(a)^set(b))                                                           \nOut[179]: {1, 2, 7, 9}\n\n# 使用列表推导式    \nIn [180]: [x for x in a if x in b]                                                     \nOut[180]: [3, 5]\n\n```\n\n\n\n### 4. [[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]\n\n```python\na= [[1,2],[3,4],[5,6]]\n# [j for i in a for j in i]\nlist=[]\nfor i in  a:\n    for j in i:\n        list.append(j)\nprint(list)\n```\n\n\n\n### 5.合并列表[1,5,7,9]和[2,2,6,8]\n\n```\nIn [194]: a = [1, 5, 7, 9]                                                             \n\nIn [195]: b = [2, 4, 6, 8]\n\nIn [196]: a.extend(b)                                                                  \n\nIn [197]: a                                                                            \nOut[197]: [1, 5, 7, 9, 2, 4, 6, 8]\n\n```\n\n\n\n### 6.如何打乱一个列表的元素？\n\n```\nIn [201]: import random                                                                \n\nIn [202]: a = list(range(10))                                                          \n\nIn [203]: a                                                                            \nOut[203]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIn [204]: random.shuffle(a)                                                            \n\nIn [205]: a                                                                            \nOut[205]: [9, 6, 1, 3, 0, 2, 5, 4, 7, 8]\n\n```\n\n## 字典\n\n### 7.字典操作中 del 和 pop 有什么区别\n\n```\ndict.pop(key[, default])\n如果字典中存在键，则dict.pop（）从字典中删除具有给定键的元素并返回其值。\n如果字典中不存在给定的键，则它将返回给定的默认值。\n如果字典中不存在给定键，并且没有将默认值传递给pop（），它将抛出KeyError\n\ndel key          # 删除键\ndict.clear()     # 清空字典\ndel dict         # 删除字典\n```\n\n\n\n### 8.按照字典的内的值进行排序\n\n```pythob\nIn [237]: z = {'a':24, 's':52, 'd':12, 'f':33}  \n\nIn [240]: sorted(z.keys())                                                             \nOut[240]: ['a', 'd', 'f', 's']\n\nIn [239]: sorted(z.items(), key=lambda x:x[1])                                         \nOut[239]: [('d', 12), ('a', 24), ('f', 33), ('s', 52)]\n\n```\n\n\n\n### 9.请合并下面两个字典 a = {\"A\":1,\"B\":2},b = {\"C\":3,\"D\":4}\n\n```python\na.update(b)\n```\n\n\n\n### 10.如何使用生成式的方式生成一个字典，写一段功能代码。\n\n```python\na = {'A': 1, 'B': 2, 'C': 3, 'D': 4}\nprint({k:v for k,v in a.items()})                                            \n# {'A': 1, 'B': 2, 'C': 3, 'D': 4}\n\n```\n\n\n\n### 11.如何把元组(\"a\",\"b\")和元组(1,2)，变为字典{\"a\":1,\"b\":2}\n\n```python\na = (\"a\",\"b\")\nb = (1,2)\ndict(zip(a, b))\n# {\"a\":1,\"b\":2}\n```\n\n### 如何实现[‘1’,’2’,’3’]变成[1,2,3] ?\n\n```python\nlist(int(i) for i in ['1','2'，'3'])\n```\n\n\n\n","source":"_posts/python小结(四).md","raw":"---\ntitle: python小结(四)\ntags:\n  - Python\ncategories:\n  - Python\ntop: false\ndate: 2020-06-24 14:34:04\n---\n# python小结(四)\n\n## 列表\n\n### 1.已知 AList = [1,2,3,1,2],对 AList 列表元素去重，写出具体过程。\n\n```python\nAList=[1,2,3,1,2]\nBList=[]\nfor i in AList:\n    if i not in BList:\n        BList.append(i)\nprint(BList)\n```\n\n\n\n### 2.如何实现 \"1,2,3\" 变成 [\"1\",\"2\",\"3\"]\n\n```python\nIn [163]: a = '1,2,3'                                                                  \nIn [164]: a.split(',')                                                                 \nOut[164]: ['1', '2', '3']\n\n```\n\n\n\n### 3.给定两个 list，A 和 B，找出相同元素和不同元素\n\n```python\nIn [165]: a = [1,2,3 ,5]                                                               \n\nIn [166]: b = [3, 5, 7, 9] \n\nIn [178]: set(set(a)&set(b))                                                           \nOut[178]: {3, 5}\n\nIn [179]: set(set(a)^set(b))                                                           \nOut[179]: {1, 2, 7, 9}\n\n# 使用列表推导式    \nIn [180]: [x for x in a if x in b]                                                     \nOut[180]: [3, 5]\n\n```\n\n\n\n### 4. [[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]\n\n```python\na= [[1,2],[3,4],[5,6]]\n# [j for i in a for j in i]\nlist=[]\nfor i in  a:\n    for j in i:\n        list.append(j)\nprint(list)\n```\n\n\n\n### 5.合并列表[1,5,7,9]和[2,2,6,8]\n\n```\nIn [194]: a = [1, 5, 7, 9]                                                             \n\nIn [195]: b = [2, 4, 6, 8]\n\nIn [196]: a.extend(b)                                                                  \n\nIn [197]: a                                                                            \nOut[197]: [1, 5, 7, 9, 2, 4, 6, 8]\n\n```\n\n\n\n### 6.如何打乱一个列表的元素？\n\n```\nIn [201]: import random                                                                \n\nIn [202]: a = list(range(10))                                                          \n\nIn [203]: a                                                                            \nOut[203]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIn [204]: random.shuffle(a)                                                            \n\nIn [205]: a                                                                            \nOut[205]: [9, 6, 1, 3, 0, 2, 5, 4, 7, 8]\n\n```\n\n## 字典\n\n### 7.字典操作中 del 和 pop 有什么区别\n\n```\ndict.pop(key[, default])\n如果字典中存在键，则dict.pop（）从字典中删除具有给定键的元素并返回其值。\n如果字典中不存在给定的键，则它将返回给定的默认值。\n如果字典中不存在给定键，并且没有将默认值传递给pop（），它将抛出KeyError\n\ndel key          # 删除键\ndict.clear()     # 清空字典\ndel dict         # 删除字典\n```\n\n\n\n### 8.按照字典的内的值进行排序\n\n```pythob\nIn [237]: z = {'a':24, 's':52, 'd':12, 'f':33}  \n\nIn [240]: sorted(z.keys())                                                             \nOut[240]: ['a', 'd', 'f', 's']\n\nIn [239]: sorted(z.items(), key=lambda x:x[1])                                         \nOut[239]: [('d', 12), ('a', 24), ('f', 33), ('s', 52)]\n\n```\n\n\n\n### 9.请合并下面两个字典 a = {\"A\":1,\"B\":2},b = {\"C\":3,\"D\":4}\n\n```python\na.update(b)\n```\n\n\n\n### 10.如何使用生成式的方式生成一个字典，写一段功能代码。\n\n```python\na = {'A': 1, 'B': 2, 'C': 3, 'D': 4}\nprint({k:v for k,v in a.items()})                                            \n# {'A': 1, 'B': 2, 'C': 3, 'D': 4}\n\n```\n\n\n\n### 11.如何把元组(\"a\",\"b\")和元组(1,2)，变为字典{\"a\":1,\"b\":2}\n\n```python\na = (\"a\",\"b\")\nb = (1,2)\ndict(zip(a, b))\n# {\"a\":1,\"b\":2}\n```\n\n### 如何实现[‘1’,’2’,’3’]变成[1,2,3] ?\n\n```python\nlist(int(i) for i in ['1','2'，'3'])\n```\n\n\n\n","slug":"python小结(四)","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz397003b12mj3l26gr8i","content":"<h1 id=\"python小结-四\"><a href=\"#python小结-四\" class=\"headerlink\" title=\"python小结(四)\"></a>python小结(四)</h1><h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"1-已知-AList-1-2-3-1-2-对-AList-列表元素去重，写出具体过程。\"><a href=\"#1-已知-AList-1-2-3-1-2-对-AList-列表元素去重，写出具体过程。\" class=\"headerlink\" title=\"1.已知 AList = [1,2,3,1,2],对 AList 列表元素去重，写出具体过程。\"></a>1.已知 AList = [1,2,3,1,2],对 AList 列表元素去重，写出具体过程。</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">AList<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nBList<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> AList<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> BList<span class=\"token punctuation\">:</span>\n        BList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>BList<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-如何实现-“1-2-3”-变成-“1”-”2”-”3”\"><a href=\"#2-如何实现-“1-2-3”-变成-“1”-”2”-”3”\" class=\"headerlink\" title=\"2.如何实现 “1,2,3” 变成 [“1”,”2”,”3”]\"></a>2.如何实现 “1,2,3” 变成 [“1”,”2”,”3”]</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">163</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'1,2,3'</span>                                                                  \nIn <span class=\"token punctuation\">[</span><span class=\"token number\">164</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>                                                                 \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">164</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-给定两个-list，A-和-B，找出相同元素和不同元素\"><a href=\"#3-给定两个-list，A-和-B，找出相同元素和不同元素\" class=\"headerlink\" title=\"3.给定两个 list，A 和 B，找出相同元素和不同元素\"></a>3.给定两个 list，A 和 B，找出相同元素和不同元素</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">165</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>                                                               \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">166</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">178</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                                                           \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">178</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">179</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                                                           \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">179</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 使用列表推导式    </span>\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">180</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> a <span class=\"token keyword\">if</span> x <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">]</span>                                                     \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">180</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"4-1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6\"><a href=\"#4-1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6\" class=\"headerlink\" title=\"4. [[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]\"></a>4. [[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [j for i in a for j in i]</span>\n<span class=\"token builtin\">list</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span>  a<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"5-合并列表-1-5-7-9-和-2-2-6-8\"><a href=\"#5-合并列表-1-5-7-9-和-2-2-6-8\" class=\"headerlink\" title=\"5.合并列表[1,5,7,9]和[2,2,6,8]\"></a>5.合并列表[1,5,7,9]和[2,2,6,8]</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">In [194]: a = [1, 5, 7, 9]                                                             \n\nIn [195]: b = [2, 4, 6, 8]\n\nIn [196]: a.extend(b)                                                                  \n\nIn [197]: a                                                                            \nOut[197]: [1, 5, 7, 9, 2, 4, 6, 8]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"6-如何打乱一个列表的元素？\"><a href=\"#6-如何打乱一个列表的元素？\" class=\"headerlink\" title=\"6.如何打乱一个列表的元素？\"></a>6.如何打乱一个列表的元素？</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">In [201]: import random                                                                \n\nIn [202]: a = list(range(10))                                                          \n\nIn [203]: a                                                                            \nOut[203]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIn [204]: random.shuffle(a)                                                            \n\nIn [205]: a                                                                            \nOut[205]: [9, 6, 1, 3, 0, 2, 5, 4, 7, 8]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><h3 id=\"7-字典操作中-del-和-pop-有什么区别\"><a href=\"#7-字典操作中-del-和-pop-有什么区别\" class=\"headerlink\" title=\"7.字典操作中 del 和 pop 有什么区别\"></a>7.字典操作中 del 和 pop 有什么区别</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">dict.pop(key[, default])\n如果字典中存在键，则dict.pop（）从字典中删除具有给定键的元素并返回其值。\n如果字典中不存在给定的键，则它将返回给定的默认值。\n如果字典中不存在给定键，并且没有将默认值传递给pop（），它将抛出KeyError\n\ndel key          # 删除键\ndict.clear()     # 清空字典\ndel dict         # 删除字典<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"8-按照字典的内的值进行排序\"><a href=\"#8-按照字典的内的值进行排序\" class=\"headerlink\" title=\"8.按照字典的内的值进行排序\"></a>8.按照字典的内的值进行排序</h3><pre class=\"line-numbers language-pythob\" data-language=\"pythob\"><code class=\"language-pythob\">In [237]: z = {'a':24, 's':52, 'd':12, 'f':33}  \n\nIn [240]: sorted(z.keys())                                                             \nOut[240]: ['a', 'd', 'f', 's']\n\nIn [239]: sorted(z.items(), key=lambda x:x[1])                                         \nOut[239]: [('d', 12), ('a', 24), ('f', 33), ('s', 52)]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"9-请合并下面两个字典-a-“A”-1-”B”-2-b-“C”-3-”D”-4\"><a href=\"#9-请合并下面两个字典-a-“A”-1-”B”-2-b-“C”-3-”D”-4\" class=\"headerlink\" title=\"9.请合并下面两个字典 a = {“A”:1,”B”:2},b = {“C”:3,”D”:4}\"></a>9.请合并下面两个字典 a = {“A”:1,”B”:2},b = {“C”:3,”D”:4}</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"10-如何使用生成式的方式生成一个字典，写一段功能代码。\"><a href=\"#10-如何使用生成式的方式生成一个字典，写一段功能代码。\" class=\"headerlink\" title=\"10.如何使用生成式的方式生成一个字典，写一段功能代码。\"></a>10.如何使用生成式的方式生成一个字典，写一段功能代码。</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>k<span class=\"token punctuation\">:</span>v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>                                            \n<span class=\"token comment\"># {'A': 1, 'B': 2, 'C': 3, 'D': 4}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"11-如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”-1-”b”-2\"><a href=\"#11-如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”-1-”b”-2\" class=\"headerlink\" title=\"11.如何把元组(“a”,”b”)和元组(1,2)，变为字典{“a”:1,”b”:2}\"></a>11.如何把元组(“a”,”b”)和元组(1,2)，变为字典{“a”:1,”b”:2}</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {\"a\":1,\"b\":2}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"如何实现-‘1’-’2’-’3’-变成-1-2-3\"><a href=\"#如何实现-‘1’-’2’-’3’-变成-1-2-3\" class=\"headerlink\" title=\"如何实现[‘1’,’2’,’3’]变成[1,2,3] ?\"></a>如何实现[‘1’,’2’,’3’]变成[1,2,3] ?</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span>，<span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"python小结-四\"><a href=\"#python小结-四\" class=\"headerlink\" title=\"python小结(四)\"></a>python小结(四)</h1><h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"1-已知-AList-1-2-3-1-2-对-AList-列表元素去重，写出具体过程。\"><a href=\"#1-已知-AList-1-2-3-1-2-对-AList-列表元素去重，写出具体过程。\" class=\"headerlink\" title=\"1.已知 AList = [1,2,3,1,2],对 AList 列表元素去重，写出具体过程。\"></a>1.已知 AList = [1,2,3,1,2],对 AList 列表元素去重，写出具体过程。</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">AList<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nBList<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> AList<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> BList<span class=\"token punctuation\">:</span>\n        BList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>BList<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-如何实现-“1-2-3”-变成-“1”-”2”-”3”\"><a href=\"#2-如何实现-“1-2-3”-变成-“1”-”2”-”3”\" class=\"headerlink\" title=\"2.如何实现 “1,2,3” 变成 [“1”,”2”,”3”]\"></a>2.如何实现 “1,2,3” 变成 [“1”,”2”,”3”]</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">163</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'1,2,3'</span>                                                                  \nIn <span class=\"token punctuation\">[</span><span class=\"token number\">164</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>                                                                 \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">164</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-给定两个-list，A-和-B，找出相同元素和不同元素\"><a href=\"#3-给定两个-list，A-和-B，找出相同元素和不同元素\" class=\"headerlink\" title=\"3.给定两个 list，A 和 B，找出相同元素和不同元素\"></a>3.给定两个 list，A 和 B，找出相同元素和不同元素</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">165</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>                                                               \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">166</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> \n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">178</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                                                           \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">178</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">179</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                                                           \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">179</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 使用列表推导式    </span>\nIn <span class=\"token punctuation\">[</span><span class=\"token number\">180</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> a <span class=\"token keyword\">if</span> x <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">]</span>                                                     \nOut<span class=\"token punctuation\">[</span><span class=\"token number\">180</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"4-1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6\"><a href=\"#4-1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6\" class=\"headerlink\" title=\"4. [[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]\"></a>4. [[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [j for i in a for j in i]</span>\n<span class=\"token builtin\">list</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span>  a<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"5-合并列表-1-5-7-9-和-2-2-6-8\"><a href=\"#5-合并列表-1-5-7-9-和-2-2-6-8\" class=\"headerlink\" title=\"5.合并列表[1,5,7,9]和[2,2,6,8]\"></a>5.合并列表[1,5,7,9]和[2,2,6,8]</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">In [194]: a &#x3D; [1, 5, 7, 9]                                                             \n\nIn [195]: b &#x3D; [2, 4, 6, 8]\n\nIn [196]: a.extend(b)                                                                  \n\nIn [197]: a                                                                            \nOut[197]: [1, 5, 7, 9, 2, 4, 6, 8]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"6-如何打乱一个列表的元素？\"><a href=\"#6-如何打乱一个列表的元素？\" class=\"headerlink\" title=\"6.如何打乱一个列表的元素？\"></a>6.如何打乱一个列表的元素？</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">In [201]: import random                                                                \n\nIn [202]: a &#x3D; list(range(10))                                                          \n\nIn [203]: a                                                                            \nOut[203]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIn [204]: random.shuffle(a)                                                            \n\nIn [205]: a                                                                            \nOut[205]: [9, 6, 1, 3, 0, 2, 5, 4, 7, 8]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><h3 id=\"7-字典操作中-del-和-pop-有什么区别\"><a href=\"#7-字典操作中-del-和-pop-有什么区别\" class=\"headerlink\" title=\"7.字典操作中 del 和 pop 有什么区别\"></a>7.字典操作中 del 和 pop 有什么区别</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">dict.pop(key[, default])\n如果字典中存在键，则dict.pop（）从字典中删除具有给定键的元素并返回其值。\n如果字典中不存在给定的键，则它将返回给定的默认值。\n如果字典中不存在给定键，并且没有将默认值传递给pop（），它将抛出KeyError\n\ndel key          # 删除键\ndict.clear()     # 清空字典\ndel dict         # 删除字典<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"8-按照字典的内的值进行排序\"><a href=\"#8-按照字典的内的值进行排序\" class=\"headerlink\" title=\"8.按照字典的内的值进行排序\"></a>8.按照字典的内的值进行排序</h3><pre class=\"line-numbers language-pythob\" data-language=\"pythob\"><code class=\"language-pythob\">In [237]: z &#x3D; &#123;&#39;a&#39;:24, &#39;s&#39;:52, &#39;d&#39;:12, &#39;f&#39;:33&#125;  \n\nIn [240]: sorted(z.keys())                                                             \nOut[240]: [&#39;a&#39;, &#39;d&#39;, &#39;f&#39;, &#39;s&#39;]\n\nIn [239]: sorted(z.items(), key&#x3D;lambda x:x[1])                                         \nOut[239]: [(&#39;d&#39;, 12), (&#39;a&#39;, 24), (&#39;f&#39;, 33), (&#39;s&#39;, 52)]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"9-请合并下面两个字典-a-“A”-1-”B”-2-b-“C”-3-”D”-4\"><a href=\"#9-请合并下面两个字典-a-“A”-1-”B”-2-b-“C”-3-”D”-4\" class=\"headerlink\" title=\"9.请合并下面两个字典 a = {“A”:1,”B”:2},b = {“C”:3,”D”:4}\"></a>9.请合并下面两个字典 a = {“A”:1,”B”:2},b = {“C”:3,”D”:4}</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"10-如何使用生成式的方式生成一个字典，写一段功能代码。\"><a href=\"#10-如何使用生成式的方式生成一个字典，写一段功能代码。\" class=\"headerlink\" title=\"10.如何使用生成式的方式生成一个字典，写一段功能代码。\"></a>10.如何使用生成式的方式生成一个字典，写一段功能代码。</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>k<span class=\"token punctuation\">:</span>v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>                                            \n<span class=\"token comment\"># &#123;'A': 1, 'B': 2, 'C': 3, 'D': 4&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"11-如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”-1-”b”-2\"><a href=\"#11-如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”-1-”b”-2\" class=\"headerlink\" title=\"11.如何把元组(“a”,”b”)和元组(1,2)，变为字典{“a”:1,”b”:2}\"></a>11.如何把元组(“a”,”b”)和元组(1,2)，变为字典{“a”:1,”b”:2}</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;\"a\":1,\"b\":2&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"如何实现-‘1’-’2’-’3’-变成-1-2-3\"><a href=\"#如何实现-‘1’-’2’-’3’-变成-1-2-3\" class=\"headerlink\" title=\"如何实现[‘1’,’2’,’3’]变成[1,2,3] ?\"></a>如何实现[‘1’,’2’,’3’]变成[1,2,3] ?</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span>，<span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n"},{"title":"test","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-11-27T04:20:35.000Z","password":null,"summary":null,"_content":"","source":"_posts/test.md","raw":"---\ntitle: test\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-11-27 12:20:35\npassword:\nsummary:\ntags:\ncategories:\n---\n","slug":"test","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz397003e12mj7c4kc0mf","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"Python自定义排序","top":false,"date":"2020-08-20T15:34:04.000Z","_content":"\n# Python自定义排序\n\n`functools.``cmp_to_key`(*func*)\n\n将(旧式的)比较函数转换为新式的 [key function](https://docs.python.org/zh-cn/3/glossary.html#term-key-function) . 在类似于 [`sorted()`](https://docs.python.org/zh-cn/3/library/functions.html#sorted) ， [`min()`](https://docs.python.org/zh-cn/3/library/functions.html#min) ， [`max()`](https://docs.python.org/zh-cn/3/library/functions.html#max) ， [`heapq.nlargest()`](https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nlargest) ， [`heapq.nsmallest()`](https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nsmallest) ， [`itertools.groupby()`](https://docs.python.org/zh-cn/3/library/itertools.html#itertools.groupby) 等函数的 key 参数中使用。此函数主要用作将 Python 2 程序转换至新版的转换工具，以保持对比较函数的兼容。\n\n比较函数意为一个可调用对象，该对象接受两个参数并比较它们，结果为小于则返回一个负数，相等则返回零，大于则返回一个正数。key function则是一个接受一个参数，并返回另一个用以排序的值的可调用对象。\n\n示例:\n\n```python\nsorted(iterable, key=cmp_to_key(locale.strcoll))  # locale-aware sort order\n```\n\n## 自定义排序示例\n\n现在定义整数的比较规则，对整数a和b进行组合，组成ab和ba的形式。如果ab>ba,说明a优先级比较高，a应该比较大。针对这个问题排序不能够直接提取出一个key，那么就只能使用cmp_to_key函数进行转换。\n\n```python\ndef cmp(a,b):\n    str1 = str(a)+str(b)\n    str2 = str(b)+str(a)\n    if str1 > str2:\n        return 1\n    elif str1 < str2:\n        return -1\n    else:\n        return 0\n\nif __name__ == '__main__':\n    nums = [1,3,20,15]\n    nums.sort(key=functools.cmp_to_key(cmp))\n    print(nums)         # [1, 15, 20, 3]\n```\n\n源码\n\n```python\ndef cmp_to_key(mycmp):\n    \"\"\"Convert a cmp= function into a key= function\"\"\"\n    class K(object):\n        __slots__ = ['obj']\n        def __init__(self, obj):\n            self.obj = obj\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj) < 0\n        def __gt__(self, other):\n            return mycmp(self.obj, other.obj) > 0\n        def __eq__(self, other):\n            return mycmp(self.obj, other.obj) == 0\n        def __le__(self, other):\n            return mycmp(self.obj, other.obj) <= 0\n        def __ge__(self, other):\n            return mycmp(self.obj, other.obj) >= 0\n        __hash__ = None\n    return K\n```\n\n在函数内部创建了一个class,并且返回了这个class,在这个class中调用了传入的cmp函数进行了运算符重载。这样使得两个class的对象就可以进行比较了。在sort函数中，如果传入了key函数，它会在比较两个对象的时候，将两个对象作为参数传到key函数里面，然后对key函数的结果进行比较，从而完成了排序。当这里返回一个class的时候，这个key函数实际上就是class的构造函数，实际上就是将要比较的对象作为参数创建了两个K的对象，这两个对象进行过运算符重载，是可以比较的，比较的规则就是传入的cmp所定义的规则。这样就实现了自定义排序规则了。\n\n## 例：拼接最大数字问题\n\n有n个非非负整数,将其按照字符串串拼接的方方式拼接为一一个整数。\n如何拼接可以使得得到的整数最大大?\n例例:32,94,128,1286,6,71可以拼接除的最大大整数为\n94716321286128\n\n```python\nfrom functools import cmp_to_key\n\nli = [32, 94, 128, 1286, 6, 71]\n\n\ndef xy_cmp(x, y):\n    if x + y < y + x:\n        return 1\n    elif x + y > y + x:\n        return -1\n    else:\n        return 0\n\n\ndef numer_join(li):\n    li = list(map(str, li))\n    print(li)\n    li.sort(key=cmp_to_key(xy_cmp))\n    print(li)\n    return ''.join(li)\n\n\nprint(numer_join(li))\n\n\n['32', '94', '128', '1286', '6', '71']\n['94', '71', '6', '32', '1286', '128']\n94716321286128\n```\n\n","source":"_posts/python自定义排序.md","raw":"---\ntitle: Python自定义排序\ntags:\n  - Python\ncategories:\n  - Python\ntop: false\ndate: 2020-08-20 23:34:04\n---\n\n# Python自定义排序\n\n`functools.``cmp_to_key`(*func*)\n\n将(旧式的)比较函数转换为新式的 [key function](https://docs.python.org/zh-cn/3/glossary.html#term-key-function) . 在类似于 [`sorted()`](https://docs.python.org/zh-cn/3/library/functions.html#sorted) ， [`min()`](https://docs.python.org/zh-cn/3/library/functions.html#min) ， [`max()`](https://docs.python.org/zh-cn/3/library/functions.html#max) ， [`heapq.nlargest()`](https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nlargest) ， [`heapq.nsmallest()`](https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nsmallest) ， [`itertools.groupby()`](https://docs.python.org/zh-cn/3/library/itertools.html#itertools.groupby) 等函数的 key 参数中使用。此函数主要用作将 Python 2 程序转换至新版的转换工具，以保持对比较函数的兼容。\n\n比较函数意为一个可调用对象，该对象接受两个参数并比较它们，结果为小于则返回一个负数，相等则返回零，大于则返回一个正数。key function则是一个接受一个参数，并返回另一个用以排序的值的可调用对象。\n\n示例:\n\n```python\nsorted(iterable, key=cmp_to_key(locale.strcoll))  # locale-aware sort order\n```\n\n## 自定义排序示例\n\n现在定义整数的比较规则，对整数a和b进行组合，组成ab和ba的形式。如果ab>ba,说明a优先级比较高，a应该比较大。针对这个问题排序不能够直接提取出一个key，那么就只能使用cmp_to_key函数进行转换。\n\n```python\ndef cmp(a,b):\n    str1 = str(a)+str(b)\n    str2 = str(b)+str(a)\n    if str1 > str2:\n        return 1\n    elif str1 < str2:\n        return -1\n    else:\n        return 0\n\nif __name__ == '__main__':\n    nums = [1,3,20,15]\n    nums.sort(key=functools.cmp_to_key(cmp))\n    print(nums)         # [1, 15, 20, 3]\n```\n\n源码\n\n```python\ndef cmp_to_key(mycmp):\n    \"\"\"Convert a cmp= function into a key= function\"\"\"\n    class K(object):\n        __slots__ = ['obj']\n        def __init__(self, obj):\n            self.obj = obj\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj) < 0\n        def __gt__(self, other):\n            return mycmp(self.obj, other.obj) > 0\n        def __eq__(self, other):\n            return mycmp(self.obj, other.obj) == 0\n        def __le__(self, other):\n            return mycmp(self.obj, other.obj) <= 0\n        def __ge__(self, other):\n            return mycmp(self.obj, other.obj) >= 0\n        __hash__ = None\n    return K\n```\n\n在函数内部创建了一个class,并且返回了这个class,在这个class中调用了传入的cmp函数进行了运算符重载。这样使得两个class的对象就可以进行比较了。在sort函数中，如果传入了key函数，它会在比较两个对象的时候，将两个对象作为参数传到key函数里面，然后对key函数的结果进行比较，从而完成了排序。当这里返回一个class的时候，这个key函数实际上就是class的构造函数，实际上就是将要比较的对象作为参数创建了两个K的对象，这两个对象进行过运算符重载，是可以比较的，比较的规则就是传入的cmp所定义的规则。这样就实现了自定义排序规则了。\n\n## 例：拼接最大数字问题\n\n有n个非非负整数,将其按照字符串串拼接的方方式拼接为一一个整数。\n如何拼接可以使得得到的整数最大大?\n例例:32,94,128,1286,6,71可以拼接除的最大大整数为\n94716321286128\n\n```python\nfrom functools import cmp_to_key\n\nli = [32, 94, 128, 1286, 6, 71]\n\n\ndef xy_cmp(x, y):\n    if x + y < y + x:\n        return 1\n    elif x + y > y + x:\n        return -1\n    else:\n        return 0\n\n\ndef numer_join(li):\n    li = list(map(str, li))\n    print(li)\n    li.sort(key=cmp_to_key(xy_cmp))\n    print(li)\n    return ''.join(li)\n\n\nprint(numer_join(li))\n\n\n['32', '94', '128', '1286', '6', '71']\n['94', '71', '6', '32', '1286', '128']\n94716321286128\n```\n\n","slug":"python自定义排序","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz398003h12mjgfm36mva","content":"<h1 id=\"Python自定义排序\"><a href=\"#Python自定义排序\" class=\"headerlink\" title=\"Python自定义排序\"></a>Python自定义排序</h1><p><code>functools.``cmp_to_key</code>(<em>func</em>)</p>\n<p>将(旧式的)比较函数转换为新式的 <a href=\"https://docs.python.org/zh-cn/3/glossary.html#term-key-function\">key function</a> . 在类似于 <a href=\"https://docs.python.org/zh-cn/3/library/functions.html#sorted\"><code>sorted()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/functions.html#min\"><code>min()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/functions.html#max\"><code>max()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nlargest\"><code>heapq.nlargest()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nsmallest\"><code>heapq.nsmallest()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/itertools.html#itertools.groupby\"><code>itertools.groupby()</code></a> 等函数的 key 参数中使用。此函数主要用作将 Python 2 程序转换至新版的转换工具，以保持对比较函数的兼容。</p>\n<p>比较函数意为一个可调用对象，该对象接受两个参数并比较它们，结果为小于则返回一个负数，相等则返回零，大于则返回一个正数。key function则是一个接受一个参数，并返回另一个用以排序的值的可调用对象。</p>\n<p>示例:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>cmp_to_key<span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">.</span>strcoll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># locale-aware sort order</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"自定义排序示例\"><a href=\"#自定义排序示例\" class=\"headerlink\" title=\"自定义排序示例\"></a>自定义排序示例</h2><p>现在定义整数的比较规则，对整数a和b进行组合，组成ab和ba的形式。如果ab&gt;ba,说明a优先级比较高，a应该比较大。针对这个问题排序不能够直接提取出一个key，那么就只能使用cmp_to_key函数进行转换。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    str1 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n    str2 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> str1 <span class=\"token operator\">&gt;</span> str2<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> str1 <span class=\"token operator\">&lt;</span> str2<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span>\n    nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>functools<span class=\"token punctuation\">.</span>cmp_to_key<span class=\"token punctuation\">(</span><span class=\"token builtin\">cmp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>         <span class=\"token comment\"># [1, 15, 20, 3]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>源码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cmp_to_key</span><span class=\"token punctuation\">(</span>mycmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Convert a cmp= function into a key= function\"\"\"</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        __slots__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'obj'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">=</span> obj\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__gt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__le__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__ge__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span>\n        __hash__ <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">return</span> K<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在函数内部创建了一个class,并且返回了这个class,在这个class中调用了传入的cmp函数进行了运算符重载。这样使得两个class的对象就可以进行比较了。在sort函数中，如果传入了key函数，它会在比较两个对象的时候，将两个对象作为参数传到key函数里面，然后对key函数的结果进行比较，从而完成了排序。当这里返回一个class的时候，这个key函数实际上就是class的构造函数，实际上就是将要比较的对象作为参数创建了两个K的对象，这两个对象进行过运算符重载，是可以比较的，比较的规则就是传入的cmp所定义的规则。这样就实现了自定义排序规则了。</p>\n<h2 id=\"例：拼接最大数字问题\"><a href=\"#例：拼接最大数字问题\" class=\"headerlink\" title=\"例：拼接最大数字问题\"></a>例：拼接最大数字问题</h2><p>有n个非非负整数,将其按照字符串串拼接的方方式拼接为一一个整数。<br>如何拼接可以使得得到的整数最大大?<br>例例:32,94,128,1286,6,71可以拼接除的最大大整数为<br>94716321286128</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> cmp_to_key\n\nli <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">94</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1286</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">xy_cmp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">+</span> x<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">&gt;</span> y <span class=\"token operator\">+</span> x<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">numer_join</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    li <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n    li<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>cmp_to_key<span class=\"token punctuation\">(</span>xy_cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>numer_join<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'94'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'128'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1286'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'71'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'94'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'71'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1286'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'128'</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">94716321286128</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Python自定义排序\"><a href=\"#Python自定义排序\" class=\"headerlink\" title=\"Python自定义排序\"></a>Python自定义排序</h1><p><code>functools.``cmp_to_key</code>(<em>func</em>)</p>\n<p>将(旧式的)比较函数转换为新式的 <a href=\"https://docs.python.org/zh-cn/3/glossary.html#term-key-function\">key function</a> . 在类似于 <a href=\"https://docs.python.org/zh-cn/3/library/functions.html#sorted\"><code>sorted()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/functions.html#min\"><code>min()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/functions.html#max\"><code>max()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nlargest\"><code>heapq.nlargest()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nsmallest\"><code>heapq.nsmallest()</code></a> ， <a href=\"https://docs.python.org/zh-cn/3/library/itertools.html#itertools.groupby\"><code>itertools.groupby()</code></a> 等函数的 key 参数中使用。此函数主要用作将 Python 2 程序转换至新版的转换工具，以保持对比较函数的兼容。</p>\n<p>比较函数意为一个可调用对象，该对象接受两个参数并比较它们，结果为小于则返回一个负数，相等则返回零，大于则返回一个正数。key function则是一个接受一个参数，并返回另一个用以排序的值的可调用对象。</p>\n<p>示例:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>cmp_to_key<span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">.</span>strcoll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># locale-aware sort order</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"自定义排序示例\"><a href=\"#自定义排序示例\" class=\"headerlink\" title=\"自定义排序示例\"></a>自定义排序示例</h2><p>现在定义整数的比较规则，对整数a和b进行组合，组成ab和ba的形式。如果ab&gt;ba,说明a优先级比较高，a应该比较大。针对这个问题排序不能够直接提取出一个key，那么就只能使用cmp_to_key函数进行转换。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    str1 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n    str2 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> str1 <span class=\"token operator\">></span> str2<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> str1 <span class=\"token operator\">&lt;</span> str2<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span>\n    nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>functools<span class=\"token punctuation\">.</span>cmp_to_key<span class=\"token punctuation\">(</span><span class=\"token builtin\">cmp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>         <span class=\"token comment\"># [1, 15, 20, 3]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>源码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cmp_to_key</span><span class=\"token punctuation\">(</span>mycmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Convert a cmp= function into a key= function\"\"\"</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        __slots__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'obj'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">=</span> obj\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__gt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__le__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">__ge__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mycmp<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span>\n        __hash__ <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">return</span> K<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在函数内部创建了一个class,并且返回了这个class,在这个class中调用了传入的cmp函数进行了运算符重载。这样使得两个class的对象就可以进行比较了。在sort函数中，如果传入了key函数，它会在比较两个对象的时候，将两个对象作为参数传到key函数里面，然后对key函数的结果进行比较，从而完成了排序。当这里返回一个class的时候，这个key函数实际上就是class的构造函数，实际上就是将要比较的对象作为参数创建了两个K的对象，这两个对象进行过运算符重载，是可以比较的，比较的规则就是传入的cmp所定义的规则。这样就实现了自定义排序规则了。</p>\n<h2 id=\"例：拼接最大数字问题\"><a href=\"#例：拼接最大数字问题\" class=\"headerlink\" title=\"例：拼接最大数字问题\"></a>例：拼接最大数字问题</h2><p>有n个非非负整数,将其按照字符串串拼接的方方式拼接为一一个整数。<br>如何拼接可以使得得到的整数最大大?<br>例例:32,94,128,1286,6,71可以拼接除的最大大整数为<br>94716321286128</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> cmp_to_key\n\nli <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">94</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1286</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">xy_cmp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">+</span> x<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">></span> y <span class=\"token operator\">+</span> x<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">numer_join</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    li <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n    li<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>cmp_to_key<span class=\"token punctuation\">(</span>xy_cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>numer_join<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'94'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'128'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1286'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'71'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'94'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'71'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1286'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'128'</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">94716321286128</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"Redis 笔记","top":false,"date":"2020-07-30T11:16:05.000Z","_content":"# Redis笔记\n\n## 常用命令\n\n```bash\nselect 1 # 切换到数据库1,范围是0~15。redis只能有16个db，不同mysql（mysql的database可以有无数个）\nhelp set # 查看set到帮助信息\nsave # 手动持久化\nflushdb # 清空当前库\nflushall #16个库的数据全删了\ndbsize # 看看有多少个值info # 各个库的键值情况\nkeys * # 查看所有键，这是运维禁忌keys z*，keys k？ # 通配符匹配\nexists key1 # 判断key1是否存在\nmove key1 2 # 将key1从当前数据库移动到2号数据库\nexpire key1 60 # 将key1设置为60秒后过期\nttl key1 # 查看key1还有多少秒过期\ntype key1 # 看看key1是什么类型\ndel key1 #删掉rename k1 k2 # 改名\n```\n\n### 字符串(string)\n\nstring类型是二进制安全的，意思是可以包含任何数据，比如jpg图片或者序列化的对象。字符串value最多是512M\n\n```bash\n增\nset k1 'ddd' ex 3 # 设置3秒之后过期\nsetex k1 3 'ddd' # 同上，set with expire\nset k1 'ddd' NX # 和字典的setdefault效果一样\nsetnx k1 ddd # 同上，set if not exist\nset love 'ddd' XX # 只有love这个key存在时这条命令才生效\ngetset k1 fuck # 先get再set\n\nmset apple 12000 xiaomi 2000 oppo 3300 # 批量设置，{'apple':12000,'xiaomi':2000,'oppo':3300}\nmsetnx apple 12000 xiaomi 2000 # 只要有一个键存在，全体跪\n\n查\nget k1 \nstrlen k1 # 返回k1字符串的长度，注意是字节长度（汉字是三个字节）\n\n切片\ngetrange k1 0 -1 #切片\nsetrange k1 0 xxxxx # 这个注意，0代表设置字符的位置，多余的字符会覆盖掉后续已经存在的字符\n\n数字加减\nincr count # count为数字类型的字符串变量，count++\ndecr count # count--\nincrby count 20 # count+=20\ndecyby count 20 # count-=20\n```\n\n### 哈希(hash)\n\nvalue是一个小字典，常用于存储一个对象的详细信息。例如存储用户的具体信息等\n若嵌套的话，API方法会帮你将列表，字典转化为字符串，无论递归到多深也不怕\n\n```bash\n增\nhset info a 1 # {'info'：{'a':1}}\nhmset info a 1 b 2 # {'info'：{'a':1,'b':2}},其实hset就可以批量设置\nhsetnx info a 1 # set if not exist\n\n查\nhgetall info # 获取hash的键值对元组\nhkeys info # 取出所有键\nhvals info # 取出所有值\n\nhget info a  # {'info'：{'a':1,'b':2}},取value里面a键对应的值\nhmget info a b # 批量取\n\n删\nhdel info a # 删除info里面的a\n\n数字操作\nhincrby info age 2 # 将age对应的value加2\nhincrbyfloat info price 2.5 将price对应的value加2.5\n\n通配符匹配指定key \nhscan info 0 match e* # 0代表全局匹配\n```\n\n### 队列(list)\n\nvalue是一个列表,底层其实是双向链表，有lpush，rpush\n性能的话，由于是链表，头尾性能高，中间插入性能低\n\n```bash\n增\nlpush li a b c # {'li':['a','b','c']}\nrpush li a # right push\nrpoplpush 源列表 目的列表 # 将源列表的右边的(rpop)弹出的值，lpush进新的列表\n\n删\nlpop # 左边弹出\nrpop # 右边弹出\nlrem li 2 3 # 删除2个'3'\n\n查\nlindex li 1 # 取出li[1]\nllen li # 长度\n\n改\nlset li 0 ff # li[0]='ff'\nlinsert li before/after a aa # 在元素a之前(之后)插入aa，注意，这里用的不是索引值而是元素\n\n切片\nlrange li 0 -1 # 范围取值\nltrim key1 0 3 # 截取索引位置0～3多范围的值赋值给key1\n\n数字操作\nhincrby info age 2 # 将age对应的value加2\nhincrbyfloat info price 2.5 将price对应的value加2.5\n\n通配符匹配指定key \nhscan info 0 match e* # 0代表全局匹配\n```\n\n### 集合(set)\n\nvalue是一个set\n\n```bash\n增\nsadd s 1 2 2 3 3 4 # {'s':{'1','2','3','4'}}\nsmove s1 s2 val_of_s1 # 将s1中的val的val_of_s1移动到s2\n\n查\nsmembers s # 取出s的所有值\nscard s1 # 获得s1集合里面元素个数\nsismember s1 2 # 判断2是否为s1的元素\n\n删\nsrem s1 fuck # 删除s1中的fuck\nsrandmember s1 2 # 随机从s1删除2个元素\nspop key # 随机删除一个元素\n\n集合操作\nsdiff s1 s2 #差集 ，即s1-s2 ，s1有的，s2没有\nsinter s1 s2 #交集 \nsunion s1 s2 #并集\n```\n\n### 有序集合(zset)\n\n有序集合，按照指定的权重进行排序\n\n```bash\n增\nzadd s1 60 v1 80 v2 100 v3 #数字是权重（计算机术语中score代表的是权重）\n\n查\nzcard s1 #返回val的数目\nzcount s1 60 80 #统计权重60到80之间的数目\nzrank s1 v3 #返回v3的下标,注意是类似数组的顺序\nzrevrank s1 v3 # 逆序返回v3的下标\nzscore s1 v3 #返回v3的权重值\n\nzrange s1 0 -1  withscores # 显示权重\nzrange s1 0 -1 # 只显示值，不显示权重。注意:0，-1是下标范围。不是像mysql limit一样的参数\nzrevrange s1 0 -1 # 只显示值，不显示权重。注意:0，-1是下标范围。\n\nzrevrangebyscore s1 90 20 # 逆向显示权重范围的，注意参数1要大于参数2\nzrangebyscore s1 60 80 # 显示指定权重范围的\nzrangebyscore s1 (60 (80 # '('为不包含\nzrangebyscore s1 60 80 limit 2 2 #类似于mysql数据库\n\nzrevrangebyscore s1 90 60 #由于是反转，权重是90到60\n\n删\nzrem s1 v3 #删除v3\n```\n\n## 持久化\n\n既可以把redis理解为缓存技术，也可以理解为数据库，因为redis支持将内存中的数据周期性的写入磁盘或者把操作追加到记录文件中，这个过程称为redis的持久化。\n\nredis支持两种方式的持久化，一种是快照方式（snapshotting）,也称RDB方式；\n\n两一种是追加文件方式（append-only file），也称AOF方式。\n\nRDB方式是redis默认的持久化方式。\n\n**- RDB方式原理**\n当redis需要做持久化时（执行SAVA或者BGSAVA命令，或者是达到配置条件时执行），redis会fork一个子进程，子进程将数据写到磁盘上一个临时RDB文件中，当子进程完成写临时文件后，将原来的RDB替换掉（默认文件名为dump.rdb）\n\n**- RDB优缺点**\n定时备份，Redis效率高，但是容易造成数据丢失，丢失的多少和备份策略有关，\n\n例如：5分钟备份一次，但是第8分时宕机了，那么就丢失了后面的3分钟数据\n\n**- AOF方式原理**\nAOF就可以做到全程持久化，Redis每执行一个修改数据的命令，都会把这个命令添加到AOF文件中，当Redis重启时，将会读取AOF文件进行“重放”以恢复到 Redis关闭前的最后时刻。\n\n**- AOF优缺点**\n\n优点：AOF基本可以保证数据不丢失，数据完整性比rdb要高。\n缺点： 1.AOF持久化文件会变的越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。\n　　　2.频繁的IO和aof文件过大时的rewrite会带来系统波动，并且由于语句过多且不断变化，导致恢复数据速度慢于rdb，并且备份数据库可能会出bug。所以一般不单独使用（以防万一）\n\n**- 如果一个系统里面，同时存在rdb和aof，它们是冲突还是协作？**\n两者可以共存，先加载的是aof。如果aof错误，redis-server起不来\n\n## 主从复制\n\n主从复制主要用于容灾恢复（主机挂了，能迅速切换到从机，然后去修从机）和读写分离。\n主从复制有延迟这个不可避免的缺点，但是不妨碍其成为流行的技术\n\n**- 主从复制的特点\n**一个主服务器可以有多个从服务器。不仅主服务器可以有从服务器， 从服务器也可以有自己的从服务器。\n\nRedis 支持异步复制和部分复制（这两个特性从Redis 2.8开始），主从复制过程不会阻塞主服务器和从服务器。\n\nMaster Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据。\n\n一般是主写从读。如让多个从服务器处理只读命令，使用复制功能来让主服务器免于频繁的执行持久化操作。即只有主机可以写，从机不可以写\n\n\n\nMaster可以将数据保存操作交给Slaves完成，从而避免了在Master中要有独立的进程来完成此操作。\n\n[参考](https://www.cnblogs.com/ziyide/p/9488564.html)","source":"_posts/redis笔记.md","raw":"---\ntitle:  Redis 笔记\ntags:\n  - Redis\ncategories:\n  - 数据库\ntop: false\ndate: 2020-07-30 19:16:05\n---\n# Redis笔记\n\n## 常用命令\n\n```bash\nselect 1 # 切换到数据库1,范围是0~15。redis只能有16个db，不同mysql（mysql的database可以有无数个）\nhelp set # 查看set到帮助信息\nsave # 手动持久化\nflushdb # 清空当前库\nflushall #16个库的数据全删了\ndbsize # 看看有多少个值info # 各个库的键值情况\nkeys * # 查看所有键，这是运维禁忌keys z*，keys k？ # 通配符匹配\nexists key1 # 判断key1是否存在\nmove key1 2 # 将key1从当前数据库移动到2号数据库\nexpire key1 60 # 将key1设置为60秒后过期\nttl key1 # 查看key1还有多少秒过期\ntype key1 # 看看key1是什么类型\ndel key1 #删掉rename k1 k2 # 改名\n```\n\n### 字符串(string)\n\nstring类型是二进制安全的，意思是可以包含任何数据，比如jpg图片或者序列化的对象。字符串value最多是512M\n\n```bash\n增\nset k1 'ddd' ex 3 # 设置3秒之后过期\nsetex k1 3 'ddd' # 同上，set with expire\nset k1 'ddd' NX # 和字典的setdefault效果一样\nsetnx k1 ddd # 同上，set if not exist\nset love 'ddd' XX # 只有love这个key存在时这条命令才生效\ngetset k1 fuck # 先get再set\n\nmset apple 12000 xiaomi 2000 oppo 3300 # 批量设置，{'apple':12000,'xiaomi':2000,'oppo':3300}\nmsetnx apple 12000 xiaomi 2000 # 只要有一个键存在，全体跪\n\n查\nget k1 \nstrlen k1 # 返回k1字符串的长度，注意是字节长度（汉字是三个字节）\n\n切片\ngetrange k1 0 -1 #切片\nsetrange k1 0 xxxxx # 这个注意，0代表设置字符的位置，多余的字符会覆盖掉后续已经存在的字符\n\n数字加减\nincr count # count为数字类型的字符串变量，count++\ndecr count # count--\nincrby count 20 # count+=20\ndecyby count 20 # count-=20\n```\n\n### 哈希(hash)\n\nvalue是一个小字典，常用于存储一个对象的详细信息。例如存储用户的具体信息等\n若嵌套的话，API方法会帮你将列表，字典转化为字符串，无论递归到多深也不怕\n\n```bash\n增\nhset info a 1 # {'info'：{'a':1}}\nhmset info a 1 b 2 # {'info'：{'a':1,'b':2}},其实hset就可以批量设置\nhsetnx info a 1 # set if not exist\n\n查\nhgetall info # 获取hash的键值对元组\nhkeys info # 取出所有键\nhvals info # 取出所有值\n\nhget info a  # {'info'：{'a':1,'b':2}},取value里面a键对应的值\nhmget info a b # 批量取\n\n删\nhdel info a # 删除info里面的a\n\n数字操作\nhincrby info age 2 # 将age对应的value加2\nhincrbyfloat info price 2.5 将price对应的value加2.5\n\n通配符匹配指定key \nhscan info 0 match e* # 0代表全局匹配\n```\n\n### 队列(list)\n\nvalue是一个列表,底层其实是双向链表，有lpush，rpush\n性能的话，由于是链表，头尾性能高，中间插入性能低\n\n```bash\n增\nlpush li a b c # {'li':['a','b','c']}\nrpush li a # right push\nrpoplpush 源列表 目的列表 # 将源列表的右边的(rpop)弹出的值，lpush进新的列表\n\n删\nlpop # 左边弹出\nrpop # 右边弹出\nlrem li 2 3 # 删除2个'3'\n\n查\nlindex li 1 # 取出li[1]\nllen li # 长度\n\n改\nlset li 0 ff # li[0]='ff'\nlinsert li before/after a aa # 在元素a之前(之后)插入aa，注意，这里用的不是索引值而是元素\n\n切片\nlrange li 0 -1 # 范围取值\nltrim key1 0 3 # 截取索引位置0～3多范围的值赋值给key1\n\n数字操作\nhincrby info age 2 # 将age对应的value加2\nhincrbyfloat info price 2.5 将price对应的value加2.5\n\n通配符匹配指定key \nhscan info 0 match e* # 0代表全局匹配\n```\n\n### 集合(set)\n\nvalue是一个set\n\n```bash\n增\nsadd s 1 2 2 3 3 4 # {'s':{'1','2','3','4'}}\nsmove s1 s2 val_of_s1 # 将s1中的val的val_of_s1移动到s2\n\n查\nsmembers s # 取出s的所有值\nscard s1 # 获得s1集合里面元素个数\nsismember s1 2 # 判断2是否为s1的元素\n\n删\nsrem s1 fuck # 删除s1中的fuck\nsrandmember s1 2 # 随机从s1删除2个元素\nspop key # 随机删除一个元素\n\n集合操作\nsdiff s1 s2 #差集 ，即s1-s2 ，s1有的，s2没有\nsinter s1 s2 #交集 \nsunion s1 s2 #并集\n```\n\n### 有序集合(zset)\n\n有序集合，按照指定的权重进行排序\n\n```bash\n增\nzadd s1 60 v1 80 v2 100 v3 #数字是权重（计算机术语中score代表的是权重）\n\n查\nzcard s1 #返回val的数目\nzcount s1 60 80 #统计权重60到80之间的数目\nzrank s1 v3 #返回v3的下标,注意是类似数组的顺序\nzrevrank s1 v3 # 逆序返回v3的下标\nzscore s1 v3 #返回v3的权重值\n\nzrange s1 0 -1  withscores # 显示权重\nzrange s1 0 -1 # 只显示值，不显示权重。注意:0，-1是下标范围。不是像mysql limit一样的参数\nzrevrange s1 0 -1 # 只显示值，不显示权重。注意:0，-1是下标范围。\n\nzrevrangebyscore s1 90 20 # 逆向显示权重范围的，注意参数1要大于参数2\nzrangebyscore s1 60 80 # 显示指定权重范围的\nzrangebyscore s1 (60 (80 # '('为不包含\nzrangebyscore s1 60 80 limit 2 2 #类似于mysql数据库\n\nzrevrangebyscore s1 90 60 #由于是反转，权重是90到60\n\n删\nzrem s1 v3 #删除v3\n```\n\n## 持久化\n\n既可以把redis理解为缓存技术，也可以理解为数据库，因为redis支持将内存中的数据周期性的写入磁盘或者把操作追加到记录文件中，这个过程称为redis的持久化。\n\nredis支持两种方式的持久化，一种是快照方式（snapshotting）,也称RDB方式；\n\n两一种是追加文件方式（append-only file），也称AOF方式。\n\nRDB方式是redis默认的持久化方式。\n\n**- RDB方式原理**\n当redis需要做持久化时（执行SAVA或者BGSAVA命令，或者是达到配置条件时执行），redis会fork一个子进程，子进程将数据写到磁盘上一个临时RDB文件中，当子进程完成写临时文件后，将原来的RDB替换掉（默认文件名为dump.rdb）\n\n**- RDB优缺点**\n定时备份，Redis效率高，但是容易造成数据丢失，丢失的多少和备份策略有关，\n\n例如：5分钟备份一次，但是第8分时宕机了，那么就丢失了后面的3分钟数据\n\n**- AOF方式原理**\nAOF就可以做到全程持久化，Redis每执行一个修改数据的命令，都会把这个命令添加到AOF文件中，当Redis重启时，将会读取AOF文件进行“重放”以恢复到 Redis关闭前的最后时刻。\n\n**- AOF优缺点**\n\n优点：AOF基本可以保证数据不丢失，数据完整性比rdb要高。\n缺点： 1.AOF持久化文件会变的越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。\n　　　2.频繁的IO和aof文件过大时的rewrite会带来系统波动，并且由于语句过多且不断变化，导致恢复数据速度慢于rdb，并且备份数据库可能会出bug。所以一般不单独使用（以防万一）\n\n**- 如果一个系统里面，同时存在rdb和aof，它们是冲突还是协作？**\n两者可以共存，先加载的是aof。如果aof错误，redis-server起不来\n\n## 主从复制\n\n主从复制主要用于容灾恢复（主机挂了，能迅速切换到从机，然后去修从机）和读写分离。\n主从复制有延迟这个不可避免的缺点，但是不妨碍其成为流行的技术\n\n**- 主从复制的特点\n**一个主服务器可以有多个从服务器。不仅主服务器可以有从服务器， 从服务器也可以有自己的从服务器。\n\nRedis 支持异步复制和部分复制（这两个特性从Redis 2.8开始），主从复制过程不会阻塞主服务器和从服务器。\n\nMaster Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据。\n\n一般是主写从读。如让多个从服务器处理只读命令，使用复制功能来让主服务器免于频繁的执行持久化操作。即只有主机可以写，从机不可以写\n\n\n\nMaster可以将数据保存操作交给Slaves完成，从而避免了在Master中要有独立的进程来完成此操作。\n\n[参考](https://www.cnblogs.com/ziyide/p/9488564.html)","slug":"redis笔记","published":1,"updated":"2022-08-25T14:12:05.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz398003k12mj5d5h6174","content":"<h1 id=\"Redis笔记\"><a href=\"#Redis笔记\" class=\"headerlink\" title=\"Redis笔记\"></a>Redis笔记</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 切换到数据库1,范围是0~15。redis只能有16个db，不同mysql（mysql的database可以有无数个）</span>\n<span class=\"token builtin class-name\">help</span> <span class=\"token builtin class-name\">set</span> <span class=\"token comment\"># 查看set到帮助信息</span>\nsave <span class=\"token comment\"># 手动持久化</span>\nflushdb <span class=\"token comment\"># 清空当前库</span>\nflushall <span class=\"token comment\">#16个库的数据全删了</span>\ndbsize <span class=\"token comment\"># 看看有多少个值info # 各个库的键值情况</span>\nkeys * <span class=\"token comment\"># 查看所有键，这是运维禁忌keys z*，keys k？ # 通配符匹配</span>\nexists key1 <span class=\"token comment\"># 判断key1是否存在</span>\nmove key1 <span class=\"token number\">2</span> <span class=\"token comment\"># 将key1从当前数据库移动到2号数据库</span>\nexpire key1 <span class=\"token number\">60</span> <span class=\"token comment\"># 将key1设置为60秒后过期</span>\nttl key1 <span class=\"token comment\"># 查看key1还有多少秒过期</span>\n<span class=\"token builtin class-name\">type</span> key1 <span class=\"token comment\"># 看看key1是什么类型</span>\ndel key1 <span class=\"token comment\">#删掉rename k1 k2 # 改名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"字符串-string\"><a href=\"#字符串-string\" class=\"headerlink\" title=\"字符串(string)\"></a>字符串(string)</h3><p>string类型是二进制安全的，意思是可以包含任何数据，比如jpg图片或者序列化的对象。字符串value最多是512M</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\n<span class=\"token builtin class-name\">set</span> k1 <span class=\"token string\">'ddd'</span> ex <span class=\"token number\">3</span> <span class=\"token comment\"># 设置3秒之后过期</span>\nsetex k1 <span class=\"token number\">3</span> <span class=\"token string\">'ddd'</span> <span class=\"token comment\"># 同上，set with expire</span>\n<span class=\"token builtin class-name\">set</span> k1 <span class=\"token string\">'ddd'</span> NX <span class=\"token comment\"># 和字典的setdefault效果一样</span>\nsetnx k1 ddd <span class=\"token comment\"># 同上，set if not exist</span>\n<span class=\"token builtin class-name\">set</span> love <span class=\"token string\">'ddd'</span> XX <span class=\"token comment\"># 只有love这个key存在时这条命令才生效</span>\ngetset k1 fuck <span class=\"token comment\"># 先get再set</span>\n\nmset apple <span class=\"token number\">12000</span> xiaomi <span class=\"token number\">2000</span> oppo <span class=\"token number\">3300</span> <span class=\"token comment\"># 批量设置，{'apple':12000,'xiaomi':2000,'oppo':3300}</span>\nmsetnx apple <span class=\"token number\">12000</span> xiaomi <span class=\"token number\">2000</span> <span class=\"token comment\"># 只要有一个键存在，全体跪</span>\n\n查\nget k1 \nstrlen k1 <span class=\"token comment\"># 返回k1字符串的长度，注意是字节长度（汉字是三个字节）</span>\n\n切片\ngetrange k1 <span class=\"token number\">0</span> -1 <span class=\"token comment\">#切片</span>\nsetrange k1 <span class=\"token number\">0</span> xxxxx <span class=\"token comment\"># 这个注意，0代表设置字符的位置，多余的字符会覆盖掉后续已经存在的字符</span>\n\n数字加减\nincr count <span class=\"token comment\"># count为数字类型的字符串变量，count++</span>\ndecr count <span class=\"token comment\"># count--</span>\nincrby count <span class=\"token number\">20</span> <span class=\"token comment\"># count+=20</span>\ndecyby count <span class=\"token number\">20</span> <span class=\"token comment\"># count-=20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"哈希-hash\"><a href=\"#哈希-hash\" class=\"headerlink\" title=\"哈希(hash)\"></a>哈希(hash)</h3><p>value是一个小字典，常用于存储一个对象的详细信息。例如存储用户的具体信息等<br>若嵌套的话，API方法会帮你将列表，字典转化为字符串，无论递归到多深也不怕</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\nhset info a <span class=\"token number\">1</span> <span class=\"token comment\"># {'info'：{'a':1}}</span>\nhmset info a <span class=\"token number\">1</span> b <span class=\"token number\">2</span> <span class=\"token comment\"># {'info'：{'a':1,'b':2}},其实hset就可以批量设置</span>\nhsetnx info a <span class=\"token number\">1</span> <span class=\"token comment\"># set if not exist</span>\n\n查\nhgetall info <span class=\"token comment\"># 获取hash的键值对元组</span>\nhkeys info <span class=\"token comment\"># 取出所有键</span>\nhvals info <span class=\"token comment\"># 取出所有值</span>\n\nhget info a  <span class=\"token comment\"># {'info'：{'a':1,'b':2}},取value里面a键对应的值</span>\nhmget info a b <span class=\"token comment\"># 批量取</span>\n\n删\nhdel info a <span class=\"token comment\"># 删除info里面的a</span>\n\n数字操作\nhincrby info age <span class=\"token number\">2</span> <span class=\"token comment\"># 将age对应的value加2</span>\nhincrbyfloat info price <span class=\"token number\">2.5</span> 将price对应的value加2.5\n\n通配符匹配指定key \nhscan info <span class=\"token number\">0</span> match e* <span class=\"token comment\"># 0代表全局匹配</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"队列-list\"><a href=\"#队列-list\" class=\"headerlink\" title=\"队列(list)\"></a>队列(list)</h3><p>value是一个列表,底层其实是双向链表，有lpush，rpush<br>性能的话，由于是链表，头尾性能高，中间插入性能低</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\nlpush li a b c <span class=\"token comment\"># {'li':['a','b','c']}</span>\nrpush li a <span class=\"token comment\"># right push</span>\nrpoplpush 源列表 目的列表 <span class=\"token comment\"># 将源列表的右边的(rpop)弹出的值，lpush进新的列表</span>\n\n删\nlpop <span class=\"token comment\"># 左边弹出</span>\nrpop <span class=\"token comment\"># 右边弹出</span>\nlrem li <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 删除2个'3'</span>\n\n查\nlindex li <span class=\"token number\">1</span> <span class=\"token comment\"># 取出li[1]</span>\nllen li <span class=\"token comment\"># 长度</span>\n\n改\nlset li <span class=\"token number\">0</span> ff <span class=\"token comment\"># li[0]='ff'</span>\nlinsert li before/after a aa <span class=\"token comment\"># 在元素a之前(之后)插入aa，注意，这里用的不是索引值而是元素</span>\n\n切片\nlrange li <span class=\"token number\">0</span> -1 <span class=\"token comment\"># 范围取值</span>\nltrim key1 <span class=\"token number\">0</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 截取索引位置0～3多范围的值赋值给key1</span>\n\n数字操作\nhincrby info age <span class=\"token number\">2</span> <span class=\"token comment\"># 将age对应的value加2</span>\nhincrbyfloat info price <span class=\"token number\">2.5</span> 将price对应的value加2.5\n\n通配符匹配指定key \nhscan info <span class=\"token number\">0</span> match e* <span class=\"token comment\"># 0代表全局匹配</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"集合-set\"><a href=\"#集合-set\" class=\"headerlink\" title=\"集合(set)\"></a>集合(set)</h3><p>value是一个set</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\nsadd s <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token comment\"># {'s':{'1','2','3','4'}}</span>\nsmove s1 s2 val_of_s1 <span class=\"token comment\"># 将s1中的val的val_of_s1移动到s2</span>\n\n查\nsmembers s <span class=\"token comment\"># 取出s的所有值</span>\nscard s1 <span class=\"token comment\"># 获得s1集合里面元素个数</span>\nsismember s1 <span class=\"token number\">2</span> <span class=\"token comment\"># 判断2是否为s1的元素</span>\n\n删\nsrem s1 fuck <span class=\"token comment\"># 删除s1中的fuck</span>\nsrandmember s1 <span class=\"token number\">2</span> <span class=\"token comment\"># 随机从s1删除2个元素</span>\nspop key <span class=\"token comment\"># 随机删除一个元素</span>\n\n集合操作\n<span class=\"token function\">sdiff</span> s1 s2 <span class=\"token comment\">#差集 ，即s1-s2 ，s1有的，s2没有</span>\nsinter s1 s2 <span class=\"token comment\">#交集 </span>\nsunion s1 s2 <span class=\"token comment\">#并集</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"有序集合-zset\"><a href=\"#有序集合-zset\" class=\"headerlink\" title=\"有序集合(zset)\"></a>有序集合(zset)</h3><p>有序集合，按照指定的权重进行排序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\nzadd s1 <span class=\"token number\">60</span> v1 <span class=\"token number\">80</span> v2 <span class=\"token number\">100</span> v3 <span class=\"token comment\">#数字是权重（计算机术语中score代表的是权重）</span>\n\n查\nzcard s1 <span class=\"token comment\">#返回val的数目</span>\nzcount s1 <span class=\"token number\">60</span> <span class=\"token number\">80</span> <span class=\"token comment\">#统计权重60到80之间的数目</span>\nzrank s1 v3 <span class=\"token comment\">#返回v3的下标,注意是类似数组的顺序</span>\nzrevrank s1 v3 <span class=\"token comment\"># 逆序返回v3的下标</span>\nzscore s1 v3 <span class=\"token comment\">#返回v3的权重值</span>\n\nzrange s1 <span class=\"token number\">0</span> -1  withscores <span class=\"token comment\"># 显示权重</span>\nzrange s1 <span class=\"token number\">0</span> -1 <span class=\"token comment\"># 只显示值，不显示权重。注意:0，-1是下标范围。不是像mysql limit一样的参数</span>\nzrevrange s1 <span class=\"token number\">0</span> -1 <span class=\"token comment\"># 只显示值，不显示权重。注意:0，-1是下标范围。</span>\n\nzrevrangebyscore s1 <span class=\"token number\">90</span> <span class=\"token number\">20</span> <span class=\"token comment\"># 逆向显示权重范围的，注意参数1要大于参数2</span>\nzrangebyscore s1 <span class=\"token number\">60</span> <span class=\"token number\">80</span> <span class=\"token comment\"># 显示指定权重范围的</span>\nzrangebyscore s1 <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token punctuation\">(</span><span class=\"token number\">80</span> <span class=\"token comment\"># '('为不包含</span>\nzrangebyscore s1 <span class=\"token number\">60</span> <span class=\"token number\">80</span> limit <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token comment\">#类似于mysql数据库</span>\n\nzrevrangebyscore s1 <span class=\"token number\">90</span> <span class=\"token number\">60</span> <span class=\"token comment\">#由于是反转，权重是90到60</span>\n\n删\nzrem s1 v3 <span class=\"token comment\">#删除v3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>既可以把redis理解为缓存技术，也可以理解为数据库，因为redis支持将内存中的数据周期性的写入磁盘或者把操作追加到记录文件中，这个过程称为redis的持久化。</p>\n<p>redis支持两种方式的持久化，一种是快照方式（snapshotting）,也称RDB方式；</p>\n<p>两一种是追加文件方式（append-only file），也称AOF方式。</p>\n<p>RDB方式是redis默认的持久化方式。</p>\n<p><strong>- RDB方式原理</strong><br>当redis需要做持久化时（执行SAVA或者BGSAVA命令，或者是达到配置条件时执行），redis会fork一个子进程，子进程将数据写到磁盘上一个临时RDB文件中，当子进程完成写临时文件后，将原来的RDB替换掉（默认文件名为dump.rdb）</p>\n<p><strong>- RDB优缺点</strong><br>定时备份，Redis效率高，但是容易造成数据丢失，丢失的多少和备份策略有关，</p>\n<p>例如：5分钟备份一次，但是第8分时宕机了，那么就丢失了后面的3分钟数据</p>\n<p><strong>- AOF方式原理</strong><br>AOF就可以做到全程持久化，Redis每执行一个修改数据的命令，都会把这个命令添加到AOF文件中，当Redis重启时，将会读取AOF文件进行“重放”以恢复到 Redis关闭前的最后时刻。</p>\n<p><strong>- AOF优缺点</strong></p>\n<p>优点：AOF基本可以保证数据不丢失，数据完整性比rdb要高。<br>缺点： 1.AOF持久化文件会变的越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。<br>　　　2.频繁的IO和aof文件过大时的rewrite会带来系统波动，并且由于语句过多且不断变化，导致恢复数据速度慢于rdb，并且备份数据库可能会出bug。所以一般不单独使用（以防万一）</p>\n<p><strong>- 如果一个系统里面，同时存在rdb和aof，它们是冲突还是协作？</strong><br>两者可以共存，先加载的是aof。如果aof错误，redis-server起不来</p>\n<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><p>主从复制主要用于容灾恢复（主机挂了，能迅速切换到从机，然后去修从机）和读写分离。<br>主从复制有延迟这个不可避免的缺点，但是不妨碍其成为流行的技术</p>\n<p>**- 主从复制的特点<br>**一个主服务器可以有多个从服务器。不仅主服务器可以有从服务器， 从服务器也可以有自己的从服务器。</p>\n<p>Redis 支持异步复制和部分复制（这两个特性从Redis 2.8开始），主从复制过程不会阻塞主服务器和从服务器。</p>\n<p>Master Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据。</p>\n<p>一般是主写从读。如让多个从服务器处理只读命令，使用复制功能来让主服务器免于频繁的执行持久化操作。即只有主机可以写，从机不可以写</p>\n<p>Master可以将数据保存操作交给Slaves完成，从而避免了在Master中要有独立的进程来完成此操作。</p>\n<p><a href=\"https://www.cnblogs.com/ziyide/p/9488564.html\">参考</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Redis笔记\"><a href=\"#Redis笔记\" class=\"headerlink\" title=\"Redis笔记\"></a>Redis笔记</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 切换到数据库1,范围是0~15。redis只能有16个db，不同mysql（mysql的database可以有无数个）</span>\n<span class=\"token builtin class-name\">help</span> <span class=\"token builtin class-name\">set</span> <span class=\"token comment\"># 查看set到帮助信息</span>\nsave <span class=\"token comment\"># 手动持久化</span>\nflushdb <span class=\"token comment\"># 清空当前库</span>\nflushall <span class=\"token comment\">#16个库的数据全删了</span>\ndbsize <span class=\"token comment\"># 看看有多少个值info # 各个库的键值情况</span>\nkeys * <span class=\"token comment\"># 查看所有键，这是运维禁忌keys z*，keys k？ # 通配符匹配</span>\nexists key1 <span class=\"token comment\"># 判断key1是否存在</span>\nmove key1 <span class=\"token number\">2</span> <span class=\"token comment\"># 将key1从当前数据库移动到2号数据库</span>\nexpire key1 <span class=\"token number\">60</span> <span class=\"token comment\"># 将key1设置为60秒后过期</span>\nttl key1 <span class=\"token comment\"># 查看key1还有多少秒过期</span>\n<span class=\"token builtin class-name\">type</span> key1 <span class=\"token comment\"># 看看key1是什么类型</span>\ndel key1 <span class=\"token comment\">#删掉rename k1 k2 # 改名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"字符串-string\"><a href=\"#字符串-string\" class=\"headerlink\" title=\"字符串(string)\"></a>字符串(string)</h3><p>string类型是二进制安全的，意思是可以包含任何数据，比如jpg图片或者序列化的对象。字符串value最多是512M</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\n<span class=\"token builtin class-name\">set</span> k1 <span class=\"token string\">'ddd'</span> ex <span class=\"token number\">3</span> <span class=\"token comment\"># 设置3秒之后过期</span>\nsetex k1 <span class=\"token number\">3</span> <span class=\"token string\">'ddd'</span> <span class=\"token comment\"># 同上，set with expire</span>\n<span class=\"token builtin class-name\">set</span> k1 <span class=\"token string\">'ddd'</span> NX <span class=\"token comment\"># 和字典的setdefault效果一样</span>\nsetnx k1 ddd <span class=\"token comment\"># 同上，set if not exist</span>\n<span class=\"token builtin class-name\">set</span> love <span class=\"token string\">'ddd'</span> XX <span class=\"token comment\"># 只有love这个key存在时这条命令才生效</span>\ngetset k1 fuck <span class=\"token comment\"># 先get再set</span>\n\nmset apple <span class=\"token number\">12000</span> xiaomi <span class=\"token number\">2000</span> oppo <span class=\"token number\">3300</span> <span class=\"token comment\"># 批量设置，&#123;'apple':12000,'xiaomi':2000,'oppo':3300&#125;</span>\nmsetnx apple <span class=\"token number\">12000</span> xiaomi <span class=\"token number\">2000</span> <span class=\"token comment\"># 只要有一个键存在，全体跪</span>\n\n查\nget k1 \nstrlen k1 <span class=\"token comment\"># 返回k1字符串的长度，注意是字节长度（汉字是三个字节）</span>\n\n切片\ngetrange k1 <span class=\"token number\">0</span> -1 <span class=\"token comment\">#切片</span>\nsetrange k1 <span class=\"token number\">0</span> xxxxx <span class=\"token comment\"># 这个注意，0代表设置字符的位置，多余的字符会覆盖掉后续已经存在的字符</span>\n\n数字加减\nincr count <span class=\"token comment\"># count为数字类型的字符串变量，count++</span>\ndecr count <span class=\"token comment\"># count--</span>\nincrby count <span class=\"token number\">20</span> <span class=\"token comment\"># count+=20</span>\ndecyby count <span class=\"token number\">20</span> <span class=\"token comment\"># count-=20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"哈希-hash\"><a href=\"#哈希-hash\" class=\"headerlink\" title=\"哈希(hash)\"></a>哈希(hash)</h3><p>value是一个小字典，常用于存储一个对象的详细信息。例如存储用户的具体信息等<br>若嵌套的话，API方法会帮你将列表，字典转化为字符串，无论递归到多深也不怕</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\nhset info a <span class=\"token number\">1</span> <span class=\"token comment\"># &#123;'info'：&#123;'a':1&#125;&#125;</span>\nhmset info a <span class=\"token number\">1</span> b <span class=\"token number\">2</span> <span class=\"token comment\"># &#123;'info'：&#123;'a':1,'b':2&#125;&#125;,其实hset就可以批量设置</span>\nhsetnx info a <span class=\"token number\">1</span> <span class=\"token comment\"># set if not exist</span>\n\n查\nhgetall info <span class=\"token comment\"># 获取hash的键值对元组</span>\nhkeys info <span class=\"token comment\"># 取出所有键</span>\nhvals info <span class=\"token comment\"># 取出所有值</span>\n\nhget info a  <span class=\"token comment\"># &#123;'info'：&#123;'a':1,'b':2&#125;&#125;,取value里面a键对应的值</span>\nhmget info a b <span class=\"token comment\"># 批量取</span>\n\n删\nhdel info a <span class=\"token comment\"># 删除info里面的a</span>\n\n数字操作\nhincrby info age <span class=\"token number\">2</span> <span class=\"token comment\"># 将age对应的value加2</span>\nhincrbyfloat info price <span class=\"token number\">2.5</span> 将price对应的value加2.5\n\n通配符匹配指定key \nhscan info <span class=\"token number\">0</span> match e* <span class=\"token comment\"># 0代表全局匹配</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"队列-list\"><a href=\"#队列-list\" class=\"headerlink\" title=\"队列(list)\"></a>队列(list)</h3><p>value是一个列表,底层其实是双向链表，有lpush，rpush<br>性能的话，由于是链表，头尾性能高，中间插入性能低</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\nlpush li a b c <span class=\"token comment\"># &#123;'li':['a','b','c']&#125;</span>\nrpush li a <span class=\"token comment\"># right push</span>\nrpoplpush 源列表 目的列表 <span class=\"token comment\"># 将源列表的右边的(rpop)弹出的值，lpush进新的列表</span>\n\n删\nlpop <span class=\"token comment\"># 左边弹出</span>\nrpop <span class=\"token comment\"># 右边弹出</span>\nlrem li <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 删除2个'3'</span>\n\n查\nlindex li <span class=\"token number\">1</span> <span class=\"token comment\"># 取出li[1]</span>\nllen li <span class=\"token comment\"># 长度</span>\n\n改\nlset li <span class=\"token number\">0</span> ff <span class=\"token comment\"># li[0]='ff'</span>\nlinsert li before/after a aa <span class=\"token comment\"># 在元素a之前(之后)插入aa，注意，这里用的不是索引值而是元素</span>\n\n切片\nlrange li <span class=\"token number\">0</span> -1 <span class=\"token comment\"># 范围取值</span>\nltrim key1 <span class=\"token number\">0</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 截取索引位置0～3多范围的值赋值给key1</span>\n\n数字操作\nhincrby info age <span class=\"token number\">2</span> <span class=\"token comment\"># 将age对应的value加2</span>\nhincrbyfloat info price <span class=\"token number\">2.5</span> 将price对应的value加2.5\n\n通配符匹配指定key \nhscan info <span class=\"token number\">0</span> match e* <span class=\"token comment\"># 0代表全局匹配</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"集合-set\"><a href=\"#集合-set\" class=\"headerlink\" title=\"集合(set)\"></a>集合(set)</h3><p>value是一个set</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\nsadd s <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token comment\"># &#123;'s':&#123;'1','2','3','4'&#125;&#125;</span>\nsmove s1 s2 val_of_s1 <span class=\"token comment\"># 将s1中的val的val_of_s1移动到s2</span>\n\n查\nsmembers s <span class=\"token comment\"># 取出s的所有值</span>\nscard s1 <span class=\"token comment\"># 获得s1集合里面元素个数</span>\nsismember s1 <span class=\"token number\">2</span> <span class=\"token comment\"># 判断2是否为s1的元素</span>\n\n删\nsrem s1 fuck <span class=\"token comment\"># 删除s1中的fuck</span>\nsrandmember s1 <span class=\"token number\">2</span> <span class=\"token comment\"># 随机从s1删除2个元素</span>\nspop key <span class=\"token comment\"># 随机删除一个元素</span>\n\n集合操作\n<span class=\"token function\">sdiff</span> s1 s2 <span class=\"token comment\">#差集 ，即s1-s2 ，s1有的，s2没有</span>\nsinter s1 s2 <span class=\"token comment\">#交集 </span>\nsunion s1 s2 <span class=\"token comment\">#并集</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"有序集合-zset\"><a href=\"#有序集合-zset\" class=\"headerlink\" title=\"有序集合(zset)\"></a>有序集合(zset)</h3><p>有序集合，按照指定的权重进行排序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">增\nzadd s1 <span class=\"token number\">60</span> v1 <span class=\"token number\">80</span> v2 <span class=\"token number\">100</span> v3 <span class=\"token comment\">#数字是权重（计算机术语中score代表的是权重）</span>\n\n查\nzcard s1 <span class=\"token comment\">#返回val的数目</span>\nzcount s1 <span class=\"token number\">60</span> <span class=\"token number\">80</span> <span class=\"token comment\">#统计权重60到80之间的数目</span>\nzrank s1 v3 <span class=\"token comment\">#返回v3的下标,注意是类似数组的顺序</span>\nzrevrank s1 v3 <span class=\"token comment\"># 逆序返回v3的下标</span>\nzscore s1 v3 <span class=\"token comment\">#返回v3的权重值</span>\n\nzrange s1 <span class=\"token number\">0</span> -1  withscores <span class=\"token comment\"># 显示权重</span>\nzrange s1 <span class=\"token number\">0</span> -1 <span class=\"token comment\"># 只显示值，不显示权重。注意:0，-1是下标范围。不是像mysql limit一样的参数</span>\nzrevrange s1 <span class=\"token number\">0</span> -1 <span class=\"token comment\"># 只显示值，不显示权重。注意:0，-1是下标范围。</span>\n\nzrevrangebyscore s1 <span class=\"token number\">90</span> <span class=\"token number\">20</span> <span class=\"token comment\"># 逆向显示权重范围的，注意参数1要大于参数2</span>\nzrangebyscore s1 <span class=\"token number\">60</span> <span class=\"token number\">80</span> <span class=\"token comment\"># 显示指定权重范围的</span>\nzrangebyscore s1 <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token punctuation\">(</span><span class=\"token number\">80</span> <span class=\"token comment\"># '('为不包含</span>\nzrangebyscore s1 <span class=\"token number\">60</span> <span class=\"token number\">80</span> limit <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token comment\">#类似于mysql数据库</span>\n\nzrevrangebyscore s1 <span class=\"token number\">90</span> <span class=\"token number\">60</span> <span class=\"token comment\">#由于是反转，权重是90到60</span>\n\n删\nzrem s1 v3 <span class=\"token comment\">#删除v3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>既可以把redis理解为缓存技术，也可以理解为数据库，因为redis支持将内存中的数据周期性的写入磁盘或者把操作追加到记录文件中，这个过程称为redis的持久化。</p>\n<p>redis支持两种方式的持久化，一种是快照方式（snapshotting）,也称RDB方式；</p>\n<p>两一种是追加文件方式（append-only file），也称AOF方式。</p>\n<p>RDB方式是redis默认的持久化方式。</p>\n<p><strong>- RDB方式原理</strong><br>当redis需要做持久化时（执行SAVA或者BGSAVA命令，或者是达到配置条件时执行），redis会fork一个子进程，子进程将数据写到磁盘上一个临时RDB文件中，当子进程完成写临时文件后，将原来的RDB替换掉（默认文件名为dump.rdb）</p>\n<p><strong>- RDB优缺点</strong><br>定时备份，Redis效率高，但是容易造成数据丢失，丢失的多少和备份策略有关，</p>\n<p>例如：5分钟备份一次，但是第8分时宕机了，那么就丢失了后面的3分钟数据</p>\n<p><strong>- AOF方式原理</strong><br>AOF就可以做到全程持久化，Redis每执行一个修改数据的命令，都会把这个命令添加到AOF文件中，当Redis重启时，将会读取AOF文件进行“重放”以恢复到 Redis关闭前的最后时刻。</p>\n<p><strong>- AOF优缺点</strong></p>\n<p>优点：AOF基本可以保证数据不丢失，数据完整性比rdb要高。<br>缺点： 1.AOF持久化文件会变的越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。<br>　　　2.频繁的IO和aof文件过大时的rewrite会带来系统波动，并且由于语句过多且不断变化，导致恢复数据速度慢于rdb，并且备份数据库可能会出bug。所以一般不单独使用（以防万一）</p>\n<p><strong>- 如果一个系统里面，同时存在rdb和aof，它们是冲突还是协作？</strong><br>两者可以共存，先加载的是aof。如果aof错误，redis-server起不来</p>\n<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><p>主从复制主要用于容灾恢复（主机挂了，能迅速切换到从机，然后去修从机）和读写分离。<br>主从复制有延迟这个不可避免的缺点，但是不妨碍其成为流行的技术</p>\n<p>**- 主从复制的特点<br>**一个主服务器可以有多个从服务器。不仅主服务器可以有从服务器， 从服务器也可以有自己的从服务器。</p>\n<p>Redis 支持异步复制和部分复制（这两个特性从Redis 2.8开始），主从复制过程不会阻塞主服务器和从服务器。</p>\n<p>Master Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据。</p>\n<p>一般是主写从读。如让多个从服务器处理只读命令，使用复制功能来让主服务器免于频繁的执行持久化操作。即只有主机可以写，从机不可以写</p>\n<p>Master可以将数据保存操作交给Slaves完成，从而避免了在Master中要有独立的进程来完成此操作。</p>\n<p><a href=\"https://www.cnblogs.com/ziyide/p/9488564.html\">参考</a></p>\n"},{"title":"ubuntu20 mysql8.0","top":false,"date":"2020-05-29T14:12:01.000Z","_content":"# 通过apt 安装MySQL服务\n> 记一次新机安装笔记\n## 1.安装mysql\n```bash\n#命令1 更新源\nsudo apt-get update\n#命令2 安装mysql服务\nsudo apt-get install mysql-server\n```\n## 2.初始化配置\n```bash\nsudo mysql_secure_installation\n```\n\n```bash\n#1\nVALIDATE PASSWORD PLUGIN can be used to test passwords...\nPress y|Y for Yes, any other key for No: N (选择N ,不会进行密码的强校验)\n\n#2\nPlease set the password for root here...\nNew password: (输入密码)\nRe-enter new password: (重复输入)\n\n#3\nBy default, a MySQL installation has an anonymous user,\nallowing anyone to log into MySQL without having to have\na user account created for them...\nRemove anonymous users? (Press y|Y for Yes, any other key for No) : N (选择N，不删除匿名用户)\n\n#4\nNormally, root should only be allowed to connect from\n'localhost'. This ensures that someone cannot guess at\nthe root password from the network...\nDisallow root login remotely? (Press y|Y for Yes, any other key for No) : N (选择N，允许root远程连接)\n\n#5\nBy default, MySQL comes with a database named 'test' that\nanyone can access...\nRemove test database and access to it? (Press y|Y for Yes, any other key for No) : N (选择N，不删除test数据库)\n\n#6\nReloading the privilege tables will ensure that all changes\nmade so far will take effect immediately.\nReload privilege tables now? (Press y|Y for Yes, any other key for No) : Y (选择Y，修改权限立即生效)\n```\n## 3.检查mysql服务状态\n```bash\nsudo service mysql status\n```\n## 4.配置远程访问\n```bash\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf #找到 bind-address 修改值为 0.0.0.0(如果需要远程访问)\nsudo service mysql restart #重启mysql\n```\n```bash\nsudo mysql -uroot -p\n```\n```bash\n#切换数据库\nmysql>use mysql;\n#查询用户表命令：\nmysql>select User,authentication_string,Host from user;\n#查看状态\nselect host,user,plugin from user;\n```\n```bash\n#设置权限与密码\n\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '密码'; #使用mysql_native_password修改加密规则\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY '密码' PASSWORD EXPIRE NEVER; #更新一下用户的密码\nmysql> UPDATE user SET host = '%' WHERE user = 'root'; #允许远程访问\n\n#刷新cache中配置 刷新权限\nmysql>flush privileges; \nmysql>quit;\n```\n* 修改密码\n```bash\nalter user 'root'@'%' identified with mysql_native_password by '密码';\n```\n* 新增用户赋权并设置远程访问\n> mysql8和原来的版本有点不一样，8的安全级别更高，所以在创建远程连接用户的时候，\n不能用原来的命令（同时创建用户和赋权）:\n\n```bash\n#必须先创建用户（密码规则：mysql8.0以上密码策略限制必须要大小写加数字特殊符号）\nmysql> CREATE USER 'sammy'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\n#赋权\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'sammy'@'%' WITH GRANT OPTION;\n```\n\n## 卸载\n### 卸载mysql\n```bash\ndpkg --list|grep mysql        #在终端中查看MySQL的依赖项\nsudo apt-get remove mysql-common  #卸载\nsudo apt-get autoremove --purge mysql-server-8.0\n##sudo apt-get autoremove --purge mysqlxxx\n```\n### 清理残留数据\n```bash\ndpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P\n1\n```\n### 再次查看MySQL的剩余依赖项：\n```bash\ndpkg --list|grep mysql\n```\n### 继续删除剩余依赖项，如：\n```bash\nsudo apt-get autoremove --purge mysql-apt-config\n```\n### 删除原先配置文件\n```bash\nsudo rm -rf /etc/mysql/ /var/lib/mysql\nsudo apt autoremove\nsudo apt autoreclean # (如果提示指令有误，就把reclean改成clean)\n```\n\n安装MongoDB\n```bash\nsudo apt install mongodb\n```\n安装Redis\n```bash\nsudo apt install redis-server\n```\n\n\n参考：https://blog.csdn.net/weixin_38924500/article/details/106261971","source":"_posts/ubuntu20-mysql8-0.md","raw":"---\ntitle: ubuntu20 mysql8.0\ntags:\n  - Mysql\ncategories:\n  - Linux\ntop: false\ndate: 2020-05-29 22:12:01\n---\n# 通过apt 安装MySQL服务\n> 记一次新机安装笔记\n## 1.安装mysql\n```bash\n#命令1 更新源\nsudo apt-get update\n#命令2 安装mysql服务\nsudo apt-get install mysql-server\n```\n## 2.初始化配置\n```bash\nsudo mysql_secure_installation\n```\n\n```bash\n#1\nVALIDATE PASSWORD PLUGIN can be used to test passwords...\nPress y|Y for Yes, any other key for No: N (选择N ,不会进行密码的强校验)\n\n#2\nPlease set the password for root here...\nNew password: (输入密码)\nRe-enter new password: (重复输入)\n\n#3\nBy default, a MySQL installation has an anonymous user,\nallowing anyone to log into MySQL without having to have\na user account created for them...\nRemove anonymous users? (Press y|Y for Yes, any other key for No) : N (选择N，不删除匿名用户)\n\n#4\nNormally, root should only be allowed to connect from\n'localhost'. This ensures that someone cannot guess at\nthe root password from the network...\nDisallow root login remotely? (Press y|Y for Yes, any other key for No) : N (选择N，允许root远程连接)\n\n#5\nBy default, MySQL comes with a database named 'test' that\nanyone can access...\nRemove test database and access to it? (Press y|Y for Yes, any other key for No) : N (选择N，不删除test数据库)\n\n#6\nReloading the privilege tables will ensure that all changes\nmade so far will take effect immediately.\nReload privilege tables now? (Press y|Y for Yes, any other key for No) : Y (选择Y，修改权限立即生效)\n```\n## 3.检查mysql服务状态\n```bash\nsudo service mysql status\n```\n## 4.配置远程访问\n```bash\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf #找到 bind-address 修改值为 0.0.0.0(如果需要远程访问)\nsudo service mysql restart #重启mysql\n```\n```bash\nsudo mysql -uroot -p\n```\n```bash\n#切换数据库\nmysql>use mysql;\n#查询用户表命令：\nmysql>select User,authentication_string,Host from user;\n#查看状态\nselect host,user,plugin from user;\n```\n```bash\n#设置权限与密码\n\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '密码'; #使用mysql_native_password修改加密规则\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY '密码' PASSWORD EXPIRE NEVER; #更新一下用户的密码\nmysql> UPDATE user SET host = '%' WHERE user = 'root'; #允许远程访问\n\n#刷新cache中配置 刷新权限\nmysql>flush privileges; \nmysql>quit;\n```\n* 修改密码\n```bash\nalter user 'root'@'%' identified with mysql_native_password by '密码';\n```\n* 新增用户赋权并设置远程访问\n> mysql8和原来的版本有点不一样，8的安全级别更高，所以在创建远程连接用户的时候，\n不能用原来的命令（同时创建用户和赋权）:\n\n```bash\n#必须先创建用户（密码规则：mysql8.0以上密码策略限制必须要大小写加数字特殊符号）\nmysql> CREATE USER 'sammy'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\n#赋权\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'sammy'@'%' WITH GRANT OPTION;\n```\n\n## 卸载\n### 卸载mysql\n```bash\ndpkg --list|grep mysql        #在终端中查看MySQL的依赖项\nsudo apt-get remove mysql-common  #卸载\nsudo apt-get autoremove --purge mysql-server-8.0\n##sudo apt-get autoremove --purge mysqlxxx\n```\n### 清理残留数据\n```bash\ndpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P\n1\n```\n### 再次查看MySQL的剩余依赖项：\n```bash\ndpkg --list|grep mysql\n```\n### 继续删除剩余依赖项，如：\n```bash\nsudo apt-get autoremove --purge mysql-apt-config\n```\n### 删除原先配置文件\n```bash\nsudo rm -rf /etc/mysql/ /var/lib/mysql\nsudo apt autoremove\nsudo apt autoreclean # (如果提示指令有误，就把reclean改成clean)\n```\n\n安装MongoDB\n```bash\nsudo apt install mongodb\n```\n安装Redis\n```bash\nsudo apt install redis-server\n```\n\n\n参考：https://blog.csdn.net/weixin_38924500/article/details/106261971","slug":"ubuntu20-mysql8-0","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz398003n12mj3s1x6cj9","content":"<h1 id=\"通过apt-安装MySQL服务\"><a href=\"#通过apt-安装MySQL服务\" class=\"headerlink\" title=\"通过apt 安装MySQL服务\"></a>通过apt 安装MySQL服务</h1><blockquote>\n<p>记一次新机安装笔记</p>\n</blockquote>\n<h2 id=\"1-安装mysql\"><a href=\"#1-安装mysql\" class=\"headerlink\" title=\"1.安装mysql\"></a>1.安装mysql</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#命令1 更新源</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token comment\">#命令2 安装mysql服务</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-初始化配置\"><a href=\"#2-初始化配置\" class=\"headerlink\" title=\"2.初始化配置\"></a>2.初始化配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql_secure_installation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#1</span>\nVALIDATE PASSWORD PLUGIN can be used to <span class=\"token builtin class-name\">test</span> passwords<span class=\"token punctuation\">..</span>.\nPress y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No: N <span class=\"token punctuation\">(</span>选择N ,不会进行密码的强校验<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#2</span>\nPlease <span class=\"token builtin class-name\">set</span> the password <span class=\"token keyword\">for</span> root here<span class=\"token punctuation\">..</span>.\nNew password: <span class=\"token punctuation\">(</span>输入密码<span class=\"token punctuation\">)</span>\nRe-enter new password: <span class=\"token punctuation\">(</span>重复输入<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#3</span>\nBy default, a MySQL installation has an anonymous user,\nallowing anyone to log into MySQL without having to have\na user account created <span class=\"token keyword\">for</span> them<span class=\"token punctuation\">..</span>.\nRemove anonymous users? <span class=\"token punctuation\">(</span>Press y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> N <span class=\"token punctuation\">(</span>选择N，不删除匿名用户<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#4</span>\nNormally, root should only be allowed to connect from\n<span class=\"token string\">'localhost'</span><span class=\"token builtin class-name\">.</span> This ensures that someone cannot guess at\nthe root password from the network<span class=\"token punctuation\">..</span>.\nDisallow root login remotely? <span class=\"token punctuation\">(</span>Press y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> N <span class=\"token punctuation\">(</span>选择N，允许root远程连接<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#5</span>\nBy default, MySQL comes with a database named <span class=\"token string\">'test'</span> that\nanyone can access<span class=\"token punctuation\">..</span>.\nRemove <span class=\"token builtin class-name\">test</span> database and access to it? <span class=\"token punctuation\">(</span>Press y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> N <span class=\"token punctuation\">(</span>选择N，不删除test数据库<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#6</span>\nReloading the privilege tables will ensure that all changes\nmade so far will take effect immediately.\nReload privilege tables now? <span class=\"token punctuation\">(</span>Press y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> Y <span class=\"token punctuation\">(</span>选择Y，修改权限立即生效<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-检查mysql服务状态\"><a href=\"#3-检查mysql服务状态\" class=\"headerlink\" title=\"3.检查mysql服务状态\"></a>3.检查mysql服务状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mysql status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"4-配置远程访问\"><a href=\"#4-配置远程访问\" class=\"headerlink\" title=\"4.配置远程访问\"></a>4.配置远程访问</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/mysql/mysql.conf.d/mysqld.cnf <span class=\"token comment\">#找到 bind-address 修改值为 0.0.0.0(如果需要远程访问)</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mysql restart <span class=\"token comment\">#重启mysql</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql -uroot -p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#切换数据库</span>\nmysql<span class=\"token operator\">&gt;</span>use mysql<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查询用户表命令：</span>\nmysql<span class=\"token operator\">&gt;</span>select User,authentication_string,Host from user<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查看状态</span>\n<span class=\"token keyword\">select</span> host,user,plugin from user<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#设置权限与密码</span>\n\nmysql<span class=\"token operator\">&gt;</span> ALTER <span class=\"token environment constant\">USER</span> <span class=\"token string\">'root'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"token string\">'密码'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#使用mysql_native_password修改加密规则</span>\nmysql<span class=\"token operator\">&gt;</span> ALTER <span class=\"token environment constant\">USER</span> <span class=\"token string\">'root'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED BY <span class=\"token string\">'密码'</span> PASSWORD EXPIRE NEVER<span class=\"token punctuation\">;</span> <span class=\"token comment\">#更新一下用户的密码</span>\nmysql<span class=\"token operator\">&gt;</span> UPDATE user SET <span class=\"token function\">host</span> <span class=\"token operator\">=</span> <span class=\"token string\">'%'</span> WHERE user <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#允许远程访问</span>\n\n<span class=\"token comment\">#刷新cache中配置 刷新权限</span>\nmysql<span class=\"token operator\">&gt;</span>flush privileges<span class=\"token punctuation\">;</span> \nmysql<span class=\"token operator\">&gt;</span>quit<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>修改密码<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">alter user <span class=\"token string\">'root'</span>@<span class=\"token string\">'%'</span> identified with mysql_native_password by <span class=\"token string\">'密码'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>新增用户赋权并设置远程访问<blockquote>\n<p>mysql8和原来的版本有点不一样，8的安全级别更高，所以在创建远程连接用户的时候，<br>不能用原来的命令（同时创建用户和赋权）:</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#必须先创建用户（密码规则：mysql8.0以上密码策略限制必须要大小写加数字特殊符号）</span>\nmysql<span class=\"token operator\">&gt;</span> CREATE <span class=\"token environment constant\">USER</span> <span class=\"token string\">'sammy'</span>@<span class=\"token string\">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#赋权</span>\nmysql<span class=\"token operator\">&gt;</span> GRANT ALL PRIVILEGES ON *.* TO <span class=\"token string\">'sammy'</span>@<span class=\"token string\">'%'</span> WITH GRANT OPTION<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><h3 id=\"卸载mysql\"><a href=\"#卸载mysql\" class=\"headerlink\" title=\"卸载mysql\"></a>卸载mysql</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dpkg --list<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mysql        <span class=\"token comment\">#在终端中查看MySQL的依赖项</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove mysql-common  <span class=\"token comment\">#卸载</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoremove --purge mysql-server-8.0\n<span class=\"token comment\">##sudo apt-get autoremove --purge mysqlxxx</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"清理残留数据\"><a href=\"#清理残留数据\" class=\"headerlink\" title=\"清理残留数据\"></a>清理残留数据</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dpkg -l <span class=\"token operator\">|</span><span class=\"token function\">grep</span> ^rc<span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">'{print <span class=\"token variable\">$2</span>}'</span> <span class=\"token operator\">|</span><span class=\"token function\">sudo</span> <span class=\"token function\">xargs</span> dpkg -P\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"再次查看MySQL的剩余依赖项：\"><a href=\"#再次查看MySQL的剩余依赖项：\" class=\"headerlink\" title=\"再次查看MySQL的剩余依赖项：\"></a>再次查看MySQL的剩余依赖项：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dpkg --list<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"继续删除剩余依赖项，如：\"><a href=\"#继续删除剩余依赖项，如：\" class=\"headerlink\" title=\"继续删除剩余依赖项，如：\"></a>继续删除剩余依赖项，如：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoremove --purge mysql-apt-config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"删除原先配置文件\"><a href=\"#删除原先配置文件\" class=\"headerlink\" title=\"删除原先配置文件\"></a>删除原先配置文件</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf /etc/mysql/ /var/lib/mysql\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoremove\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoreclean <span class=\"token comment\"># (如果提示指令有误，就把reclean改成clean)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装MongoDB</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mongodb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装Redis</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> redis-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>参考：<a href=\"https://blog.csdn.net/weixin_38924500/article/details/106261971\">https://blog.csdn.net/weixin_38924500/article/details/106261971</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"通过apt-安装MySQL服务\"><a href=\"#通过apt-安装MySQL服务\" class=\"headerlink\" title=\"通过apt 安装MySQL服务\"></a>通过apt 安装MySQL服务</h1><blockquote>\n<p>记一次新机安装笔记</p>\n</blockquote>\n<h2 id=\"1-安装mysql\"><a href=\"#1-安装mysql\" class=\"headerlink\" title=\"1.安装mysql\"></a>1.安装mysql</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#命令1 更新源</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token comment\">#命令2 安装mysql服务</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-初始化配置\"><a href=\"#2-初始化配置\" class=\"headerlink\" title=\"2.初始化配置\"></a>2.初始化配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql_secure_installation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#1</span>\nVALIDATE PASSWORD PLUGIN can be used to <span class=\"token builtin class-name\">test</span> passwords<span class=\"token punctuation\">..</span>.\nPress y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No: N <span class=\"token punctuation\">(</span>选择N ,不会进行密码的强校验<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#2</span>\nPlease <span class=\"token builtin class-name\">set</span> the password <span class=\"token keyword\">for</span> root here<span class=\"token punctuation\">..</span>.\nNew password: <span class=\"token punctuation\">(</span>输入密码<span class=\"token punctuation\">)</span>\nRe-enter new password: <span class=\"token punctuation\">(</span>重复输入<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#3</span>\nBy default, a MySQL installation has an anonymous user,\nallowing anyone to log into MySQL without having to have\na user account created <span class=\"token keyword\">for</span> them<span class=\"token punctuation\">..</span>.\nRemove anonymous users? <span class=\"token punctuation\">(</span>Press y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> N <span class=\"token punctuation\">(</span>选择N，不删除匿名用户<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#4</span>\nNormally, root should only be allowed to connect from\n<span class=\"token string\">'localhost'</span><span class=\"token builtin class-name\">.</span> This ensures that someone cannot guess at\nthe root password from the network<span class=\"token punctuation\">..</span>.\nDisallow root login remotely? <span class=\"token punctuation\">(</span>Press y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> N <span class=\"token punctuation\">(</span>选择N，允许root远程连接<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#5</span>\nBy default, MySQL comes with a database named <span class=\"token string\">'test'</span> that\nanyone can access<span class=\"token punctuation\">..</span>.\nRemove <span class=\"token builtin class-name\">test</span> database and access to it? <span class=\"token punctuation\">(</span>Press y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> N <span class=\"token punctuation\">(</span>选择N，不删除test数据库<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#6</span>\nReloading the privilege tables will ensure that all changes\nmade so far will take effect immediately.\nReload privilege tables now? <span class=\"token punctuation\">(</span>Press y<span class=\"token operator\">|</span>Y <span class=\"token keyword\">for</span> Yes, any other key <span class=\"token keyword\">for</span> No<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> Y <span class=\"token punctuation\">(</span>选择Y，修改权限立即生效<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-检查mysql服务状态\"><a href=\"#3-检查mysql服务状态\" class=\"headerlink\" title=\"3.检查mysql服务状态\"></a>3.检查mysql服务状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mysql status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"4-配置远程访问\"><a href=\"#4-配置远程访问\" class=\"headerlink\" title=\"4.配置远程访问\"></a>4.配置远程访问</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/mysql/mysql.conf.d/mysqld.cnf <span class=\"token comment\">#找到 bind-address 修改值为 0.0.0.0(如果需要远程访问)</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mysql restart <span class=\"token comment\">#重启mysql</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql -uroot -p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#切换数据库</span>\nmysql<span class=\"token operator\">></span>use mysql<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查询用户表命令：</span>\nmysql<span class=\"token operator\">></span>select User,authentication_string,Host from user<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查看状态</span>\n<span class=\"token keyword\">select</span> host,user,plugin from user<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#设置权限与密码</span>\n\nmysql<span class=\"token operator\">></span> ALTER <span class=\"token environment constant\">USER</span> <span class=\"token string\">'root'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"token string\">'密码'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#使用mysql_native_password修改加密规则</span>\nmysql<span class=\"token operator\">></span> ALTER <span class=\"token environment constant\">USER</span> <span class=\"token string\">'root'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED BY <span class=\"token string\">'密码'</span> PASSWORD EXPIRE NEVER<span class=\"token punctuation\">;</span> <span class=\"token comment\">#更新一下用户的密码</span>\nmysql<span class=\"token operator\">></span> UPDATE user SET <span class=\"token function\">host</span> <span class=\"token operator\">=</span> <span class=\"token string\">'%'</span> WHERE user <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#允许远程访问</span>\n\n<span class=\"token comment\">#刷新cache中配置 刷新权限</span>\nmysql<span class=\"token operator\">></span>flush privileges<span class=\"token punctuation\">;</span> \nmysql<span class=\"token operator\">></span>quit<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>修改密码<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">alter user <span class=\"token string\">'root'</span>@<span class=\"token string\">'%'</span> identified with mysql_native_password by <span class=\"token string\">'密码'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>新增用户赋权并设置远程访问<blockquote>\n<p>mysql8和原来的版本有点不一样，8的安全级别更高，所以在创建远程连接用户的时候，<br>不能用原来的命令（同时创建用户和赋权）:</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#必须先创建用户（密码规则：mysql8.0以上密码策略限制必须要大小写加数字特殊符号）</span>\nmysql<span class=\"token operator\">></span> CREATE <span class=\"token environment constant\">USER</span> <span class=\"token string\">'sammy'</span>@<span class=\"token string\">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#赋权</span>\nmysql<span class=\"token operator\">></span> GRANT ALL PRIVILEGES ON *.* TO <span class=\"token string\">'sammy'</span>@<span class=\"token string\">'%'</span> WITH GRANT OPTION<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><h3 id=\"卸载mysql\"><a href=\"#卸载mysql\" class=\"headerlink\" title=\"卸载mysql\"></a>卸载mysql</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dpkg --list<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mysql        <span class=\"token comment\">#在终端中查看MySQL的依赖项</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove mysql-common  <span class=\"token comment\">#卸载</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoremove --purge mysql-server-8.0\n<span class=\"token comment\">##sudo apt-get autoremove --purge mysqlxxx</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"清理残留数据\"><a href=\"#清理残留数据\" class=\"headerlink\" title=\"清理残留数据\"></a>清理残留数据</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dpkg -l <span class=\"token operator\">|</span><span class=\"token function\">grep</span> ^rc<span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$2</span>&#125;'</span> <span class=\"token operator\">|</span><span class=\"token function\">sudo</span> <span class=\"token function\">xargs</span> dpkg -P\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"再次查看MySQL的剩余依赖项：\"><a href=\"#再次查看MySQL的剩余依赖项：\" class=\"headerlink\" title=\"再次查看MySQL的剩余依赖项：\"></a>再次查看MySQL的剩余依赖项：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dpkg --list<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"继续删除剩余依赖项，如：\"><a href=\"#继续删除剩余依赖项，如：\" class=\"headerlink\" title=\"继续删除剩余依赖项，如：\"></a>继续删除剩余依赖项，如：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoremove --purge mysql-apt-config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"删除原先配置文件\"><a href=\"#删除原先配置文件\" class=\"headerlink\" title=\"删除原先配置文件\"></a>删除原先配置文件</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf /etc/mysql/ /var/lib/mysql\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoremove\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoreclean <span class=\"token comment\"># (如果提示指令有误，就把reclean改成clean)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装MongoDB</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mongodb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装Redis</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> redis-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>参考：<a href=\"https://blog.csdn.net/weixin_38924500/article/details/106261971\">https://blog.csdn.net/weixin_38924500/article/details/106261971</a></p>\n"},{"title":"十大经典排序算法整理汇总（附代码）","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-16T07:09:23.000Z","password":null,"summary":"本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。","_content":"\n> 关注公众号【算法码上来】，每日算法干货马上就来！\n\n![](/medias/contact.jpg)\n\n## 前言\n\n本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\n\n**本文并不会详细讲解每种排序算法的原理**，网上有很多很好的教程，大家可以自己去搜了看。\n\n最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 [LeetCode 912. 排序数组](https://leetcode-cn.com/problems/sort-an-array/ \"LeetCode 912. 排序数组\") 这道题。\n\n## 性质汇总\n\n> 如果发现表中有错误，请留言告知。\n\n|   算法  |   最好  |  最坏   |  平均   |  空间   |  稳定性   | 是否基于比较\n| --- | --- | --- | --- | --- | :---: | :---: |\n|  冒泡排序   |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|   选择排序  |  $O(n^2)$  |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\times$  | $\\checkmark$ |\n|   插入排序  |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|  快速排序   |  $O(n\\log n)$   |  $O(n^2)$   |  $O(n\\log n)$   |  $O(\\log n)$~$O(n)$   |  $\\times$   | $\\checkmark$ |\n|  归并排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(n)$  |  $\\checkmark$   | $\\checkmark$ |\n|   希尔排序  |  $O(n^{1.3})$   |   $O(n^2)$  |  $O(n\\log n)$~$O(n^2)$   |  $O(1)$   | $\\times$    | $\\checkmark$ |\n|  计数排序   |  $O(n+k)$   |   $O(n+k)$  |   $O(n+k)$  |  $O(n+k)$   |  $\\checkmark$   | $\\times$ |\n|   基数排序  |   $O(nk)$  |  $O(nk)$   |   $O(nk)$  |   $O(n+k)$  |  $\\checkmark$   | $\\times$ |\n|  桶排序   |   $O(n)$  |   $O(n)$  |   $O(n)$  |  $O(n+m)$   |  $\\checkmark$   | $\\times$ |\n|  堆排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(1)$  |  $\\times$   | $\\checkmark$ |\n\n\n\n> 如果表格显示有问题的话，还可以直接看下面的汇总图：\n\n![十大经典排序算法性质汇总](1.png)\n\n### 维基百科\n\n我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。\n\n**冒泡排序**  \n[https://en.wikipedia.org/wiki/Bubble_sort](https://en.wikipedia.org/wiki/Bubble_sort)\n\n**选择排序**  \n[https://en.wikipedia.org/wiki/Selection_sort](https://en.wikipedia.org/wiki/Selection_sort)\n\n**插入排序**  \n[https://en.wikipedia.org/wiki/Insertion_sort](https://en.wikipedia.org/wiki/Insertion_sort)\n\n**快速排序**  \n[https://en.wikipedia.org/wiki/Quicksort](https://en.wikipedia.org/wiki/Quicksort)\n\n**归并排序**  \n[https://en.wikipedia.org/wiki/Merge_sort](https://en.wikipedia.org/wiki/Merge_sort)\n\n**希尔排序**  \n[https://en.wikipedia.org/wiki/Shellsort](https://en.wikipedia.org/wiki/Shellsort)\n\n**计数排序**  \n[https://en.wikipedia.org/wiki/Counting_sort](https://en.wikipedia.org/wiki/Counting_sort)\n\n**基数排序**  \n[https://en.wikipedia.org/wiki/Radix_sort](https://en.wikipedia.org/wiki/Radix_sort)\n\n**桶排序**  \n[https://en.wikipedia.org/wiki/Bucket_sort](https://en.wikipedia.org/wiki/Bucket_sort)\n\n**堆排序**  \n[https://en.wikipedia.org/wiki/Heapsort](https://en.wikipedia.org/wiki/Heapsort)\n\n## 代码实现\n\n所有的排序算法接口都是相同的，也就是 `vector<int> xxxSort(vector<int>& nums)` 。只需要你传入一个 `vector<int>` 类型的数组，就能返回排序后的结果。\n\n运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector<int> bubbleSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = n-2; j >= i; --j) {\n                if (nums[j] > nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector<int> selectSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            int idx = i;\n            for (int j = i; j < n; ++j) {\n                if (nums[j] < nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector<int> insertSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j > 0 && nums[j] < nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;\n        int m = l;\n        for (int i = l; i < r; ++i) {\n            if (nums[i] < nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector<int> quickSort(vector<int>& nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector<int> mSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector<int> lnums = mSort(nums, l, m);\n        vector<int> rnums = mSort(nums, m+1, r);\n        vector<int> res;\n        int i = 0, j = 0;\n        while (i <= m-l && j <= r-m-1) {\n            if (lnums[i] < rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i <= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j <= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector<int> mergeSort(vector<int>& nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector<int> mergeSortNR(vector<int>& nums) {\n        int n = nums.size();\n        for (int len = 1; len < n; len <<= 1) {\n            for (int l = 0; l < n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector<int> res;\n                int i = l, j = m+1;\n                while (i <= m && j <= r) {\n                    if (nums[i] < nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i <= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j <= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i <= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector<int> shellSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; ++i) {\n                for (int j = i; j-gap >= 0 && nums[j-gap] > nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector<int> countSort(vector<int>& nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector<int> count(m, 0);\n        for (int i = 0; i < n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector<int> res;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector<int> radixSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv > 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector<int> count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd > 0) {\n            count.assign(10, 0);\n            for (int i = 0; i < n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i < 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i >= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i < n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector<int> bucketSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector<vector<int> > bucket(m);\n        for (int i = 0; i < n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i < m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j < sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector<int>& nums, int p, int s) {\n        while (2*p+1 < s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2<s && nums[c2]>nums[c1]) ? c2 : c1;\n            if (nums[c] > nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector<int> heapSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i >= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i > 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};\n```","source":"_posts/sort-algorithms.md","raw":"---\ntitle: 十大经典排序算法整理汇总（附代码）\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-16 15:09:23\npassword:\nsummary: 本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\ntags:\n- Leetcode\n- 算法\ncategories:\n- 编程算法\n---\n\n> 关注公众号【算法码上来】，每日算法干货马上就来！\n\n![](/medias/contact.jpg)\n\n## 前言\n\n本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\n\n**本文并不会详细讲解每种排序算法的原理**，网上有很多很好的教程，大家可以自己去搜了看。\n\n最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 [LeetCode 912. 排序数组](https://leetcode-cn.com/problems/sort-an-array/ \"LeetCode 912. 排序数组\") 这道题。\n\n## 性质汇总\n\n> 如果发现表中有错误，请留言告知。\n\n|   算法  |   最好  |  最坏   |  平均   |  空间   |  稳定性   | 是否基于比较\n| --- | --- | --- | --- | --- | :---: | :---: |\n|  冒泡排序   |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|   选择排序  |  $O(n^2)$  |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\times$  | $\\checkmark$ |\n|   插入排序  |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|  快速排序   |  $O(n\\log n)$   |  $O(n^2)$   |  $O(n\\log n)$   |  $O(\\log n)$~$O(n)$   |  $\\times$   | $\\checkmark$ |\n|  归并排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(n)$  |  $\\checkmark$   | $\\checkmark$ |\n|   希尔排序  |  $O(n^{1.3})$   |   $O(n^2)$  |  $O(n\\log n)$~$O(n^2)$   |  $O(1)$   | $\\times$    | $\\checkmark$ |\n|  计数排序   |  $O(n+k)$   |   $O(n+k)$  |   $O(n+k)$  |  $O(n+k)$   |  $\\checkmark$   | $\\times$ |\n|   基数排序  |   $O(nk)$  |  $O(nk)$   |   $O(nk)$  |   $O(n+k)$  |  $\\checkmark$   | $\\times$ |\n|  桶排序   |   $O(n)$  |   $O(n)$  |   $O(n)$  |  $O(n+m)$   |  $\\checkmark$   | $\\times$ |\n|  堆排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(1)$  |  $\\times$   | $\\checkmark$ |\n\n\n\n> 如果表格显示有问题的话，还可以直接看下面的汇总图：\n\n![十大经典排序算法性质汇总](1.png)\n\n### 维基百科\n\n我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。\n\n**冒泡排序**  \n[https://en.wikipedia.org/wiki/Bubble_sort](https://en.wikipedia.org/wiki/Bubble_sort)\n\n**选择排序**  \n[https://en.wikipedia.org/wiki/Selection_sort](https://en.wikipedia.org/wiki/Selection_sort)\n\n**插入排序**  \n[https://en.wikipedia.org/wiki/Insertion_sort](https://en.wikipedia.org/wiki/Insertion_sort)\n\n**快速排序**  \n[https://en.wikipedia.org/wiki/Quicksort](https://en.wikipedia.org/wiki/Quicksort)\n\n**归并排序**  \n[https://en.wikipedia.org/wiki/Merge_sort](https://en.wikipedia.org/wiki/Merge_sort)\n\n**希尔排序**  \n[https://en.wikipedia.org/wiki/Shellsort](https://en.wikipedia.org/wiki/Shellsort)\n\n**计数排序**  \n[https://en.wikipedia.org/wiki/Counting_sort](https://en.wikipedia.org/wiki/Counting_sort)\n\n**基数排序**  \n[https://en.wikipedia.org/wiki/Radix_sort](https://en.wikipedia.org/wiki/Radix_sort)\n\n**桶排序**  \n[https://en.wikipedia.org/wiki/Bucket_sort](https://en.wikipedia.org/wiki/Bucket_sort)\n\n**堆排序**  \n[https://en.wikipedia.org/wiki/Heapsort](https://en.wikipedia.org/wiki/Heapsort)\n\n## 代码实现\n\n所有的排序算法接口都是相同的，也就是 `vector<int> xxxSort(vector<int>& nums)` 。只需要你传入一个 `vector<int>` 类型的数组，就能返回排序后的结果。\n\n运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector<int> bubbleSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = n-2; j >= i; --j) {\n                if (nums[j] > nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector<int> selectSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            int idx = i;\n            for (int j = i; j < n; ++j) {\n                if (nums[j] < nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector<int> insertSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j > 0 && nums[j] < nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;\n        int m = l;\n        for (int i = l; i < r; ++i) {\n            if (nums[i] < nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector<int> quickSort(vector<int>& nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector<int> mSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector<int> lnums = mSort(nums, l, m);\n        vector<int> rnums = mSort(nums, m+1, r);\n        vector<int> res;\n        int i = 0, j = 0;\n        while (i <= m-l && j <= r-m-1) {\n            if (lnums[i] < rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i <= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j <= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector<int> mergeSort(vector<int>& nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector<int> mergeSortNR(vector<int>& nums) {\n        int n = nums.size();\n        for (int len = 1; len < n; len <<= 1) {\n            for (int l = 0; l < n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector<int> res;\n                int i = l, j = m+1;\n                while (i <= m && j <= r) {\n                    if (nums[i] < nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i <= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j <= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i <= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector<int> shellSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; ++i) {\n                for (int j = i; j-gap >= 0 && nums[j-gap] > nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector<int> countSort(vector<int>& nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector<int> count(m, 0);\n        for (int i = 0; i < n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector<int> res;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector<int> radixSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv > 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector<int> count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd > 0) {\n            count.assign(10, 0);\n            for (int i = 0; i < n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i < 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i >= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i < n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector<int> bucketSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector<vector<int> > bucket(m);\n        for (int i = 0; i < n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i < m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j < sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector<int>& nums, int p, int s) {\n        while (2*p+1 < s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2<s && nums[c2]>nums[c1]) ? c2 : c1;\n            if (nums[c] > nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector<int> heapSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i >= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i > 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};\n```","slug":"sort-algorithms","published":1,"updated":"2022-09-14T13:31:07.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz398003q12mj7ynfbvj7","content":"<blockquote>\n<p>关注公众号【算法码上来】，每日算法干货马上就来！</p>\n</blockquote>\n<p><img src=\"/medias/contact.jpg\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p>\n<p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p>\n<p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href=\"https://leetcode-cn.com/problems/sort-an-array/\" title=\"LeetCode 912. 排序数组\">LeetCode 912. 排序数组</a> 这道题。</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><blockquote>\n<p>如果发现表中有错误，请留言告知。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n<th>空间</th>\n<th align=\"center\">稳定性</th>\n<th align=\"center\">是否基于比较</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(\\log n)$~$O(n)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>$O(n^{1.3})$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$~$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n+m)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p>\n</blockquote>\n<p><img src=\"1.png\" alt=\"十大经典排序算法性质汇总\"></p>\n<h3 id=\"维基百科\"><a href=\"#维基百科\" class=\"headerlink\" title=\"维基百科\"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p>\n<p><strong>冒泡排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">https://en.wikipedia.org/wiki/Bubble_sort</a></p>\n<p><strong>选择排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Selection_sort\">https://en.wikipedia.org/wiki/Selection_sort</a></p>\n<p><strong>插入排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Insertion_sort\">https://en.wikipedia.org/wiki/Insertion_sort</a></p>\n<p><strong>快速排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Quicksort\">https://en.wikipedia.org/wiki/Quicksort</a></p>\n<p><strong>归并排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Merge_sort\">https://en.wikipedia.org/wiki/Merge_sort</a></p>\n<p><strong>希尔排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Shellsort\">https://en.wikipedia.org/wiki/Shellsort</a></p>\n<p><strong>计数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Counting_sort\">https://en.wikipedia.org/wiki/Counting_sort</a></p>\n<p><strong>基数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Radix_sort\">https://en.wikipedia.org/wiki/Radix_sort</a></p>\n<p><strong>桶排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bucket_sort\">https://en.wikipedia.org/wiki/Bucket_sort</a></p>\n<p><strong>堆排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Heapsort\">https://en.wikipedia.org/wiki/Heapsort</a></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p>\n<p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 冒泡排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 选择排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 插入排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 快速排序（24 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&gt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 归并排序（192 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&gt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> lnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> rnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rnums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 归并排序 + 非递归（80 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mergeSortNR</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span>len<span class=\"token punctuation\">;</span> l <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 希尔排序（40 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">shellSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">-</span>gap <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">-=</span> gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 计数排序（32 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">countSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> maxv<span class=\"token operator\">-</span>minv<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>minv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 基数排序（不适用于负数）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxv <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxv <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            maxd<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rank</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxd <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rank<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            maxd<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            base <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 桶排序 (20 ms)</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bs <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxv<span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bucket<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 堆排序（32 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> c2 <span class=\"token operator\">:</span> c1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>关注公众号【算法码上来】，每日算法干货马上就来！</p>\n</blockquote>\n<p><img src=\"/medias/contact.jpg\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p>\n<p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p>\n<p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href=\"https://leetcode-cn.com/problems/sort-an-array/\" title=\"LeetCode 912. 排序数组\">LeetCode 912. 排序数组</a> 这道题。</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><blockquote>\n<p>如果发现表中有错误，请留言告知。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n<th>空间</th>\n<th align=\"center\">稳定性</th>\n<th align=\"center\">是否基于比较</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(\\log n)$~$O(n)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>$O(n^{1.3})$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$~$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n+m)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p>\n</blockquote>\n<p><img src=\"1.png\" alt=\"十大经典排序算法性质汇总\"></p>\n<h3 id=\"维基百科\"><a href=\"#维基百科\" class=\"headerlink\" title=\"维基百科\"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p>\n<p><strong>冒泡排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">https://en.wikipedia.org/wiki/Bubble_sort</a></p>\n<p><strong>选择排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Selection_sort\">https://en.wikipedia.org/wiki/Selection_sort</a></p>\n<p><strong>插入排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Insertion_sort\">https://en.wikipedia.org/wiki/Insertion_sort</a></p>\n<p><strong>快速排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Quicksort\">https://en.wikipedia.org/wiki/Quicksort</a></p>\n<p><strong>归并排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Merge_sort\">https://en.wikipedia.org/wiki/Merge_sort</a></p>\n<p><strong>希尔排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Shellsort\">https://en.wikipedia.org/wiki/Shellsort</a></p>\n<p><strong>计数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Counting_sort\">https://en.wikipedia.org/wiki/Counting_sort</a></p>\n<p><strong>基数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Radix_sort\">https://en.wikipedia.org/wiki/Radix_sort</a></p>\n<p><strong>桶排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bucket_sort\">https://en.wikipedia.org/wiki/Bucket_sort</a></p>\n<p><strong>堆排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Heapsort\">https://en.wikipedia.org/wiki/Heapsort</a></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p>\n<p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 冒泡排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 选择排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 插入排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 快速排序（24 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 归并排序（192 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> lnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rnums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 归并排序 + 非递归（80 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mergeSortNR</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span>len<span class=\"token punctuation\">;</span> l <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 希尔排序（40 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">shellSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">-</span>gap <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">-=</span> gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 计数排序（32 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">countSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> maxv<span class=\"token operator\">-</span>minv<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            count<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>minv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 基数排序（不适用于负数）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxv <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            maxv <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            maxd<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rank</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxd <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            count<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                rank<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            maxd<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            base <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 桶排序 (20 ms)</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bs <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxv<span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            bucket<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nums<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 堆排序（32 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> c2 <span class=\"token operator\">:</span> c1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"云开发资料","top":false,"date":"2020-05-01T15:43:39.000Z","_content":"\n# 云开发学习视频\n\n[云开发官方文档](https://developers.weixin.qq.com/minigame/dev/wxcloud/basis/getting-started.html)\n\n[用云函数实现后端能力](https://club.cloudbase.net/handbook/tcb/1101.html)\n\n~从 0 到 1 玩转云调用订阅消息\nhttps://cloud.tencent.com/edu/learning/course-2415\n从 0 到 1 玩转小程序地图 \nhttps://cloud.tencent.com/edu/learning/course-2416\n从 0 到 1 玩转小程序内容安全\nhttps://cloud.tencent.com/edu/learning/course-2417\n从 0 到 1 玩转小程序图像处理\nhttps://cloud.tencent.com/edu/learning/course-2418\n从 0 到 1 玩转小程序服务市场\nhttps://cloud.tencent.com/edu/learning/course-2419\n使用 uni-app 开发电影推荐小程序实战\nhttps://cloud.tencent.com/edu/learning/course-2420\n使用 WePy 开发企业门户小程序\nhttps://cloud.tencent.com/edu/learning/course-2421\n使用 Vue.js 语法开发答题小程序\nhttps://cloud.tencent.com/edu/learning/course-2422\n使用 Chameleon 开发教育培训小程序\nhttps://cloud.tencent.com/edu/learning/course-2423\n云开发数据库命令全解\nhttps://cloud.tencent.com/edu/learning/course-2424\n云开发数据库聚合全解\nhttps://cloud.tencent.com/edu/learning/course-2425\n云开发数据库事务全解\nhttps://cloud.tencent.com/edu/learning/course-2426\n云开发数据库安全规则全解\nhttps://cloud.tencent.com/edu/learning/course-2427\n云函数开发与日志调试\nhttps://cloud.tencent.com/edu/learning/course-2428\n云开发监控与告警\nhttps://cloud.tencent.com/edu/learning/course-2429\n云调用能力全解\nhttps://cloud.tencent.com/edu/learning/course-2430\n云数据库实时数据推送\nhttps://cloud.tencent.com/edu/learning/course-2431\n小程序·云开发实战——30分钟搭建个人相册小程序\nhttps://cloud.tencent.com/edu/learning/course-2432\n小程序·云开发实战：定制化客服小程序\nhttps://cloud.tencent.com/edu/learning/course-2433\n\n\n\n[微信辅助工具](https://www.wxmarkdown.com/)\n\n> 搬运工","source":"_posts/云开发资料.md","raw":"---\ntitle: 云开发资料\ntags:\n  - 云开发\ncategories:\n  - 云开发\ntop: false\ndate: 2020-05-1 23:43:39\n---\n\n# 云开发学习视频\n\n[云开发官方文档](https://developers.weixin.qq.com/minigame/dev/wxcloud/basis/getting-started.html)\n\n[用云函数实现后端能力](https://club.cloudbase.net/handbook/tcb/1101.html)\n\n~从 0 到 1 玩转云调用订阅消息\nhttps://cloud.tencent.com/edu/learning/course-2415\n从 0 到 1 玩转小程序地图 \nhttps://cloud.tencent.com/edu/learning/course-2416\n从 0 到 1 玩转小程序内容安全\nhttps://cloud.tencent.com/edu/learning/course-2417\n从 0 到 1 玩转小程序图像处理\nhttps://cloud.tencent.com/edu/learning/course-2418\n从 0 到 1 玩转小程序服务市场\nhttps://cloud.tencent.com/edu/learning/course-2419\n使用 uni-app 开发电影推荐小程序实战\nhttps://cloud.tencent.com/edu/learning/course-2420\n使用 WePy 开发企业门户小程序\nhttps://cloud.tencent.com/edu/learning/course-2421\n使用 Vue.js 语法开发答题小程序\nhttps://cloud.tencent.com/edu/learning/course-2422\n使用 Chameleon 开发教育培训小程序\nhttps://cloud.tencent.com/edu/learning/course-2423\n云开发数据库命令全解\nhttps://cloud.tencent.com/edu/learning/course-2424\n云开发数据库聚合全解\nhttps://cloud.tencent.com/edu/learning/course-2425\n云开发数据库事务全解\nhttps://cloud.tencent.com/edu/learning/course-2426\n云开发数据库安全规则全解\nhttps://cloud.tencent.com/edu/learning/course-2427\n云函数开发与日志调试\nhttps://cloud.tencent.com/edu/learning/course-2428\n云开发监控与告警\nhttps://cloud.tencent.com/edu/learning/course-2429\n云调用能力全解\nhttps://cloud.tencent.com/edu/learning/course-2430\n云数据库实时数据推送\nhttps://cloud.tencent.com/edu/learning/course-2431\n小程序·云开发实战——30分钟搭建个人相册小程序\nhttps://cloud.tencent.com/edu/learning/course-2432\n小程序·云开发实战：定制化客服小程序\nhttps://cloud.tencent.com/edu/learning/course-2433\n\n\n\n[微信辅助工具](https://www.wxmarkdown.com/)\n\n> 搬运工","slug":"云开发资料","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz399003u12mj5wvo5bzz","content":"<h1 id=\"云开发学习视频\"><a href=\"#云开发学习视频\" class=\"headerlink\" title=\"云开发学习视频\"></a>云开发学习视频</h1><p><a href=\"https://developers.weixin.qq.com/minigame/dev/wxcloud/basis/getting-started.html\">云开发官方文档</a></p>\n<p><a href=\"https://club.cloudbase.net/handbook/tcb/1101.html\">用云函数实现后端能力</a></p>\n<p>~从 0 到 1 玩转云调用订阅消息<br><a href=\"https://cloud.tencent.com/edu/learning/course-2415\">https://cloud.tencent.com/edu/learning/course-2415</a><br>从 0 到 1 玩转小程序地图<br><a href=\"https://cloud.tencent.com/edu/learning/course-2416\">https://cloud.tencent.com/edu/learning/course-2416</a><br>从 0 到 1 玩转小程序内容安全<br><a href=\"https://cloud.tencent.com/edu/learning/course-2417\">https://cloud.tencent.com/edu/learning/course-2417</a><br>从 0 到 1 玩转小程序图像处理<br><a href=\"https://cloud.tencent.com/edu/learning/course-2418\">https://cloud.tencent.com/edu/learning/course-2418</a><br>从 0 到 1 玩转小程序服务市场<br><a href=\"https://cloud.tencent.com/edu/learning/course-2419\">https://cloud.tencent.com/edu/learning/course-2419</a><br>使用 uni-app 开发电影推荐小程序实战<br><a href=\"https://cloud.tencent.com/edu/learning/course-2420\">https://cloud.tencent.com/edu/learning/course-2420</a><br>使用 WePy 开发企业门户小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2421\">https://cloud.tencent.com/edu/learning/course-2421</a><br>使用 Vue.js 语法开发答题小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2422\">https://cloud.tencent.com/edu/learning/course-2422</a><br>使用 Chameleon 开发教育培训小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2423\">https://cloud.tencent.com/edu/learning/course-2423</a><br>云开发数据库命令全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2424\">https://cloud.tencent.com/edu/learning/course-2424</a><br>云开发数据库聚合全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2425\">https://cloud.tencent.com/edu/learning/course-2425</a><br>云开发数据库事务全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2426\">https://cloud.tencent.com/edu/learning/course-2426</a><br>云开发数据库安全规则全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2427\">https://cloud.tencent.com/edu/learning/course-2427</a><br>云函数开发与日志调试<br><a href=\"https://cloud.tencent.com/edu/learning/course-2428\">https://cloud.tencent.com/edu/learning/course-2428</a><br>云开发监控与告警<br><a href=\"https://cloud.tencent.com/edu/learning/course-2429\">https://cloud.tencent.com/edu/learning/course-2429</a><br>云调用能力全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2430\">https://cloud.tencent.com/edu/learning/course-2430</a><br>云数据库实时数据推送<br><a href=\"https://cloud.tencent.com/edu/learning/course-2431\">https://cloud.tencent.com/edu/learning/course-2431</a><br>小程序·云开发实战——30分钟搭建个人相册小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2432\">https://cloud.tencent.com/edu/learning/course-2432</a><br>小程序·云开发实战：定制化客服小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2433\">https://cloud.tencent.com/edu/learning/course-2433</a></p>\n<p><a href=\"https://www.wxmarkdown.com/\">微信辅助工具</a></p>\n<blockquote>\n<p>搬运工</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"云开发学习视频\"><a href=\"#云开发学习视频\" class=\"headerlink\" title=\"云开发学习视频\"></a>云开发学习视频</h1><p><a href=\"https://developers.weixin.qq.com/minigame/dev/wxcloud/basis/getting-started.html\">云开发官方文档</a></p>\n<p><a href=\"https://club.cloudbase.net/handbook/tcb/1101.html\">用云函数实现后端能力</a></p>\n<p>~从 0 到 1 玩转云调用订阅消息<br><a href=\"https://cloud.tencent.com/edu/learning/course-2415\">https://cloud.tencent.com/edu/learning/course-2415</a><br>从 0 到 1 玩转小程序地图<br><a href=\"https://cloud.tencent.com/edu/learning/course-2416\">https://cloud.tencent.com/edu/learning/course-2416</a><br>从 0 到 1 玩转小程序内容安全<br><a href=\"https://cloud.tencent.com/edu/learning/course-2417\">https://cloud.tencent.com/edu/learning/course-2417</a><br>从 0 到 1 玩转小程序图像处理<br><a href=\"https://cloud.tencent.com/edu/learning/course-2418\">https://cloud.tencent.com/edu/learning/course-2418</a><br>从 0 到 1 玩转小程序服务市场<br><a href=\"https://cloud.tencent.com/edu/learning/course-2419\">https://cloud.tencent.com/edu/learning/course-2419</a><br>使用 uni-app 开发电影推荐小程序实战<br><a href=\"https://cloud.tencent.com/edu/learning/course-2420\">https://cloud.tencent.com/edu/learning/course-2420</a><br>使用 WePy 开发企业门户小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2421\">https://cloud.tencent.com/edu/learning/course-2421</a><br>使用 Vue.js 语法开发答题小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2422\">https://cloud.tencent.com/edu/learning/course-2422</a><br>使用 Chameleon 开发教育培训小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2423\">https://cloud.tencent.com/edu/learning/course-2423</a><br>云开发数据库命令全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2424\">https://cloud.tencent.com/edu/learning/course-2424</a><br>云开发数据库聚合全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2425\">https://cloud.tencent.com/edu/learning/course-2425</a><br>云开发数据库事务全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2426\">https://cloud.tencent.com/edu/learning/course-2426</a><br>云开发数据库安全规则全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2427\">https://cloud.tencent.com/edu/learning/course-2427</a><br>云函数开发与日志调试<br><a href=\"https://cloud.tencent.com/edu/learning/course-2428\">https://cloud.tencent.com/edu/learning/course-2428</a><br>云开发监控与告警<br><a href=\"https://cloud.tencent.com/edu/learning/course-2429\">https://cloud.tencent.com/edu/learning/course-2429</a><br>云调用能力全解<br><a href=\"https://cloud.tencent.com/edu/learning/course-2430\">https://cloud.tencent.com/edu/learning/course-2430</a><br>云数据库实时数据推送<br><a href=\"https://cloud.tencent.com/edu/learning/course-2431\">https://cloud.tencent.com/edu/learning/course-2431</a><br>小程序·云开发实战——30分钟搭建个人相册小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2432\">https://cloud.tencent.com/edu/learning/course-2432</a><br>小程序·云开发实战：定制化客服小程序<br><a href=\"https://cloud.tencent.com/edu/learning/course-2433\">https://cloud.tencent.com/edu/learning/course-2433</a></p>\n<p><a href=\"https://www.wxmarkdown.com/\">微信辅助工具</a></p>\n<blockquote>\n<p>搬运工</p>\n</blockquote>\n"},{"title":"京东评论词云","top":false,"date":"2020-04-14T12:51:22.000Z","_content":"\n# 京东评论词云\n## 爬取评论\n```python\nimport requests\nimport re\nimport time\nimport json\nimport pandas as pd\n\ncontent_list = []\nfor i in range(99):\n    print('正在爬取第{}页'.format(i+1))\n    try:\n        url = 'https://club.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98&productId=4311178&score=0&sortType=5&page={}&pageSize=50&isShadowSku=0&fold=1'.format(\n            i)\n        r = requests.get(url).text\n        datas = re.findall('comments\":(.*)\\}', r)[0]\n        content = re.findall('\"content\":\"(.*?)\"', datas)\n        content_list.extend(content)\n        time.sleep(3)\n    except:\n        print('本页爬取失败')\n```\n\n\n```python\ndf = pd.DataFrame()\ndf['评论'] = content_list\ndf.to_csv('A400.csv')\n```\n\n## 生成词云图\n```python\nimport jieba \nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ntext = open('A400.txt', encoding='utf8')\nmylist = list(text)\n\nword_list = [' '.join(jieba.cut(i)) for i in mylist]\nnew_text = ' '.join(word_list)\nwordcloud = WordCloud(font_path='./simhei.ttf', background_color='white').generate(new_text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()\n```\n\n    Building prefix dict from the default dictionary ...\n    Loading model from cache /tmp/jieba.cache\n    Loading model cost 1.083 seconds.\n    Prefix dict has been built successfully.\n\n\n\n![output_2_1.png](http://ww1.sinaimg.cn/large/005W6BOngy1gdzebbtpksj309p051ac0.jpg)\n\n\n\n```python\n# 根据词频\nimport jieba\nfrom PIL import Image\nimport numpy as np\nfrom wordcloud import WordCloud, STOPWORDS\n# from scipy.misc import imread\nimport imageio\nimport matplotlib.pyplot as plt\n\nfrom collections import Counter\n\ntext = open('A400.txt', encoding='utf8')\nmylist = list(text)\nword_list = [' '.join(jieba.cut(i)) for i in mylist]\nnew_text = ' '.join(word_list)\n\ncon_words = [x for x in jieba.cut(new_text) if len(x) >= 2 ]\nfrequencies = Counter(con_words).most_common()\nfrequencies = dict(frequencies)\n\n# pck_mask = imageio.imread('./apchong.png')\npac_mask = Image.open('./apchong.png')\npac = np.array(pac_mask)\n\n\nwordcloud = WordCloud(font_path='./simhei.ttf',\n                      background_color='white', \n                      max_words=2000,\n                      mask=pac).fit_words(frequencies)  #generate_from_text\nplt.figure(dpi=150)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()\n# wordcloud.to_file('wcnh2.png')\n# plt.imshow(wordcloud)\n# plt.axis(\"off\")\n# plt.figure()\n```\n\n![wcnh2.png](http://ww1.sinaimg.cn/large/005W6BOngy1gdzeguf306j30m80gognx.jpg)\n\n","source":"_posts/京东固态A400评论爬虫.md","raw":"---\ntitle: 京东评论词云\ntags:\n  - 词云\n  - 爬虫\ncategories:\n  - Python\n  - 爬虫\n  - 词云\ntop: false\ndate: 2020-04-14 20:51:22\n---\n\n# 京东评论词云\n## 爬取评论\n```python\nimport requests\nimport re\nimport time\nimport json\nimport pandas as pd\n\ncontent_list = []\nfor i in range(99):\n    print('正在爬取第{}页'.format(i+1))\n    try:\n        url = 'https://club.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98&productId=4311178&score=0&sortType=5&page={}&pageSize=50&isShadowSku=0&fold=1'.format(\n            i)\n        r = requests.get(url).text\n        datas = re.findall('comments\":(.*)\\}', r)[0]\n        content = re.findall('\"content\":\"(.*?)\"', datas)\n        content_list.extend(content)\n        time.sleep(3)\n    except:\n        print('本页爬取失败')\n```\n\n\n```python\ndf = pd.DataFrame()\ndf['评论'] = content_list\ndf.to_csv('A400.csv')\n```\n\n## 生成词云图\n```python\nimport jieba \nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ntext = open('A400.txt', encoding='utf8')\nmylist = list(text)\n\nword_list = [' '.join(jieba.cut(i)) for i in mylist]\nnew_text = ' '.join(word_list)\nwordcloud = WordCloud(font_path='./simhei.ttf', background_color='white').generate(new_text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()\n```\n\n    Building prefix dict from the default dictionary ...\n    Loading model from cache /tmp/jieba.cache\n    Loading model cost 1.083 seconds.\n    Prefix dict has been built successfully.\n\n\n\n![output_2_1.png](http://ww1.sinaimg.cn/large/005W6BOngy1gdzebbtpksj309p051ac0.jpg)\n\n\n\n```python\n# 根据词频\nimport jieba\nfrom PIL import Image\nimport numpy as np\nfrom wordcloud import WordCloud, STOPWORDS\n# from scipy.misc import imread\nimport imageio\nimport matplotlib.pyplot as plt\n\nfrom collections import Counter\n\ntext = open('A400.txt', encoding='utf8')\nmylist = list(text)\nword_list = [' '.join(jieba.cut(i)) for i in mylist]\nnew_text = ' '.join(word_list)\n\ncon_words = [x for x in jieba.cut(new_text) if len(x) >= 2 ]\nfrequencies = Counter(con_words).most_common()\nfrequencies = dict(frequencies)\n\n# pck_mask = imageio.imread('./apchong.png')\npac_mask = Image.open('./apchong.png')\npac = np.array(pac_mask)\n\n\nwordcloud = WordCloud(font_path='./simhei.ttf',\n                      background_color='white', \n                      max_words=2000,\n                      mask=pac).fit_words(frequencies)  #generate_from_text\nplt.figure(dpi=150)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()\n# wordcloud.to_file('wcnh2.png')\n# plt.imshow(wordcloud)\n# plt.axis(\"off\")\n# plt.figure()\n```\n\n![wcnh2.png](http://ww1.sinaimg.cn/large/005W6BOngy1gdzeguf306j30m80gognx.jpg)\n\n","slug":"京东固态A400评论爬虫","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz399003y12mjc50odhby","content":"<h1 id=\"京东评论词云\"><a href=\"#京东评论词云\" class=\"headerlink\" title=\"京东评论词云\"></a>京东评论词云</h1><h2 id=\"爬取评论\"><a href=\"#爬取评论\" class=\"headerlink\" title=\"爬取评论\"></a>爬取评论</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ncontent_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在爬取第{}页'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        url <span class=\"token operator\">=</span> <span class=\"token string\">'https://club.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98&amp;productId=4311178&amp;score=0&amp;sortType=5&amp;page={}&amp;pageSize=50&amp;isShadowSku=0&amp;fold=1'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n            i<span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n        datas <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'comments\":(.*)\\}'</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        content <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'\"content\":\"(.*?)\"'</span><span class=\"token punctuation\">,</span> datas<span class=\"token punctuation\">)</span>\n        content_list<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'本页爬取失败'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'评论'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> content_list\ndf<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'A400.csv'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"生成词云图\"><a href=\"#生成词云图\" class=\"headerlink\" title=\"生成词云图\"></a>生成词云图</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> jieba \n<span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\ntext <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A400.txt'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\nmylist <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\nword_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> mylist<span class=\"token punctuation\">]</span>\nnew_text <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>word_list<span class=\"token punctuation\">)</span>\nwordcloud <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span>font_path<span class=\"token operator\">=</span><span class=\"token string\">'./simhei.ttf'</span><span class=\"token punctuation\">,</span> background_color<span class=\"token operator\">=</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span>new_text<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>wordcloud<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre><code>Building prefix dict from the default dictionary ...\nLoading model from cache /tmp/jieba.cache\nLoading model cost 1.083 seconds.\nPrefix dict has been built successfully.</code></pre>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gdzebbtpksj309p051ac0.jpg\" alt=\"output_2_1.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 根据词频</span>\n<span class=\"token keyword\">import</span> jieba\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud<span class=\"token punctuation\">,</span> STOPWORDS\n<span class=\"token comment\"># from scipy.misc import imread</span>\n<span class=\"token keyword\">import</span> imageio\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\ntext <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A400.txt'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\nmylist <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\nword_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> mylist<span class=\"token punctuation\">]</span>\nnew_text <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>word_list<span class=\"token punctuation\">)</span>\n\ncon_words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>new_text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span>\nfrequencies <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>con_words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfrequencies <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>frequencies<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># pck_mask = imageio.imread('./apchong.png')</span>\npac_mask <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./apchong.png'</span><span class=\"token punctuation\">)</span>\npac <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>pac_mask<span class=\"token punctuation\">)</span>\n\n\nwordcloud <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span>font_path<span class=\"token operator\">=</span><span class=\"token string\">'./simhei.ttf'</span><span class=\"token punctuation\">,</span>\n                      background_color<span class=\"token operator\">=</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> \n                      max_words<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n                      mask<span class=\"token operator\">=</span>pac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit_words<span class=\"token punctuation\">(</span>frequencies<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#generate_from_text</span>\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>dpi<span class=\"token operator\">=</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>wordcloud<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># wordcloud.to_file('wcnh2.png')</span>\n<span class=\"token comment\"># plt.imshow(wordcloud)</span>\n<span class=\"token comment\"># plt.axis(\"off\")</span>\n<span class=\"token comment\"># plt.figure()</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gdzeguf306j30m80gognx.jpg\" alt=\"wcnh2.png\"></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"京东评论词云\"><a href=\"#京东评论词云\" class=\"headerlink\" title=\"京东评论词云\"></a>京东评论词云</h1><h2 id=\"爬取评论\"><a href=\"#爬取评论\" class=\"headerlink\" title=\"爬取评论\"></a>爬取评论</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ncontent_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在爬取第&#123;&#125;页'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        url <span class=\"token operator\">=</span> <span class=\"token string\">'https://club.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98&amp;productId=4311178&amp;score=0&amp;sortType=5&amp;page=&#123;&#125;&amp;pageSize=50&amp;isShadowSku=0&amp;fold=1'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n            i<span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n        datas <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'comments\":(.*)\\&#125;'</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        content <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'\"content\":\"(.*?)\"'</span><span class=\"token punctuation\">,</span> datas<span class=\"token punctuation\">)</span>\n        content_list<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'本页爬取失败'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'评论'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> content_list\ndf<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'A400.csv'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"生成词云图\"><a href=\"#生成词云图\" class=\"headerlink\" title=\"生成词云图\"></a>生成词云图</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> jieba \n<span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\ntext <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A400.txt'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\nmylist <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\nword_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> mylist<span class=\"token punctuation\">]</span>\nnew_text <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>word_list<span class=\"token punctuation\">)</span>\nwordcloud <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span>font_path<span class=\"token operator\">=</span><span class=\"token string\">'./simhei.ttf'</span><span class=\"token punctuation\">,</span> background_color<span class=\"token operator\">=</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span>new_text<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>wordcloud<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre><code>Building prefix dict from the default dictionary ...\nLoading model from cache /tmp/jieba.cache\nLoading model cost 1.083 seconds.\nPrefix dict has been built successfully.</code></pre>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gdzebbtpksj309p051ac0.jpg\" alt=\"output_2_1.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 根据词频</span>\n<span class=\"token keyword\">import</span> jieba\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud<span class=\"token punctuation\">,</span> STOPWORDS\n<span class=\"token comment\"># from scipy.misc import imread</span>\n<span class=\"token keyword\">import</span> imageio\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\ntext <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A400.txt'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\nmylist <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\nword_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> mylist<span class=\"token punctuation\">]</span>\nnew_text <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>word_list<span class=\"token punctuation\">)</span>\n\ncon_words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>new_text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span>\nfrequencies <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>con_words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfrequencies <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>frequencies<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># pck_mask = imageio.imread('./apchong.png')</span>\npac_mask <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./apchong.png'</span><span class=\"token punctuation\">)</span>\npac <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>pac_mask<span class=\"token punctuation\">)</span>\n\n\nwordcloud <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span>font_path<span class=\"token operator\">=</span><span class=\"token string\">'./simhei.ttf'</span><span class=\"token punctuation\">,</span>\n                      background_color<span class=\"token operator\">=</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> \n                      max_words<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n                      mask<span class=\"token operator\">=</span>pac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit_words<span class=\"token punctuation\">(</span>frequencies<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#generate_from_text</span>\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>dpi<span class=\"token operator\">=</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>wordcloud<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># wordcloud.to_file('wcnh2.png')</span>\n<span class=\"token comment\"># plt.imshow(wordcloud)</span>\n<span class=\"token comment\"># plt.axis(\"off\")</span>\n<span class=\"token comment\"># plt.figure()</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gdzeguf306j30m80gognx.jpg\" alt=\"wcnh2.png\"></p>\n"},{"title":"使用云开发 Cloudbase 开发邮件发送功能","top":false,"date":"2020-06-17T16:00:00.000Z","_content":"# 使用云开发 Cloudbase 开发邮件发送功能\n\n> 借助于第三方模块`Nodemailer`，我们可以实现使用云函数来发邮件。我们可以通过发送邮件通知用户一些重要的活动信息。\n>\n> 技术文档：[Nodemailer官方文档](https://nodemailer.com/about/)\n\n## 1.准备一个邮箱并开启SMTP服务\n\n​\t\t我们可以借助QQ邮箱、网易邮箱、Gmail等邮件系统开启**IMAP/SMTP服务**，`IMAP`是互联网邮件访问协议，通过这种协议可以从邮件服务器获取邮件的信息、下载邮件，也就是接收邮件；`SMTP`也就是简单邮件传输协议，通过它可以控制邮件的中转方式，帮助计算机在发送或中转信件时找到下一个目的地，也就是发送邮件。本文示例使用qq邮箱。\n\n​\t\t不同的邮件系统有着不同的smtp发送邮件服务器，端口号也会有所不同，这些都可以去相应的邮箱的设置里看到相关的说明的，QQ邮箱的发送邮件服务器：smtp.qq.com，使用SSL，端口号465或587。\n\n163邮箱：smtp.163.com，端口号25。用记事本保存自己的授权码，后续会使用。\n\n![image-20200618004854702](https://i.loli.net/2020/06/18/sbIUfGoOFaXWjKL.png)\n\n## 2.初始化云函数，创建一个发送邮件的云函数\n\n创建一个云函数，如sendemail，然后在终端中打开，首先`npm install`，作用是安装wx-server-sdk，然后就是安装我们所需的发送邮件的模块`npm install nodemailer`\n\n接下来在index.js里输入以下代码，根据实际情况修改相关参数：\n\n```js\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\ncloud.init()\n//引入发送邮件的类库\nvar nodemailer = require('nodemailer')\n// 创建一个SMTP客户端配置\nvar config = {\n  host: 'smtp.qq.com', //网易163邮箱 smtp.163.com\n  port: 465, //网易邮箱端口 25\n  auth: {\n    user: '你的邮箱', //邮箱账号\n    pass: '你的邮箱授权码' //邮箱的授权码\n  }\n};\n// 创建一个SMTP客户端对象\nvar transporter = nodemailer.createTransport(config);\n// 云函数入口函数\nexports.main = async (event, context) => {\n  // 创建一个邮件对象\n  var mail = {\n    // 发件人\n    from: '来自云函数测试邮件 <23*****78@qq.com>',\n    // 主题\n    subject: '云函数sendemail',\n    // 收件人\n    to: '收件人的邮箱',\n    // 邮件内容，text或者html格式\n    text: '测试云函数发送邮件' //可以是链接，也可以是验证码\n    html: \"<b>Hello world?</b>\", // html \n  };\n\n  let res = await transporter.sendMail(mail);\n  return res;\n}\n```\n\n部署上传云函数之后，就可以在小程序端`本地调试`，测试云函数，接下来，收件人的邮箱就会收到你发送的邮件了。![image-20200618011159710](https://i.loli.net/2020/06/18/hX3NzIeLiR2VAFy.png) 同时可以在控制台查看相关打印信息。\n\n![2020-06-18 00-21-21 的屏幕截图](https://i.loli.net/2020/06/18/zGj8XS9Y6RtHiEp.png)\n\n这个只是定向给某个邮箱发送邮件，实际应用场景应加以改变。\n\n## 邮箱功能的拓展与应用\n\n* 结合云数据库给指定的人发送邮件\n\n  一般我们可以遇到的场景就是在于登录注册及找回密码时，向用户发送提示邮件，当用户A给用户B写的文章或留言评论时可以给B发邮件，当用户参与活动需要通知时，管理员可以给目标用户发邮件等。不同的业务场景接收邮件的人也会不同，邮件里面的内容根据业务的需求也会有所不同，因此在邮件发送的过程中，数据库扮演着非常重要的角色。\n\n* 实现密码校验与邮件的定时发送\n\n  当用户在个人资料里绑定自己的邮箱时，可以发送邮件以及校验码，校验码可以是数据库的一个字段，它的值可以是一些随机生成的字符串，但是有一定的生命周期，比如半个小时之后会失效，这个自动失效的操作则需要使用到定时触发器；邮件也可以是周报、日报的周期性定时发送，在每天或每周的某个时间点，批量收集当天或当周的数据自动发送给用户，这个也是依赖定时触发器，这个我们会在后面定时触发器的章节进行说明。\n\n","source":"_posts/使用云开发 Cloudbase 开发邮件发送功能.md","raw":"---\ntitle: 使用云开发 Cloudbase 开发邮件发送功能\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-06-18 0:0:00\n---\n# 使用云开发 Cloudbase 开发邮件发送功能\n\n> 借助于第三方模块`Nodemailer`，我们可以实现使用云函数来发邮件。我们可以通过发送邮件通知用户一些重要的活动信息。\n>\n> 技术文档：[Nodemailer官方文档](https://nodemailer.com/about/)\n\n## 1.准备一个邮箱并开启SMTP服务\n\n​\t\t我们可以借助QQ邮箱、网易邮箱、Gmail等邮件系统开启**IMAP/SMTP服务**，`IMAP`是互联网邮件访问协议，通过这种协议可以从邮件服务器获取邮件的信息、下载邮件，也就是接收邮件；`SMTP`也就是简单邮件传输协议，通过它可以控制邮件的中转方式，帮助计算机在发送或中转信件时找到下一个目的地，也就是发送邮件。本文示例使用qq邮箱。\n\n​\t\t不同的邮件系统有着不同的smtp发送邮件服务器，端口号也会有所不同，这些都可以去相应的邮箱的设置里看到相关的说明的，QQ邮箱的发送邮件服务器：smtp.qq.com，使用SSL，端口号465或587。\n\n163邮箱：smtp.163.com，端口号25。用记事本保存自己的授权码，后续会使用。\n\n![image-20200618004854702](https://i.loli.net/2020/06/18/sbIUfGoOFaXWjKL.png)\n\n## 2.初始化云函数，创建一个发送邮件的云函数\n\n创建一个云函数，如sendemail，然后在终端中打开，首先`npm install`，作用是安装wx-server-sdk，然后就是安装我们所需的发送邮件的模块`npm install nodemailer`\n\n接下来在index.js里输入以下代码，根据实际情况修改相关参数：\n\n```js\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\ncloud.init()\n//引入发送邮件的类库\nvar nodemailer = require('nodemailer')\n// 创建一个SMTP客户端配置\nvar config = {\n  host: 'smtp.qq.com', //网易163邮箱 smtp.163.com\n  port: 465, //网易邮箱端口 25\n  auth: {\n    user: '你的邮箱', //邮箱账号\n    pass: '你的邮箱授权码' //邮箱的授权码\n  }\n};\n// 创建一个SMTP客户端对象\nvar transporter = nodemailer.createTransport(config);\n// 云函数入口函数\nexports.main = async (event, context) => {\n  // 创建一个邮件对象\n  var mail = {\n    // 发件人\n    from: '来自云函数测试邮件 <23*****78@qq.com>',\n    // 主题\n    subject: '云函数sendemail',\n    // 收件人\n    to: '收件人的邮箱',\n    // 邮件内容，text或者html格式\n    text: '测试云函数发送邮件' //可以是链接，也可以是验证码\n    html: \"<b>Hello world?</b>\", // html \n  };\n\n  let res = await transporter.sendMail(mail);\n  return res;\n}\n```\n\n部署上传云函数之后，就可以在小程序端`本地调试`，测试云函数，接下来，收件人的邮箱就会收到你发送的邮件了。![image-20200618011159710](https://i.loli.net/2020/06/18/hX3NzIeLiR2VAFy.png) 同时可以在控制台查看相关打印信息。\n\n![2020-06-18 00-21-21 的屏幕截图](https://i.loli.net/2020/06/18/zGj8XS9Y6RtHiEp.png)\n\n这个只是定向给某个邮箱发送邮件，实际应用场景应加以改变。\n\n## 邮箱功能的拓展与应用\n\n* 结合云数据库给指定的人发送邮件\n\n  一般我们可以遇到的场景就是在于登录注册及找回密码时，向用户发送提示邮件，当用户A给用户B写的文章或留言评论时可以给B发邮件，当用户参与活动需要通知时，管理员可以给目标用户发邮件等。不同的业务场景接收邮件的人也会不同，邮件里面的内容根据业务的需求也会有所不同，因此在邮件发送的过程中，数据库扮演着非常重要的角色。\n\n* 实现密码校验与邮件的定时发送\n\n  当用户在个人资料里绑定自己的邮箱时，可以发送邮件以及校验码，校验码可以是数据库的一个字段，它的值可以是一些随机生成的字符串，但是有一定的生命周期，比如半个小时之后会失效，这个自动失效的操作则需要使用到定时触发器；邮件也可以是周报、日报的周期性定时发送，在每天或每周的某个时间点，批量收集当天或当周的数据自动发送给用户，这个也是依赖定时触发器，这个我们会在后面定时触发器的章节进行说明。\n\n","slug":"使用云开发 Cloudbase 开发邮件发送功能","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz399004112mj8dj8h274","content":"<h1 id=\"使用云开发-Cloudbase-开发邮件发送功能\"><a href=\"#使用云开发-Cloudbase-开发邮件发送功能\" class=\"headerlink\" title=\"使用云开发 Cloudbase 开发邮件发送功能\"></a>使用云开发 Cloudbase 开发邮件发送功能</h1><blockquote>\n<p>借助于第三方模块<code>Nodemailer</code>，我们可以实现使用云函数来发邮件。我们可以通过发送邮件通知用户一些重要的活动信息。</p>\n<p>技术文档：<a href=\"https://nodemailer.com/about/\">Nodemailer官方文档</a></p>\n</blockquote>\n<h2 id=\"1-准备一个邮箱并开启SMTP服务\"><a href=\"#1-准备一个邮箱并开启SMTP服务\" class=\"headerlink\" title=\"1.准备一个邮箱并开启SMTP服务\"></a>1.准备一个邮箱并开启SMTP服务</h2><p>​        我们可以借助QQ邮箱、网易邮箱、Gmail等邮件系统开启<strong>IMAP/SMTP服务</strong>，<code>IMAP</code>是互联网邮件访问协议，通过这种协议可以从邮件服务器获取邮件的信息、下载邮件，也就是接收邮件；<code>SMTP</code>也就是简单邮件传输协议，通过它可以控制邮件的中转方式，帮助计算机在发送或中转信件时找到下一个目的地，也就是发送邮件。本文示例使用qq邮箱。</p>\n<p>​        不同的邮件系统有着不同的smtp发送邮件服务器，端口号也会有所不同，这些都可以去相应的邮箱的设置里看到相关的说明的，QQ邮箱的发送邮件服务器：smtp.qq.com，使用SSL，端口号465或587。</p>\n<p>163邮箱：smtp.163.com，端口号25。用记事本保存自己的授权码，后续会使用。</p>\n<p><img src=\"https://i.loli.net/2020/06/18/sbIUfGoOFaXWjKL.png\" alt=\"image-20200618004854702\"></p>\n<h2 id=\"2-初始化云函数，创建一个发送邮件的云函数\"><a href=\"#2-初始化云函数，创建一个发送邮件的云函数\" class=\"headerlink\" title=\"2.初始化云函数，创建一个发送邮件的云函数\"></a>2.初始化云函数，创建一个发送邮件的云函数</h2><p>创建一个云函数，如sendemail，然后在终端中打开，首先<code>npm install</code>，作用是安装wx-server-sdk，然后就是安装我们所需的发送邮件的模块<code>npm install nodemailer</code></p>\n<p>接下来在index.js里输入以下代码，根据实际情况修改相关参数：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 云函数入口文件</span>\n<span class=\"token keyword\">const</span> cloud <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wx-server-sdk'</span><span class=\"token punctuation\">)</span>\ncloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//引入发送邮件的类库</span>\n<span class=\"token keyword\">var</span> nodemailer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nodemailer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 创建一个SMTP客户端配置</span>\n<span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'smtp.qq.com'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//网易163邮箱 smtp.163.com</span>\n  port<span class=\"token operator\">:</span> <span class=\"token number\">465</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//网易邮箱端口 25</span>\n  auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    user<span class=\"token operator\">:</span> <span class=\"token string\">'你的邮箱'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//邮箱账号</span>\n    pass<span class=\"token operator\">:</span> <span class=\"token string\">'你的邮箱授权码'</span> <span class=\"token comment\">//邮箱的授权码</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建一个SMTP客户端对象</span>\n<span class=\"token keyword\">var</span> transporter <span class=\"token operator\">=</span> nodemailer<span class=\"token punctuation\">.</span><span class=\"token function\">createTransport</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 云函数入口函数</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 创建一个邮件对象</span>\n  <span class=\"token keyword\">var</span> mail <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 发件人</span>\n    <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> <span class=\"token string\">'来自云函数测试邮件 &lt;23*****78@qq.com&gt;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 主题</span>\n    subject<span class=\"token operator\">:</span> <span class=\"token string\">'云函数sendemail'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 收件人</span>\n    to<span class=\"token operator\">:</span> <span class=\"token string\">'收件人的邮箱'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 邮件内容，text或者html格式</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'测试云函数发送邮件'</span> <span class=\"token comment\">//可以是链接，也可以是验证码</span>\n    html<span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;b&gt;Hello world?&lt;/b&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// html </span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> transporter<span class=\"token punctuation\">.</span><span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span>mail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>部署上传云函数之后，就可以在小程序端<code>本地调试</code>，测试云函数，接下来，收件人的邮箱就会收到你发送的邮件了。<img src=\"https://i.loli.net/2020/06/18/hX3NzIeLiR2VAFy.png\" alt=\"image-20200618011159710\"> 同时可以在控制台查看相关打印信息。</p>\n<p><img src=\"https://i.loli.net/2020/06/18/zGj8XS9Y6RtHiEp.png\" alt=\"2020-06-18 00-21-21 的屏幕截图\"></p>\n<p>这个只是定向给某个邮箱发送邮件，实际应用场景应加以改变。</p>\n<h2 id=\"邮箱功能的拓展与应用\"><a href=\"#邮箱功能的拓展与应用\" class=\"headerlink\" title=\"邮箱功能的拓展与应用\"></a>邮箱功能的拓展与应用</h2><ul>\n<li><p>结合云数据库给指定的人发送邮件</p>\n<p>一般我们可以遇到的场景就是在于登录注册及找回密码时，向用户发送提示邮件，当用户A给用户B写的文章或留言评论时可以给B发邮件，当用户参与活动需要通知时，管理员可以给目标用户发邮件等。不同的业务场景接收邮件的人也会不同，邮件里面的内容根据业务的需求也会有所不同，因此在邮件发送的过程中，数据库扮演着非常重要的角色。</p>\n</li>\n<li><p>实现密码校验与邮件的定时发送</p>\n<p>当用户在个人资料里绑定自己的邮箱时，可以发送邮件以及校验码，校验码可以是数据库的一个字段，它的值可以是一些随机生成的字符串，但是有一定的生命周期，比如半个小时之后会失效，这个自动失效的操作则需要使用到定时触发器；邮件也可以是周报、日报的周期性定时发送，在每天或每周的某个时间点，批量收集当天或当周的数据自动发送给用户，这个也是依赖定时触发器，这个我们会在后面定时触发器的章节进行说明。</p>\n</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"使用云开发-Cloudbase-开发邮件发送功能\"><a href=\"#使用云开发-Cloudbase-开发邮件发送功能\" class=\"headerlink\" title=\"使用云开发 Cloudbase 开发邮件发送功能\"></a>使用云开发 Cloudbase 开发邮件发送功能</h1><blockquote>\n<p>借助于第三方模块<code>Nodemailer</code>，我们可以实现使用云函数来发邮件。我们可以通过发送邮件通知用户一些重要的活动信息。</p>\n<p>技术文档：<a href=\"https://nodemailer.com/about/\">Nodemailer官方文档</a></p>\n</blockquote>\n<h2 id=\"1-准备一个邮箱并开启SMTP服务\"><a href=\"#1-准备一个邮箱并开启SMTP服务\" class=\"headerlink\" title=\"1.准备一个邮箱并开启SMTP服务\"></a>1.准备一个邮箱并开启SMTP服务</h2><p>​        我们可以借助QQ邮箱、网易邮箱、Gmail等邮件系统开启<strong>IMAP/SMTP服务</strong>，<code>IMAP</code>是互联网邮件访问协议，通过这种协议可以从邮件服务器获取邮件的信息、下载邮件，也就是接收邮件；<code>SMTP</code>也就是简单邮件传输协议，通过它可以控制邮件的中转方式，帮助计算机在发送或中转信件时找到下一个目的地，也就是发送邮件。本文示例使用qq邮箱。</p>\n<p>​        不同的邮件系统有着不同的smtp发送邮件服务器，端口号也会有所不同，这些都可以去相应的邮箱的设置里看到相关的说明的，QQ邮箱的发送邮件服务器：smtp.qq.com，使用SSL，端口号465或587。</p>\n<p>163邮箱：smtp.163.com，端口号25。用记事本保存自己的授权码，后续会使用。</p>\n<p><img src=\"https://i.loli.net/2020/06/18/sbIUfGoOFaXWjKL.png\" alt=\"image-20200618004854702\"></p>\n<h2 id=\"2-初始化云函数，创建一个发送邮件的云函数\"><a href=\"#2-初始化云函数，创建一个发送邮件的云函数\" class=\"headerlink\" title=\"2.初始化云函数，创建一个发送邮件的云函数\"></a>2.初始化云函数，创建一个发送邮件的云函数</h2><p>创建一个云函数，如sendemail，然后在终端中打开，首先<code>npm install</code>，作用是安装wx-server-sdk，然后就是安装我们所需的发送邮件的模块<code>npm install nodemailer</code></p>\n<p>接下来在index.js里输入以下代码，根据实际情况修改相关参数：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 云函数入口文件</span>\n<span class=\"token keyword\">const</span> cloud <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wx-server-sdk'</span><span class=\"token punctuation\">)</span>\ncloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//引入发送邮件的类库</span>\n<span class=\"token keyword\">var</span> nodemailer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nodemailer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 创建一个SMTP客户端配置</span>\n<span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'smtp.qq.com'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//网易163邮箱 smtp.163.com</span>\n  port<span class=\"token operator\">:</span> <span class=\"token number\">465</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//网易邮箱端口 25</span>\n  auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    user<span class=\"token operator\">:</span> <span class=\"token string\">'你的邮箱'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//邮箱账号</span>\n    pass<span class=\"token operator\">:</span> <span class=\"token string\">'你的邮箱授权码'</span> <span class=\"token comment\">//邮箱的授权码</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建一个SMTP客户端对象</span>\n<span class=\"token keyword\">var</span> transporter <span class=\"token operator\">=</span> nodemailer<span class=\"token punctuation\">.</span><span class=\"token function\">createTransport</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 云函数入口函数</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 创建一个邮件对象</span>\n  <span class=\"token keyword\">var</span> mail <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 发件人</span>\n    <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> <span class=\"token string\">'来自云函数测试邮件 &lt;23*****78@qq.com>'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 主题</span>\n    subject<span class=\"token operator\">:</span> <span class=\"token string\">'云函数sendemail'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 收件人</span>\n    to<span class=\"token operator\">:</span> <span class=\"token string\">'收件人的邮箱'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 邮件内容，text或者html格式</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'测试云函数发送邮件'</span> <span class=\"token comment\">//可以是链接，也可以是验证码</span>\n    html<span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;b>Hello world?&lt;/b>\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// html </span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> transporter<span class=\"token punctuation\">.</span><span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span>mail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>部署上传云函数之后，就可以在小程序端<code>本地调试</code>，测试云函数，接下来，收件人的邮箱就会收到你发送的邮件了。<img src=\"https://i.loli.net/2020/06/18/hX3NzIeLiR2VAFy.png\" alt=\"image-20200618011159710\"> 同时可以在控制台查看相关打印信息。</p>\n<p><img src=\"https://i.loli.net/2020/06/18/zGj8XS9Y6RtHiEp.png\" alt=\"2020-06-18 00-21-21 的屏幕截图\"></p>\n<p>这个只是定向给某个邮箱发送邮件，实际应用场景应加以改变。</p>\n<h2 id=\"邮箱功能的拓展与应用\"><a href=\"#邮箱功能的拓展与应用\" class=\"headerlink\" title=\"邮箱功能的拓展与应用\"></a>邮箱功能的拓展与应用</h2><ul>\n<li><p>结合云数据库给指定的人发送邮件</p>\n<p>一般我们可以遇到的场景就是在于登录注册及找回密码时，向用户发送提示邮件，当用户A给用户B写的文章或留言评论时可以给B发邮件，当用户参与活动需要通知时，管理员可以给目标用户发邮件等。不同的业务场景接收邮件的人也会不同，邮件里面的内容根据业务的需求也会有所不同，因此在邮件发送的过程中，数据库扮演着非常重要的角色。</p>\n</li>\n<li><p>实现密码校验与邮件的定时发送</p>\n<p>当用户在个人资料里绑定自己的邮箱时，可以发送邮件以及校验码，校验码可以是数据库的一个字段，它的值可以是一些随机生成的字符串，但是有一定的生命周期，比如半个小时之后会失效，这个自动失效的操作则需要使用到定时触发器；邮件也可以是周报、日报的周期性定时发送，在每天或每周的某个时间点，批量收集当天或当周的数据自动发送给用户，这个也是依赖定时触发器，这个我们会在后面定时触发器的章节进行说明。</p>\n</li>\n</ul>\n"},{"title":"动态规划","top":false,"date":"2021-06-06T08:11:05.000Z","_content":"\n# 动态规划\n\n## 判断动态规划\n\nWikipedia 定义：它既是一种数学优化的方法，同时也是编程的方法。\n\n \n\n1. #### 是数学优化的方法——最优子结构\n\n\n\n动态规划是数学优化的方法指，动态规划要解决的都是问题的最优解。而一个问题的最优解是由它的各个子问题的最优解决定的。\n\n\n\n由此引出动态规划的第一个重要的属性：最优子结构（Optimal Substructure)。\n\n\n\n一般由最优子结构，推导出一个状态转移方程 f(n)，就能很快写出问题的递归实现方法。\n\n![dp](http://s0.lgstatic.com/i/image2/M01/90/EF/CgoB5l2IcqKAT-iFAAvZ0mB2w9o185.gif)\n\n2. #### 是编程的方法——重叠子问题\n\n\n\n\n动态规划是编程的方法指，可以借助编程的技巧去保证每个重叠的子问题只会被求解一次。\n\n\n\n引出了动态规划的第二个重要的属性：重叠子问题（Overlapping Sub-problems）。\n\n##### 一、两种思路\n\n###### 1、第一种思路模板是一个一维的 dp 数组：\n\n```c++\nint n = array.length;\nint[] dp = new int[n];\n\nfor (int i = 1; i < n; i++) {\n    for (int j = 0; j < i; j++) {\n        dp[i] = 最值(dp[i], dp[j] + ...)\n    }\n}\n\n```\n###### 2、第二种思路模板是一个二维的 dp 数组：\n\n```c++\nint n = arr.length;\nint[][] dp = new dp[n][n];\n\nfor (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n        if (arr[i] == arr[j]) \n            dp[i][j] = dp[i][j] + ...\n        else\n            dp[i][j] = 最值(...)\n    }\n}\n\n\n```\n\n","source":"_posts/动态规划.md","raw":"---\ntitle: 动态规划\ntags:\n- Leetcode\n- 算法\ncategories:\n- 编程算法\ntop: false\ndate: 2021-06-06 16:11:05\n---\n\n# 动态规划\n\n## 判断动态规划\n\nWikipedia 定义：它既是一种数学优化的方法，同时也是编程的方法。\n\n \n\n1. #### 是数学优化的方法——最优子结构\n\n\n\n动态规划是数学优化的方法指，动态规划要解决的都是问题的最优解。而一个问题的最优解是由它的各个子问题的最优解决定的。\n\n\n\n由此引出动态规划的第一个重要的属性：最优子结构（Optimal Substructure)。\n\n\n\n一般由最优子结构，推导出一个状态转移方程 f(n)，就能很快写出问题的递归实现方法。\n\n![dp](http://s0.lgstatic.com/i/image2/M01/90/EF/CgoB5l2IcqKAT-iFAAvZ0mB2w9o185.gif)\n\n2. #### 是编程的方法——重叠子问题\n\n\n\n\n动态规划是编程的方法指，可以借助编程的技巧去保证每个重叠的子问题只会被求解一次。\n\n\n\n引出了动态规划的第二个重要的属性：重叠子问题（Overlapping Sub-problems）。\n\n##### 一、两种思路\n\n###### 1、第一种思路模板是一个一维的 dp 数组：\n\n```c++\nint n = array.length;\nint[] dp = new int[n];\n\nfor (int i = 1; i < n; i++) {\n    for (int j = 0; j < i; j++) {\n        dp[i] = 最值(dp[i], dp[j] + ...)\n    }\n}\n\n```\n###### 2、第二种思路模板是一个二维的 dp 数组：\n\n```c++\nint n = arr.length;\nint[][] dp = new dp[n][n];\n\nfor (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n        if (arr[i] == arr[j]) \n            dp[i][j] = dp[i][j] + ...\n        else\n            dp[i][j] = 最值(...)\n    }\n}\n\n\n```\n\n","slug":"动态规划","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz399004412mj0ft69es6","content":"<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><h2 id=\"判断动态规划\"><a href=\"#判断动态规划\" class=\"headerlink\" title=\"判断动态规划\"></a>判断动态规划</h2><p>Wikipedia 定义：它既是一种数学优化的方法，同时也是编程的方法。</p>\n<ol>\n<li><h4 id=\"是数学优化的方法——最优子结构\"><a href=\"#是数学优化的方法——最优子结构\" class=\"headerlink\" title=\"是数学优化的方法——最优子结构\"></a>是数学优化的方法——最优子结构</h4></li>\n</ol>\n<p>动态规划是数学优化的方法指，动态规划要解决的都是问题的最优解。而一个问题的最优解是由它的各个子问题的最优解决定的。</p>\n<p>由此引出动态规划的第一个重要的属性：最优子结构（Optimal Substructure)。</p>\n<p>一般由最优子结构，推导出一个状态转移方程 f(n)，就能很快写出问题的递归实现方法。</p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/90/EF/CgoB5l2IcqKAT-iFAAvZ0mB2w9o185.gif\" alt=\"dp\"></p>\n<ol start=\"2\">\n<li><h4 id=\"是编程的方法——重叠子问题\"><a href=\"#是编程的方法——重叠子问题\" class=\"headerlink\" title=\"是编程的方法——重叠子问题\"></a>是编程的方法——重叠子问题</h4></li>\n</ol>\n<p>动态规划是编程的方法指，可以借助编程的技巧去保证每个重叠的子问题只会被求解一次。</p>\n<p>引出了动态规划的第二个重要的属性：重叠子问题（Overlapping Sub-problems）。</p>\n<h5 id=\"一、两种思路\"><a href=\"#一、两种思路\" class=\"headerlink\" title=\"一、两种思路\"></a>一、两种思路</h5><h6 id=\"1、第一种思路模板是一个一维的-dp-数组：\"><a href=\"#1、第一种思路模板是一个一维的-dp-数组：\" class=\"headerlink\" title=\"1、第一种思路模板是一个一维的 dp 数组：\"></a>1、第一种思路模板是一个一维的 dp 数组：</h6><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int n = array.length;\nint[] dp = new int[n];\n\nfor (int i = 1; i &lt; n; i++) {\n    for (int j = 0; j &lt; i; j++) {\n        dp[i] = 最值(dp[i], dp[j] + ...)\n    }\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"2、第二种思路模板是一个二维的-dp-数组：\"><a href=\"#2、第二种思路模板是一个二维的-dp-数组：\" class=\"headerlink\" title=\"2、第二种思路模板是一个二维的 dp 数组：\"></a>2、第二种思路模板是一个二维的 dp 数组：</h6><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int n = arr.length;\nint[][] dp = new dp[n][n];\n\nfor (int i = 0; i &lt; n; i++) {\n    for (int j = 0; j &lt; n; j++) {\n        if (arr[i] == arr[j]) \n            dp[i][j] = dp[i][j] + ...\n        else\n            dp[i][j] = 最值(...)\n    }\n}\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><h2 id=\"判断动态规划\"><a href=\"#判断动态规划\" class=\"headerlink\" title=\"判断动态规划\"></a>判断动态规划</h2><p>Wikipedia 定义：它既是一种数学优化的方法，同时也是编程的方法。</p>\n<ol>\n<li><h4 id=\"是数学优化的方法——最优子结构\"><a href=\"#是数学优化的方法——最优子结构\" class=\"headerlink\" title=\"是数学优化的方法——最优子结构\"></a>是数学优化的方法——最优子结构</h4></li>\n</ol>\n<p>动态规划是数学优化的方法指，动态规划要解决的都是问题的最优解。而一个问题的最优解是由它的各个子问题的最优解决定的。</p>\n<p>由此引出动态规划的第一个重要的属性：最优子结构（Optimal Substructure)。</p>\n<p>一般由最优子结构，推导出一个状态转移方程 f(n)，就能很快写出问题的递归实现方法。</p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/90/EF/CgoB5l2IcqKAT-iFAAvZ0mB2w9o185.gif\" alt=\"dp\"></p>\n<ol start=\"2\">\n<li><h4 id=\"是编程的方法——重叠子问题\"><a href=\"#是编程的方法——重叠子问题\" class=\"headerlink\" title=\"是编程的方法——重叠子问题\"></a>是编程的方法——重叠子问题</h4></li>\n</ol>\n<p>动态规划是编程的方法指，可以借助编程的技巧去保证每个重叠的子问题只会被求解一次。</p>\n<p>引出了动态规划的第二个重要的属性：重叠子问题（Overlapping Sub-problems）。</p>\n<h5 id=\"一、两种思路\"><a href=\"#一、两种思路\" class=\"headerlink\" title=\"一、两种思路\"></a>一、两种思路</h5><h6 id=\"1、第一种思路模板是一个一维的-dp-数组：\"><a href=\"#1、第一种思路模板是一个一维的-dp-数组：\" class=\"headerlink\" title=\"1、第一种思路模板是一个一维的 dp 数组：\"></a>1、第一种思路模板是一个一维的 dp 数组：</h6><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int n &#x3D; array.length;\nint[] dp &#x3D; new int[n];\n\nfor (int i &#x3D; 1; i &lt; n; i++) &#123;\n    for (int j &#x3D; 0; j &lt; i; j++) &#123;\n        dp[i] &#x3D; 最值(dp[i], dp[j] + ...)\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"2、第二种思路模板是一个二维的-dp-数组：\"><a href=\"#2、第二种思路模板是一个二维的-dp-数组：\" class=\"headerlink\" title=\"2、第二种思路模板是一个二维的 dp 数组：\"></a>2、第二种思路模板是一个二维的 dp 数组：</h6><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int n &#x3D; arr.length;\nint[][] dp &#x3D; new dp[n][n];\n\nfor (int i &#x3D; 0; i &lt; n; i++) &#123;\n    for (int j &#x3D; 0; j &lt; n; j++) &#123;\n        if (arr[i] &#x3D;&#x3D; arr[j]) \n            dp[i][j] &#x3D; dp[i][j] + ...\n        else\n            dp[i][j] &#x3D; 最值(...)\n    &#125;\n&#125;\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"布道云开发-B站易物小程序","top":false,"date":"2020-04-24T07:12:19.000Z","_content":"\n# 记录B站视频\n\nhttps://www.bilibili.com/video/BV1Sa4y1v7o2","source":"_posts/布道云开发-B站易物小程序.md","raw":"---\ntitle: 布道云开发-B站易物小程序\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - B站\ntop: false\ndate: 2020-04-24 15:12:19\n---\n\n# 记录B站视频\n\nhttps://www.bilibili.com/video/BV1Sa4y1v7o2","slug":"布道云开发-B站易物小程序","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39a004712mj7aos3gf8","content":"<h1 id=\"记录B站视频\"><a href=\"#记录B站视频\" class=\"headerlink\" title=\"记录B站视频\"></a>记录B站视频</h1><p><a href=\"https://www.bilibili.com/video/BV1Sa4y1v7o2\">https://www.bilibili.com/video/BV1Sa4y1v7o2</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"记录B站视频\"><a href=\"#记录B站视频\" class=\"headerlink\" title=\"记录B站视频\"></a>记录B站视频</h1><p><a href=\"https://www.bilibili.com/video/BV1Sa4y1v7o2\">https://www.bilibili.com/video/BV1Sa4y1v7o2</a></p>\n"},{"title":"私人书柜小程序项目","top":false,"date":"2020-04-03T09:28:24.000Z","_content":"\n# [小程序-云开发](https://developers.weixin.qq.com/miniprogram/dev/api/)\n\n## 私房书柜项目\n\n通过调用微信的二维码扫描云函数，获取图书的ISBN。调用API查询图书的详细信息，由于豆瓣图书的API失效，所以在github上找一个提到的API[DouBanBook](https://github.com/qiaohaoforever/DoubanBook)\n\n## 图书名称查询\n\n调用地址：https://book.feelyou.top/search/\n\n请求方式：GET\n\n返回类型：JSON\n\n请求示例：https://book.feelyou.top/search/深度学习\n\n#### 请求参数（Query）\n\n| 名称 | 类型   | 是否必须 | 描述     |\n| ---- | ------ | -------- | -------- |\n| 书名 | STRING | 必选     | 图书名称 |\n\n#### 返回参数\n\n图书信息列表为list格式，每一本书对应一个json。\n\n## ISBN图书查询\n\n#### ISBN图书查询接口说明\n\n调用地址：http://book.feelyou.top/isbn/ISBN\n\n请求方式：GET\n\n返回类型：JSON\n\n请求示例：http://book.feelyou.top/isbn/9787506380263\n\n#### 请求参数（Query）\n\n| 名称 | 类型   | 是否必须 | 描述          |\n| ---- | ------ | -------- | ------------- |\n| ISBN | STRING | 必选     | 10-13位ISBN码 |\n\n\n\n云函数调用API\n\n```javascript\nconst rq = require('request-promise')\n\ncloud.init()\n\n// 云函数入口函数\nexports.main = async (event, context) => {\n  var res = rq('https://book.feelyou.top/isbn/' + event.isbn).then( html => {\n    return html;\n  }).catch( err => {\n    console.log(err);\n  })\n  // console.log(event);\n  return res\n}\n```\n\n![2020-04-03 16-59-16屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gdgopds6ctj314s0qe7c7.jpg)\n\n","source":"_posts/私人书柜小程序项目.md","raw":"---\ntitle: 私人书柜小程序项目\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-04-03 17:28:24\n---\n\n# [小程序-云开发](https://developers.weixin.qq.com/miniprogram/dev/api/)\n\n## 私房书柜项目\n\n通过调用微信的二维码扫描云函数，获取图书的ISBN。调用API查询图书的详细信息，由于豆瓣图书的API失效，所以在github上找一个提到的API[DouBanBook](https://github.com/qiaohaoforever/DoubanBook)\n\n## 图书名称查询\n\n调用地址：https://book.feelyou.top/search/\n\n请求方式：GET\n\n返回类型：JSON\n\n请求示例：https://book.feelyou.top/search/深度学习\n\n#### 请求参数（Query）\n\n| 名称 | 类型   | 是否必须 | 描述     |\n| ---- | ------ | -------- | -------- |\n| 书名 | STRING | 必选     | 图书名称 |\n\n#### 返回参数\n\n图书信息列表为list格式，每一本书对应一个json。\n\n## ISBN图书查询\n\n#### ISBN图书查询接口说明\n\n调用地址：http://book.feelyou.top/isbn/ISBN\n\n请求方式：GET\n\n返回类型：JSON\n\n请求示例：http://book.feelyou.top/isbn/9787506380263\n\n#### 请求参数（Query）\n\n| 名称 | 类型   | 是否必须 | 描述          |\n| ---- | ------ | -------- | ------------- |\n| ISBN | STRING | 必选     | 10-13位ISBN码 |\n\n\n\n云函数调用API\n\n```javascript\nconst rq = require('request-promise')\n\ncloud.init()\n\n// 云函数入口函数\nexports.main = async (event, context) => {\n  var res = rq('https://book.feelyou.top/isbn/' + event.isbn).then( html => {\n    return html;\n  }).catch( err => {\n    console.log(err);\n  })\n  // console.log(event);\n  return res\n}\n```\n\n![2020-04-03 16-59-16屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gdgopds6ctj314s0qe7c7.jpg)\n\n","slug":"私人书柜小程序项目","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39a004912mjasuq6ydd","content":"<h1 id=\"小程序-云开发\"><a href=\"#小程序-云开发\" class=\"headerlink\" title=\"小程序-云开发\"></a><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\">小程序-云开发</a></h1><h2 id=\"私房书柜项目\"><a href=\"#私房书柜项目\" class=\"headerlink\" title=\"私房书柜项目\"></a>私房书柜项目</h2><p>通过调用微信的二维码扫描云函数，获取图书的ISBN。调用API查询图书的详细信息，由于豆瓣图书的API失效，所以在github上找一个提到的API<a href=\"https://github.com/qiaohaoforever/DoubanBook\">DouBanBook</a></p>\n<h2 id=\"图书名称查询\"><a href=\"#图书名称查询\" class=\"headerlink\" title=\"图书名称查询\"></a>图书名称查询</h2><p>调用地址：<a href=\"https://book.feelyou.top/search/\">https://book.feelyou.top/search/</a></p>\n<p>请求方式：GET</p>\n<p>返回类型：JSON</p>\n<p>请求示例：<a href=\"https://book.feelyou.top/search/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0\">https://book.feelyou.top/search/深度学习</a></p>\n<h4 id=\"请求参数（Query）\"><a href=\"#请求参数（Query）\" class=\"headerlink\" title=\"请求参数（Query）\"></a>请求参数（Query）</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>是否必须</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>书名</td>\n<td>STRING</td>\n<td>必选</td>\n<td>图书名称</td>\n</tr>\n</tbody></table>\n<h4 id=\"返回参数\"><a href=\"#返回参数\" class=\"headerlink\" title=\"返回参数\"></a>返回参数</h4><p>图书信息列表为list格式，每一本书对应一个json。</p>\n<h2 id=\"ISBN图书查询\"><a href=\"#ISBN图书查询\" class=\"headerlink\" title=\"ISBN图书查询\"></a>ISBN图书查询</h2><h4 id=\"ISBN图书查询接口说明\"><a href=\"#ISBN图书查询接口说明\" class=\"headerlink\" title=\"ISBN图书查询接口说明\"></a>ISBN图书查询接口说明</h4><p>调用地址：<a href=\"http://book.feelyou.top/isbn/ISBN\">http://book.feelyou.top/isbn/ISBN</a></p>\n<p>请求方式：GET</p>\n<p>返回类型：JSON</p>\n<p>请求示例：<a href=\"http://book.feelyou.top/isbn/9787506380263\">http://book.feelyou.top/isbn/9787506380263</a></p>\n<h4 id=\"请求参数（Query）-1\"><a href=\"#请求参数（Query）-1\" class=\"headerlink\" title=\"请求参数（Query）\"></a>请求参数（Query）</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>是否必须</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ISBN</td>\n<td>STRING</td>\n<td>必选</td>\n<td>10-13位ISBN码</td>\n</tr>\n</tbody></table>\n<p>云函数调用API</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rq <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request-promise'</span><span class=\"token punctuation\">)</span>\n\ncloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 云函数入口函数</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token function\">rq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://book.feelyou.top/isbn/'</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>isbn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">html</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> html<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// console.log(event);</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gdgopds6ctj314s0qe7c7.jpg\" alt=\"2020-04-03 16-59-16屏幕截图.png\"></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"小程序-云开发\"><a href=\"#小程序-云开发\" class=\"headerlink\" title=\"小程序-云开发\"></a><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\">小程序-云开发</a></h1><h2 id=\"私房书柜项目\"><a href=\"#私房书柜项目\" class=\"headerlink\" title=\"私房书柜项目\"></a>私房书柜项目</h2><p>通过调用微信的二维码扫描云函数，获取图书的ISBN。调用API查询图书的详细信息，由于豆瓣图书的API失效，所以在github上找一个提到的API<a href=\"https://github.com/qiaohaoforever/DoubanBook\">DouBanBook</a></p>\n<h2 id=\"图书名称查询\"><a href=\"#图书名称查询\" class=\"headerlink\" title=\"图书名称查询\"></a>图书名称查询</h2><p>调用地址：<a href=\"https://book.feelyou.top/search/\">https://book.feelyou.top/search/</a></p>\n<p>请求方式：GET</p>\n<p>返回类型：JSON</p>\n<p>请求示例：<a href=\"https://book.feelyou.top/search/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0\">https://book.feelyou.top/search/深度学习</a></p>\n<h4 id=\"请求参数（Query）\"><a href=\"#请求参数（Query）\" class=\"headerlink\" title=\"请求参数（Query）\"></a>请求参数（Query）</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>是否必须</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>书名</td>\n<td>STRING</td>\n<td>必选</td>\n<td>图书名称</td>\n</tr>\n</tbody></table>\n<h4 id=\"返回参数\"><a href=\"#返回参数\" class=\"headerlink\" title=\"返回参数\"></a>返回参数</h4><p>图书信息列表为list格式，每一本书对应一个json。</p>\n<h2 id=\"ISBN图书查询\"><a href=\"#ISBN图书查询\" class=\"headerlink\" title=\"ISBN图书查询\"></a>ISBN图书查询</h2><h4 id=\"ISBN图书查询接口说明\"><a href=\"#ISBN图书查询接口说明\" class=\"headerlink\" title=\"ISBN图书查询接口说明\"></a>ISBN图书查询接口说明</h4><p>调用地址：<a href=\"http://book.feelyou.top/isbn/ISBN\">http://book.feelyou.top/isbn/ISBN</a></p>\n<p>请求方式：GET</p>\n<p>返回类型：JSON</p>\n<p>请求示例：<a href=\"http://book.feelyou.top/isbn/9787506380263\">http://book.feelyou.top/isbn/9787506380263</a></p>\n<h4 id=\"请求参数（Query）-1\"><a href=\"#请求参数（Query）-1\" class=\"headerlink\" title=\"请求参数（Query）\"></a>请求参数（Query）</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>是否必须</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ISBN</td>\n<td>STRING</td>\n<td>必选</td>\n<td>10-13位ISBN码</td>\n</tr>\n</tbody></table>\n<p>云函数调用API</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rq <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request-promise'</span><span class=\"token punctuation\">)</span>\n\ncloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 云函数入口函数</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token function\">rq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://book.feelyou.top/isbn/'</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>isbn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">html</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> html<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// console.log(event);</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gdgopds6ctj314s0qe7c7.jpg\" alt=\"2020-04-03 16-59-16屏幕截图.png\"></p>\n"},{"title":"武院二手交易","top":false,"date":"2020-04-07T12:51:22.000Z","_content":"\n## 项目名称：易物小程序\n\n> #### 本程序完全开源[https://gitee.com/leidb/tcb-hackthon-secondHand]\n\n欢迎使用该小程序，基于小程序和[云开发](https://cloud.tencent.com/product/tcb?from=10680)搭建。\n\n因为小程序的云开发不需要额外部署服务器，大大降低了开发者的开发成本。\n\n是本人参与腾讯布道师培训完成的一个项目，主要在于解决校园二手物品的问题，数据存储使用小程序云开发功能，全套程序已开源在[gitee](https://gitee.com/leidb/tcb-hackthon-secondHand/)主页。\n\n## 背景\t\t\t\n\n此小程序主要是服务于当前大学生，解决大学生在校园存在资源冗余问题，将学生二手资源买卖给学生，实行C2C模式，降低学生的生活成本。例如：师兄师姐毕业时要处理的课本，已经经历过考研、考公务员、考资格证的学生的学习资料，学生疯狂网购买了很多用不到的物品等。\n\n## 三大优势\n\n* 充分利用冗余资源，推崇绿色消费。\n\n* 方便快捷，可以去掉物流这以一环节，直接联系卖家获取商品即可。\n\n* 安全性高：通过校园认证，确认身份，保证学生交易的安全性。\n\n对于书籍类二手物品可以通过扫一扫一维码即可展示商品信息，操作简单。具有商品分类功能，帮助学生快速找到有需求的物品，注重用户体验。\n\n# 设计思路\n\n一开始就决定基于小程序和云开发搭建。\n\n小程序本身的即用即走以及订阅通知机制非常适合我的应用场景。\n\n而云开发所倡导的 serverless 也是我一直非常感兴趣和愿意尝试的，在这种轻量级应用中非常合适。\n\n# **技术架构**\n\n## **小程序框架**\n\n采用云开发加云储存加云数据库模式。\n\n## **小程序ui**\n\n采用了Vant Weapp 轻量、可靠的小程序 UI 组件库。\n\nVant Weapp 是移动端 Vue 组件库[Vant](https://github.com/youzan/vant)的小程序版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用。\n\n# **结果展示**\n\n用户首次进入小程序会进行学号认证登录，然后注册小程序才能发布信息，商品列表点击联系ta，会直接换起用户电话程序，一键联系对方，最为果断的一个功能，遇见心仪的就联系ta。\n\n![index.png](http://ww1.sinaimg.cn/large/005W6BOngy1ger9s5xfs1j30af0k0jub.jpg)\n![微信图片_20200406224833.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9vel4zjj30u01s6q64.jpg)\n![微信图片_20200406224942.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9vkpg1jj30u01s6dh6.jpg)\n![微信图片_20200406225020.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9vutg2yj30u01s6gmu.jpg)\n![微信图片_20200406225030.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9w2hhe1j30u01s6ta9.jpg)\n![微信图片_20200406225038.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9wao5i8j30u01s6wfi.jpg)\n![微信图片_20200406225102.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9wg8p34j30u01s6jsa.jpg)\n![微信图片_20200406225111.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9wmwqvgj30u01s6wfu.jpg)","source":"_posts/武院二手交易.md","raw":"---\ntitle: 武院二手交易\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-04-07 20:51:22\n---\n\n## 项目名称：易物小程序\n\n> #### 本程序完全开源[https://gitee.com/leidb/tcb-hackthon-secondHand]\n\n欢迎使用该小程序，基于小程序和[云开发](https://cloud.tencent.com/product/tcb?from=10680)搭建。\n\n因为小程序的云开发不需要额外部署服务器，大大降低了开发者的开发成本。\n\n是本人参与腾讯布道师培训完成的一个项目，主要在于解决校园二手物品的问题，数据存储使用小程序云开发功能，全套程序已开源在[gitee](https://gitee.com/leidb/tcb-hackthon-secondHand/)主页。\n\n## 背景\t\t\t\n\n此小程序主要是服务于当前大学生，解决大学生在校园存在资源冗余问题，将学生二手资源买卖给学生，实行C2C模式，降低学生的生活成本。例如：师兄师姐毕业时要处理的课本，已经经历过考研、考公务员、考资格证的学生的学习资料，学生疯狂网购买了很多用不到的物品等。\n\n## 三大优势\n\n* 充分利用冗余资源，推崇绿色消费。\n\n* 方便快捷，可以去掉物流这以一环节，直接联系卖家获取商品即可。\n\n* 安全性高：通过校园认证，确认身份，保证学生交易的安全性。\n\n对于书籍类二手物品可以通过扫一扫一维码即可展示商品信息，操作简单。具有商品分类功能，帮助学生快速找到有需求的物品，注重用户体验。\n\n# 设计思路\n\n一开始就决定基于小程序和云开发搭建。\n\n小程序本身的即用即走以及订阅通知机制非常适合我的应用场景。\n\n而云开发所倡导的 serverless 也是我一直非常感兴趣和愿意尝试的，在这种轻量级应用中非常合适。\n\n# **技术架构**\n\n## **小程序框架**\n\n采用云开发加云储存加云数据库模式。\n\n## **小程序ui**\n\n采用了Vant Weapp 轻量、可靠的小程序 UI 组件库。\n\nVant Weapp 是移动端 Vue 组件库[Vant](https://github.com/youzan/vant)的小程序版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用。\n\n# **结果展示**\n\n用户首次进入小程序会进行学号认证登录，然后注册小程序才能发布信息，商品列表点击联系ta，会直接换起用户电话程序，一键联系对方，最为果断的一个功能，遇见心仪的就联系ta。\n\n![index.png](http://ww1.sinaimg.cn/large/005W6BOngy1ger9s5xfs1j30af0k0jub.jpg)\n![微信图片_20200406224833.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9vel4zjj30u01s6q64.jpg)\n![微信图片_20200406224942.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9vkpg1jj30u01s6dh6.jpg)\n![微信图片_20200406225020.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9vutg2yj30u01s6gmu.jpg)\n![微信图片_20200406225030.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9w2hhe1j30u01s6ta9.jpg)\n![微信图片_20200406225038.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9wao5i8j30u01s6wfi.jpg)\n![微信图片_20200406225102.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9wg8p34j30u01s6jsa.jpg)\n![微信图片_20200406225111.jpg](http://ww1.sinaimg.cn/large/005W6BOngy1ger9wmwqvgj30u01s6wfu.jpg)","slug":"武院二手交易","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39a004c12mj9zrv2iwk","content":"<h2 id=\"项目名称：易物小程序\"><a href=\"#项目名称：易物小程序\" class=\"headerlink\" title=\"项目名称：易物小程序\"></a>项目名称：易物小程序</h2><blockquote>\n<h4 id=\"本程序完全开源-https-gitee-com-leidb-tcb-hackthon-secondHand\"><a href=\"#本程序完全开源-https-gitee-com-leidb-tcb-hackthon-secondHand\" class=\"headerlink\" title=\"本程序完全开源[https://gitee.com/leidb/tcb-hackthon-secondHand]\"></a>本程序完全开源[<a href=\"https://gitee.com/leidb/tcb-hackthon-secondHand]\">https://gitee.com/leidb/tcb-hackthon-secondHand]</a></h4></blockquote>\n<p>欢迎使用该小程序，基于小程序和<a href=\"https://cloud.tencent.com/product/tcb?from=10680\">云开发</a>搭建。</p>\n<p>因为小程序的云开发不需要额外部署服务器，大大降低了开发者的开发成本。</p>\n<p>是本人参与腾讯布道师培训完成的一个项目，主要在于解决校园二手物品的问题，数据存储使用小程序云开发功能，全套程序已开源在<a href=\"https://gitee.com/leidb/tcb-hackthon-secondHand/\">gitee</a>主页。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>此小程序主要是服务于当前大学生，解决大学生在校园存在资源冗余问题，将学生二手资源买卖给学生，实行C2C模式，降低学生的生活成本。例如：师兄师姐毕业时要处理的课本，已经经历过考研、考公务员、考资格证的学生的学习资料，学生疯狂网购买了很多用不到的物品等。</p>\n<h2 id=\"三大优势\"><a href=\"#三大优势\" class=\"headerlink\" title=\"三大优势\"></a>三大优势</h2><ul>\n<li><p>充分利用冗余资源，推崇绿色消费。</p>\n</li>\n<li><p>方便快捷，可以去掉物流这以一环节，直接联系卖家获取商品即可。</p>\n</li>\n<li><p>安全性高：通过校园认证，确认身份，保证学生交易的安全性。</p>\n</li>\n</ul>\n<p>对于书籍类二手物品可以通过扫一扫一维码即可展示商品信息，操作简单。具有商品分类功能，帮助学生快速找到有需求的物品，注重用户体验。</p>\n<h1 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h1><p>一开始就决定基于小程序和云开发搭建。</p>\n<p>小程序本身的即用即走以及订阅通知机制非常适合我的应用场景。</p>\n<p>而云开发所倡导的 serverless 也是我一直非常感兴趣和愿意尝试的，在这种轻量级应用中非常合适。</p>\n<h1 id=\"技术架构\"><a href=\"#技术架构\" class=\"headerlink\" title=\"技术架构\"></a><strong>技术架构</strong></h1><h2 id=\"小程序框架\"><a href=\"#小程序框架\" class=\"headerlink\" title=\"小程序框架\"></a><strong>小程序框架</strong></h2><p>采用云开发加云储存加云数据库模式。</p>\n<h2 id=\"小程序ui\"><a href=\"#小程序ui\" class=\"headerlink\" title=\"小程序ui\"></a><strong>小程序ui</strong></h2><p>采用了Vant Weapp 轻量、可靠的小程序 UI 组件库。</p>\n<p>Vant Weapp 是移动端 Vue 组件库<a href=\"https://github.com/youzan/vant\">Vant</a>的小程序版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用。</p>\n<h1 id=\"结果展示\"><a href=\"#结果展示\" class=\"headerlink\" title=\"结果展示\"></a><strong>结果展示</strong></h1><p>用户首次进入小程序会进行学号认证登录，然后注册小程序才能发布信息，商品列表点击联系ta，会直接换起用户电话程序，一键联系对方，最为果断的一个功能，遇见心仪的就联系ta。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9s5xfs1j30af0k0jub.jpg\" alt=\"index.png\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9vel4zjj30u01s6q64.jpg\" alt=\"微信图片_20200406224833.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9vkpg1jj30u01s6dh6.jpg\" alt=\"微信图片_20200406224942.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9vutg2yj30u01s6gmu.jpg\" alt=\"微信图片_20200406225020.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9w2hhe1j30u01s6ta9.jpg\" alt=\"微信图片_20200406225030.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9wao5i8j30u01s6wfi.jpg\" alt=\"微信图片_20200406225038.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9wg8p34j30u01s6jsa.jpg\" alt=\"微信图片_20200406225102.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9wmwqvgj30u01s6wfu.jpg\" alt=\"微信图片_20200406225111.jpg\"></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"项目名称：易物小程序\"><a href=\"#项目名称：易物小程序\" class=\"headerlink\" title=\"项目名称：易物小程序\"></a>项目名称：易物小程序</h2><blockquote>\n<h4 id=\"本程序完全开源-https-gitee-com-leidb-tcb-hackthon-secondHand\"><a href=\"#本程序完全开源-https-gitee-com-leidb-tcb-hackthon-secondHand\" class=\"headerlink\" title=\"本程序完全开源[https://gitee.com/leidb/tcb-hackthon-secondHand]\"></a>本程序完全开源[<a href=\"https://gitee.com/leidb/tcb-hackthon-secondHand]\">https://gitee.com/leidb/tcb-hackthon-secondHand]</a></h4></blockquote>\n<p>欢迎使用该小程序，基于小程序和<a href=\"https://cloud.tencent.com/product/tcb?from=10680\">云开发</a>搭建。</p>\n<p>因为小程序的云开发不需要额外部署服务器，大大降低了开发者的开发成本。</p>\n<p>是本人参与腾讯布道师培训完成的一个项目，主要在于解决校园二手物品的问题，数据存储使用小程序云开发功能，全套程序已开源在<a href=\"https://gitee.com/leidb/tcb-hackthon-secondHand/\">gitee</a>主页。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>此小程序主要是服务于当前大学生，解决大学生在校园存在资源冗余问题，将学生二手资源买卖给学生，实行C2C模式，降低学生的生活成本。例如：师兄师姐毕业时要处理的课本，已经经历过考研、考公务员、考资格证的学生的学习资料，学生疯狂网购买了很多用不到的物品等。</p>\n<h2 id=\"三大优势\"><a href=\"#三大优势\" class=\"headerlink\" title=\"三大优势\"></a>三大优势</h2><ul>\n<li><p>充分利用冗余资源，推崇绿色消费。</p>\n</li>\n<li><p>方便快捷，可以去掉物流这以一环节，直接联系卖家获取商品即可。</p>\n</li>\n<li><p>安全性高：通过校园认证，确认身份，保证学生交易的安全性。</p>\n</li>\n</ul>\n<p>对于书籍类二手物品可以通过扫一扫一维码即可展示商品信息，操作简单。具有商品分类功能，帮助学生快速找到有需求的物品，注重用户体验。</p>\n<h1 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h1><p>一开始就决定基于小程序和云开发搭建。</p>\n<p>小程序本身的即用即走以及订阅通知机制非常适合我的应用场景。</p>\n<p>而云开发所倡导的 serverless 也是我一直非常感兴趣和愿意尝试的，在这种轻量级应用中非常合适。</p>\n<h1 id=\"技术架构\"><a href=\"#技术架构\" class=\"headerlink\" title=\"技术架构\"></a><strong>技术架构</strong></h1><h2 id=\"小程序框架\"><a href=\"#小程序框架\" class=\"headerlink\" title=\"小程序框架\"></a><strong>小程序框架</strong></h2><p>采用云开发加云储存加云数据库模式。</p>\n<h2 id=\"小程序ui\"><a href=\"#小程序ui\" class=\"headerlink\" title=\"小程序ui\"></a><strong>小程序ui</strong></h2><p>采用了Vant Weapp 轻量、可靠的小程序 UI 组件库。</p>\n<p>Vant Weapp 是移动端 Vue 组件库<a href=\"https://github.com/youzan/vant\">Vant</a>的小程序版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用。</p>\n<h1 id=\"结果展示\"><a href=\"#结果展示\" class=\"headerlink\" title=\"结果展示\"></a><strong>结果展示</strong></h1><p>用户首次进入小程序会进行学号认证登录，然后注册小程序才能发布信息，商品列表点击联系ta，会直接换起用户电话程序，一键联系对方，最为果断的一个功能，遇见心仪的就联系ta。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9s5xfs1j30af0k0jub.jpg\" alt=\"index.png\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9vel4zjj30u01s6q64.jpg\" alt=\"微信图片_20200406224833.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9vkpg1jj30u01s6dh6.jpg\" alt=\"微信图片_20200406224942.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9vutg2yj30u01s6gmu.jpg\" alt=\"微信图片_20200406225020.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9w2hhe1j30u01s6ta9.jpg\" alt=\"微信图片_20200406225030.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9wao5i8j30u01s6wfi.jpg\" alt=\"微信图片_20200406225038.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9wg8p34j30u01s6jsa.jpg\" alt=\"微信图片_20200406225102.jpg\"><br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1ger9wmwqvgj30u01s6wfu.jpg\" alt=\"微信图片_20200406225111.jpg\"></p>\n"},{"title":"容器核心技术","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2022-09-05T07:09:23.000Z","password":null,"summary":"有了虚拟机，为什么还要有容器？想要掌握容器技术要从哪里开始？Namespace,Cgroup,文件系统，网络。","_content":"\n# 容器核心技术\n\n> Namespace做资源隔离，Cgroup做资源控制\n\n## Docker\n\n- 基于Linux内核的Cgroup，Namespace，以及UnionFS等技术，对进程进行封装隔离，属 于操作系统层面的虚拟化技术，由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其 为容器。\n- Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极 大的简化了容器的创建和维护，使得 Docker 技术比虚拟机技术更为轻便、快捷。\n\n## 为什么要用docker\n\n- 更高效的利用系统资源 \n- 更快速的启动时间 \n- 一致的运行环境 \n- 持续交付和部署 \n- 更轻松的迁移 \n- 更轻松的维护和扩展\n\n## 虚拟机和容器运行态的对比\n\n![image.png](https://s2.loli.net/2022/09/14/DNTibXw7xBMqsFj.png)\n\n## 容器主要特性\n\n- 安全性\n- 隔离性\n- 便携性\n- 可配额\n\n## Namespace\n\n-  LinuxNamespace是一种LinuxKernel提供的资源隔离方案:\n  - 系统可以为进程分配不同的 Namespace;\n  - 并保证不同的 Namespace 资源独立分配、进程彼此隔离，即不同的 Namespace 下的进程互不干扰 。\n\n### Linux 内核代码中 Namespace 的实现\n\n```c\n// 进程数据结构\nstruct task_struct \n{\n\t...\n\t/* namespaces */\n\tstruct nsproxy *nsproxy;\n\t...\n}\n\n// Namespace数据结构\nstruct nsproxy \n{\n\tatomic_t count;\n\tstruct uts_namespace *uts_ns;\n\tstruct ipc_namespace *ipc_ns;\n\tstruct mnt_namespace *mnt_ns;\n\tstruct pid_namespace\n\t*pid_ns_for_children;\n\tstruct net *net_ns;\n}\n```\n\n### Linux 对 Namespace操作方法\n\n- clone\n   在创建新进程的系统调用时，可以通过 flags 参数指定需要新建的 Namespace 类型:\n\n​\t\t// CLONE_NEWCGROUP / CLONE_NEWIPC / CLONE_NEWNET / CLONE_NEWNS / CLONE_NEWPID / CLONE_NEWUSER / CLONE_NEWUTS\n\n`int clone(int (*fn)(void *), void *child_stack, int flags, void *arg)`\n\n-  setns\n   该系统调用可以让调用进程加入某个已经存在的 Namespace 中: \n\n  `Int setns(int fd, int nstype)`\n\n- unshare\n   该系统调用可以将调用进程移动到新的 Namespace 下: \n\n  `int unshare(int flags)`\n\n### 隔离性 – Linux Namespace\n\n![](https://s2.loli.net/2022/09/14/LzCyg1YNK9x8VHX.png)\n\n### 关于 namespace 的常用操作\n\n- 查看当前系统的namespace: `lsns –t <type>`\n\n- 查看某进程的namespace: `ls -la /proc/<pid>/ns/`\n\n- 进入某namespace运行命令: `nsenter -t <pid> -n ip addr`\n\n\n\n\n\n## Cgroups\n\n- Cgroups(ControlGroups)是Linux下用于对一个或一组进程进行资源控制和监控的机制;\n- 可以对诸如CPU使用时间、内存、磁盘I/O等进程所需的资源进行限制;\n- 不同资源的具体管理工作由相应的Cgroup子系统(Subsystem)来实现;\n- 针对不同类型的资源限制，只要将限制策略在不同的的子系统上进行关联即可;\n- Cgroups在不同的系统资源管理子系统中以层级树(Hierarchy)的方式来组织管理:每个 Cgroup 都可以包含其他的子 Cgroup，因此子 Cgroup 能使用的资源除了受本 Cgroup 配置 的资源参数限制，还受到父 Cgroup 设置的资源限制 。\n\n### Linux 内核代码中 Cgroups 的实现\n\n```c\n// 进程数据结构\nstruct task_struct \n{\n\t#ifdef CONFIG_CGROUPS \n  struct css_set __rcu *cgroups;\n\tstruct list_head cg_list;\n\t#endif\n}\n// css_set 是 cgroup_subsys_state 对象的集合数据结构\nstruct css_set \n{\n\t/*\n* Set of subsystem states, one for each subsystem. This array is * immutable after creation apart from the init_css_set during\n* subsystem registration (at boot time).\n*/\n\tstruct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];\n}\n\n```\n\n### 可配额/可度量 - Control Groups (cgroups)\n\n![image.png](https://s2.loli.net/2022/09/14/cLKanYt5Axjlp63.png)\n\n**cgroups 实现了对资源的配额和度量。**\n\n- **blkio**:这个子系统设置限制每个块设备的输入输出控制。例如:磁盘，光盘以及USB等等; \n-  **cpu**:这个子系统使用调度程序为cgroup任务提供CPU的访问;\n-  **cpuacct**:产生cgroup任务的CPU资源报告;\n-  **cpuset**:如果是多核心的CPU，这个子系统会为cgroup任务分配单独的CPU和内存;\n-  **devices**:允许或拒绝cgroup任务对设备的访问;\n-  **freezer**:暂停和恢复cgroup任务;\n-  **memory**:设置每个cgroup的内存限制以及产生内存资源报告;\n-  **net_cls**:标记每个网络包以供cgroup方便使用;\n-  **ns**:名称空间子系统;\n-  **pid**:进程标识子系统。\n\n### cpuacct 子系统\n 用于统计 Cgroup 及其子 Cgroup 下进程的 CPU 的使用情况。\n\n- cpuacct.usage\n   包含该 Cgroup 及其子 Cgroup 下进程使用 CPU 的时间，单位是 ns(纳秒)。\n\n-  cpuacct.stat\n   包含该 Cgroup 及其子 Cgroup 下进程使用的 CPU 时间，以及用户态和内核态的时间。\n\n### memory 子系统\n\n- memory.usage_in_bytes \n\n  cgroup下进程使用的内存，包含cgroup及其子cgroup下的进程使用的内存。\n\n- memory.max_usage_in_bytes \n\n  cgroup下进程使用内存的最大值，包含子cgroup的内存使用量。\n\n- memory.limit_in_bytes \n\n  设置Cgroup下进程最多能使用的内存。如果设置为-1，表示对该cgroup的内存使用不做限制。\n\n- memory.oom_control\n\n  设置是否在Cgroup中使用OOM(Out of Memory)Killer，默认为使用。当属于该cgroup 的进程使用的内存超过最大的限定值时，会立刻被OOM Killer处理。\n\n## 文件系统 Union FS\n\n- 将不同目录挂载到同一个虚拟文件系统下(unite several directories into asingle virtual filesystem)的文件系统。\n- 支持为每一个成员目录(类似Git Branch)设定 readonly、readwrite 和 whiteout-able 权 限。\n- 文件系统分层,对readonly权限的branch可以逻辑上进行修改(增量地,不影响readonly部 分的)。\n- 通常UnionFS有两个用途,一方面可以将多个disk挂到同一个目录下,另一个更常用的就是将 一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起。\n\n## Docker 的文件系统\n\n典型的 Linux 文件系统组成:\n\n- Bootfs(bootfilesystem)\n\n\t- Bootloader - 引导加载 kernel，\n\n\t- Kernel - 当 kernel 被加载到内存中后 umount bootfs。\n\n- rootfs(rootfilesystem)\n\t- /dev，/proc，/bin，/etc 等标准目录和文件。\n\n\t- 对于不同的 linux 发行版, bootfs 基本是一致的， 但 rootfs 会有差别。\n\n## Docker 启动\n\n### Linux\n\n-  在启动后，首先将rootfs设置为readonly,进行一系列检查,然后将其切换为“readwrite” 供用户使用。\n\n### Docker启动\n\n- 初始化时也是将rootfs以readonly方式加载并检查，然而接下来利用unionmount的方式 将一个 readwrite 文件系统挂载在 readonly 的 rootfs 之上;\n- 并且允许再次将下层的FS(filesystem)设定为readonly并且向上叠加;\n- 这样一组readonly和一个writeable的结构构成一个container的运行时态,每一个FS被称 作一个 FS 层。\n\n### 写操作\n\n```\n由于镜像具有共享特性，所以对容器可写层的操作需要依赖存储驱动提供的写时复制和用时分配\n机制，以此来支持对容器可写层的修改，进而提高对存储和内存资源的利用率。\n```\n\n- 写时复制\n\n写时复制，即 Copy-on-Write。一个镜像可以被多个容器使用，但是不需要在内存和磁盘上做多 个拷贝。在需要对镜像提供的文件进行修改时，该文件会从镜像的文件系统被复制到容器的可写 层的文件系统进行修改，而镜像里面的文件不会改变。不同容器对文件的修改都相互独立、互不 影响。\n\n- 用时分配 \n\n按需分配空间，而非提前分配，即当一个文件被创建出来后，才会分配空间。\n\n### OverlayFS\n\nOverlayFS 也是一种与 AUFS 类似的联合文件系统，同样属于文件级的存储驱动，包含了最初的 Overlay 和更新更稳定的 overlay2。\n\nOverlay 只有两层:upper 层和 Lower 层。Lower 层代表镜像层，upper 层代表容器可写层\n\n![image.png](https://s2.loli.net/2022/09/15/GImyhMNbaWC26EQ.png)\n\n```sh\n# demo\n$ mkdir upper lower merged work\n$ echo \"from lower\" > lower/in_lower.txt\n$ echo \"from upper\" > upper/in_upper.txt\n$ echo \"from lower\" > lower/in_both.txt\n$ echo \"from upper\" > upper/in_both.txt\n$ sudo mount -t overlay overlay -o lowerdir=`pwd`/lower,upperdir=`pwd`/upper,workdir=`pwd`/work `pwd`/merged\n$ cat merged/in_both.txt\n$ delete merged/in_both.txt $ delete merged/in_lower.txt $ delete merged/in_upper.txt\n```\n\n## 网络\n\n### Null（--net=null）\n\n- 把容器放入独立的网络空间但不做任何网络配置;\n-  用户需要通过运行 docker network 命令来完成网络配置。\n\n### Host\n\n- 使用主机网络名空间，复用主机网络。\n\n### Container\n\n- 重用其他容器的网络。\n\n### Bridge(--net=bridge)\n\n- 使用 Linux 网桥和 iptables 提供容器互联，Docker 在每台主机上创建一个名叫 docker0 的网桥，通过 veth pair 来连接该主机的每一个 EndPoint。\n\n## Docker优势\n\n- 封装性:\n\t- 不需要再启动内核，所以应用扩缩容时可以秒速启动。\n\t- 资源利用率高，直接使用宿主机内核调度资源，性能损失小。 • 方便的 CPU、内存资源调整。\n\t- 能实现秒级快速回滚。\n- 封装性:\n\t- 一键启动所有依赖服务，测试不用为搭建环境犯愁，PE 也不用 为建站复杂担心。\n\t- 镜像一次编译，随处使用。\n\t- 测试、生产环境高度一致(数据除外)。\n- 隔离性:\n\t- 应用的运行环境和宿主机环境无关，完全由镜像控制，一台物 理机上部署多种环境的镜像测试。\n\t- 多个应用版本可以并存在机器上。\n- 镜像增量分发:\n\t-\t由于采用了 Union FS， 简单来说就是支持将不同的目录挂载到同 一个虚拟文件系统下，并实现一种 layer 的概念，每次发布只传输 变化的部分，节约带宽。\n- 社区活跃:\n\t- Docker 命令简单、易用，社区十分活跃，且周边组件丰富。\n","source":"_posts/容器核心技术.md","raw":"---\ntitle: 容器核心技术\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-09-5 15:09:23\npassword:\nsummary: 有了虚拟机，为什么还要有容器？想要掌握容器技术要从哪里开始？Namespace,Cgroup,文件系统，网络。\ntags:\n- 容器\n- Docker\n- K8s\ncategories:\n- Docker\n---\n\n# 容器核心技术\n\n> Namespace做资源隔离，Cgroup做资源控制\n\n## Docker\n\n- 基于Linux内核的Cgroup，Namespace，以及UnionFS等技术，对进程进行封装隔离，属 于操作系统层面的虚拟化技术，由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其 为容器。\n- Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极 大的简化了容器的创建和维护，使得 Docker 技术比虚拟机技术更为轻便、快捷。\n\n## 为什么要用docker\n\n- 更高效的利用系统资源 \n- 更快速的启动时间 \n- 一致的运行环境 \n- 持续交付和部署 \n- 更轻松的迁移 \n- 更轻松的维护和扩展\n\n## 虚拟机和容器运行态的对比\n\n![image.png](https://s2.loli.net/2022/09/14/DNTibXw7xBMqsFj.png)\n\n## 容器主要特性\n\n- 安全性\n- 隔离性\n- 便携性\n- 可配额\n\n## Namespace\n\n-  LinuxNamespace是一种LinuxKernel提供的资源隔离方案:\n  - 系统可以为进程分配不同的 Namespace;\n  - 并保证不同的 Namespace 资源独立分配、进程彼此隔离，即不同的 Namespace 下的进程互不干扰 。\n\n### Linux 内核代码中 Namespace 的实现\n\n```c\n// 进程数据结构\nstruct task_struct \n{\n\t...\n\t/* namespaces */\n\tstruct nsproxy *nsproxy;\n\t...\n}\n\n// Namespace数据结构\nstruct nsproxy \n{\n\tatomic_t count;\n\tstruct uts_namespace *uts_ns;\n\tstruct ipc_namespace *ipc_ns;\n\tstruct mnt_namespace *mnt_ns;\n\tstruct pid_namespace\n\t*pid_ns_for_children;\n\tstruct net *net_ns;\n}\n```\n\n### Linux 对 Namespace操作方法\n\n- clone\n   在创建新进程的系统调用时，可以通过 flags 参数指定需要新建的 Namespace 类型:\n\n​\t\t// CLONE_NEWCGROUP / CLONE_NEWIPC / CLONE_NEWNET / CLONE_NEWNS / CLONE_NEWPID / CLONE_NEWUSER / CLONE_NEWUTS\n\n`int clone(int (*fn)(void *), void *child_stack, int flags, void *arg)`\n\n-  setns\n   该系统调用可以让调用进程加入某个已经存在的 Namespace 中: \n\n  `Int setns(int fd, int nstype)`\n\n- unshare\n   该系统调用可以将调用进程移动到新的 Namespace 下: \n\n  `int unshare(int flags)`\n\n### 隔离性 – Linux Namespace\n\n![](https://s2.loli.net/2022/09/14/LzCyg1YNK9x8VHX.png)\n\n### 关于 namespace 的常用操作\n\n- 查看当前系统的namespace: `lsns –t <type>`\n\n- 查看某进程的namespace: `ls -la /proc/<pid>/ns/`\n\n- 进入某namespace运行命令: `nsenter -t <pid> -n ip addr`\n\n\n\n\n\n## Cgroups\n\n- Cgroups(ControlGroups)是Linux下用于对一个或一组进程进行资源控制和监控的机制;\n- 可以对诸如CPU使用时间、内存、磁盘I/O等进程所需的资源进行限制;\n- 不同资源的具体管理工作由相应的Cgroup子系统(Subsystem)来实现;\n- 针对不同类型的资源限制，只要将限制策略在不同的的子系统上进行关联即可;\n- Cgroups在不同的系统资源管理子系统中以层级树(Hierarchy)的方式来组织管理:每个 Cgroup 都可以包含其他的子 Cgroup，因此子 Cgroup 能使用的资源除了受本 Cgroup 配置 的资源参数限制，还受到父 Cgroup 设置的资源限制 。\n\n### Linux 内核代码中 Cgroups 的实现\n\n```c\n// 进程数据结构\nstruct task_struct \n{\n\t#ifdef CONFIG_CGROUPS \n  struct css_set __rcu *cgroups;\n\tstruct list_head cg_list;\n\t#endif\n}\n// css_set 是 cgroup_subsys_state 对象的集合数据结构\nstruct css_set \n{\n\t/*\n* Set of subsystem states, one for each subsystem. This array is * immutable after creation apart from the init_css_set during\n* subsystem registration (at boot time).\n*/\n\tstruct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];\n}\n\n```\n\n### 可配额/可度量 - Control Groups (cgroups)\n\n![image.png](https://s2.loli.net/2022/09/14/cLKanYt5Axjlp63.png)\n\n**cgroups 实现了对资源的配额和度量。**\n\n- **blkio**:这个子系统设置限制每个块设备的输入输出控制。例如:磁盘，光盘以及USB等等; \n-  **cpu**:这个子系统使用调度程序为cgroup任务提供CPU的访问;\n-  **cpuacct**:产生cgroup任务的CPU资源报告;\n-  **cpuset**:如果是多核心的CPU，这个子系统会为cgroup任务分配单独的CPU和内存;\n-  **devices**:允许或拒绝cgroup任务对设备的访问;\n-  **freezer**:暂停和恢复cgroup任务;\n-  **memory**:设置每个cgroup的内存限制以及产生内存资源报告;\n-  **net_cls**:标记每个网络包以供cgroup方便使用;\n-  **ns**:名称空间子系统;\n-  **pid**:进程标识子系统。\n\n### cpuacct 子系统\n 用于统计 Cgroup 及其子 Cgroup 下进程的 CPU 的使用情况。\n\n- cpuacct.usage\n   包含该 Cgroup 及其子 Cgroup 下进程使用 CPU 的时间，单位是 ns(纳秒)。\n\n-  cpuacct.stat\n   包含该 Cgroup 及其子 Cgroup 下进程使用的 CPU 时间，以及用户态和内核态的时间。\n\n### memory 子系统\n\n- memory.usage_in_bytes \n\n  cgroup下进程使用的内存，包含cgroup及其子cgroup下的进程使用的内存。\n\n- memory.max_usage_in_bytes \n\n  cgroup下进程使用内存的最大值，包含子cgroup的内存使用量。\n\n- memory.limit_in_bytes \n\n  设置Cgroup下进程最多能使用的内存。如果设置为-1，表示对该cgroup的内存使用不做限制。\n\n- memory.oom_control\n\n  设置是否在Cgroup中使用OOM(Out of Memory)Killer，默认为使用。当属于该cgroup 的进程使用的内存超过最大的限定值时，会立刻被OOM Killer处理。\n\n## 文件系统 Union FS\n\n- 将不同目录挂载到同一个虚拟文件系统下(unite several directories into asingle virtual filesystem)的文件系统。\n- 支持为每一个成员目录(类似Git Branch)设定 readonly、readwrite 和 whiteout-able 权 限。\n- 文件系统分层,对readonly权限的branch可以逻辑上进行修改(增量地,不影响readonly部 分的)。\n- 通常UnionFS有两个用途,一方面可以将多个disk挂到同一个目录下,另一个更常用的就是将 一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起。\n\n## Docker 的文件系统\n\n典型的 Linux 文件系统组成:\n\n- Bootfs(bootfilesystem)\n\n\t- Bootloader - 引导加载 kernel，\n\n\t- Kernel - 当 kernel 被加载到内存中后 umount bootfs。\n\n- rootfs(rootfilesystem)\n\t- /dev，/proc，/bin，/etc 等标准目录和文件。\n\n\t- 对于不同的 linux 发行版, bootfs 基本是一致的， 但 rootfs 会有差别。\n\n## Docker 启动\n\n### Linux\n\n-  在启动后，首先将rootfs设置为readonly,进行一系列检查,然后将其切换为“readwrite” 供用户使用。\n\n### Docker启动\n\n- 初始化时也是将rootfs以readonly方式加载并检查，然而接下来利用unionmount的方式 将一个 readwrite 文件系统挂载在 readonly 的 rootfs 之上;\n- 并且允许再次将下层的FS(filesystem)设定为readonly并且向上叠加;\n- 这样一组readonly和一个writeable的结构构成一个container的运行时态,每一个FS被称 作一个 FS 层。\n\n### 写操作\n\n```\n由于镜像具有共享特性，所以对容器可写层的操作需要依赖存储驱动提供的写时复制和用时分配\n机制，以此来支持对容器可写层的修改，进而提高对存储和内存资源的利用率。\n```\n\n- 写时复制\n\n写时复制，即 Copy-on-Write。一个镜像可以被多个容器使用，但是不需要在内存和磁盘上做多 个拷贝。在需要对镜像提供的文件进行修改时，该文件会从镜像的文件系统被复制到容器的可写 层的文件系统进行修改，而镜像里面的文件不会改变。不同容器对文件的修改都相互独立、互不 影响。\n\n- 用时分配 \n\n按需分配空间，而非提前分配，即当一个文件被创建出来后，才会分配空间。\n\n### OverlayFS\n\nOverlayFS 也是一种与 AUFS 类似的联合文件系统，同样属于文件级的存储驱动，包含了最初的 Overlay 和更新更稳定的 overlay2。\n\nOverlay 只有两层:upper 层和 Lower 层。Lower 层代表镜像层，upper 层代表容器可写层\n\n![image.png](https://s2.loli.net/2022/09/15/GImyhMNbaWC26EQ.png)\n\n```sh\n# demo\n$ mkdir upper lower merged work\n$ echo \"from lower\" > lower/in_lower.txt\n$ echo \"from upper\" > upper/in_upper.txt\n$ echo \"from lower\" > lower/in_both.txt\n$ echo \"from upper\" > upper/in_both.txt\n$ sudo mount -t overlay overlay -o lowerdir=`pwd`/lower,upperdir=`pwd`/upper,workdir=`pwd`/work `pwd`/merged\n$ cat merged/in_both.txt\n$ delete merged/in_both.txt $ delete merged/in_lower.txt $ delete merged/in_upper.txt\n```\n\n## 网络\n\n### Null（--net=null）\n\n- 把容器放入独立的网络空间但不做任何网络配置;\n-  用户需要通过运行 docker network 命令来完成网络配置。\n\n### Host\n\n- 使用主机网络名空间，复用主机网络。\n\n### Container\n\n- 重用其他容器的网络。\n\n### Bridge(--net=bridge)\n\n- 使用 Linux 网桥和 iptables 提供容器互联，Docker 在每台主机上创建一个名叫 docker0 的网桥，通过 veth pair 来连接该主机的每一个 EndPoint。\n\n## Docker优势\n\n- 封装性:\n\t- 不需要再启动内核，所以应用扩缩容时可以秒速启动。\n\t- 资源利用率高，直接使用宿主机内核调度资源，性能损失小。 • 方便的 CPU、内存资源调整。\n\t- 能实现秒级快速回滚。\n- 封装性:\n\t- 一键启动所有依赖服务，测试不用为搭建环境犯愁，PE 也不用 为建站复杂担心。\n\t- 镜像一次编译，随处使用。\n\t- 测试、生产环境高度一致(数据除外)。\n- 隔离性:\n\t- 应用的运行环境和宿主机环境无关，完全由镜像控制，一台物 理机上部署多种环境的镜像测试。\n\t- 多个应用版本可以并存在机器上。\n- 镜像增量分发:\n\t-\t由于采用了 Union FS， 简单来说就是支持将不同的目录挂载到同 一个虚拟文件系统下，并实现一种 layer 的概念，每次发布只传输 变化的部分，节约带宽。\n- 社区活跃:\n\t- Docker 命令简单、易用，社区十分活跃，且周边组件丰富。\n","slug":"容器核心技术","published":1,"updated":"2022-09-17T09:23:16.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39b004f12mjevcid0jc","content":"<h1 id=\"容器核心技术\"><a href=\"#容器核心技术\" class=\"headerlink\" title=\"容器核心技术\"></a>容器核心技术</h1><blockquote>\n<p>Namespace做资源隔离，Cgroup做资源控制</p>\n</blockquote>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>基于Linux内核的Cgroup，Namespace，以及UnionFS等技术，对进程进行封装隔离，属 于操作系统层面的虚拟化技术，由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其 为容器。</li>\n<li>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极 大的简化了容器的创建和维护，使得 Docker 技术比虚拟机技术更为轻便、快捷。</li>\n</ul>\n<h2 id=\"为什么要用docker\"><a href=\"#为什么要用docker\" class=\"headerlink\" title=\"为什么要用docker\"></a>为什么要用docker</h2><ul>\n<li>更高效的利用系统资源 </li>\n<li>更快速的启动时间 </li>\n<li>一致的运行环境 </li>\n<li>持续交付和部署 </li>\n<li>更轻松的迁移 </li>\n<li>更轻松的维护和扩展</li>\n</ul>\n<h2 id=\"虚拟机和容器运行态的对比\"><a href=\"#虚拟机和容器运行态的对比\" class=\"headerlink\" title=\"虚拟机和容器运行态的对比\"></a>虚拟机和容器运行态的对比</h2><p><img src=\"https://s2.loli.net/2022/09/14/DNTibXw7xBMqsFj.png\" alt=\"image.png\"></p>\n<h2 id=\"容器主要特性\"><a href=\"#容器主要特性\" class=\"headerlink\" title=\"容器主要特性\"></a>容器主要特性</h2><ul>\n<li>安全性</li>\n<li>隔离性</li>\n<li>便携性</li>\n<li>可配额</li>\n</ul>\n<h2 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h2><ul>\n<li>LinuxNamespace是一种LinuxKernel提供的资源隔离方案:<ul>\n<li>系统可以为进程分配不同的 Namespace;</li>\n<li>并保证不同的 Namespace 资源独立分配、进程彼此隔离，即不同的 Namespace 下的进程互不干扰 。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Linux-内核代码中-Namespace-的实现\"><a href=\"#Linux-内核代码中-Namespace-的实现\" class=\"headerlink\" title=\"Linux 内核代码中 Namespace 的实现\"></a>Linux 内核代码中 Namespace 的实现</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 进程数据结构</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> \n<span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token comment\">/* namespaces */</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">nsproxy</span> <span class=\"token operator\">*</span>nsproxy<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Namespace数据结构</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">nsproxy</span> \n<span class=\"token punctuation\">{</span>\n\tatomic_t count<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">uts_namespace</span> <span class=\"token operator\">*</span>uts_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ipc_namespace</span> <span class=\"token operator\">*</span>ipc_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mnt_namespace</span> <span class=\"token operator\">*</span>mnt_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pid_namespace</span>\n\t<span class=\"token operator\">*</span>pid_ns_for_children<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">net</span> <span class=\"token operator\">*</span>net_ns<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Linux-对-Namespace操作方法\"><a href=\"#Linux-对-Namespace操作方法\" class=\"headerlink\" title=\"Linux 对 Namespace操作方法\"></a>Linux 对 Namespace操作方法</h3><ul>\n<li>clone<br> 在创建新进程的系统调用时，可以通过 flags 参数指定需要新建的 Namespace 类型:</li>\n</ul>\n<p>​        // CLONE_NEWCGROUP / CLONE_NEWIPC / CLONE_NEWNET / CLONE_NEWNS / CLONE_NEWPID / CLONE_NEWUSER / CLONE_NEWUTS</p>\n<p><code>int clone(int (*fn)(void *), void *child_stack, int flags, void *arg)</code></p>\n<ul>\n<li><p>setns<br> 该系统调用可以让调用进程加入某个已经存在的 Namespace 中: </p>\n<p><code>Int setns(int fd, int nstype)</code></p>\n</li>\n<li><p>unshare<br> 该系统调用可以将调用进程移动到新的 Namespace 下: </p>\n<p><code>int unshare(int flags)</code></p>\n</li>\n</ul>\n<h3 id=\"隔离性-–-Linux-Namespace\"><a href=\"#隔离性-–-Linux-Namespace\" class=\"headerlink\" title=\"隔离性 – Linux Namespace\"></a>隔离性 – Linux Namespace</h3><p><img src=\"https://s2.loli.net/2022/09/14/LzCyg1YNK9x8VHX.png\"></p>\n<h3 id=\"关于-namespace-的常用操作\"><a href=\"#关于-namespace-的常用操作\" class=\"headerlink\" title=\"关于 namespace 的常用操作\"></a>关于 namespace 的常用操作</h3><ul>\n<li><p>查看当前系统的namespace: <code>lsns –t &lt;type&gt;</code></p>\n</li>\n<li><p>查看某进程的namespace: <code>ls -la /proc/&lt;pid&gt;/ns/</code></p>\n</li>\n<li><p>进入某namespace运行命令: <code>nsenter -t &lt;pid&gt; -n ip addr</code></p>\n</li>\n</ul>\n<h2 id=\"Cgroups\"><a href=\"#Cgroups\" class=\"headerlink\" title=\"Cgroups\"></a>Cgroups</h2><ul>\n<li>Cgroups(ControlGroups)是Linux下用于对一个或一组进程进行资源控制和监控的机制;</li>\n<li>可以对诸如CPU使用时间、内存、磁盘I/O等进程所需的资源进行限制;</li>\n<li>不同资源的具体管理工作由相应的Cgroup子系统(Subsystem)来实现;</li>\n<li>针对不同类型的资源限制，只要将限制策略在不同的的子系统上进行关联即可;</li>\n<li>Cgroups在不同的系统资源管理子系统中以层级树(Hierarchy)的方式来组织管理:每个 Cgroup 都可以包含其他的子 Cgroup，因此子 Cgroup 能使用的资源除了受本 Cgroup 配置 的资源参数限制，还受到父 Cgroup 设置的资源限制 。</li>\n</ul>\n<h3 id=\"Linux-内核代码中-Cgroups-的实现\"><a href=\"#Linux-内核代码中-Cgroups-的实现\" class=\"headerlink\" title=\"Linux 内核代码中 Cgroups 的实现\"></a>Linux 内核代码中 Cgroups 的实现</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 进程数据结构</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> \n<span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">CONFIG_CGROUPS </span></span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">css_set</span> __rcu <span class=\"token operator\">*</span>cgroups<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> cg_list<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// css_set 是 cgroup_subsys_state 对象的集合数据结构</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">css_set</span> \n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/*\n* Set of subsystem states, one for each subsystem. This array is * immutable after creation apart from the init_css_set during\n* subsystem registration (at boot time).\n*/</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">cgroup_subsys_state</span> <span class=\"token operator\">*</span>subsys<span class=\"token punctuation\">[</span>CGROUP_SUBSYS_COUNT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"可配额-可度量-Control-Groups-cgroups\"><a href=\"#可配额-可度量-Control-Groups-cgroups\" class=\"headerlink\" title=\"可配额/可度量 - Control Groups (cgroups)\"></a>可配额/可度量 - Control Groups (cgroups)</h3><p><img src=\"https://s2.loli.net/2022/09/14/cLKanYt5Axjlp63.png\" alt=\"image.png\"></p>\n<p><strong>cgroups 实现了对资源的配额和度量。</strong></p>\n<ul>\n<li><strong>blkio</strong>:这个子系统设置限制每个块设备的输入输出控制。例如:磁盘，光盘以及USB等等; </li>\n<li> <strong>cpu</strong>:这个子系统使用调度程序为cgroup任务提供CPU的访问;</li>\n<li> <strong>cpuacct</strong>:产生cgroup任务的CPU资源报告;</li>\n<li> <strong>cpuset</strong>:如果是多核心的CPU，这个子系统会为cgroup任务分配单独的CPU和内存;</li>\n<li> <strong>devices</strong>:允许或拒绝cgroup任务对设备的访问;</li>\n<li> <strong>freezer</strong>:暂停和恢复cgroup任务;</li>\n<li> <strong>memory</strong>:设置每个cgroup的内存限制以及产生内存资源报告;</li>\n<li> <strong>net_cls</strong>:标记每个网络包以供cgroup方便使用;</li>\n<li> <strong>ns</strong>:名称空间子系统;</li>\n<li> <strong>pid</strong>:进程标识子系统。</li>\n</ul>\n<h3 id=\"cpuacct-子系统\"><a href=\"#cpuacct-子系统\" class=\"headerlink\" title=\"cpuacct 子系统\"></a>cpuacct 子系统</h3><p> 用于统计 Cgroup 及其子 Cgroup 下进程的 CPU 的使用情况。</p>\n<ul>\n<li><p>cpuacct.usage<br> 包含该 Cgroup 及其子 Cgroup 下进程使用 CPU 的时间，单位是 ns(纳秒)。</p>\n</li>\n<li><p>cpuacct.stat<br> 包含该 Cgroup 及其子 Cgroup 下进程使用的 CPU 时间，以及用户态和内核态的时间。</p>\n</li>\n</ul>\n<h3 id=\"memory-子系统\"><a href=\"#memory-子系统\" class=\"headerlink\" title=\"memory 子系统\"></a>memory 子系统</h3><ul>\n<li><p>memory.usage_in_bytes </p>\n<p>cgroup下进程使用的内存，包含cgroup及其子cgroup下的进程使用的内存。</p>\n</li>\n<li><p>memory.max_usage_in_bytes </p>\n<p>cgroup下进程使用内存的最大值，包含子cgroup的内存使用量。</p>\n</li>\n<li><p>memory.limit_in_bytes </p>\n<p>设置Cgroup下进程最多能使用的内存。如果设置为-1，表示对该cgroup的内存使用不做限制。</p>\n</li>\n<li><p>memory.oom_control</p>\n<p>设置是否在Cgroup中使用OOM(Out of Memory)Killer，默认为使用。当属于该cgroup 的进程使用的内存超过最大的限定值时，会立刻被OOM Killer处理。</p>\n</li>\n</ul>\n<h2 id=\"文件系统-Union-FS\"><a href=\"#文件系统-Union-FS\" class=\"headerlink\" title=\"文件系统 Union FS\"></a>文件系统 Union FS</h2><ul>\n<li>将不同目录挂载到同一个虚拟文件系统下(unite several directories into asingle virtual filesystem)的文件系统。</li>\n<li>支持为每一个成员目录(类似Git Branch)设定 readonly、readwrite 和 whiteout-able 权 限。</li>\n<li>文件系统分层,对readonly权限的branch可以逻辑上进行修改(增量地,不影响readonly部 分的)。</li>\n<li>通常UnionFS有两个用途,一方面可以将多个disk挂到同一个目录下,另一个更常用的就是将 一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起。</li>\n</ul>\n<h2 id=\"Docker-的文件系统\"><a href=\"#Docker-的文件系统\" class=\"headerlink\" title=\"Docker 的文件系统\"></a>Docker 的文件系统</h2><p>典型的 Linux 文件系统组成:</p>\n<ul>\n<li><p>Bootfs(bootfilesystem)</p>\n<ul>\n<li><p>Bootloader - 引导加载 kernel，</p>\n</li>\n<li><p>Kernel - 当 kernel 被加载到内存中后 umount bootfs。</p>\n</li>\n</ul>\n</li>\n<li><p>rootfs(rootfilesystem)</p>\n<ul>\n<li><p>/dev，/proc，/bin，/etc 等标准目录和文件。</p>\n</li>\n<li><p>对于不同的 linux 发行版, bootfs 基本是一致的， 但 rootfs 会有差别。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Docker-启动\"><a href=\"#Docker-启动\" class=\"headerlink\" title=\"Docker 启动\"></a>Docker 启动</h2><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li> 在启动后，首先将rootfs设置为readonly,进行一系列检查,然后将其切换为“readwrite” 供用户使用。</li>\n</ul>\n<h3 id=\"Docker启动\"><a href=\"#Docker启动\" class=\"headerlink\" title=\"Docker启动\"></a>Docker启动</h3><ul>\n<li>初始化时也是将rootfs以readonly方式加载并检查，然而接下来利用unionmount的方式 将一个 readwrite 文件系统挂载在 readonly 的 rootfs 之上;</li>\n<li>并且允许再次将下层的FS(filesystem)设定为readonly并且向上叠加;</li>\n<li>这样一组readonly和一个writeable的结构构成一个container的运行时态,每一个FS被称 作一个 FS 层。</li>\n</ul>\n<h3 id=\"写操作\"><a href=\"#写操作\" class=\"headerlink\" title=\"写操作\"></a>写操作</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">由于镜像具有共享特性，所以对容器可写层的操作需要依赖存储驱动提供的写时复制和用时分配\n机制，以此来支持对容器可写层的修改，进而提高对存储和内存资源的利用率。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>写时复制</li>\n</ul>\n<p>写时复制，即 Copy-on-Write。一个镜像可以被多个容器使用，但是不需要在内存和磁盘上做多 个拷贝。在需要对镜像提供的文件进行修改时，该文件会从镜像的文件系统被复制到容器的可写 层的文件系统进行修改，而镜像里面的文件不会改变。不同容器对文件的修改都相互独立、互不 影响。</p>\n<ul>\n<li>用时分配 </li>\n</ul>\n<p>按需分配空间，而非提前分配，即当一个文件被创建出来后，才会分配空间。</p>\n<h3 id=\"OverlayFS\"><a href=\"#OverlayFS\" class=\"headerlink\" title=\"OverlayFS\"></a>OverlayFS</h3><p>OverlayFS 也是一种与 AUFS 类似的联合文件系统，同样属于文件级的存储驱动，包含了最初的 Overlay 和更新更稳定的 overlay2。</p>\n<p>Overlay 只有两层:upper 层和 Lower 层。Lower 层代表镜像层，upper 层代表容器可写层</p>\n<p><img src=\"https://s2.loli.net/2022/09/15/GImyhMNbaWC26EQ.png\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># demo\n$ mkdir upper lower merged work\n$ echo \"from lower\" &gt; lower/in_lower.txt\n$ echo \"from upper\" &gt; upper/in_upper.txt\n$ echo \"from lower\" &gt; lower/in_both.txt\n$ echo \"from upper\" &gt; upper/in_both.txt\n$ sudo mount -t overlay overlay -o lowerdir=`pwd`/lower,upperdir=`pwd`/upper,workdir=`pwd`/work `pwd`/merged\n$ cat merged/in_both.txt\n$ delete merged/in_both.txt $ delete merged/in_lower.txt $ delete merged/in_upper.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"Null（–net-null）\"><a href=\"#Null（–net-null）\" class=\"headerlink\" title=\"Null（–net=null）\"></a>Null（–net=null）</h3><ul>\n<li>把容器放入独立的网络空间但不做任何网络配置;</li>\n<li> 用户需要通过运行 docker network 命令来完成网络配置。</li>\n</ul>\n<h3 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h3><ul>\n<li>使用主机网络名空间，复用主机网络。</li>\n</ul>\n<h3 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h3><ul>\n<li>重用其他容器的网络。</li>\n</ul>\n<h3 id=\"Bridge-–net-bridge\"><a href=\"#Bridge-–net-bridge\" class=\"headerlink\" title=\"Bridge(–net=bridge)\"></a>Bridge(–net=bridge)</h3><ul>\n<li>使用 Linux 网桥和 iptables 提供容器互联，Docker 在每台主机上创建一个名叫 docker0 的网桥，通过 veth pair 来连接该主机的每一个 EndPoint。</li>\n</ul>\n<h2 id=\"Docker优势\"><a href=\"#Docker优势\" class=\"headerlink\" title=\"Docker优势\"></a>Docker优势</h2><ul>\n<li>封装性:<ul>\n<li>不需要再启动内核，所以应用扩缩容时可以秒速启动。</li>\n<li>资源利用率高，直接使用宿主机内核调度资源，性能损失小。 • 方便的 CPU、内存资源调整。</li>\n<li>能实现秒级快速回滚。</li>\n</ul>\n</li>\n<li>封装性:<ul>\n<li>一键启动所有依赖服务，测试不用为搭建环境犯愁，PE 也不用 为建站复杂担心。</li>\n<li>镜像一次编译，随处使用。</li>\n<li>测试、生产环境高度一致(数据除外)。</li>\n</ul>\n</li>\n<li>隔离性:<ul>\n<li>应用的运行环境和宿主机环境无关，完全由镜像控制，一台物 理机上部署多种环境的镜像测试。</li>\n<li>多个应用版本可以并存在机器上。</li>\n</ul>\n</li>\n<li>镜像增量分发:<ul>\n<li>   由于采用了 Union FS， 简单来说就是支持将不同的目录挂载到同 一个虚拟文件系统下，并实现一种 layer 的概念，每次发布只传输 变化的部分，节约带宽。</li>\n</ul>\n</li>\n<li>社区活跃:<ul>\n<li>Docker 命令简单、易用，社区十分活跃，且周边组件丰富。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"容器核心技术\"><a href=\"#容器核心技术\" class=\"headerlink\" title=\"容器核心技术\"></a>容器核心技术</h1><blockquote>\n<p>Namespace做资源隔离，Cgroup做资源控制</p>\n</blockquote>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>基于Linux内核的Cgroup，Namespace，以及UnionFS等技术，对进程进行封装隔离，属 于操作系统层面的虚拟化技术，由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其 为容器。</li>\n<li>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极 大的简化了容器的创建和维护，使得 Docker 技术比虚拟机技术更为轻便、快捷。</li>\n</ul>\n<h2 id=\"为什么要用docker\"><a href=\"#为什么要用docker\" class=\"headerlink\" title=\"为什么要用docker\"></a>为什么要用docker</h2><ul>\n<li>更高效的利用系统资源 </li>\n<li>更快速的启动时间 </li>\n<li>一致的运行环境 </li>\n<li>持续交付和部署 </li>\n<li>更轻松的迁移 </li>\n<li>更轻松的维护和扩展</li>\n</ul>\n<h2 id=\"虚拟机和容器运行态的对比\"><a href=\"#虚拟机和容器运行态的对比\" class=\"headerlink\" title=\"虚拟机和容器运行态的对比\"></a>虚拟机和容器运行态的对比</h2><p><img src=\"https://s2.loli.net/2022/09/14/DNTibXw7xBMqsFj.png\" alt=\"image.png\"></p>\n<h2 id=\"容器主要特性\"><a href=\"#容器主要特性\" class=\"headerlink\" title=\"容器主要特性\"></a>容器主要特性</h2><ul>\n<li>安全性</li>\n<li>隔离性</li>\n<li>便携性</li>\n<li>可配额</li>\n</ul>\n<h2 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h2><ul>\n<li>LinuxNamespace是一种LinuxKernel提供的资源隔离方案:<ul>\n<li>系统可以为进程分配不同的 Namespace;</li>\n<li>并保证不同的 Namespace 资源独立分配、进程彼此隔离，即不同的 Namespace 下的进程互不干扰 。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Linux-内核代码中-Namespace-的实现\"><a href=\"#Linux-内核代码中-Namespace-的实现\" class=\"headerlink\" title=\"Linux 内核代码中 Namespace 的实现\"></a>Linux 内核代码中 Namespace 的实现</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 进程数据结构</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token comment\">/* namespaces */</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">nsproxy</span> <span class=\"token operator\">*</span>nsproxy<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Namespace数据结构</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">nsproxy</span> \n<span class=\"token punctuation\">&#123;</span>\n\tatomic_t count<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">uts_namespace</span> <span class=\"token operator\">*</span>uts_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ipc_namespace</span> <span class=\"token operator\">*</span>ipc_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mnt_namespace</span> <span class=\"token operator\">*</span>mnt_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pid_namespace</span>\n\t<span class=\"token operator\">*</span>pid_ns_for_children<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">net</span> <span class=\"token operator\">*</span>net_ns<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Linux-对-Namespace操作方法\"><a href=\"#Linux-对-Namespace操作方法\" class=\"headerlink\" title=\"Linux 对 Namespace操作方法\"></a>Linux 对 Namespace操作方法</h3><ul>\n<li>clone<br> 在创建新进程的系统调用时，可以通过 flags 参数指定需要新建的 Namespace 类型:</li>\n</ul>\n<p>​        // CLONE_NEWCGROUP / CLONE_NEWIPC / CLONE_NEWNET / CLONE_NEWNS / CLONE_NEWPID / CLONE_NEWUSER / CLONE_NEWUTS</p>\n<p><code>int clone(int (*fn)(void *), void *child_stack, int flags, void *arg)</code></p>\n<ul>\n<li><p>setns<br> 该系统调用可以让调用进程加入某个已经存在的 Namespace 中: </p>\n<p><code>Int setns(int fd, int nstype)</code></p>\n</li>\n<li><p>unshare<br> 该系统调用可以将调用进程移动到新的 Namespace 下: </p>\n<p><code>int unshare(int flags)</code></p>\n</li>\n</ul>\n<h3 id=\"隔离性-–-Linux-Namespace\"><a href=\"#隔离性-–-Linux-Namespace\" class=\"headerlink\" title=\"隔离性 – Linux Namespace\"></a>隔离性 – Linux Namespace</h3><p><img src=\"https://s2.loli.net/2022/09/14/LzCyg1YNK9x8VHX.png\"></p>\n<h3 id=\"关于-namespace-的常用操作\"><a href=\"#关于-namespace-的常用操作\" class=\"headerlink\" title=\"关于 namespace 的常用操作\"></a>关于 namespace 的常用操作</h3><ul>\n<li><p>查看当前系统的namespace: <code>lsns –t &lt;type&gt;</code></p>\n</li>\n<li><p>查看某进程的namespace: <code>ls -la /proc/&lt;pid&gt;/ns/</code></p>\n</li>\n<li><p>进入某namespace运行命令: <code>nsenter -t &lt;pid&gt; -n ip addr</code></p>\n</li>\n</ul>\n<h2 id=\"Cgroups\"><a href=\"#Cgroups\" class=\"headerlink\" title=\"Cgroups\"></a>Cgroups</h2><ul>\n<li>Cgroups(ControlGroups)是Linux下用于对一个或一组进程进行资源控制和监控的机制;</li>\n<li>可以对诸如CPU使用时间、内存、磁盘I/O等进程所需的资源进行限制;</li>\n<li>不同资源的具体管理工作由相应的Cgroup子系统(Subsystem)来实现;</li>\n<li>针对不同类型的资源限制，只要将限制策略在不同的的子系统上进行关联即可;</li>\n<li>Cgroups在不同的系统资源管理子系统中以层级树(Hierarchy)的方式来组织管理:每个 Cgroup 都可以包含其他的子 Cgroup，因此子 Cgroup 能使用的资源除了受本 Cgroup 配置 的资源参数限制，还受到父 Cgroup 设置的资源限制 。</li>\n</ul>\n<h3 id=\"Linux-内核代码中-Cgroups-的实现\"><a href=\"#Linux-内核代码中-Cgroups-的实现\" class=\"headerlink\" title=\"Linux 内核代码中 Cgroups 的实现\"></a>Linux 内核代码中 Cgroups 的实现</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 进程数据结构</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">CONFIG_CGROUPS </span></span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">css_set</span> __rcu <span class=\"token operator\">*</span>cgroups<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> cg_list<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// css_set 是 cgroup_subsys_state 对象的集合数据结构</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">css_set</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/*\n* Set of subsystem states, one for each subsystem. This array is * immutable after creation apart from the init_css_set during\n* subsystem registration (at boot time).\n*/</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">cgroup_subsys_state</span> <span class=\"token operator\">*</span>subsys<span class=\"token punctuation\">[</span>CGROUP_SUBSYS_COUNT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"可配额-可度量-Control-Groups-cgroups\"><a href=\"#可配额-可度量-Control-Groups-cgroups\" class=\"headerlink\" title=\"可配额/可度量 - Control Groups (cgroups)\"></a>可配额/可度量 - Control Groups (cgroups)</h3><p><img src=\"https://s2.loli.net/2022/09/14/cLKanYt5Axjlp63.png\" alt=\"image.png\"></p>\n<p><strong>cgroups 实现了对资源的配额和度量。</strong></p>\n<ul>\n<li><strong>blkio</strong>:这个子系统设置限制每个块设备的输入输出控制。例如:磁盘，光盘以及USB等等; </li>\n<li> <strong>cpu</strong>:这个子系统使用调度程序为cgroup任务提供CPU的访问;</li>\n<li> <strong>cpuacct</strong>:产生cgroup任务的CPU资源报告;</li>\n<li> <strong>cpuset</strong>:如果是多核心的CPU，这个子系统会为cgroup任务分配单独的CPU和内存;</li>\n<li> <strong>devices</strong>:允许或拒绝cgroup任务对设备的访问;</li>\n<li> <strong>freezer</strong>:暂停和恢复cgroup任务;</li>\n<li> <strong>memory</strong>:设置每个cgroup的内存限制以及产生内存资源报告;</li>\n<li> <strong>net_cls</strong>:标记每个网络包以供cgroup方便使用;</li>\n<li> <strong>ns</strong>:名称空间子系统;</li>\n<li> <strong>pid</strong>:进程标识子系统。</li>\n</ul>\n<h3 id=\"cpuacct-子系统\"><a href=\"#cpuacct-子系统\" class=\"headerlink\" title=\"cpuacct 子系统\"></a>cpuacct 子系统</h3><p> 用于统计 Cgroup 及其子 Cgroup 下进程的 CPU 的使用情况。</p>\n<ul>\n<li><p>cpuacct.usage<br> 包含该 Cgroup 及其子 Cgroup 下进程使用 CPU 的时间，单位是 ns(纳秒)。</p>\n</li>\n<li><p>cpuacct.stat<br> 包含该 Cgroup 及其子 Cgroup 下进程使用的 CPU 时间，以及用户态和内核态的时间。</p>\n</li>\n</ul>\n<h3 id=\"memory-子系统\"><a href=\"#memory-子系统\" class=\"headerlink\" title=\"memory 子系统\"></a>memory 子系统</h3><ul>\n<li><p>memory.usage_in_bytes </p>\n<p>cgroup下进程使用的内存，包含cgroup及其子cgroup下的进程使用的内存。</p>\n</li>\n<li><p>memory.max_usage_in_bytes </p>\n<p>cgroup下进程使用内存的最大值，包含子cgroup的内存使用量。</p>\n</li>\n<li><p>memory.limit_in_bytes </p>\n<p>设置Cgroup下进程最多能使用的内存。如果设置为-1，表示对该cgroup的内存使用不做限制。</p>\n</li>\n<li><p>memory.oom_control</p>\n<p>设置是否在Cgroup中使用OOM(Out of Memory)Killer，默认为使用。当属于该cgroup 的进程使用的内存超过最大的限定值时，会立刻被OOM Killer处理。</p>\n</li>\n</ul>\n<h2 id=\"文件系统-Union-FS\"><a href=\"#文件系统-Union-FS\" class=\"headerlink\" title=\"文件系统 Union FS\"></a>文件系统 Union FS</h2><ul>\n<li>将不同目录挂载到同一个虚拟文件系统下(unite several directories into asingle virtual filesystem)的文件系统。</li>\n<li>支持为每一个成员目录(类似Git Branch)设定 readonly、readwrite 和 whiteout-able 权 限。</li>\n<li>文件系统分层,对readonly权限的branch可以逻辑上进行修改(增量地,不影响readonly部 分的)。</li>\n<li>通常UnionFS有两个用途,一方面可以将多个disk挂到同一个目录下,另一个更常用的就是将 一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起。</li>\n</ul>\n<h2 id=\"Docker-的文件系统\"><a href=\"#Docker-的文件系统\" class=\"headerlink\" title=\"Docker 的文件系统\"></a>Docker 的文件系统</h2><p>典型的 Linux 文件系统组成:</p>\n<ul>\n<li><p>Bootfs(bootfilesystem)</p>\n<ul>\n<li><p>Bootloader - 引导加载 kernel，</p>\n</li>\n<li><p>Kernel - 当 kernel 被加载到内存中后 umount bootfs。</p>\n</li>\n</ul>\n</li>\n<li><p>rootfs(rootfilesystem)</p>\n<ul>\n<li><p>/dev，/proc，/bin，/etc 等标准目录和文件。</p>\n</li>\n<li><p>对于不同的 linux 发行版, bootfs 基本是一致的， 但 rootfs 会有差别。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Docker-启动\"><a href=\"#Docker-启动\" class=\"headerlink\" title=\"Docker 启动\"></a>Docker 启动</h2><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li> 在启动后，首先将rootfs设置为readonly,进行一系列检查,然后将其切换为“readwrite” 供用户使用。</li>\n</ul>\n<h3 id=\"Docker启动\"><a href=\"#Docker启动\" class=\"headerlink\" title=\"Docker启动\"></a>Docker启动</h3><ul>\n<li>初始化时也是将rootfs以readonly方式加载并检查，然而接下来利用unionmount的方式 将一个 readwrite 文件系统挂载在 readonly 的 rootfs 之上;</li>\n<li>并且允许再次将下层的FS(filesystem)设定为readonly并且向上叠加;</li>\n<li>这样一组readonly和一个writeable的结构构成一个container的运行时态,每一个FS被称 作一个 FS 层。</li>\n</ul>\n<h3 id=\"写操作\"><a href=\"#写操作\" class=\"headerlink\" title=\"写操作\"></a>写操作</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">由于镜像具有共享特性，所以对容器可写层的操作需要依赖存储驱动提供的写时复制和用时分配\n机制，以此来支持对容器可写层的修改，进而提高对存储和内存资源的利用率。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>写时复制</li>\n</ul>\n<p>写时复制，即 Copy-on-Write。一个镜像可以被多个容器使用，但是不需要在内存和磁盘上做多 个拷贝。在需要对镜像提供的文件进行修改时，该文件会从镜像的文件系统被复制到容器的可写 层的文件系统进行修改，而镜像里面的文件不会改变。不同容器对文件的修改都相互独立、互不 影响。</p>\n<ul>\n<li>用时分配 </li>\n</ul>\n<p>按需分配空间，而非提前分配，即当一个文件被创建出来后，才会分配空间。</p>\n<h3 id=\"OverlayFS\"><a href=\"#OverlayFS\" class=\"headerlink\" title=\"OverlayFS\"></a>OverlayFS</h3><p>OverlayFS 也是一种与 AUFS 类似的联合文件系统，同样属于文件级的存储驱动，包含了最初的 Overlay 和更新更稳定的 overlay2。</p>\n<p>Overlay 只有两层:upper 层和 Lower 层。Lower 层代表镜像层，upper 层代表容器可写层</p>\n<p><img src=\"https://s2.loli.net/2022/09/15/GImyhMNbaWC26EQ.png\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># demo\n$ mkdir upper lower merged work\n$ echo &quot;from lower&quot; &gt; lower&#x2F;in_lower.txt\n$ echo &quot;from upper&quot; &gt; upper&#x2F;in_upper.txt\n$ echo &quot;from lower&quot; &gt; lower&#x2F;in_both.txt\n$ echo &quot;from upper&quot; &gt; upper&#x2F;in_both.txt\n$ sudo mount -t overlay overlay -o lowerdir&#x3D;&#96;pwd&#96;&#x2F;lower,upperdir&#x3D;&#96;pwd&#96;&#x2F;upper,workdir&#x3D;&#96;pwd&#96;&#x2F;work &#96;pwd&#96;&#x2F;merged\n$ cat merged&#x2F;in_both.txt\n$ delete merged&#x2F;in_both.txt $ delete merged&#x2F;in_lower.txt $ delete merged&#x2F;in_upper.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"Null（–net-null）\"><a href=\"#Null（–net-null）\" class=\"headerlink\" title=\"Null（–net=null）\"></a>Null（–net=null）</h3><ul>\n<li>把容器放入独立的网络空间但不做任何网络配置;</li>\n<li> 用户需要通过运行 docker network 命令来完成网络配置。</li>\n</ul>\n<h3 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h3><ul>\n<li>使用主机网络名空间，复用主机网络。</li>\n</ul>\n<h3 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h3><ul>\n<li>重用其他容器的网络。</li>\n</ul>\n<h3 id=\"Bridge-–net-bridge\"><a href=\"#Bridge-–net-bridge\" class=\"headerlink\" title=\"Bridge(–net=bridge)\"></a>Bridge(–net=bridge)</h3><ul>\n<li>使用 Linux 网桥和 iptables 提供容器互联，Docker 在每台主机上创建一个名叫 docker0 的网桥，通过 veth pair 来连接该主机的每一个 EndPoint。</li>\n</ul>\n<h2 id=\"Docker优势\"><a href=\"#Docker优势\" class=\"headerlink\" title=\"Docker优势\"></a>Docker优势</h2><ul>\n<li>封装性:<ul>\n<li>不需要再启动内核，所以应用扩缩容时可以秒速启动。</li>\n<li>资源利用率高，直接使用宿主机内核调度资源，性能损失小。 • 方便的 CPU、内存资源调整。</li>\n<li>能实现秒级快速回滚。</li>\n</ul>\n</li>\n<li>封装性:<ul>\n<li>一键启动所有依赖服务，测试不用为搭建环境犯愁，PE 也不用 为建站复杂担心。</li>\n<li>镜像一次编译，随处使用。</li>\n<li>测试、生产环境高度一致(数据除外)。</li>\n</ul>\n</li>\n<li>隔离性:<ul>\n<li>应用的运行环境和宿主机环境无关，完全由镜像控制，一台物 理机上部署多种环境的镜像测试。</li>\n<li>多个应用版本可以并存在机器上。</li>\n</ul>\n</li>\n<li>镜像增量分发:<ul>\n<li>   由于采用了 Union FS， 简单来说就是支持将不同的目录挂载到同 一个虚拟文件系统下，并实现一种 layer 的概念，每次发布只传输 变化的部分，节约带宽。</li>\n</ul>\n</li>\n<li>社区活跃:<ul>\n<li>Docker 命令简单、易用，社区十分活跃，且周边组件丰富。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"腾讯犀牛鸟云开发校园技术布道师养成计划第一天","top":false,"date":"2020-03-10T13:27:19.000Z","_content":"## 文件结构与页面组成\n### 小程序的文件结构\n\t\t在开发者工具的编辑器里可以看到小程序源文件的根目录下有app.js、app.json和app.wxss，这是小程序必不可少的三个主体文件\n\n- `app.json`：小程序的`公共设置`，可以对小程序进行全局配置，决定页面文件的路径、窗口表现、设置多 tab 等\n- `app.wxss`：小程序的`公共样式表`，可以配置整个小程序的文字的字体、颜色、背景，图片的大小等`样式`\n- `app.js`：小程序的逻辑\n- `pages文件夹`：这里存放着小程序的所有页面，展开pages文56565件夹就可以看到有index和logs两个`页面文件夹`；\n\n### 小程序的页面组成\n\n\t\t在每一个页面文件夹里都有四个文件，这四个文件的名称都是一样的，它们分别为：\n\n- `json文件`，和上面的app.json作用基本相同，只是app.json控制的是整个小程序的设置，而页面的json文件只控制单个页面的配置（因为有时候全局配置就够用了，所以页面配置有时候是空的）；\n- `wxml文件`，小程序的页面结构，文字、图片、音乐、视频、地图、轮播等组件都会放在这里；\n- `wxss文件`，小程序的页面样式，和app.wxss一样是控制样式，而页面的wxss文件是控制单个页面的样式；\n- `js文件`，这个是控制小程序页面的逻辑\n### 配置tabBar配置项\nicon资源：[iconfont阿里巴巴矢量图标库](https://www.iconfont.cn/)\n```json\n\n\"tabBar\": {\n    \"color\": \"#7A7E83\",\n    \"selectedColor\": \"#13227a\",\n    \"backgroundColor\": \"#ffffff\",\n    \"list\": [\n      {\n        \"pagePath\": \"pages/home/home\",\n        \"iconPath\": \"image/icon-tab1.png\",\n        \"selectedIconPath\": \"image/icon-tab1-active.png\",\n        \"text\": \"首页\"\n      },    ]\n  }\n```\n\n​\t\t这里有一个比较重要的属性就是`list`，它是一个**数组**，决定了tabBar上面的文字、icon、以及点击之后的跳转链接。\n\n![2020-03-10 18-16-31屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcp06enxiuj30xa0lxwij.jpg)\n[^关于此处的报错，应该是由于开发者工具不是最新版]\n\n## WXML与WXSS\n\n [^类似于html与css]\n\nview组件\n\n```html\n<view>\n    <view>\n        <view>WXML 模板</view>\n        <view>从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 HTML 是用来描述当前这个页面的结构，CSS 用来描述页面的样子，JS 通常是用来处理这个页面和用户的交互。</view>\n    </view>\n</view>\n```\n\n- em是相对于当前字体尺寸而言的单位，如果当前你的字体大小为16px，那1em为16px；如果当前你的字体大小为18px，那1em为18px。\n- \n\n|                           边框属性                           |                                                            |\n| :----------------------------------------------------------: | ---------------------------------------------------------- |\n|  [border](http://www.w3school.com.cn/cssref/pr_border.asp)   | 在一个声明中设置所有的边框属性。比如border:1px solid #ccc; |\n| [border-top](http://www.w3school.com.cn/cssref/pr_border-top.asp) | 在一个声明中设置所有的上边框属性。                         |\n| [border-right](http://www.w3school.com.cn/cssref/pr_border-right.asp) | 在一个声明中设置所有的右边框属性。                         |\n| [border-bottom](http://www.w3school.com.cn/cssref/pr_border-bottom.asp) | 在一个声明中设置所有的下边框属性。                         |\n| [border-left](http://www.w3school.com.cn/cssref/pr_border-left.asp) | 在一个声明中设置所有的左边框属性。                         |\n| [border-width](http://www.w3school.com.cn/cssref/pr_border-width.asp) | 设置四条边框的宽度。                                       |\n| [border-style](http://www.w3school.com.cn/cssref/pr_border-style.asp) | 设置四条边框的样式。                                       |\n| [border-color](http://www.w3school.com.cn/cssref/pr_border-color.asp) | 设置四条边框的颜色。                                       |\n| [border-radius](http://www.w3school.com.cn/cssref/pr_border-radius.asp) | 简写属性，设置所有四个 border-*-radius 属性。              |\n| [box-shadow](http://www.w3school.com.cn/cssref/pr_box-shadow.asp) | 向方框添加一个或多个阴影。                                 |\n\n![image.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcp3z1dmllj30xf0t8gsw.jpg)\n\n## 链接与图片\n\n### navigator组件\n\n> 在小程序里，我们是通过navigator组件来给页面添加链接的。有些页面在我们打开小程序的时候就可以看得到，还有些则需要我们通过点击链接进行页面切换才可以看得到，这些我们可以称之为二级页面。\n>\n> > 为了让二级页面与tabBar的页面有更加清晰的结构关系，我们可以在tabBar对应的页面文件夹下面新建要跳转的页面。比如我们的第一个tabBar是home，凡是home会跳转的二级页面，我们都建在home文件夹里。\n\n```html\n    \"pages/home/home\",\n    \"pages/home/imgshow/imgshow\",\n```\n\n### image组件\n\n> 如果我们不对图片的样式比如高度和宽度进行处理，图片显示就会变形。这是因为小程序会给图片增加一个默认的宽度和高度，宽度为300px，高度为225px。\n\n### 尺寸单位rpx\n\n在小程序里，所有的手机屏幕的宽度都为750rpx，我们可以把图片等比缩小。比如给图片添加样式:\n\n```css\n.imglist .imgitem{\n  width: 700rpx;\n  height: 415rpx;\n  margin: 20rpx;\n}\n```\n\n### 图片的裁剪\n\n> 由于我们的图片可能尺寸大小不一，或者由于iPhone、安卓手机的尺寸大小不一以及我们对图片显示的要求不一，为了让我们的图片显示正常，小程序需要对图片进行一些裁剪。\n\n我们可以给image组件添加一个widthFix模式：**宽度不变，高度自动变化，保持原图宽高比不变。**\n\n```html+css\n<view class=\"imglist\">\n    <image class=\"imgitem\" mode=\"widthFix\" src=\"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/weapp.jpg\"></image>\n</view>\n\n.imglist .imgitem{\n  width: 100%;\n}\n```\n\n也就是说设置图片的宽度为百分比样式，而高度则自动变化，保持原图宽高比不变\n\n### 图片的边框美化\n\n> 很多图片它有圆角或者阴影，这些效果是通过css的边框属性来实现的.\n\n```css\n.imglist .img{\n  border-radius: 8px;\n  box-shadow: 5px 8px 30px rgba(53,178,225,0.26);\n}\n```\n\n> 这里用到了一个颜色就是rgba颜色值。RGB前面我们要求大家查过，RGBA(R,G,B,A)的R是红色值，G是绿色值，B是蓝色值，R,G,B的值取值范围是0~255，A是Alpha透明度，取值0~1之间，越靠近0越透明。\n\n除了圆角，我们经常会有把图片做成圆形的需求，我们来看具体的例子。首先在wxml文件里输入以下代码，添加一个logo图片，\n\n```html\n<view class=\"imglist\">  <image class=\"circle\" mode=\"widthFix\" src=\"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/logo.jpg\"></image></view>\n```\n\n然后在与之对应的wxss文件里添加相应的css样式，\n\n```css\n.imglist .circle{\n    width: 200px; \n    height: 200px; \n    border-radius: 100%;\n}\n```\n\n也就是我们只需要定义了图片长宽之后，再来定义一下border-radius为100%即可把图片做成圆形。\n![2020-03-17 21-52-35 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcx9yw76zdj31hc0u07im.jpg)\n\n![2020-03-17 21-52-59 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcx9upu3itj31hc0u0qe4.jpg)\n\n## WeUI框架\n\nWeUI是一套小程序的UI框架，所谓UI框架就是一套**界面设计**方案。有了组件，我们可以用它来拼接出一个内容丰富的小程序，而有了一个UI框架，就能让我们的小程序变得更加美观。\n\n### WeUI的使用\n\n> WeUI的核心文件是**weui.wxss**\n>\n> 在**模板小程序**的根目录（**注意是在第一节建好的模板小程序里**）下新建一个style的文件夹，然后把weui小程序dist/style目录下的weui.wxss文件粘贴到style的文件夹里。\n\n使用开发者工具打开模板小程序的app.wxss文件的第二行添加以下代码：\n\n```html\n@import 'style/weui.wxss';\n```\n\n这样weui的css样式就被引入到我们的小程序中了\n\n### Flex布局\n\n> 布局也是一种样式，也属于css方面的知识哦，所以大家应该知道该在哪里给组件添加布局样式啦~没错，就是在wxss文件里~\n\n小程序的布局采用的是Flex布局。Flex是Flexible Box的缩写，意为”**弹性布局**”，用来为盒状模型提供最大的灵活性。\n\n** 让组件变成左右关系**\n\n```css\n.flex-box{\n  display: flex;\n}\n```\n\n>  我们给外层（也可以叫做父级）的view组件添加display:flex之后，这三个项目就成了左右结构的布局\n\n让组件的宽度均分**\n\n```css\n.list-item{\n  flex:1;\n}\n```\n\n> flex是弹性布局，flex:1这个样式是一个相对概念，这里的相对是指这每个list-item的宽度之比都为1\n\n**让组件内的内容垂直居中**\n\n```css\n.list-item{\n  display: flex;\n  align-items:center;/*垂直居中*/\n  justify-content: center;/*水平居中*/\n  }\n```\n\n### 全局样式与局部样式\n\n> 定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。\n\n也就是说我们在app.wxss引入了weui.wxss，我们新建的所有的二级页面，都会自动拥有weui的样式\n\n#### 使用WeUI美化文章排版\n\n#### WeUI框架的核心与延伸\n\n> 使用WeUI框架的核心在于使用它写好了样式的选择器，结构与形式不完全受限制\n\n我们只需要给view组件添加weui-article的class，view组件就有了这个写好了的样式啦。weui-article__h3，weui-article__p也是如此。\n\n如果想给weui-article__h3这个小标题换一个颜色，该怎么处理呢？通常我们不推荐直接修改weui.wxss（除非你希望所有的小标题颜色都替换掉）。我们可以给要替换颜色的view组件再增加一个class选择器，再来添加样式即可\n\n一个view组件可以有多个class，这样就非常方便我们定向给某个组件添加一个特定的样式啦。\n\n#### 模板样式的更改\n\n数据分离有个好处就是我们可以不用修改数据本身，而直接修改wxml里的排版即可。修改排版样式的核心在wxss，也就是修改css样式。\n\n我们想让图文结构是上下结构，我们可以删掉weui框架所特有的一些选择器，也就是删掉一些class\u001d，比如weui-media-box__hd_in-appmsg，weui-media-box__thumb等等，然后添加一些选择器，也就是加入一些自己命令的id和class。\n\n![2020-03-17 22-38-59 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcxayjmmo6j31hc0u0k59.jpg)\n\n","source":"_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第一天.md","raw":"---\ntitle: 腾讯犀牛鸟云开发校园技术布道师养成计划第一天\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-03-10 21:27:19\n---\n## 文件结构与页面组成\n### 小程序的文件结构\n\t\t在开发者工具的编辑器里可以看到小程序源文件的根目录下有app.js、app.json和app.wxss，这是小程序必不可少的三个主体文件\n\n- `app.json`：小程序的`公共设置`，可以对小程序进行全局配置，决定页面文件的路径、窗口表现、设置多 tab 等\n- `app.wxss`：小程序的`公共样式表`，可以配置整个小程序的文字的字体、颜色、背景，图片的大小等`样式`\n- `app.js`：小程序的逻辑\n- `pages文件夹`：这里存放着小程序的所有页面，展开pages文56565件夹就可以看到有index和logs两个`页面文件夹`；\n\n### 小程序的页面组成\n\n\t\t在每一个页面文件夹里都有四个文件，这四个文件的名称都是一样的，它们分别为：\n\n- `json文件`，和上面的app.json作用基本相同，只是app.json控制的是整个小程序的设置，而页面的json文件只控制单个页面的配置（因为有时候全局配置就够用了，所以页面配置有时候是空的）；\n- `wxml文件`，小程序的页面结构，文字、图片、音乐、视频、地图、轮播等组件都会放在这里；\n- `wxss文件`，小程序的页面样式，和app.wxss一样是控制样式，而页面的wxss文件是控制单个页面的样式；\n- `js文件`，这个是控制小程序页面的逻辑\n### 配置tabBar配置项\nicon资源：[iconfont阿里巴巴矢量图标库](https://www.iconfont.cn/)\n```json\n\n\"tabBar\": {\n    \"color\": \"#7A7E83\",\n    \"selectedColor\": \"#13227a\",\n    \"backgroundColor\": \"#ffffff\",\n    \"list\": [\n      {\n        \"pagePath\": \"pages/home/home\",\n        \"iconPath\": \"image/icon-tab1.png\",\n        \"selectedIconPath\": \"image/icon-tab1-active.png\",\n        \"text\": \"首页\"\n      },    ]\n  }\n```\n\n​\t\t这里有一个比较重要的属性就是`list`，它是一个**数组**，决定了tabBar上面的文字、icon、以及点击之后的跳转链接。\n\n![2020-03-10 18-16-31屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcp06enxiuj30xa0lxwij.jpg)\n[^关于此处的报错，应该是由于开发者工具不是最新版]\n\n## WXML与WXSS\n\n [^类似于html与css]\n\nview组件\n\n```html\n<view>\n    <view>\n        <view>WXML 模板</view>\n        <view>从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 HTML 是用来描述当前这个页面的结构，CSS 用来描述页面的样子，JS 通常是用来处理这个页面和用户的交互。</view>\n    </view>\n</view>\n```\n\n- em是相对于当前字体尺寸而言的单位，如果当前你的字体大小为16px，那1em为16px；如果当前你的字体大小为18px，那1em为18px。\n- \n\n|                           边框属性                           |                                                            |\n| :----------------------------------------------------------: | ---------------------------------------------------------- |\n|  [border](http://www.w3school.com.cn/cssref/pr_border.asp)   | 在一个声明中设置所有的边框属性。比如border:1px solid #ccc; |\n| [border-top](http://www.w3school.com.cn/cssref/pr_border-top.asp) | 在一个声明中设置所有的上边框属性。                         |\n| [border-right](http://www.w3school.com.cn/cssref/pr_border-right.asp) | 在一个声明中设置所有的右边框属性。                         |\n| [border-bottom](http://www.w3school.com.cn/cssref/pr_border-bottom.asp) | 在一个声明中设置所有的下边框属性。                         |\n| [border-left](http://www.w3school.com.cn/cssref/pr_border-left.asp) | 在一个声明中设置所有的左边框属性。                         |\n| [border-width](http://www.w3school.com.cn/cssref/pr_border-width.asp) | 设置四条边框的宽度。                                       |\n| [border-style](http://www.w3school.com.cn/cssref/pr_border-style.asp) | 设置四条边框的样式。                                       |\n| [border-color](http://www.w3school.com.cn/cssref/pr_border-color.asp) | 设置四条边框的颜色。                                       |\n| [border-radius](http://www.w3school.com.cn/cssref/pr_border-radius.asp) | 简写属性，设置所有四个 border-*-radius 属性。              |\n| [box-shadow](http://www.w3school.com.cn/cssref/pr_box-shadow.asp) | 向方框添加一个或多个阴影。                                 |\n\n![image.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcp3z1dmllj30xf0t8gsw.jpg)\n\n## 链接与图片\n\n### navigator组件\n\n> 在小程序里，我们是通过navigator组件来给页面添加链接的。有些页面在我们打开小程序的时候就可以看得到，还有些则需要我们通过点击链接进行页面切换才可以看得到，这些我们可以称之为二级页面。\n>\n> > 为了让二级页面与tabBar的页面有更加清晰的结构关系，我们可以在tabBar对应的页面文件夹下面新建要跳转的页面。比如我们的第一个tabBar是home，凡是home会跳转的二级页面，我们都建在home文件夹里。\n\n```html\n    \"pages/home/home\",\n    \"pages/home/imgshow/imgshow\",\n```\n\n### image组件\n\n> 如果我们不对图片的样式比如高度和宽度进行处理，图片显示就会变形。这是因为小程序会给图片增加一个默认的宽度和高度，宽度为300px，高度为225px。\n\n### 尺寸单位rpx\n\n在小程序里，所有的手机屏幕的宽度都为750rpx，我们可以把图片等比缩小。比如给图片添加样式:\n\n```css\n.imglist .imgitem{\n  width: 700rpx;\n  height: 415rpx;\n  margin: 20rpx;\n}\n```\n\n### 图片的裁剪\n\n> 由于我们的图片可能尺寸大小不一，或者由于iPhone、安卓手机的尺寸大小不一以及我们对图片显示的要求不一，为了让我们的图片显示正常，小程序需要对图片进行一些裁剪。\n\n我们可以给image组件添加一个widthFix模式：**宽度不变，高度自动变化，保持原图宽高比不变。**\n\n```html+css\n<view class=\"imglist\">\n    <image class=\"imgitem\" mode=\"widthFix\" src=\"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/weapp.jpg\"></image>\n</view>\n\n.imglist .imgitem{\n  width: 100%;\n}\n```\n\n也就是说设置图片的宽度为百分比样式，而高度则自动变化，保持原图宽高比不变\n\n### 图片的边框美化\n\n> 很多图片它有圆角或者阴影，这些效果是通过css的边框属性来实现的.\n\n```css\n.imglist .img{\n  border-radius: 8px;\n  box-shadow: 5px 8px 30px rgba(53,178,225,0.26);\n}\n```\n\n> 这里用到了一个颜色就是rgba颜色值。RGB前面我们要求大家查过，RGBA(R,G,B,A)的R是红色值，G是绿色值，B是蓝色值，R,G,B的值取值范围是0~255，A是Alpha透明度，取值0~1之间，越靠近0越透明。\n\n除了圆角，我们经常会有把图片做成圆形的需求，我们来看具体的例子。首先在wxml文件里输入以下代码，添加一个logo图片，\n\n```html\n<view class=\"imglist\">  <image class=\"circle\" mode=\"widthFix\" src=\"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/logo.jpg\"></image></view>\n```\n\n然后在与之对应的wxss文件里添加相应的css样式，\n\n```css\n.imglist .circle{\n    width: 200px; \n    height: 200px; \n    border-radius: 100%;\n}\n```\n\n也就是我们只需要定义了图片长宽之后，再来定义一下border-radius为100%即可把图片做成圆形。\n![2020-03-17 21-52-35 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcx9yw76zdj31hc0u07im.jpg)\n\n![2020-03-17 21-52-59 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcx9upu3itj31hc0u0qe4.jpg)\n\n## WeUI框架\n\nWeUI是一套小程序的UI框架，所谓UI框架就是一套**界面设计**方案。有了组件，我们可以用它来拼接出一个内容丰富的小程序，而有了一个UI框架，就能让我们的小程序变得更加美观。\n\n### WeUI的使用\n\n> WeUI的核心文件是**weui.wxss**\n>\n> 在**模板小程序**的根目录（**注意是在第一节建好的模板小程序里**）下新建一个style的文件夹，然后把weui小程序dist/style目录下的weui.wxss文件粘贴到style的文件夹里。\n\n使用开发者工具打开模板小程序的app.wxss文件的第二行添加以下代码：\n\n```html\n@import 'style/weui.wxss';\n```\n\n这样weui的css样式就被引入到我们的小程序中了\n\n### Flex布局\n\n> 布局也是一种样式，也属于css方面的知识哦，所以大家应该知道该在哪里给组件添加布局样式啦~没错，就是在wxss文件里~\n\n小程序的布局采用的是Flex布局。Flex是Flexible Box的缩写，意为”**弹性布局**”，用来为盒状模型提供最大的灵活性。\n\n** 让组件变成左右关系**\n\n```css\n.flex-box{\n  display: flex;\n}\n```\n\n>  我们给外层（也可以叫做父级）的view组件添加display:flex之后，这三个项目就成了左右结构的布局\n\n让组件的宽度均分**\n\n```css\n.list-item{\n  flex:1;\n}\n```\n\n> flex是弹性布局，flex:1这个样式是一个相对概念，这里的相对是指这每个list-item的宽度之比都为1\n\n**让组件内的内容垂直居中**\n\n```css\n.list-item{\n  display: flex;\n  align-items:center;/*垂直居中*/\n  justify-content: center;/*水平居中*/\n  }\n```\n\n### 全局样式与局部样式\n\n> 定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。\n\n也就是说我们在app.wxss引入了weui.wxss，我们新建的所有的二级页面，都会自动拥有weui的样式\n\n#### 使用WeUI美化文章排版\n\n#### WeUI框架的核心与延伸\n\n> 使用WeUI框架的核心在于使用它写好了样式的选择器，结构与形式不完全受限制\n\n我们只需要给view组件添加weui-article的class，view组件就有了这个写好了的样式啦。weui-article__h3，weui-article__p也是如此。\n\n如果想给weui-article__h3这个小标题换一个颜色，该怎么处理呢？通常我们不推荐直接修改weui.wxss（除非你希望所有的小标题颜色都替换掉）。我们可以给要替换颜色的view组件再增加一个class选择器，再来添加样式即可\n\n一个view组件可以有多个class，这样就非常方便我们定向给某个组件添加一个特定的样式啦。\n\n#### 模板样式的更改\n\n数据分离有个好处就是我们可以不用修改数据本身，而直接修改wxml里的排版即可。修改排版样式的核心在wxss，也就是修改css样式。\n\n我们想让图文结构是上下结构，我们可以删掉weui框架所特有的一些选择器，也就是删掉一些class\u001d，比如weui-media-box__hd_in-appmsg，weui-media-box__thumb等等，然后添加一些选择器，也就是加入一些自己命令的id和class。\n\n![2020-03-17 22-38-59 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcxayjmmo6j31hc0u0k59.jpg)\n\n","slug":"腾讯犀牛鸟云开发校园技术布道师养成计划第一天","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39b004j12mj4o883mmt","content":"<h2 id=\"文件结构与页面组成\"><a href=\"#文件结构与页面组成\" class=\"headerlink\" title=\"文件结构与页面组成\"></a>文件结构与页面组成</h2><h3 id=\"小程序的文件结构\"><a href=\"#小程序的文件结构\" class=\"headerlink\" title=\"小程序的文件结构\"></a>小程序的文件结构</h3><pre><code>    在开发者工具的编辑器里可以看到小程序源文件的根目录下有app.js、app.json和app.wxss，这是小程序必不可少的三个主体文件</code></pre>\n<ul>\n<li><code>app.json</code>：小程序的<code>公共设置</code>，可以对小程序进行全局配置，决定页面文件的路径、窗口表现、设置多 tab 等</li>\n<li><code>app.wxss</code>：小程序的<code>公共样式表</code>，可以配置整个小程序的文字的字体、颜色、背景，图片的大小等<code>样式</code></li>\n<li><code>app.js</code>：小程序的逻辑</li>\n<li><code>pages文件夹</code>：这里存放着小程序的所有页面，展开pages文56565件夹就可以看到有index和logs两个<code>页面文件夹</code>；</li>\n</ul>\n<h3 id=\"小程序的页面组成\"><a href=\"#小程序的页面组成\" class=\"headerlink\" title=\"小程序的页面组成\"></a>小程序的页面组成</h3><pre><code>    在每一个页面文件夹里都有四个文件，这四个文件的名称都是一样的，它们分别为：</code></pre>\n<ul>\n<li><code>json文件</code>，和上面的app.json作用基本相同，只是app.json控制的是整个小程序的设置，而页面的json文件只控制单个页面的配置（因为有时候全局配置就够用了，所以页面配置有时候是空的）；</li>\n<li><code>wxml文件</code>，小程序的页面结构，文字、图片、音乐、视频、地图、轮播等组件都会放在这里；</li>\n<li><code>wxss文件</code>，小程序的页面样式，和app.wxss一样是控制样式，而页面的wxss文件是控制单个页面的样式；</li>\n<li><code>js文件</code>，这个是控制小程序页面的逻辑<h3 id=\"配置tabBar配置项\"><a href=\"#配置tabBar配置项\" class=\"headerlink\" title=\"配置tabBar配置项\"></a>配置tabBar配置项</h3>icon资源：<a href=\"https://www.iconfont.cn/\">iconfont阿里巴巴矢量图标库</a><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">\n<span class=\"token property\">\"tabBar\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"color\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#7A7E83\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"selectedColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#13227a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"backgroundColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"list\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"pagePath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pages/home/home\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"iconPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/icon-tab1.png\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"selectedIconPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/icon-tab1-active.png\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"首页\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ul>\n<p>​        这里有一个比较重要的属性就是<code>list</code>，它是一个<strong>数组</strong>，决定了tabBar上面的文字、icon、以及点击之后的跳转链接。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcp06enxiuj30xa0lxwij.jpg\" alt=\"2020-03-10 18-16-31屏幕截图.png\"><br>[^关于此处的报错，应该是由于开发者工具不是最新版]</p>\n<h2 id=\"WXML与WXSS\"><a href=\"#WXML与WXSS\" class=\"headerlink\" title=\"WXML与WXSS\"></a>WXML与WXSS</h2><p> [^类似于html与css]</p>\n<p>view组件</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">&gt;</span></span>WXML 模板<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">&gt;</span></span>从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 HTML 是用来描述当前这个页面的结构，CSS 用来描述页面的样子，JS 通常是用来处理这个页面和用户的交互。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>em是相对于当前字体尺寸而言的单位，如果当前你的字体大小为16px，那1em为16px；如果当前你的字体大小为18px，那1em为18px。</li>\n<li></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">边框属性</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border.asp\">border</a></td>\n<td>在一个声明中设置所有的边框属性。比如border:1px solid #ccc;</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-top.asp\">border-top</a></td>\n<td>在一个声明中设置所有的上边框属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-right.asp\">border-right</a></td>\n<td>在一个声明中设置所有的右边框属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-bottom.asp\">border-bottom</a></td>\n<td>在一个声明中设置所有的下边框属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-left.asp\">border-left</a></td>\n<td>在一个声明中设置所有的左边框属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-width.asp\">border-width</a></td>\n<td>设置四条边框的宽度。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-style.asp\">border-style</a></td>\n<td>设置四条边框的样式。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-color.asp\">border-color</a></td>\n<td>设置四条边框的颜色。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-radius.asp\">border-radius</a></td>\n<td>简写属性，设置所有四个 border-*-radius 属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_box-shadow.asp\">box-shadow</a></td>\n<td>向方框添加一个或多个阴影。</td>\n</tr>\n</tbody></table>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcp3z1dmllj30xf0t8gsw.jpg\" alt=\"image.png\"></p>\n<h2 id=\"链接与图片\"><a href=\"#链接与图片\" class=\"headerlink\" title=\"链接与图片\"></a>链接与图片</h2><h3 id=\"navigator组件\"><a href=\"#navigator组件\" class=\"headerlink\" title=\"navigator组件\"></a>navigator组件</h3><blockquote>\n<p>在小程序里，我们是通过navigator组件来给页面添加链接的。有些页面在我们打开小程序的时候就可以看得到，还有些则需要我们通过点击链接进行页面切换才可以看得到，这些我们可以称之为二级页面。</p>\n<blockquote>\n<p>为了让二级页面与tabBar的页面有更加清晰的结构关系，我们可以在tabBar对应的页面文件夹下面新建要跳转的页面。比如我们的第一个tabBar是home，凡是home会跳转的二级页面，我们都建在home文件夹里。</p>\n</blockquote>\n</blockquote>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\"pages/home/home\",\n\"pages/home/imgshow/imgshow\",<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"image组件\"><a href=\"#image组件\" class=\"headerlink\" title=\"image组件\"></a>image组件</h3><blockquote>\n<p>如果我们不对图片的样式比如高度和宽度进行处理，图片显示就会变形。这是因为小程序会给图片增加一个默认的宽度和高度，宽度为300px，高度为225px。</p>\n</blockquote>\n<h3 id=\"尺寸单位rpx\"><a href=\"#尺寸单位rpx\" class=\"headerlink\" title=\"尺寸单位rpx\"></a>尺寸单位rpx</h3><p>在小程序里，所有的手机屏幕的宽度都为750rpx，我们可以把图片等比缩小。比如给图片添加样式:</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.imglist .imgitem</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 700rpx<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 415rpx<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 20rpx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"图片的裁剪\"><a href=\"#图片的裁剪\" class=\"headerlink\" title=\"图片的裁剪\"></a>图片的裁剪</h3><blockquote>\n<p>由于我们的图片可能尺寸大小不一，或者由于iPhone、安卓手机的尺寸大小不一以及我们对图片显示的要求不一，为了让我们的图片显示正常，小程序需要对图片进行一些裁剪。</p>\n</blockquote>\n<p>我们可以给image组件添加一个widthFix模式：<strong>宽度不变，高度自动变化，保持原图宽高比不变。</strong></p>\n<pre class=\"line-numbers language-html+css\" data-language=\"html+css\"><code class=\"language-html+css\">&lt;view class=\"imglist\"&gt;\n    &lt;image class=\"imgitem\" mode=\"widthFix\" src=\"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/weapp.jpg\"&gt;&lt;/image&gt;\n&lt;/view&gt;\n\n.imglist .imgitem{\n  width: 100%;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是说设置图片的宽度为百分比样式，而高度则自动变化，保持原图宽高比不变</p>\n<h3 id=\"图片的边框美化\"><a href=\"#图片的边框美化\" class=\"headerlink\" title=\"图片的边框美化\"></a>图片的边框美化</h3><blockquote>\n<p>很多图片它有圆角或者阴影，这些效果是通过css的边框属性来实现的.</p>\n</blockquote>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.imglist .img</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 5px 8px 30px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>53<span class=\"token punctuation\">,</span>178<span class=\"token punctuation\">,</span>225<span class=\"token punctuation\">,</span>0.26<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>这里用到了一个颜色就是rgba颜色值。RGB前面我们要求大家查过，RGBA(R,G,B,A)的R是红色值，G是绿色值，B是蓝色值，R,G,B的值取值范围是0<del>255，A是Alpha透明度，取值0</del>1之间，越靠近0越透明。</p>\n</blockquote>\n<p>除了圆角，我们经常会有把图片做成圆形的需求，我们来看具体的例子。首先在wxml文件里输入以下代码，添加一个logo图片，</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>imglist<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/logo.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后在与之对应的wxss文件里添加相应的css样式，</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.imglist .circle</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> \n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> \n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是我们只需要定义了图片长宽之后，再来定义一下border-radius为100%即可把图片做成圆形。<br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcx9yw76zdj31hc0u07im.jpg\" alt=\"2020-03-17 21-52-35 的屏幕截图.png\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcx9upu3itj31hc0u0qe4.jpg\" alt=\"2020-03-17 21-52-59 的屏幕截图.png\"></p>\n<h2 id=\"WeUI框架\"><a href=\"#WeUI框架\" class=\"headerlink\" title=\"WeUI框架\"></a>WeUI框架</h2><p>WeUI是一套小程序的UI框架，所谓UI框架就是一套<strong>界面设计</strong>方案。有了组件，我们可以用它来拼接出一个内容丰富的小程序，而有了一个UI框架，就能让我们的小程序变得更加美观。</p>\n<h3 id=\"WeUI的使用\"><a href=\"#WeUI的使用\" class=\"headerlink\" title=\"WeUI的使用\"></a>WeUI的使用</h3><blockquote>\n<p>WeUI的核心文件是<strong>weui.wxss</strong></p>\n<p>在<strong>模板小程序</strong>的根目录（<strong>注意是在第一节建好的模板小程序里</strong>）下新建一个style的文件夹，然后把weui小程序dist/style目录下的weui.wxss文件粘贴到style的文件夹里。</p>\n</blockquote>\n<p>使用开发者工具打开模板小程序的app.wxss文件的第二行添加以下代码：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">@import 'style/weui.wxss';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样weui的css样式就被引入到我们的小程序中了</p>\n<h3 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h3><blockquote>\n<p>布局也是一种样式，也属于css方面的知识哦，所以大家应该知道该在哪里给组件添加布局样式啦<del>没错，就是在wxss文件里</del></p>\n</blockquote>\n<p>小程序的布局采用的是Flex布局。Flex是Flexible Box的缩写，意为”<strong>弹性布局</strong>”，用来为盒状模型提供最大的灵活性。</p>\n<p>** 让组件变成左右关系**</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.flex-box</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p> 我们给外层（也可以叫做父级）的view组件添加display:flex之后，这三个项目就成了左右结构的布局</p>\n</blockquote>\n<p>让组件的宽度均分**</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.list-item</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>flex是弹性布局，flex:1这个样式是一个相对概念，这里的相对是指这每个list-item的宽度之比都为1</p>\n</blockquote>\n<p><strong>让组件内的内容垂直居中</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.list-item</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span><span class=\"token comment\">/*垂直居中*/</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><span class=\"token comment\">/*水平居中*/</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"全局样式与局部样式\"><a href=\"#全局样式与局部样式\" class=\"headerlink\" title=\"全局样式与局部样式\"></a>全局样式与局部样式</h3><blockquote>\n<p>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p>\n</blockquote>\n<p>也就是说我们在app.wxss引入了weui.wxss，我们新建的所有的二级页面，都会自动拥有weui的样式</p>\n<h4 id=\"使用WeUI美化文章排版\"><a href=\"#使用WeUI美化文章排版\" class=\"headerlink\" title=\"使用WeUI美化文章排版\"></a>使用WeUI美化文章排版</h4><h4 id=\"WeUI框架的核心与延伸\"><a href=\"#WeUI框架的核心与延伸\" class=\"headerlink\" title=\"WeUI框架的核心与延伸\"></a>WeUI框架的核心与延伸</h4><blockquote>\n<p>使用WeUI框架的核心在于使用它写好了样式的选择器，结构与形式不完全受限制</p>\n</blockquote>\n<p>我们只需要给view组件添加weui-article的class，view组件就有了这个写好了的样式啦。weui-article__h3，weui-article__p也是如此。</p>\n<p>如果想给weui-article__h3这个小标题换一个颜色，该怎么处理呢？通常我们不推荐直接修改weui.wxss（除非你希望所有的小标题颜色都替换掉）。我们可以给要替换颜色的view组件再增加一个class选择器，再来添加样式即可</p>\n<p>一个view组件可以有多个class，这样就非常方便我们定向给某个组件添加一个特定的样式啦。</p>\n<h4 id=\"模板样式的更改\"><a href=\"#模板样式的更改\" class=\"headerlink\" title=\"模板样式的更改\"></a>模板样式的更改</h4><p>数据分离有个好处就是我们可以不用修改数据本身，而直接修改wxml里的排版即可。修改排版样式的核心在wxss，也就是修改css样式。</p>\n<p>我们想让图文结构是上下结构，我们可以删掉weui框架所特有的一些选择器，也就是删掉一些class\u001d，比如weui-media-box__hd_in-appmsg，weui-media-box__thumb等等，然后添加一些选择器，也就是加入一些自己命令的id和class。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcxayjmmo6j31hc0u0k59.jpg\" alt=\"2020-03-17 22-38-59 的屏幕截图.png\"></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"文件结构与页面组成\"><a href=\"#文件结构与页面组成\" class=\"headerlink\" title=\"文件结构与页面组成\"></a>文件结构与页面组成</h2><h3 id=\"小程序的文件结构\"><a href=\"#小程序的文件结构\" class=\"headerlink\" title=\"小程序的文件结构\"></a>小程序的文件结构</h3><pre><code>    在开发者工具的编辑器里可以看到小程序源文件的根目录下有app.js、app.json和app.wxss，这是小程序必不可少的三个主体文件</code></pre>\n<ul>\n<li><code>app.json</code>：小程序的<code>公共设置</code>，可以对小程序进行全局配置，决定页面文件的路径、窗口表现、设置多 tab 等</li>\n<li><code>app.wxss</code>：小程序的<code>公共样式表</code>，可以配置整个小程序的文字的字体、颜色、背景，图片的大小等<code>样式</code></li>\n<li><code>app.js</code>：小程序的逻辑</li>\n<li><code>pages文件夹</code>：这里存放着小程序的所有页面，展开pages文56565件夹就可以看到有index和logs两个<code>页面文件夹</code>；</li>\n</ul>\n<h3 id=\"小程序的页面组成\"><a href=\"#小程序的页面组成\" class=\"headerlink\" title=\"小程序的页面组成\"></a>小程序的页面组成</h3><pre><code>    在每一个页面文件夹里都有四个文件，这四个文件的名称都是一样的，它们分别为：</code></pre>\n<ul>\n<li><code>json文件</code>，和上面的app.json作用基本相同，只是app.json控制的是整个小程序的设置，而页面的json文件只控制单个页面的配置（因为有时候全局配置就够用了，所以页面配置有时候是空的）；</li>\n<li><code>wxml文件</code>，小程序的页面结构，文字、图片、音乐、视频、地图、轮播等组件都会放在这里；</li>\n<li><code>wxss文件</code>，小程序的页面样式，和app.wxss一样是控制样式，而页面的wxss文件是控制单个页面的样式；</li>\n<li><code>js文件</code>，这个是控制小程序页面的逻辑<h3 id=\"配置tabBar配置项\"><a href=\"#配置tabBar配置项\" class=\"headerlink\" title=\"配置tabBar配置项\"></a>配置tabBar配置项</h3>icon资源：<a href=\"https://www.iconfont.cn/\">iconfont阿里巴巴矢量图标库</a><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">\n<span class=\"token property\">\"tabBar\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"color\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#7A7E83\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"selectedColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#13227a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"backgroundColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"list\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"pagePath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pages/home/home\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"iconPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/icon-tab1.png\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"selectedIconPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/icon-tab1-active.png\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"首页\"</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ul>\n<p>​        这里有一个比较重要的属性就是<code>list</code>，它是一个<strong>数组</strong>，决定了tabBar上面的文字、icon、以及点击之后的跳转链接。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcp06enxiuj30xa0lxwij.jpg\" alt=\"2020-03-10 18-16-31屏幕截图.png\"><br>[^关于此处的报错，应该是由于开发者工具不是最新版]</p>\n<h2 id=\"WXML与WXSS\"><a href=\"#WXML与WXSS\" class=\"headerlink\" title=\"WXML与WXSS\"></a>WXML与WXSS</h2><p> [^类似于html与css]</p>\n<p>view组件</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>WXML 模板<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 HTML 是用来描述当前这个页面的结构，CSS 用来描述页面的样子，JS 通常是用来处理这个页面和用户的交互。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>em是相对于当前字体尺寸而言的单位，如果当前你的字体大小为16px，那1em为16px；如果当前你的字体大小为18px，那1em为18px。</li>\n<li></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">边框属性</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border.asp\">border</a></td>\n<td>在一个声明中设置所有的边框属性。比如border:1px solid #ccc;</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-top.asp\">border-top</a></td>\n<td>在一个声明中设置所有的上边框属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-right.asp\">border-right</a></td>\n<td>在一个声明中设置所有的右边框属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-bottom.asp\">border-bottom</a></td>\n<td>在一个声明中设置所有的下边框属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-left.asp\">border-left</a></td>\n<td>在一个声明中设置所有的左边框属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-width.asp\">border-width</a></td>\n<td>设置四条边框的宽度。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-style.asp\">border-style</a></td>\n<td>设置四条边框的样式。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-color.asp\">border-color</a></td>\n<td>设置四条边框的颜色。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-radius.asp\">border-radius</a></td>\n<td>简写属性，设置所有四个 border-*-radius 属性。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://www.w3school.com.cn/cssref/pr_box-shadow.asp\">box-shadow</a></td>\n<td>向方框添加一个或多个阴影。</td>\n</tr>\n</tbody></table>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcp3z1dmllj30xf0t8gsw.jpg\" alt=\"image.png\"></p>\n<h2 id=\"链接与图片\"><a href=\"#链接与图片\" class=\"headerlink\" title=\"链接与图片\"></a>链接与图片</h2><h3 id=\"navigator组件\"><a href=\"#navigator组件\" class=\"headerlink\" title=\"navigator组件\"></a>navigator组件</h3><blockquote>\n<p>在小程序里，我们是通过navigator组件来给页面添加链接的。有些页面在我们打开小程序的时候就可以看得到，还有些则需要我们通过点击链接进行页面切换才可以看得到，这些我们可以称之为二级页面。</p>\n<blockquote>\n<p>为了让二级页面与tabBar的页面有更加清晰的结构关系，我们可以在tabBar对应的页面文件夹下面新建要跳转的页面。比如我们的第一个tabBar是home，凡是home会跳转的二级页面，我们都建在home文件夹里。</p>\n</blockquote>\n</blockquote>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\"pages/home/home\",\n\"pages/home/imgshow/imgshow\",<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"image组件\"><a href=\"#image组件\" class=\"headerlink\" title=\"image组件\"></a>image组件</h3><blockquote>\n<p>如果我们不对图片的样式比如高度和宽度进行处理，图片显示就会变形。这是因为小程序会给图片增加一个默认的宽度和高度，宽度为300px，高度为225px。</p>\n</blockquote>\n<h3 id=\"尺寸单位rpx\"><a href=\"#尺寸单位rpx\" class=\"headerlink\" title=\"尺寸单位rpx\"></a>尺寸单位rpx</h3><p>在小程序里，所有的手机屏幕的宽度都为750rpx，我们可以把图片等比缩小。比如给图片添加样式:</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.imglist .imgitem</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 700rpx<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 415rpx<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 20rpx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"图片的裁剪\"><a href=\"#图片的裁剪\" class=\"headerlink\" title=\"图片的裁剪\"></a>图片的裁剪</h3><blockquote>\n<p>由于我们的图片可能尺寸大小不一，或者由于iPhone、安卓手机的尺寸大小不一以及我们对图片显示的要求不一，为了让我们的图片显示正常，小程序需要对图片进行一些裁剪。</p>\n</blockquote>\n<p>我们可以给image组件添加一个widthFix模式：<strong>宽度不变，高度自动变化，保持原图宽高比不变。</strong></p>\n<pre class=\"line-numbers language-html+css\" data-language=\"html+css\"><code class=\"language-html+css\">&lt;view class&#x3D;&quot;imglist&quot;&gt;\n    &lt;image class&#x3D;&quot;imgitem&quot; mode&#x3D;&quot;widthFix&quot; src&#x3D;&quot;https:&#x2F;&#x2F;hackwork.oss-cn-shanghai.aliyuncs.com&#x2F;lesson&#x2F;weapp&#x2F;4&#x2F;weapp.jpg&quot;&gt;&lt;&#x2F;image&gt;\n&lt;&#x2F;view&gt;\n\n.imglist .imgitem&#123;\n  width: 100%;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是说设置图片的宽度为百分比样式，而高度则自动变化，保持原图宽高比不变</p>\n<h3 id=\"图片的边框美化\"><a href=\"#图片的边框美化\" class=\"headerlink\" title=\"图片的边框美化\"></a>图片的边框美化</h3><blockquote>\n<p>很多图片它有圆角或者阴影，这些效果是通过css的边框属性来实现的.</p>\n</blockquote>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.imglist .img</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 5px 8px 30px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>53<span class=\"token punctuation\">,</span>178<span class=\"token punctuation\">,</span>225<span class=\"token punctuation\">,</span>0.26<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>这里用到了一个颜色就是rgba颜色值。RGB前面我们要求大家查过，RGBA(R,G,B,A)的R是红色值，G是绿色值，B是蓝色值，R,G,B的值取值范围是0<del>255，A是Alpha透明度，取值0</del>1之间，越靠近0越透明。</p>\n</blockquote>\n<p>除了圆角，我们经常会有把图片做成圆形的需求，我们来看具体的例子。首先在wxml文件里输入以下代码，添加一个logo图片，</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>imglist<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/logo.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后在与之对应的wxss文件里添加相应的css样式，</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.imglist .circle</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> \n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> \n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是我们只需要定义了图片长宽之后，再来定义一下border-radius为100%即可把图片做成圆形。<br><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcx9yw76zdj31hc0u07im.jpg\" alt=\"2020-03-17 21-52-35 的屏幕截图.png\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcx9upu3itj31hc0u0qe4.jpg\" alt=\"2020-03-17 21-52-59 的屏幕截图.png\"></p>\n<h2 id=\"WeUI框架\"><a href=\"#WeUI框架\" class=\"headerlink\" title=\"WeUI框架\"></a>WeUI框架</h2><p>WeUI是一套小程序的UI框架，所谓UI框架就是一套<strong>界面设计</strong>方案。有了组件，我们可以用它来拼接出一个内容丰富的小程序，而有了一个UI框架，就能让我们的小程序变得更加美观。</p>\n<h3 id=\"WeUI的使用\"><a href=\"#WeUI的使用\" class=\"headerlink\" title=\"WeUI的使用\"></a>WeUI的使用</h3><blockquote>\n<p>WeUI的核心文件是<strong>weui.wxss</strong></p>\n<p>在<strong>模板小程序</strong>的根目录（<strong>注意是在第一节建好的模板小程序里</strong>）下新建一个style的文件夹，然后把weui小程序dist/style目录下的weui.wxss文件粘贴到style的文件夹里。</p>\n</blockquote>\n<p>使用开发者工具打开模板小程序的app.wxss文件的第二行添加以下代码：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">@import 'style/weui.wxss';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样weui的css样式就被引入到我们的小程序中了</p>\n<h3 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h3><blockquote>\n<p>布局也是一种样式，也属于css方面的知识哦，所以大家应该知道该在哪里给组件添加布局样式啦<del>没错，就是在wxss文件里</del></p>\n</blockquote>\n<p>小程序的布局采用的是Flex布局。Flex是Flexible Box的缩写，意为”<strong>弹性布局</strong>”，用来为盒状模型提供最大的灵活性。</p>\n<p>** 让组件变成左右关系**</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.flex-box</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p> 我们给外层（也可以叫做父级）的view组件添加display:flex之后，这三个项目就成了左右结构的布局</p>\n</blockquote>\n<p>让组件的宽度均分**</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.list-item</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>flex是弹性布局，flex:1这个样式是一个相对概念，这里的相对是指这每个list-item的宽度之比都为1</p>\n</blockquote>\n<p><strong>让组件内的内容垂直居中</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.list-item</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span><span class=\"token comment\">/*垂直居中*/</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><span class=\"token comment\">/*水平居中*/</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"全局样式与局部样式\"><a href=\"#全局样式与局部样式\" class=\"headerlink\" title=\"全局样式与局部样式\"></a>全局样式与局部样式</h3><blockquote>\n<p>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p>\n</blockquote>\n<p>也就是说我们在app.wxss引入了weui.wxss，我们新建的所有的二级页面，都会自动拥有weui的样式</p>\n<h4 id=\"使用WeUI美化文章排版\"><a href=\"#使用WeUI美化文章排版\" class=\"headerlink\" title=\"使用WeUI美化文章排版\"></a>使用WeUI美化文章排版</h4><h4 id=\"WeUI框架的核心与延伸\"><a href=\"#WeUI框架的核心与延伸\" class=\"headerlink\" title=\"WeUI框架的核心与延伸\"></a>WeUI框架的核心与延伸</h4><blockquote>\n<p>使用WeUI框架的核心在于使用它写好了样式的选择器，结构与形式不完全受限制</p>\n</blockquote>\n<p>我们只需要给view组件添加weui-article的class，view组件就有了这个写好了的样式啦。weui-article__h3，weui-article__p也是如此。</p>\n<p>如果想给weui-article__h3这个小标题换一个颜色，该怎么处理呢？通常我们不推荐直接修改weui.wxss（除非你希望所有的小标题颜色都替换掉）。我们可以给要替换颜色的view组件再增加一个class选择器，再来添加样式即可</p>\n<p>一个view组件可以有多个class，这样就非常方便我们定向给某个组件添加一个特定的样式啦。</p>\n<h4 id=\"模板样式的更改\"><a href=\"#模板样式的更改\" class=\"headerlink\" title=\"模板样式的更改\"></a>模板样式的更改</h4><p>数据分离有个好处就是我们可以不用修改数据本身，而直接修改wxml里的排版即可。修改排版样式的核心在wxss，也就是修改css样式。</p>\n<p>我们想让图文结构是上下结构，我们可以删掉weui框架所特有的一些选择器，也就是删掉一些class\u001d，比如weui-media-box__hd_in-appmsg，weui-media-box__thumb等等，然后添加一些选择器，也就是加入一些自己命令的id和class。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcxayjmmo6j31hc0u0k59.jpg\" alt=\"2020-03-17 22-38-59 的屏幕截图.png\"></p>\n"},{"title":"消息队列-RabbitMQ","top":false,"date":"2020-07-25T11:16:05.000Z","_content":"\n# 一、什么是消息队列\n\n​\t\tMQ全称为Message Queue 消息队列（MQ）是一种应用程序对应用程序的通信方法。MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取队列中的消息。这样发布者和使用者都不用知道对方的存在。\n\n\n> 生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。\n\n![img](https://i.loli.net/2020/08/12/aCX1Zi5bmFQxU86.png)\n> 队列是一种先进先出的数据结构。**FIFO**\n>\n> 消息队列可以简单理解为：把要传输的数据放在队列中。\n>\n> 低类聚，高耦合。\n\n# 二、为什么要用消息队列\n\n消息队列中间件是分布式系统中重要的组件，主要解决应用**<u>解耦，异步消息，流量削锋</u>**等问题，实现高性能，高可用，可伸缩和最终一致性架构。目前使用较多的消息队列有，ZeroMQ，Kafka，MetaMQ，RocketMQ。eg：\n\n![外卖系统](https://i.loli.net/2020/08/12/m7D6FRaAGzqYbnl.png)\n\n# 三、 RabbitMQ\n\n[技术文档](https://www.rabbitmq.com/tutorials/tutorial-one-python.html)   \n\n[RabbitMQ 安装和配置]([https://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159715947119195162519670%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=159715947119195162519670&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&utm_term=ubuntu+rabbitmq%E5%AE%89%E8%A3%85&spm=1018.2118.3001.4187](https://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%7B%22request%5Fid%22%3A%22159715947119195162519670%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&request_id=159715947119195162519670&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&utm_term=ubuntu+rabbitmq安装&spm=1018.2118.3001.4187))\n\n```python\n简单模式\n\t生产者：\n\t\t1、连接rabbitmq\n\t\t2、创建队列\n\t\t3、向指定队列插入数据\n\t消费者：\n\t\t1、连接rabbitmq\n        2、监听模式\n        3、确定回调函数\n\n参数使用\n\t1、应答参数\n    2、持久化参数\n    3、分发参数\n    \t- 轮询分发\n        - 公平分发\n\n交换机模式\n\t- 发布订阅模式  \t exchange_type='fanout'\n\t- 关键字模式\t\t exchange_type='direct'\n\t- 模糊匹配模式\texchange_type='topic'\n```\n\n## 1、简单模式\n\n```python\n###### 生产者 producer.py\nimport pika\n\n# 连接rabbitmq\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# 创建队列\nchannel.queue_declare(queue='hello')\n\n# 向指定队列插入数据\nchannel.basic_publish(exchange='',    # 简单模式\n                      routing_key='hello',  # 指定队列\n                      body='Hello World!')  # 插入数据\n\nprint(\" [x] Sent 'Hello World!'\")\n\n\n###### 消费者 consumer.py\nimport pika\n\t\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# 创建队列\nchannel.queue_declare(queue='hello')\n\n# 确定回调函数\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body)\n\n# 确定监听队列\nchannel.basic_consume(queue='hello',\n                      auto_ack=True,    # 默认应答\n                      on_message_callback=callback)\n\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\n# 正式监听\nchannel.start_consuming()\n```\n\n## 2、参数使用\n\n```python\n1、应答参数\nauto_ack=False\nch.basic_ack(delivery_tag=method.delivery_tag)\n\n2、持久化参数\n#声明queue\nchannel.queue_declare(queue='hello2', durable=True)  # 若声明过，则换一个名字\n \nchannel.basic_publish(exchange='',\n                      routing_key='hello2',\n                      body='Hello World!',\n                      properties=pika.BasicProperties(\n                          delivery_mode=2,  # make message persistent\n                          )\n                      )\n\n3、分发参数\n\"\"\"\n有两个消费者同时监听一个的队列。其中一个线程sleep2秒，另一个消费者线程sleep1秒，但是处理的消息是一样多。这种方式叫轮询分发（round-robin）不管谁忙，都不会多给消息，总是你一个我一个。\n想要做到公平分发（fair dispatch），必须关闭自动应答ack，改成手动应答。使用basicQos(perfetch=1)限制每次只发送不超过1条消息到同一个消费者，消费者必须手动反馈告知队列，才会发送下一个。\n\"\"\"\nchannel.basic_qos(prefetch_count=1)\n```\n\n## 3、交换机模式\n\n* 发布订阅模式  \t exchange_type='fanout'\n  ![发布订阅模式](https://i.loli.net/2020/08/12/q6C2o1iysAfcra8.png)\n  \n* 关键字模式\t\t exchange_type='direct'\n  ![关键字模式](https://i.loli.net/2020/08/12/2ajVSAnkNUleKmr.png)\n\n* 模糊匹配模式\texchange_type='topic'\n\n  > 通配符交换机”与之前的路由模式相比，它将信息的传输类型的key更加细化，以“key1.key2.keyN....”的模式来指定信息传输的key的大类型和大类型下面的小类型，让消费者可以更加精细的确认自己想要获取的信息类型。而在消费者一段，不用精确的指定具体到哪一个大类型下的小类型的key，而是可以使用类似正则表达式(但与正则表达式规则完全不同)的通配符在指定一定范围或符合某一个字符串匹配规则的key，来获取想要的信息。\n  >\n  > “通配符交换机”（Topic Exchange）将路由键和某模式进行匹配。此时队列需要绑定在一个模式上。符号“#”匹配一个或多个词，符号“*”仅匹配一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.*”只会匹配到“audit.irs”。（这里与我们一般的正则表达式的“*”和“#”刚好相反，这里我们需要注意一下。）\n\n ![模糊匹配模式](https://i.loli.net/2020/08/12/oPBMjlCpHbaqNgf.png)\n\n\n\n> 源码笔记：[https://github.com/lei025/leetcode/tree/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97](https://github.com/lei025/leetcode/tree/master/消息队列)\n\nhttps://www.sojson.com/blog/48.html","source":"_posts/消息队列-RabbitMQ.md","raw":"---\ntitle: 消息队列-RabbitMQ\ntags:\n  - RabbitMQ\n  - Python\ncategories:\n  - 消息队列\ntop: false\ndate: 2020-07-25 19:16:05\n---\n\n# 一、什么是消息队列\n\n​\t\tMQ全称为Message Queue 消息队列（MQ）是一种应用程序对应用程序的通信方法。MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取队列中的消息。这样发布者和使用者都不用知道对方的存在。\n\n\n> 生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。\n\n![img](https://i.loli.net/2020/08/12/aCX1Zi5bmFQxU86.png)\n> 队列是一种先进先出的数据结构。**FIFO**\n>\n> 消息队列可以简单理解为：把要传输的数据放在队列中。\n>\n> 低类聚，高耦合。\n\n# 二、为什么要用消息队列\n\n消息队列中间件是分布式系统中重要的组件，主要解决应用**<u>解耦，异步消息，流量削锋</u>**等问题，实现高性能，高可用，可伸缩和最终一致性架构。目前使用较多的消息队列有，ZeroMQ，Kafka，MetaMQ，RocketMQ。eg：\n\n![外卖系统](https://i.loli.net/2020/08/12/m7D6FRaAGzqYbnl.png)\n\n# 三、 RabbitMQ\n\n[技术文档](https://www.rabbitmq.com/tutorials/tutorial-one-python.html)   \n\n[RabbitMQ 安装和配置]([https://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159715947119195162519670%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=159715947119195162519670&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&utm_term=ubuntu+rabbitmq%E5%AE%89%E8%A3%85&spm=1018.2118.3001.4187](https://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%7B%22request%5Fid%22%3A%22159715947119195162519670%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&request_id=159715947119195162519670&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&utm_term=ubuntu+rabbitmq安装&spm=1018.2118.3001.4187))\n\n```python\n简单模式\n\t生产者：\n\t\t1、连接rabbitmq\n\t\t2、创建队列\n\t\t3、向指定队列插入数据\n\t消费者：\n\t\t1、连接rabbitmq\n        2、监听模式\n        3、确定回调函数\n\n参数使用\n\t1、应答参数\n    2、持久化参数\n    3、分发参数\n    \t- 轮询分发\n        - 公平分发\n\n交换机模式\n\t- 发布订阅模式  \t exchange_type='fanout'\n\t- 关键字模式\t\t exchange_type='direct'\n\t- 模糊匹配模式\texchange_type='topic'\n```\n\n## 1、简单模式\n\n```python\n###### 生产者 producer.py\nimport pika\n\n# 连接rabbitmq\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# 创建队列\nchannel.queue_declare(queue='hello')\n\n# 向指定队列插入数据\nchannel.basic_publish(exchange='',    # 简单模式\n                      routing_key='hello',  # 指定队列\n                      body='Hello World!')  # 插入数据\n\nprint(\" [x] Sent 'Hello World!'\")\n\n\n###### 消费者 consumer.py\nimport pika\n\t\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# 创建队列\nchannel.queue_declare(queue='hello')\n\n# 确定回调函数\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body)\n\n# 确定监听队列\nchannel.basic_consume(queue='hello',\n                      auto_ack=True,    # 默认应答\n                      on_message_callback=callback)\n\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\n# 正式监听\nchannel.start_consuming()\n```\n\n## 2、参数使用\n\n```python\n1、应答参数\nauto_ack=False\nch.basic_ack(delivery_tag=method.delivery_tag)\n\n2、持久化参数\n#声明queue\nchannel.queue_declare(queue='hello2', durable=True)  # 若声明过，则换一个名字\n \nchannel.basic_publish(exchange='',\n                      routing_key='hello2',\n                      body='Hello World!',\n                      properties=pika.BasicProperties(\n                          delivery_mode=2,  # make message persistent\n                          )\n                      )\n\n3、分发参数\n\"\"\"\n有两个消费者同时监听一个的队列。其中一个线程sleep2秒，另一个消费者线程sleep1秒，但是处理的消息是一样多。这种方式叫轮询分发（round-robin）不管谁忙，都不会多给消息，总是你一个我一个。\n想要做到公平分发（fair dispatch），必须关闭自动应答ack，改成手动应答。使用basicQos(perfetch=1)限制每次只发送不超过1条消息到同一个消费者，消费者必须手动反馈告知队列，才会发送下一个。\n\"\"\"\nchannel.basic_qos(prefetch_count=1)\n```\n\n## 3、交换机模式\n\n* 发布订阅模式  \t exchange_type='fanout'\n  ![发布订阅模式](https://i.loli.net/2020/08/12/q6C2o1iysAfcra8.png)\n  \n* 关键字模式\t\t exchange_type='direct'\n  ![关键字模式](https://i.loli.net/2020/08/12/2ajVSAnkNUleKmr.png)\n\n* 模糊匹配模式\texchange_type='topic'\n\n  > 通配符交换机”与之前的路由模式相比，它将信息的传输类型的key更加细化，以“key1.key2.keyN....”的模式来指定信息传输的key的大类型和大类型下面的小类型，让消费者可以更加精细的确认自己想要获取的信息类型。而在消费者一段，不用精确的指定具体到哪一个大类型下的小类型的key，而是可以使用类似正则表达式(但与正则表达式规则完全不同)的通配符在指定一定范围或符合某一个字符串匹配规则的key，来获取想要的信息。\n  >\n  > “通配符交换机”（Topic Exchange）将路由键和某模式进行匹配。此时队列需要绑定在一个模式上。符号“#”匹配一个或多个词，符号“*”仅匹配一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.*”只会匹配到“audit.irs”。（这里与我们一般的正则表达式的“*”和“#”刚好相反，这里我们需要注意一下。）\n\n ![模糊匹配模式](https://i.loli.net/2020/08/12/oPBMjlCpHbaqNgf.png)\n\n\n\n> 源码笔记：[https://github.com/lei025/leetcode/tree/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97](https://github.com/lei025/leetcode/tree/master/消息队列)\n\nhttps://www.sojson.com/blog/48.html","slug":"消息队列-RabbitMQ","published":1,"updated":"2022-08-25T14:12:05.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39b004m12mj5l6fgj29","content":"<h1 id=\"一、什么是消息队列\"><a href=\"#一、什么是消息队列\" class=\"headerlink\" title=\"一、什么是消息队列\"></a>一、什么是消息队列</h1><p>​        MQ全称为Message Queue 消息队列（MQ）是一种应用程序对应用程序的通信方法。MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取队列中的消息。这样发布者和使用者都不用知道对方的存在。</p>\n<blockquote>\n<p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/08/12/aCX1Zi5bmFQxU86.png\" alt=\"img\"></p>\n<blockquote>\n<p>队列是一种先进先出的数据结构。<strong>FIFO</strong></p>\n<p>消息队列可以简单理解为：把要传输的数据放在队列中。</p>\n<p>低类聚，高耦合。</p>\n</blockquote>\n<h1 id=\"二、为什么要用消息队列\"><a href=\"#二、为什么要用消息队列\" class=\"headerlink\" title=\"二、为什么要用消息队列\"></a>二、为什么要用消息队列</h1><p>消息队列中间件是分布式系统中重要的组件，主要解决应用**<u>解耦，异步消息，流量削锋</u>**等问题，实现高性能，高可用，可伸缩和最终一致性架构。目前使用较多的消息队列有，ZeroMQ，Kafka，MetaMQ，RocketMQ。eg：</p>\n<p><img src=\"https://i.loli.net/2020/08/12/m7D6FRaAGzqYbnl.png\" alt=\"外卖系统\"></p>\n<h1 id=\"三、-RabbitMQ\"><a href=\"#三、-RabbitMQ\" class=\"headerlink\" title=\"三、 RabbitMQ\"></a>三、 RabbitMQ</h1><p><a href=\"https://www.rabbitmq.com/tutorials/tutorial-one-python.html\">技术文档</a>   </p>\n<p><a href=\"%5Bhttps://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159715947119195162519670%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=159715947119195162519670&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&amp;utm_term=ubuntu+rabbitmq%E5%AE%89%E8%A3%85&amp;spm=1018.2118.3001.4187%5D(https://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%7B%22request_id%22:%22159715947119195162519670%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=159715947119195162519670&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&amp;utm_term=ubuntu+rabbitmq%E5%AE%89%E8%A3%85&amp;spm=1018.2118.3001.4187)\">RabbitMQ 安装和配置</a></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">简单模式\n\t生产者：\n\t\t<span class=\"token number\">1</span>、连接rabbitmq\n\t\t<span class=\"token number\">2</span>、创建队列\n\t\t<span class=\"token number\">3</span>、向指定队列插入数据\n\t消费者：\n\t\t<span class=\"token number\">1</span>、连接rabbitmq\n        <span class=\"token number\">2</span>、监听模式\n        <span class=\"token number\">3</span>、确定回调函数\n\n参数使用\n\t<span class=\"token number\">1</span>、应答参数\n    <span class=\"token number\">2</span>、持久化参数\n    <span class=\"token number\">3</span>、分发参数\n    \t<span class=\"token operator\">-</span> 轮询分发\n        <span class=\"token operator\">-</span> 公平分发\n\n交换机模式\n\t<span class=\"token operator\">-</span> 发布订阅模式  \t exchange_type<span class=\"token operator\">=</span><span class=\"token string\">'fanout'</span>\n\t<span class=\"token operator\">-</span> 关键字模式\t\t exchange_type<span class=\"token operator\">=</span><span class=\"token string\">'direct'</span>\n\t<span class=\"token operator\">-</span> 模糊匹配模式\texchange_type<span class=\"token operator\">=</span><span class=\"token string\">'topic'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"1、简单模式\"><a href=\"#1、简单模式\" class=\"headerlink\" title=\"1、简单模式\"></a>1、简单模式</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">###### 生产者 producer.py</span>\n<span class=\"token keyword\">import</span> pika\n\n<span class=\"token comment\"># 连接rabbitmq</span>\nconnection <span class=\"token operator\">=</span> pika<span class=\"token punctuation\">.</span>BlockingConnection<span class=\"token punctuation\">(</span>pika<span class=\"token punctuation\">.</span>ConnectionParameters<span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nchannel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建队列</span>\nchannel<span class=\"token punctuation\">.</span>queue_declare<span class=\"token punctuation\">(</span>queue<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 向指定队列插入数据</span>\nchannel<span class=\"token punctuation\">.</span>basic_publish<span class=\"token punctuation\">(</span>exchange<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 简单模式</span>\n                      routing_key<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定队列</span>\n                      body<span class=\"token operator\">=</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 插入数据</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [x] Sent 'Hello World!'\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">###### 消费者 consumer.py</span>\n<span class=\"token keyword\">import</span> pika\n\t\nconnection <span class=\"token operator\">=</span> pika<span class=\"token punctuation\">.</span>BlockingConnection<span class=\"token punctuation\">(</span>pika<span class=\"token punctuation\">.</span>ConnectionParameters<span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nchannel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建队列</span>\nchannel<span class=\"token punctuation\">.</span>queue_declare<span class=\"token punctuation\">(</span>queue<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 确定回调函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [x] Received %r\"</span> <span class=\"token operator\">%</span> body<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 确定监听队列</span>\nchannel<span class=\"token punctuation\">.</span>basic_consume<span class=\"token punctuation\">(</span>queue<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n                      auto_ack<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 默认应答</span>\n                      on_message_callback<span class=\"token operator\">=</span>callback<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' [*] Waiting for messages. To exit press CTRL+C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 正式监听</span>\nchannel<span class=\"token punctuation\">.</span>start_consuming<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2、参数使用\"><a href=\"#2、参数使用\" class=\"headerlink\" title=\"2、参数使用\"></a>2、参数使用</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span>、应答参数\nauto_ack<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\nch<span class=\"token punctuation\">.</span>basic_ack<span class=\"token punctuation\">(</span>delivery_tag<span class=\"token operator\">=</span>method<span class=\"token punctuation\">.</span>delivery_tag<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">2</span>、持久化参数\n<span class=\"token comment\">#声明queue</span>\nchannel<span class=\"token punctuation\">.</span>queue_declare<span class=\"token punctuation\">(</span>queue<span class=\"token operator\">=</span><span class=\"token string\">'hello2'</span><span class=\"token punctuation\">,</span> durable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 若声明过，则换一个名字</span>\n \nchannel<span class=\"token punctuation\">.</span>basic_publish<span class=\"token punctuation\">(</span>exchange<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                      routing_key<span class=\"token operator\">=</span><span class=\"token string\">'hello2'</span><span class=\"token punctuation\">,</span>\n                      body<span class=\"token operator\">=</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">,</span>\n                      properties<span class=\"token operator\">=</span>pika<span class=\"token punctuation\">.</span>BasicProperties<span class=\"token punctuation\">(</span>\n                          delivery_mode<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># make message persistent</span>\n                          <span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">3</span>、分发参数\n<span class=\"token triple-quoted-string string\">\"\"\"\n有两个消费者同时监听一个的队列。其中一个线程sleep2秒，另一个消费者线程sleep1秒，但是处理的消息是一样多。这种方式叫轮询分发（round-robin）不管谁忙，都不会多给消息，总是你一个我一个。\n想要做到公平分发（fair dispatch），必须关闭自动应答ack，改成手动应答。使用basicQos(perfetch=1)限制每次只发送不超过1条消息到同一个消费者，消费者必须手动反馈告知队列，才会发送下一个。\n\"\"\"</span>\nchannel<span class=\"token punctuation\">.</span>basic_qos<span class=\"token punctuation\">(</span>prefetch_count<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3、交换机模式\"><a href=\"#3、交换机模式\" class=\"headerlink\" title=\"3、交换机模式\"></a>3、交换机模式</h2><ul>\n<li><p>发布订阅模式       exchange_type=’fanout’<br><img src=\"https://i.loli.net/2020/08/12/q6C2o1iysAfcra8.png\" alt=\"发布订阅模式\"></p>\n</li>\n<li><p>关键字模式         exchange_type=’direct’<br><img src=\"https://i.loli.net/2020/08/12/2ajVSAnkNUleKmr.png\" alt=\"关键字模式\"></p>\n</li>\n<li><p>模糊匹配模式    exchange_type=’topic’</p>\n<blockquote>\n<p>通配符交换机”与之前的路由模式相比，它将信息的传输类型的key更加细化，以“key1.key2.keyN….”的模式来指定信息传输的key的大类型和大类型下面的小类型，让消费者可以更加精细的确认自己想要获取的信息类型。而在消费者一段，不用精确的指定具体到哪一个大类型下的小类型的key，而是可以使用类似正则表达式(但与正则表达式规则完全不同)的通配符在指定一定范围或符合某一个字符串匹配规则的key，来获取想要的信息。</p>\n<p>“通配符交换机”（Topic Exchange）将路由键和某模式进行匹配。此时队列需要绑定在一个模式上。符号“#”匹配一个或多个词，符号“*”仅匹配一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.<em>”只会匹配到“audit.irs”。（这里与我们一般的正则表达式的“</em>”和“#”刚好相反，这里我们需要注意一下。）</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/08/12/oPBMjlCpHbaqNgf.png\" alt=\"模糊匹配模式\"></p>\n</li>\n</ul>\n<blockquote>\n<p>源码笔记：<a href=\"https://github.com/lei025/leetcode/tree/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\">https://github.com/lei025/leetcode/tree/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97</a></p>\n</blockquote>\n<p><a href=\"https://www.sojson.com/blog/48.html\">https://www.sojson.com/blog/48.html</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"一、什么是消息队列\"><a href=\"#一、什么是消息队列\" class=\"headerlink\" title=\"一、什么是消息队列\"></a>一、什么是消息队列</h1><p>​        MQ全称为Message Queue 消息队列（MQ）是一种应用程序对应用程序的通信方法。MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取队列中的消息。这样发布者和使用者都不用知道对方的存在。</p>\n<blockquote>\n<p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/08/12/aCX1Zi5bmFQxU86.png\" alt=\"img\"></p>\n<blockquote>\n<p>队列是一种先进先出的数据结构。<strong>FIFO</strong></p>\n<p>消息队列可以简单理解为：把要传输的数据放在队列中。</p>\n<p>低类聚，高耦合。</p>\n</blockquote>\n<h1 id=\"二、为什么要用消息队列\"><a href=\"#二、为什么要用消息队列\" class=\"headerlink\" title=\"二、为什么要用消息队列\"></a>二、为什么要用消息队列</h1><p>消息队列中间件是分布式系统中重要的组件，主要解决应用**<u>解耦，异步消息，流量削锋</u>**等问题，实现高性能，高可用，可伸缩和最终一致性架构。目前使用较多的消息队列有，ZeroMQ，Kafka，MetaMQ，RocketMQ。eg：</p>\n<p><img src=\"https://i.loli.net/2020/08/12/m7D6FRaAGzqYbnl.png\" alt=\"外卖系统\"></p>\n<h1 id=\"三、-RabbitMQ\"><a href=\"#三、-RabbitMQ\" class=\"headerlink\" title=\"三、 RabbitMQ\"></a>三、 RabbitMQ</h1><p><a href=\"https://www.rabbitmq.com/tutorials/tutorial-one-python.html\">技术文档</a>   </p>\n<p><a href=\"%5Bhttps://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159715947119195162519670%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=159715947119195162519670&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&utm_term=ubuntu+rabbitmq%E5%AE%89%E8%A3%85&spm=1018.2118.3001.4187%5D(https://blog.csdn.net/haeasringnar/article/details/82715823?ops_request_misc=%7B%22request_id%22:%22159715947119195162519670%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=159715947119195162519670&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-82715823.pc_ecpm_v3_pc_rank_v3&utm_term=ubuntu+rabbitmq%E5%AE%89%E8%A3%85&spm=1018.2118.3001.4187)\">RabbitMQ 安装和配置</a></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">简单模式\n\t生产者：\n\t\t<span class=\"token number\">1</span>、连接rabbitmq\n\t\t<span class=\"token number\">2</span>、创建队列\n\t\t<span class=\"token number\">3</span>、向指定队列插入数据\n\t消费者：\n\t\t<span class=\"token number\">1</span>、连接rabbitmq\n        <span class=\"token number\">2</span>、监听模式\n        <span class=\"token number\">3</span>、确定回调函数\n\n参数使用\n\t<span class=\"token number\">1</span>、应答参数\n    <span class=\"token number\">2</span>、持久化参数\n    <span class=\"token number\">3</span>、分发参数\n    \t<span class=\"token operator\">-</span> 轮询分发\n        <span class=\"token operator\">-</span> 公平分发\n\n交换机模式\n\t<span class=\"token operator\">-</span> 发布订阅模式  \t exchange_type<span class=\"token operator\">=</span><span class=\"token string\">'fanout'</span>\n\t<span class=\"token operator\">-</span> 关键字模式\t\t exchange_type<span class=\"token operator\">=</span><span class=\"token string\">'direct'</span>\n\t<span class=\"token operator\">-</span> 模糊匹配模式\texchange_type<span class=\"token operator\">=</span><span class=\"token string\">'topic'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"1、简单模式\"><a href=\"#1、简单模式\" class=\"headerlink\" title=\"1、简单模式\"></a>1、简单模式</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">###### 生产者 producer.py</span>\n<span class=\"token keyword\">import</span> pika\n\n<span class=\"token comment\"># 连接rabbitmq</span>\nconnection <span class=\"token operator\">=</span> pika<span class=\"token punctuation\">.</span>BlockingConnection<span class=\"token punctuation\">(</span>pika<span class=\"token punctuation\">.</span>ConnectionParameters<span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nchannel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建队列</span>\nchannel<span class=\"token punctuation\">.</span>queue_declare<span class=\"token punctuation\">(</span>queue<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 向指定队列插入数据</span>\nchannel<span class=\"token punctuation\">.</span>basic_publish<span class=\"token punctuation\">(</span>exchange<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 简单模式</span>\n                      routing_key<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定队列</span>\n                      body<span class=\"token operator\">=</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 插入数据</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [x] Sent 'Hello World!'\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">###### 消费者 consumer.py</span>\n<span class=\"token keyword\">import</span> pika\n\t\nconnection <span class=\"token operator\">=</span> pika<span class=\"token punctuation\">.</span>BlockingConnection<span class=\"token punctuation\">(</span>pika<span class=\"token punctuation\">.</span>ConnectionParameters<span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nchannel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建队列</span>\nchannel<span class=\"token punctuation\">.</span>queue_declare<span class=\"token punctuation\">(</span>queue<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 确定回调函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" [x] Received %r\"</span> <span class=\"token operator\">%</span> body<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 确定监听队列</span>\nchannel<span class=\"token punctuation\">.</span>basic_consume<span class=\"token punctuation\">(</span>queue<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n                      auto_ack<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 默认应答</span>\n                      on_message_callback<span class=\"token operator\">=</span>callback<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' [*] Waiting for messages. To exit press CTRL+C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 正式监听</span>\nchannel<span class=\"token punctuation\">.</span>start_consuming<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2、参数使用\"><a href=\"#2、参数使用\" class=\"headerlink\" title=\"2、参数使用\"></a>2、参数使用</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span>、应答参数\nauto_ack<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\nch<span class=\"token punctuation\">.</span>basic_ack<span class=\"token punctuation\">(</span>delivery_tag<span class=\"token operator\">=</span>method<span class=\"token punctuation\">.</span>delivery_tag<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">2</span>、持久化参数\n<span class=\"token comment\">#声明queue</span>\nchannel<span class=\"token punctuation\">.</span>queue_declare<span class=\"token punctuation\">(</span>queue<span class=\"token operator\">=</span><span class=\"token string\">'hello2'</span><span class=\"token punctuation\">,</span> durable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 若声明过，则换一个名字</span>\n \nchannel<span class=\"token punctuation\">.</span>basic_publish<span class=\"token punctuation\">(</span>exchange<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                      routing_key<span class=\"token operator\">=</span><span class=\"token string\">'hello2'</span><span class=\"token punctuation\">,</span>\n                      body<span class=\"token operator\">=</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">,</span>\n                      properties<span class=\"token operator\">=</span>pika<span class=\"token punctuation\">.</span>BasicProperties<span class=\"token punctuation\">(</span>\n                          delivery_mode<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># make message persistent</span>\n                          <span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">3</span>、分发参数\n<span class=\"token triple-quoted-string string\">\"\"\"\n有两个消费者同时监听一个的队列。其中一个线程sleep2秒，另一个消费者线程sleep1秒，但是处理的消息是一样多。这种方式叫轮询分发（round-robin）不管谁忙，都不会多给消息，总是你一个我一个。\n想要做到公平分发（fair dispatch），必须关闭自动应答ack，改成手动应答。使用basicQos(perfetch=1)限制每次只发送不超过1条消息到同一个消费者，消费者必须手动反馈告知队列，才会发送下一个。\n\"\"\"</span>\nchannel<span class=\"token punctuation\">.</span>basic_qos<span class=\"token punctuation\">(</span>prefetch_count<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3、交换机模式\"><a href=\"#3、交换机模式\" class=\"headerlink\" title=\"3、交换机模式\"></a>3、交换机模式</h2><ul>\n<li><p>发布订阅模式       exchange_type=’fanout’<br><img src=\"https://i.loli.net/2020/08/12/q6C2o1iysAfcra8.png\" alt=\"发布订阅模式\"></p>\n</li>\n<li><p>关键字模式         exchange_type=’direct’<br><img src=\"https://i.loli.net/2020/08/12/2ajVSAnkNUleKmr.png\" alt=\"关键字模式\"></p>\n</li>\n<li><p>模糊匹配模式    exchange_type=’topic’</p>\n<blockquote>\n<p>通配符交换机”与之前的路由模式相比，它将信息的传输类型的key更加细化，以“key1.key2.keyN….”的模式来指定信息传输的key的大类型和大类型下面的小类型，让消费者可以更加精细的确认自己想要获取的信息类型。而在消费者一段，不用精确的指定具体到哪一个大类型下的小类型的key，而是可以使用类似正则表达式(但与正则表达式规则完全不同)的通配符在指定一定范围或符合某一个字符串匹配规则的key，来获取想要的信息。</p>\n<p>“通配符交换机”（Topic Exchange）将路由键和某模式进行匹配。此时队列需要绑定在一个模式上。符号“#”匹配一个或多个词，符号“*”仅匹配一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.<em>”只会匹配到“audit.irs”。（这里与我们一般的正则表达式的“</em>”和“#”刚好相反，这里我们需要注意一下。）</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/08/12/oPBMjlCpHbaqNgf.png\" alt=\"模糊匹配模式\"></p>\n</li>\n</ul>\n<blockquote>\n<p>源码笔记：<a href=\"https://github.com/lei025/leetcode/tree/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\">https://github.com/lei025/leetcode/tree/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97</a></p>\n</blockquote>\n<p><a href=\"https://www.sojson.com/blog/48.html\">https://www.sojson.com/blog/48.html</a></p>\n"},{"title":"腾讯犀牛鸟云开发校园技术布道师养成计划第九天","top":false,"date":"2020-03-25T10:27:01.000Z","_content":"\n# 学习计划\n\n**课程学习资料**\n\n## **第1天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb01.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb02.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb03.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb04.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb05.html\n\n## **第2天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb06.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb07.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb08.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb09.html\n\n## **第3天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb11.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb12.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb13.html\n\n## **第4天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb14.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb15.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb16.html\n\n## **第5天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb17.html\n\n## **第6天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb21.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb22.html\n\n## **第7天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb23.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb24.html\n\n\n\n## **第8天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb25.html\n\nhttps://www.bilibili.com/video/av62282070\n\n## **第9天**\n\nhttps://www.bilibili.com/video/av62284946\n\nhttps://www.bilibili.com/video/av62283612\n\n## **第10天**\n\nhttps://www.bilibili.com/video/av71282296\n\nhttps://www.bilibili.com/video/av69118468\n\n## **第11天**\n\nhttps://www.bilibili.com/video/av65691671\n\n## **第12天**\n\nhttps://www.bilibili.com/video/av62286458\n\n## **第13天**\n\nhttps://www.bilibili.com/video/av61840827\n\n## **第14天**\n\nhttps://www.bilibili.com/video/av61837039\n\n## **第15天**\n\nhttps://www.bilibili.com/video/av61836472\n\nhttps://www.bilibili.com/video/av60337065\n\n## **第16天**\n\n[https://tencentcloudbase.github.io/2020-02-14-init/#%E6%A6%82%E8%BF%B0](https://tencentcloudbase.github.io/2020-02-14-init/#概述)\n\nhttps://tencentcloudbase.github.io/2020-02-14-prepare/\n\nhttps://tencentcloudbase.github.io/2020-02-14-WebDemo-files/","source":"_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第九天.md","raw":"---\ntitle: 腾讯犀牛鸟云开发校园技术布道师养成计划第九天\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-03-25 18:27:01\n---\n\n# 学习计划\n\n**课程学习资料**\n\n## **第1天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb01.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb02.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb03.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb04.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb05.html\n\n## **第2天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb06.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb07.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb08.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb09.html\n\n## **第3天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb11.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb12.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb13.html\n\n## **第4天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb14.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb15.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb16.html\n\n## **第5天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb17.html\n\n## **第6天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb21.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb22.html\n\n## **第7天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb23.html\n\nhttps://tencentcloudbase.github.io/handbook/tcb24.html\n\n\n\n## **第8天**\n\nhttps://tencentcloudbase.github.io/handbook/tcb25.html\n\nhttps://www.bilibili.com/video/av62282070\n\n## **第9天**\n\nhttps://www.bilibili.com/video/av62284946\n\nhttps://www.bilibili.com/video/av62283612\n\n## **第10天**\n\nhttps://www.bilibili.com/video/av71282296\n\nhttps://www.bilibili.com/video/av69118468\n\n## **第11天**\n\nhttps://www.bilibili.com/video/av65691671\n\n## **第12天**\n\nhttps://www.bilibili.com/video/av62286458\n\n## **第13天**\n\nhttps://www.bilibili.com/video/av61840827\n\n## **第14天**\n\nhttps://www.bilibili.com/video/av61837039\n\n## **第15天**\n\nhttps://www.bilibili.com/video/av61836472\n\nhttps://www.bilibili.com/video/av60337065\n\n## **第16天**\n\n[https://tencentcloudbase.github.io/2020-02-14-init/#%E6%A6%82%E8%BF%B0](https://tencentcloudbase.github.io/2020-02-14-init/#概述)\n\nhttps://tencentcloudbase.github.io/2020-02-14-prepare/\n\nhttps://tencentcloudbase.github.io/2020-02-14-WebDemo-files/","slug":"腾讯犀牛鸟云开发校园技术布道师养成计划第九天","published":1,"updated":"2022-08-25T14:12:05.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39c004p12mj2sjp8sw5","content":"<h1 id=\"学习计划\"><a href=\"#学习计划\" class=\"headerlink\" title=\"学习计划\"></a>学习计划</h1><p><strong>课程学习资料</strong></p>\n<h2 id=\"第1天\"><a href=\"#第1天\" class=\"headerlink\" title=\"第1天\"></a><strong>第1天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb01.html\">https://tencentcloudbase.github.io/handbook/tcb01.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb02.html\">https://tencentcloudbase.github.io/handbook/tcb02.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb03.html\">https://tencentcloudbase.github.io/handbook/tcb03.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb04.html\">https://tencentcloudbase.github.io/handbook/tcb04.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb05.html\">https://tencentcloudbase.github.io/handbook/tcb05.html</a></p>\n<h2 id=\"第2天\"><a href=\"#第2天\" class=\"headerlink\" title=\"第2天\"></a><strong>第2天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb06.html\">https://tencentcloudbase.github.io/handbook/tcb06.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb07.html\">https://tencentcloudbase.github.io/handbook/tcb07.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb08.html\">https://tencentcloudbase.github.io/handbook/tcb08.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb09.html\">https://tencentcloudbase.github.io/handbook/tcb09.html</a></p>\n<h2 id=\"第3天\"><a href=\"#第3天\" class=\"headerlink\" title=\"第3天\"></a><strong>第3天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb11.html\">https://tencentcloudbase.github.io/handbook/tcb11.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb12.html\">https://tencentcloudbase.github.io/handbook/tcb12.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb13.html\">https://tencentcloudbase.github.io/handbook/tcb13.html</a></p>\n<h2 id=\"第4天\"><a href=\"#第4天\" class=\"headerlink\" title=\"第4天\"></a><strong>第4天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb14.html\">https://tencentcloudbase.github.io/handbook/tcb14.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb15.html\">https://tencentcloudbase.github.io/handbook/tcb15.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb16.html\">https://tencentcloudbase.github.io/handbook/tcb16.html</a></p>\n<h2 id=\"第5天\"><a href=\"#第5天\" class=\"headerlink\" title=\"第5天\"></a><strong>第5天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb17.html\">https://tencentcloudbase.github.io/handbook/tcb17.html</a></p>\n<h2 id=\"第6天\"><a href=\"#第6天\" class=\"headerlink\" title=\"第6天\"></a><strong>第6天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb21.html\">https://tencentcloudbase.github.io/handbook/tcb21.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb22.html\">https://tencentcloudbase.github.io/handbook/tcb22.html</a></p>\n<h2 id=\"第7天\"><a href=\"#第7天\" class=\"headerlink\" title=\"第7天\"></a><strong>第7天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb23.html\">https://tencentcloudbase.github.io/handbook/tcb23.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb24.html\">https://tencentcloudbase.github.io/handbook/tcb24.html</a></p>\n<h2 id=\"第8天\"><a href=\"#第8天\" class=\"headerlink\" title=\"第8天\"></a><strong>第8天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb25.html\">https://tencentcloudbase.github.io/handbook/tcb25.html</a></p>\n<p><a href=\"https://www.bilibili.com/video/av62282070\">https://www.bilibili.com/video/av62282070</a></p>\n<h2 id=\"第9天\"><a href=\"#第9天\" class=\"headerlink\" title=\"第9天\"></a><strong>第9天</strong></h2><p><a href=\"https://www.bilibili.com/video/av62284946\">https://www.bilibili.com/video/av62284946</a></p>\n<p><a href=\"https://www.bilibili.com/video/av62283612\">https://www.bilibili.com/video/av62283612</a></p>\n<h2 id=\"第10天\"><a href=\"#第10天\" class=\"headerlink\" title=\"第10天\"></a><strong>第10天</strong></h2><p><a href=\"https://www.bilibili.com/video/av71282296\">https://www.bilibili.com/video/av71282296</a></p>\n<p><a href=\"https://www.bilibili.com/video/av69118468\">https://www.bilibili.com/video/av69118468</a></p>\n<h2 id=\"第11天\"><a href=\"#第11天\" class=\"headerlink\" title=\"第11天\"></a><strong>第11天</strong></h2><p><a href=\"https://www.bilibili.com/video/av65691671\">https://www.bilibili.com/video/av65691671</a></p>\n<h2 id=\"第12天\"><a href=\"#第12天\" class=\"headerlink\" title=\"第12天\"></a><strong>第12天</strong></h2><p><a href=\"https://www.bilibili.com/video/av62286458\">https://www.bilibili.com/video/av62286458</a></p>\n<h2 id=\"第13天\"><a href=\"#第13天\" class=\"headerlink\" title=\"第13天\"></a><strong>第13天</strong></h2><p><a href=\"https://www.bilibili.com/video/av61840827\">https://www.bilibili.com/video/av61840827</a></p>\n<h2 id=\"第14天\"><a href=\"#第14天\" class=\"headerlink\" title=\"第14天\"></a><strong>第14天</strong></h2><p><a href=\"https://www.bilibili.com/video/av61837039\">https://www.bilibili.com/video/av61837039</a></p>\n<h2 id=\"第15天\"><a href=\"#第15天\" class=\"headerlink\" title=\"第15天\"></a><strong>第15天</strong></h2><p><a href=\"https://www.bilibili.com/video/av61836472\">https://www.bilibili.com/video/av61836472</a></p>\n<p><a href=\"https://www.bilibili.com/video/av60337065\">https://www.bilibili.com/video/av60337065</a></p>\n<h2 id=\"第16天\"><a href=\"#第16天\" class=\"headerlink\" title=\"第16天\"></a><strong>第16天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/2020-02-14-init/#%E6%A6%82%E8%BF%B0\">https://tencentcloudbase.github.io/2020-02-14-init/#%E6%A6%82%E8%BF%B0</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/2020-02-14-prepare/\">https://tencentcloudbase.github.io/2020-02-14-prepare/</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/2020-02-14-WebDemo-files/\">https://tencentcloudbase.github.io/2020-02-14-WebDemo-files/</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"学习计划\"><a href=\"#学习计划\" class=\"headerlink\" title=\"学习计划\"></a>学习计划</h1><p><strong>课程学习资料</strong></p>\n<h2 id=\"第1天\"><a href=\"#第1天\" class=\"headerlink\" title=\"第1天\"></a><strong>第1天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb01.html\">https://tencentcloudbase.github.io/handbook/tcb01.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb02.html\">https://tencentcloudbase.github.io/handbook/tcb02.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb03.html\">https://tencentcloudbase.github.io/handbook/tcb03.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb04.html\">https://tencentcloudbase.github.io/handbook/tcb04.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb05.html\">https://tencentcloudbase.github.io/handbook/tcb05.html</a></p>\n<h2 id=\"第2天\"><a href=\"#第2天\" class=\"headerlink\" title=\"第2天\"></a><strong>第2天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb06.html\">https://tencentcloudbase.github.io/handbook/tcb06.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb07.html\">https://tencentcloudbase.github.io/handbook/tcb07.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb08.html\">https://tencentcloudbase.github.io/handbook/tcb08.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb09.html\">https://tencentcloudbase.github.io/handbook/tcb09.html</a></p>\n<h2 id=\"第3天\"><a href=\"#第3天\" class=\"headerlink\" title=\"第3天\"></a><strong>第3天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb11.html\">https://tencentcloudbase.github.io/handbook/tcb11.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb12.html\">https://tencentcloudbase.github.io/handbook/tcb12.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb13.html\">https://tencentcloudbase.github.io/handbook/tcb13.html</a></p>\n<h2 id=\"第4天\"><a href=\"#第4天\" class=\"headerlink\" title=\"第4天\"></a><strong>第4天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb14.html\">https://tencentcloudbase.github.io/handbook/tcb14.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb15.html\">https://tencentcloudbase.github.io/handbook/tcb15.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb16.html\">https://tencentcloudbase.github.io/handbook/tcb16.html</a></p>\n<h2 id=\"第5天\"><a href=\"#第5天\" class=\"headerlink\" title=\"第5天\"></a><strong>第5天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb17.html\">https://tencentcloudbase.github.io/handbook/tcb17.html</a></p>\n<h2 id=\"第6天\"><a href=\"#第6天\" class=\"headerlink\" title=\"第6天\"></a><strong>第6天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb21.html\">https://tencentcloudbase.github.io/handbook/tcb21.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb22.html\">https://tencentcloudbase.github.io/handbook/tcb22.html</a></p>\n<h2 id=\"第7天\"><a href=\"#第7天\" class=\"headerlink\" title=\"第7天\"></a><strong>第7天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb23.html\">https://tencentcloudbase.github.io/handbook/tcb23.html</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/handbook/tcb24.html\">https://tencentcloudbase.github.io/handbook/tcb24.html</a></p>\n<h2 id=\"第8天\"><a href=\"#第8天\" class=\"headerlink\" title=\"第8天\"></a><strong>第8天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/handbook/tcb25.html\">https://tencentcloudbase.github.io/handbook/tcb25.html</a></p>\n<p><a href=\"https://www.bilibili.com/video/av62282070\">https://www.bilibili.com/video/av62282070</a></p>\n<h2 id=\"第9天\"><a href=\"#第9天\" class=\"headerlink\" title=\"第9天\"></a><strong>第9天</strong></h2><p><a href=\"https://www.bilibili.com/video/av62284946\">https://www.bilibili.com/video/av62284946</a></p>\n<p><a href=\"https://www.bilibili.com/video/av62283612\">https://www.bilibili.com/video/av62283612</a></p>\n<h2 id=\"第10天\"><a href=\"#第10天\" class=\"headerlink\" title=\"第10天\"></a><strong>第10天</strong></h2><p><a href=\"https://www.bilibili.com/video/av71282296\">https://www.bilibili.com/video/av71282296</a></p>\n<p><a href=\"https://www.bilibili.com/video/av69118468\">https://www.bilibili.com/video/av69118468</a></p>\n<h2 id=\"第11天\"><a href=\"#第11天\" class=\"headerlink\" title=\"第11天\"></a><strong>第11天</strong></h2><p><a href=\"https://www.bilibili.com/video/av65691671\">https://www.bilibili.com/video/av65691671</a></p>\n<h2 id=\"第12天\"><a href=\"#第12天\" class=\"headerlink\" title=\"第12天\"></a><strong>第12天</strong></h2><p><a href=\"https://www.bilibili.com/video/av62286458\">https://www.bilibili.com/video/av62286458</a></p>\n<h2 id=\"第13天\"><a href=\"#第13天\" class=\"headerlink\" title=\"第13天\"></a><strong>第13天</strong></h2><p><a href=\"https://www.bilibili.com/video/av61840827\">https://www.bilibili.com/video/av61840827</a></p>\n<h2 id=\"第14天\"><a href=\"#第14天\" class=\"headerlink\" title=\"第14天\"></a><strong>第14天</strong></h2><p><a href=\"https://www.bilibili.com/video/av61837039\">https://www.bilibili.com/video/av61837039</a></p>\n<h2 id=\"第15天\"><a href=\"#第15天\" class=\"headerlink\" title=\"第15天\"></a><strong>第15天</strong></h2><p><a href=\"https://www.bilibili.com/video/av61836472\">https://www.bilibili.com/video/av61836472</a></p>\n<p><a href=\"https://www.bilibili.com/video/av60337065\">https://www.bilibili.com/video/av60337065</a></p>\n<h2 id=\"第16天\"><a href=\"#第16天\" class=\"headerlink\" title=\"第16天\"></a><strong>第16天</strong></h2><p><a href=\"https://tencentcloudbase.github.io/2020-02-14-init/#%E6%A6%82%E8%BF%B0\">https://tencentcloudbase.github.io/2020-02-14-init/#%E6%A6%82%E8%BF%B0</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/2020-02-14-prepare/\">https://tencentcloudbase.github.io/2020-02-14-prepare/</a></p>\n<p><a href=\"https://tencentcloudbase.github.io/2020-02-14-WebDemo-files/\">https://tencentcloudbase.github.io/2020-02-14-WebDemo-files/</a></p>\n"},{"title":"腾讯犀牛鸟云开发校园技术布道师养成计划第七天","top":false,"date":"2020-03-24T04:30:52.000Z","_content":"\n# 云数据库入门\n\n**任何**一个大型的应用程序和服务，都**必须**会使用到**高性能的**数据存储解决方案，用来**准确**（ACID,原子性Atomicity、一致性Consistency、隔离性Isolation、持久性Durability，可以拓展了解一下）、**快速**、**可靠**地**存储和检索**用户的账户信息、商品以及商品交易信息、产品数据、资讯文章等等等等，而云开发就自带高性能、高可用、高拓展性且安全的数据库。\n\n#### 云数据库的基础知识\n\n> 在操作数据库时，我们要对**数据库database**、**集合collection**、**记录doc**以及**字段field**要有一定的了解，首先要**记住这些对应的英文单词**，当你要操作某个记录doc的字段内容时，就像投送快递一样，要先搞清楚它到底在哪个数据库、在哪个集合、在哪个记录里，一级一级的去找。操作数据库通常都是对数据库、集合、记录、字段进行**增、删、改、查**，当你清楚了这些，操作数据库就不会迷糊了。\n\n**云数据库与Excel、MySQL的对应理解**\n\n我们可以结合Excel以及MySQL（之前没有接触过MySQL也没有关系，只看与Excel的对应就行）来理解云开发的数据库。\n\n|    云数据库     | **MySQL数据库**     | **Excel文件**            |\n| :-------------: | ------------------- | ------------------------ |\n| 数据库database  | 数据库 **database** | 工作簿                   |\n| 集合 collection | 表 **table**        | 工作表                   |\n|    字段field    | 数据列**column**    | 数据表的每一列           |\n| 记录 record/doc | 记录**row**         | 数据表除开第一行的每一行 |\n\n**集合的创建与数据类型**\n\n#### 数据库的权限控制与安全规则\n\n在数据库创建之后，我们需要在云开发控制台-数据库-集合的权限设置标签对数据库进行**权限设置**。**数据库的权限分为****小程序端****和****服务端****（云函数、云开发控制台**）。服务端拥有读写所有数据的读写权限，所以这里的权限设置**只是在设置小程序端的用户对数据库的操作权限**。权限控制分简易权限控制和自定义权限（也就是安全规则），**建议开发者用安全规则取代简易的权限控制**。\n\n**技术文档：**[权限控制](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/permission.html)\n\n#### **一窥数据查询的全貌**\n\n**查询集合collection里的记录**\n\n```javascript\nconst db = wx.cloud.database()  //获取数据库的引用\nconst _ = db.command     //获取数据库查询及更新指令\ndb.collection(\"china\")  //获取集合china的引用\n  .where({              //查询的条件指令where\n    gdp: _.gt(3000)     //查询筛选条件，gt表示字段需大于指定值。\n  })\n  .field({             //显示哪些字段\n    _id:false,         //默认显示_id，这个隐藏\n    city: true,\n    province: true,\n    gdp:true\n  })\n  .orderBy('gdp', 'desc')  //排序方式，降序排列\n  .skip(0)                 //跳过多少个记录（常用于分页），0表示这里不跳过\n  .limit(10)               //限制显示多少条记录，这里为10\n \n  .get()                   //获取根据查询条件筛选后的集合数据  \n  .then(res => {\n    console.log(res.data)\n  })\n  .catch(err => {\n    console.error(err)\n```\n\n> 大家可以留意一下数据查询的**链式写法**， wx.cloud.database().collection('数据库名').where().get().then().catch()，前半部分是数据查询时对对象的引用和方法的调用；后半部分是Promise对象的方法，Promise对象是get的返回值。写的时候为了让结构更加清晰，我们做了换行处理，写在同一行也是可以的。\n\n#### 构建查询条件的5个方法\n\n在上面的案例中，就包含了构建查询条件的五个方法： Collection.where()、 Collection.field()、 Collection.orderBy()、 Collection.skip()、 Collection.limit()，这五个方法是可以单独拆开使用的，比如只使用where或只使用field、limit，也可以从这5个中抽几个组合在一起使用，还可以一次查询里写多个相同的方法，比如orderBy、where可以写多次相同的。\n\n- **指令查询条件 where，**注意在后面我们会介绍的**command查询指令**比如筛选字段大于/小于/不等于某个值的比较指令，同时满足多个筛选条件的逻辑指令等，以及**模糊查询的正则**都是写在where内；\n\n**技术文档：**[Collection.where](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.where.html)\n\n- **指定返回哪些字段field，**查询时只需要传入 true|false（或 1|-1）就可以返回或不返回哪些字段，在上面的案例里我们就只返回city、province、gdp三个字段的值：\n\n**技术文档：**[Collection.field](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.field.html)\n\n- **数据排序orderBy，**排序的语法如下，里面为排序的条件，这里的字段名可不受field的限制（不在field内，没有显示，但是还是会起作用）： orderBy('字段名', '排序方式')。\n  排序方式只支持**desc降序**、**asc升序**这两种方式，如果字段里面的值时数字就按照大小，如果是字母就按照先后顺序，**不支持中文的排序方式**。排序支持按多个字段排序，多次调用 orderBy 即可，多字段排序时的顺序会按照 orderBy 调用顺序先后对多个字段排序。如果需要对嵌套字段排序，可以使用点表示法，比如上面的books根据出版年份year从旧到新排序，可以写为 orderBy('publishInfo.year', 'asc')。\n\n**技术文档：**[Collection.orderBy](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.orderBy.html)\n\n- **分页显示skip，**skip常与limit一起用于分页，比如商品列表一页只显示20个商品，第1页显示整个数据的0~20个，那么第2页我们用skip(20)可以跳过第一页的20条数据，第3页则跳过40个数据，第N页则是skip((n-1)*20)个数据：\n\n**技术文档：**[Collection.skip](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.skip.html)\n\n- **限制数量上限的limit，**集合数据查询的数量上限limit在小程序端最大数量为20，在服务端为100，比如limit(30)在小程序端还是只会显示20条数据，更多数据则需要我们结合分页skip与javascript进行编程处理。\n\n**技术文档：**[Collection.limit](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.limit.html)\n\n> 小程序查询数据显示的结果虽然有数量限制，比如服务端为100个，但是排序仍然是基于整个集合的数据进行排序的，并不是只针对这100个数据。\n\n#### **匹配查询**\n\n传入的对象的每个 &lt;key, value&gt; 构成一个筛选条件，有多个 &lt;key, value&gt; 则表示需同时满足这些条件，是 与的关系，如果需要 或关系，可使用 [command.or]((Command.or))\n\n#### 查询指令Command\n\n**指令用于查询时，都会写在where内**，主要对字段的值进行比较和逻辑的筛选判断。数据库 API 提供了大于、小于等多种查询指令，这些指令都暴露在 db.command 对象上。\n\n**比较操作符和逻辑操作符**\n\n下面我们把查询指令的比较操作符和逻辑操作符整理成了一张表格，并附上相应的技术文档，方便大家对它们有一个清晰而整体的认识。\n\n|                        查询指令之比较                        |            |                                                              |            |\n| :----------------------------------------------------------: | ---------- | ------------------------------------------------------------ | ---------- |\n| [gt](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gt.html) | 大于       | [lt](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lt.html) | 小于       |\n| [eq](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.eq.html) | 等于       | [neq](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.neq.html) | 不等于     |\n| [lte](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lte.html) | 小于或等于 | [gte](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gte.html) | 大于或等于 |\n| [in](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.in.html) | 在数组中   | [nin](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nin.html) | 不在数组中 |\n|                        查询指令之逻辑                        |            |                                                              |            |\n| [and](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.and.html) | 条件与     | [or](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.or.html) | 条件或     |\n| [not](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.not.html) | 条件非     | [nor](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nor.html) | 都不       |\n\n**字段内的逻辑指令**\n\n```javascript\n.where({\n    province:_.eq(\"广东\"),\n    gdp:_.gt(3000).and(_.lt(10000))\n  })\n```\n\n**跨字段的逻辑指令**\n\n```javascript\n  .where(\n    {\n     gdp: _.gt(3000),\n     resident_pop:_.gt(500), \n     },\n    _.or([{\n     builtup_area: _.gt(300)}\n     ]), \n  )\n```\n\n#### 正则查询db.RegExp\n\n**正则查询也是写在where字段的条件筛选里。**\n\n**技术文档：**[Database.RegExp](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Database.RegExp.html)\n\n**字段字符串的模糊查询**\n\n#### 在小程序端新增记录和统计记录\n\n**统计记录Collection.count**\n\n> field、orderBy、skip、limit对count是无效的，只有where才会影响count的结果，count只会返回记录数，不会返回查询到的数据\n\n**新增记录Collection.add**\n\n```javascript\naddDaily(){\n    db.collection('zhihu_daily').add({\n      data: {\n        _id:\"daily9718005\",\n        title: \"元素，生生不息的宇宙诸子\",\n        images: [\n    \"https://pic4.zhimg.com/v2-3c5d866701650615f50ff4016b2f521b.jpg\"\n  ],\n        id: 9718005,\n        url: \"https://daily.zhihu.com/story/9718005\",\n        image: \"https://pic2.zhimg.com/v2-c6a33965175cf81a1b6e2d0af633490d.jpg\",\n        share_url: \"http://daily.zhihu.com/story/9718005\",\n        body:\"<p><strong><strong>谨以此文，纪念元素周期表发布 150 周年。</strong></strong></p>\\r\\n<p>地球，世界，和生活在这里的芸芸众生从何而来，这是每个人都曾有意无意思考过的问题。</p>\\r\\n<p>科幻小说家道格拉斯·亚当斯给了一个无厘头的答案，42；宗教也给出了诸神创世的虚构场景；</p>\\r\\n<p>最为恢弘的画面，则是由科学给出的，另一个意义上的<strong>生死轮回，一场属于元素的生死轮回</strong>。</p>\"\n      }\n    })\n      .then(res => {\n        console.log(res)\n      })\n      .catch(console.error)\n  }\n```\n\n**_openid与集合权限**\n\n#### 云函数端操作集合内记录\n\n```javascript\nconst db = cloud.database()\nconst _ = db.command\nreturn await db.collection(\"china\") \n  .where({           \n    gdp: _.gt(3000)    \n  })\n  .field({           \n    _id: false, \n    city: true,\n    province: true,\n    gdp: true\n  })\n  .orderBy('gdp', 'desc') \n  .skip(0) \n  .limit(10) \n  .get()\n```\n\n> **try/catch async错误处理**\n>\n> 当 async 函数中只要一个 await 出现 reject 状态，则后面的 await 都不会被执行。如果有多个 await 则可以将其都放在 try/catch 中。\n\n**删除多条数据记录**\n\n**更新多条记录Collection.update**\n\n#### 操作单个记录doc的字段值\n\n> 查询集合collection里的记录常用于获取文章、资讯、商品、产品等等的**列表**；而查询单个记录doc的字段值则常用于这些列表里的**详情**内容。如果你在开发中需要增删改查某个记录的字段值，为了方便让程序可以根据_id找到对应的记录，建议在创建记录的时候_id用程序有规则的生成。\n\n**查询单个记录doc的字段值**\n\n**技术文档：**[获取单个记录数据Document.get()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.get.html)\n\n```javascript\ndb.collection('zhihu_daily').doc(\"daily9718006\")\n  .get()\n  .then(res => {\n  console.log('单个记录的值',res.data)\n  })\n  .catch(err => {\n    console.error(err)\n  })\n},\n```\n\n**删除单条记录**\n\n**技术文档：**[删除单个记录Document.remove()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.remove.html)\n\n```javascript\n  removeDaily(){\n    db.collection('zhihu_daily').doc(\"daily9718006\")\n      .remove()\n      .then(console.log)\n      .catch(console.error)\n  }\n```\n\n**更新单条记录**\n\n**技术文档：**[更新单个记录Document.update()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.update.html)\n\n```javascript\n updateDaily(){\n    db.collection('zhihu_daily').doc(\"daily9718006\")\n      .update({\n        data:{\n          title: \"【知乎日报】元素，生生不息的宇宙诸子\",\n        }\n      })\n  },\n```\n\n**替换更新记录**\n\n**技术文档：**[替换更新单个记录Document.set()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.set.html)\n\n```javascript\n  setDaily(){\n    db.collection('zhihu_daily').doc(\"daily9718006\")\n      .set({\n        data: {\n          \"title\": \"为什么狗会如此亲近人类?\",\n          \"images\": [\n            \"https://pic4.zhimg.com/v2-4cab2fbf4fe9d487910a6f2c54ab3ed3.jpg\"\n          ],\n          \"id\": 9717547,\n          \"url\": \"https://daily.zhihu.com/story/9717547\",\n          \"image\": \"https://pic4.zhimg.com/v2-60f220ee6c5bf035d0eaf2dd4736342b.jpg\",\n          \"share_url\": \"http://daily.zhihu.com/story/9717547\",\n          \"body\":  \"<p>让狗从凶猛的野兽变成忠实的爱宠，涉及了宏观与微观上的两层故事：我们如何在宏观上驯养了它们，以及这些驯养在生理层面究竟意味着什么。</p>\\r\\n<p><img class=\\\"content-image\\\" src=\\\"http://pic1.zhimg.com/70/v2-4147c4b02bf97e95d8a9f00727d4c184_b.jpg\\\" alt=\\\"\\\"></p>\\r\\n<p>狗是灰狼（Canis lupus）被人类驯养后形成的亚种，至少可以追溯到 1 万多年以前，是人类成功驯化的第一种动物。在这漫长的岁月里，人类的定向选择强烈改变了这个驯化亚种的基因频率，使它呈现出极高的多样性，尤其体现在生理形态上。</p>\"\n        }\n      })\n  }\n```\n\n# 存储、数组、对象\n\n在实际开发中**云存储里的文件链接需要被记录在数据库里才方便调用**.\n\n**如何操作数据库的数组和对象等复杂数据类型的增删改查**。\n\n#### 云存储与数据库的关系\n\n**数据库的设计与结构**\n\n和Excel表、关系型数据库（如MySQL）以行和列、多表关系来设计表结构不同的是，云开发的数据库是基于文档的。我们可以在一个记录里嵌套多层数组和对象，把每个文档所需要的数据都嵌入到一个文档里，而不是分散到多个不同的集合。\n\n**fileID是存储与数据库的纽带**\n\n云存储与数据库就是**通过fileID来取得联系**的，数据库**只记录文件在云存储的fileID**，我们可以访问数据库相应的fileID属性进行记录的增删改查操作，与此同时调用云存储的上传文件、下载文件、删除文件等API，这样云存储就被数据库给管理起来了。\n\n#### 建立用户与数据的关系\n\n**openid与云开发**\n\n**_id与云开发**\n\n**判断用户是否存在并创建记录**\n\n#### async/await的使用说明\n\nasync 是“异步”的简写，async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成，await 只能出现在 async 函数中。await 在 async 函数中才会有效。假设一个业务需要分步完成，每个步骤都是异步的，而且依赖上一步的执行结果，甚至依赖之前每一步的结果，就可以使用Async Await来完成","source":"_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第七天.md","raw":"---\ntitle: 腾讯犀牛鸟云开发校园技术布道师养成计划第七天\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-03-24 12:30:52\n---\n\n# 云数据库入门\n\n**任何**一个大型的应用程序和服务，都**必须**会使用到**高性能的**数据存储解决方案，用来**准确**（ACID,原子性Atomicity、一致性Consistency、隔离性Isolation、持久性Durability，可以拓展了解一下）、**快速**、**可靠**地**存储和检索**用户的账户信息、商品以及商品交易信息、产品数据、资讯文章等等等等，而云开发就自带高性能、高可用、高拓展性且安全的数据库。\n\n#### 云数据库的基础知识\n\n> 在操作数据库时，我们要对**数据库database**、**集合collection**、**记录doc**以及**字段field**要有一定的了解，首先要**记住这些对应的英文单词**，当你要操作某个记录doc的字段内容时，就像投送快递一样，要先搞清楚它到底在哪个数据库、在哪个集合、在哪个记录里，一级一级的去找。操作数据库通常都是对数据库、集合、记录、字段进行**增、删、改、查**，当你清楚了这些，操作数据库就不会迷糊了。\n\n**云数据库与Excel、MySQL的对应理解**\n\n我们可以结合Excel以及MySQL（之前没有接触过MySQL也没有关系，只看与Excel的对应就行）来理解云开发的数据库。\n\n|    云数据库     | **MySQL数据库**     | **Excel文件**            |\n| :-------------: | ------------------- | ------------------------ |\n| 数据库database  | 数据库 **database** | 工作簿                   |\n| 集合 collection | 表 **table**        | 工作表                   |\n|    字段field    | 数据列**column**    | 数据表的每一列           |\n| 记录 record/doc | 记录**row**         | 数据表除开第一行的每一行 |\n\n**集合的创建与数据类型**\n\n#### 数据库的权限控制与安全规则\n\n在数据库创建之后，我们需要在云开发控制台-数据库-集合的权限设置标签对数据库进行**权限设置**。**数据库的权限分为****小程序端****和****服务端****（云函数、云开发控制台**）。服务端拥有读写所有数据的读写权限，所以这里的权限设置**只是在设置小程序端的用户对数据库的操作权限**。权限控制分简易权限控制和自定义权限（也就是安全规则），**建议开发者用安全规则取代简易的权限控制**。\n\n**技术文档：**[权限控制](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/permission.html)\n\n#### **一窥数据查询的全貌**\n\n**查询集合collection里的记录**\n\n```javascript\nconst db = wx.cloud.database()  //获取数据库的引用\nconst _ = db.command     //获取数据库查询及更新指令\ndb.collection(\"china\")  //获取集合china的引用\n  .where({              //查询的条件指令where\n    gdp: _.gt(3000)     //查询筛选条件，gt表示字段需大于指定值。\n  })\n  .field({             //显示哪些字段\n    _id:false,         //默认显示_id，这个隐藏\n    city: true,\n    province: true,\n    gdp:true\n  })\n  .orderBy('gdp', 'desc')  //排序方式，降序排列\n  .skip(0)                 //跳过多少个记录（常用于分页），0表示这里不跳过\n  .limit(10)               //限制显示多少条记录，这里为10\n \n  .get()                   //获取根据查询条件筛选后的集合数据  \n  .then(res => {\n    console.log(res.data)\n  })\n  .catch(err => {\n    console.error(err)\n```\n\n> 大家可以留意一下数据查询的**链式写法**， wx.cloud.database().collection('数据库名').where().get().then().catch()，前半部分是数据查询时对对象的引用和方法的调用；后半部分是Promise对象的方法，Promise对象是get的返回值。写的时候为了让结构更加清晰，我们做了换行处理，写在同一行也是可以的。\n\n#### 构建查询条件的5个方法\n\n在上面的案例中，就包含了构建查询条件的五个方法： Collection.where()、 Collection.field()、 Collection.orderBy()、 Collection.skip()、 Collection.limit()，这五个方法是可以单独拆开使用的，比如只使用where或只使用field、limit，也可以从这5个中抽几个组合在一起使用，还可以一次查询里写多个相同的方法，比如orderBy、where可以写多次相同的。\n\n- **指令查询条件 where，**注意在后面我们会介绍的**command查询指令**比如筛选字段大于/小于/不等于某个值的比较指令，同时满足多个筛选条件的逻辑指令等，以及**模糊查询的正则**都是写在where内；\n\n**技术文档：**[Collection.where](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.where.html)\n\n- **指定返回哪些字段field，**查询时只需要传入 true|false（或 1|-1）就可以返回或不返回哪些字段，在上面的案例里我们就只返回city、province、gdp三个字段的值：\n\n**技术文档：**[Collection.field](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.field.html)\n\n- **数据排序orderBy，**排序的语法如下，里面为排序的条件，这里的字段名可不受field的限制（不在field内，没有显示，但是还是会起作用）： orderBy('字段名', '排序方式')。\n  排序方式只支持**desc降序**、**asc升序**这两种方式，如果字段里面的值时数字就按照大小，如果是字母就按照先后顺序，**不支持中文的排序方式**。排序支持按多个字段排序，多次调用 orderBy 即可，多字段排序时的顺序会按照 orderBy 调用顺序先后对多个字段排序。如果需要对嵌套字段排序，可以使用点表示法，比如上面的books根据出版年份year从旧到新排序，可以写为 orderBy('publishInfo.year', 'asc')。\n\n**技术文档：**[Collection.orderBy](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.orderBy.html)\n\n- **分页显示skip，**skip常与limit一起用于分页，比如商品列表一页只显示20个商品，第1页显示整个数据的0~20个，那么第2页我们用skip(20)可以跳过第一页的20条数据，第3页则跳过40个数据，第N页则是skip((n-1)*20)个数据：\n\n**技术文档：**[Collection.skip](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.skip.html)\n\n- **限制数量上限的limit，**集合数据查询的数量上限limit在小程序端最大数量为20，在服务端为100，比如limit(30)在小程序端还是只会显示20条数据，更多数据则需要我们结合分页skip与javascript进行编程处理。\n\n**技术文档：**[Collection.limit](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.limit.html)\n\n> 小程序查询数据显示的结果虽然有数量限制，比如服务端为100个，但是排序仍然是基于整个集合的数据进行排序的，并不是只针对这100个数据。\n\n#### **匹配查询**\n\n传入的对象的每个 &lt;key, value&gt; 构成一个筛选条件，有多个 &lt;key, value&gt; 则表示需同时满足这些条件，是 与的关系，如果需要 或关系，可使用 [command.or]((Command.or))\n\n#### 查询指令Command\n\n**指令用于查询时，都会写在where内**，主要对字段的值进行比较和逻辑的筛选判断。数据库 API 提供了大于、小于等多种查询指令，这些指令都暴露在 db.command 对象上。\n\n**比较操作符和逻辑操作符**\n\n下面我们把查询指令的比较操作符和逻辑操作符整理成了一张表格，并附上相应的技术文档，方便大家对它们有一个清晰而整体的认识。\n\n|                        查询指令之比较                        |            |                                                              |            |\n| :----------------------------------------------------------: | ---------- | ------------------------------------------------------------ | ---------- |\n| [gt](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gt.html) | 大于       | [lt](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lt.html) | 小于       |\n| [eq](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.eq.html) | 等于       | [neq](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.neq.html) | 不等于     |\n| [lte](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lte.html) | 小于或等于 | [gte](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gte.html) | 大于或等于 |\n| [in](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.in.html) | 在数组中   | [nin](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nin.html) | 不在数组中 |\n|                        查询指令之逻辑                        |            |                                                              |            |\n| [and](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.and.html) | 条件与     | [or](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.or.html) | 条件或     |\n| [not](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.not.html) | 条件非     | [nor](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nor.html) | 都不       |\n\n**字段内的逻辑指令**\n\n```javascript\n.where({\n    province:_.eq(\"广东\"),\n    gdp:_.gt(3000).and(_.lt(10000))\n  })\n```\n\n**跨字段的逻辑指令**\n\n```javascript\n  .where(\n    {\n     gdp: _.gt(3000),\n     resident_pop:_.gt(500), \n     },\n    _.or([{\n     builtup_area: _.gt(300)}\n     ]), \n  )\n```\n\n#### 正则查询db.RegExp\n\n**正则查询也是写在where字段的条件筛选里。**\n\n**技术文档：**[Database.RegExp](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Database.RegExp.html)\n\n**字段字符串的模糊查询**\n\n#### 在小程序端新增记录和统计记录\n\n**统计记录Collection.count**\n\n> field、orderBy、skip、limit对count是无效的，只有where才会影响count的结果，count只会返回记录数，不会返回查询到的数据\n\n**新增记录Collection.add**\n\n```javascript\naddDaily(){\n    db.collection('zhihu_daily').add({\n      data: {\n        _id:\"daily9718005\",\n        title: \"元素，生生不息的宇宙诸子\",\n        images: [\n    \"https://pic4.zhimg.com/v2-3c5d866701650615f50ff4016b2f521b.jpg\"\n  ],\n        id: 9718005,\n        url: \"https://daily.zhihu.com/story/9718005\",\n        image: \"https://pic2.zhimg.com/v2-c6a33965175cf81a1b6e2d0af633490d.jpg\",\n        share_url: \"http://daily.zhihu.com/story/9718005\",\n        body:\"<p><strong><strong>谨以此文，纪念元素周期表发布 150 周年。</strong></strong></p>\\r\\n<p>地球，世界，和生活在这里的芸芸众生从何而来，这是每个人都曾有意无意思考过的问题。</p>\\r\\n<p>科幻小说家道格拉斯·亚当斯给了一个无厘头的答案，42；宗教也给出了诸神创世的虚构场景；</p>\\r\\n<p>最为恢弘的画面，则是由科学给出的，另一个意义上的<strong>生死轮回，一场属于元素的生死轮回</strong>。</p>\"\n      }\n    })\n      .then(res => {\n        console.log(res)\n      })\n      .catch(console.error)\n  }\n```\n\n**_openid与集合权限**\n\n#### 云函数端操作集合内记录\n\n```javascript\nconst db = cloud.database()\nconst _ = db.command\nreturn await db.collection(\"china\") \n  .where({           \n    gdp: _.gt(3000)    \n  })\n  .field({           \n    _id: false, \n    city: true,\n    province: true,\n    gdp: true\n  })\n  .orderBy('gdp', 'desc') \n  .skip(0) \n  .limit(10) \n  .get()\n```\n\n> **try/catch async错误处理**\n>\n> 当 async 函数中只要一个 await 出现 reject 状态，则后面的 await 都不会被执行。如果有多个 await 则可以将其都放在 try/catch 中。\n\n**删除多条数据记录**\n\n**更新多条记录Collection.update**\n\n#### 操作单个记录doc的字段值\n\n> 查询集合collection里的记录常用于获取文章、资讯、商品、产品等等的**列表**；而查询单个记录doc的字段值则常用于这些列表里的**详情**内容。如果你在开发中需要增删改查某个记录的字段值，为了方便让程序可以根据_id找到对应的记录，建议在创建记录的时候_id用程序有规则的生成。\n\n**查询单个记录doc的字段值**\n\n**技术文档：**[获取单个记录数据Document.get()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.get.html)\n\n```javascript\ndb.collection('zhihu_daily').doc(\"daily9718006\")\n  .get()\n  .then(res => {\n  console.log('单个记录的值',res.data)\n  })\n  .catch(err => {\n    console.error(err)\n  })\n},\n```\n\n**删除单条记录**\n\n**技术文档：**[删除单个记录Document.remove()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.remove.html)\n\n```javascript\n  removeDaily(){\n    db.collection('zhihu_daily').doc(\"daily9718006\")\n      .remove()\n      .then(console.log)\n      .catch(console.error)\n  }\n```\n\n**更新单条记录**\n\n**技术文档：**[更新单个记录Document.update()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.update.html)\n\n```javascript\n updateDaily(){\n    db.collection('zhihu_daily').doc(\"daily9718006\")\n      .update({\n        data:{\n          title: \"【知乎日报】元素，生生不息的宇宙诸子\",\n        }\n      })\n  },\n```\n\n**替换更新记录**\n\n**技术文档：**[替换更新单个记录Document.set()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.set.html)\n\n```javascript\n  setDaily(){\n    db.collection('zhihu_daily').doc(\"daily9718006\")\n      .set({\n        data: {\n          \"title\": \"为什么狗会如此亲近人类?\",\n          \"images\": [\n            \"https://pic4.zhimg.com/v2-4cab2fbf4fe9d487910a6f2c54ab3ed3.jpg\"\n          ],\n          \"id\": 9717547,\n          \"url\": \"https://daily.zhihu.com/story/9717547\",\n          \"image\": \"https://pic4.zhimg.com/v2-60f220ee6c5bf035d0eaf2dd4736342b.jpg\",\n          \"share_url\": \"http://daily.zhihu.com/story/9717547\",\n          \"body\":  \"<p>让狗从凶猛的野兽变成忠实的爱宠，涉及了宏观与微观上的两层故事：我们如何在宏观上驯养了它们，以及这些驯养在生理层面究竟意味着什么。</p>\\r\\n<p><img class=\\\"content-image\\\" src=\\\"http://pic1.zhimg.com/70/v2-4147c4b02bf97e95d8a9f00727d4c184_b.jpg\\\" alt=\\\"\\\"></p>\\r\\n<p>狗是灰狼（Canis lupus）被人类驯养后形成的亚种，至少可以追溯到 1 万多年以前，是人类成功驯化的第一种动物。在这漫长的岁月里，人类的定向选择强烈改变了这个驯化亚种的基因频率，使它呈现出极高的多样性，尤其体现在生理形态上。</p>\"\n        }\n      })\n  }\n```\n\n# 存储、数组、对象\n\n在实际开发中**云存储里的文件链接需要被记录在数据库里才方便调用**.\n\n**如何操作数据库的数组和对象等复杂数据类型的增删改查**。\n\n#### 云存储与数据库的关系\n\n**数据库的设计与结构**\n\n和Excel表、关系型数据库（如MySQL）以行和列、多表关系来设计表结构不同的是，云开发的数据库是基于文档的。我们可以在一个记录里嵌套多层数组和对象，把每个文档所需要的数据都嵌入到一个文档里，而不是分散到多个不同的集合。\n\n**fileID是存储与数据库的纽带**\n\n云存储与数据库就是**通过fileID来取得联系**的，数据库**只记录文件在云存储的fileID**，我们可以访问数据库相应的fileID属性进行记录的增删改查操作，与此同时调用云存储的上传文件、下载文件、删除文件等API，这样云存储就被数据库给管理起来了。\n\n#### 建立用户与数据的关系\n\n**openid与云开发**\n\n**_id与云开发**\n\n**判断用户是否存在并创建记录**\n\n#### async/await的使用说明\n\nasync 是“异步”的简写，async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成，await 只能出现在 async 函数中。await 在 async 函数中才会有效。假设一个业务需要分步完成，每个步骤都是异步的，而且依赖上一步的执行结果，甚至依赖之前每一步的结果，就可以使用Async Await来完成","slug":"腾讯犀牛鸟云开发校园技术布道师养成计划第七天","published":1,"updated":"2022-08-25T14:12:05.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39c004s12mjfv0u47lj","content":"<h1 id=\"云数据库入门\"><a href=\"#云数据库入门\" class=\"headerlink\" title=\"云数据库入门\"></a>云数据库入门</h1><p><strong>任何</strong>一个大型的应用程序和服务，都<strong>必须</strong>会使用到<strong>高性能的</strong>数据存储解决方案，用来<strong>准确</strong>（ACID,原子性Atomicity、一致性Consistency、隔离性Isolation、持久性Durability，可以拓展了解一下）、<strong>快速</strong>、<strong>可靠</strong>地<strong>存储和检索</strong>用户的账户信息、商品以及商品交易信息、产品数据、资讯文章等等等等，而云开发就自带高性能、高可用、高拓展性且安全的数据库。</p>\n<h4 id=\"云数据库的基础知识\"><a href=\"#云数据库的基础知识\" class=\"headerlink\" title=\"云数据库的基础知识\"></a>云数据库的基础知识</h4><blockquote>\n<p>在操作数据库时，我们要对<strong>数据库database</strong>、<strong>集合collection</strong>、<strong>记录doc</strong>以及<strong>字段field</strong>要有一定的了解，首先要<strong>记住这些对应的英文单词</strong>，当你要操作某个记录doc的字段内容时，就像投送快递一样，要先搞清楚它到底在哪个数据库、在哪个集合、在哪个记录里，一级一级的去找。操作数据库通常都是对数据库、集合、记录、字段进行<strong>增、删、改、查</strong>，当你清楚了这些，操作数据库就不会迷糊了。</p>\n</blockquote>\n<p><strong>云数据库与Excel、MySQL的对应理解</strong></p>\n<p>我们可以结合Excel以及MySQL（之前没有接触过MySQL也没有关系，只看与Excel的对应就行）来理解云开发的数据库。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">云数据库</th>\n<th><strong>MySQL数据库</strong></th>\n<th><strong>Excel文件</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据库database</td>\n<td>数据库 <strong>database</strong></td>\n<td>工作簿</td>\n</tr>\n<tr>\n<td align=\"center\">集合 collection</td>\n<td>表 <strong>table</strong></td>\n<td>工作表</td>\n</tr>\n<tr>\n<td align=\"center\">字段field</td>\n<td>数据列<strong>column</strong></td>\n<td>数据表的每一列</td>\n</tr>\n<tr>\n<td align=\"center\">记录 record/doc</td>\n<td>记录<strong>row</strong></td>\n<td>数据表除开第一行的每一行</td>\n</tr>\n</tbody></table>\n<p><strong>集合的创建与数据类型</strong></p>\n<h4 id=\"数据库的权限控制与安全规则\"><a href=\"#数据库的权限控制与安全规则\" class=\"headerlink\" title=\"数据库的权限控制与安全规则\"></a>数据库的权限控制与安全规则</h4><p>在数据库创建之后，我们需要在云开发控制台-数据库-集合的权限设置标签对数据库进行<strong>权限设置</strong>。<strong>数据库的权限分为**</strong>小程序端**<strong>和**</strong>服务端**<strong>（云函数、云开发控制台</strong>）。服务端拥有读写所有数据的读写权限，所以这里的权限设置<strong>只是在设置小程序端的用户对数据库的操作权限</strong>。权限控制分简易权限控制和自定义权限（也就是安全规则），<strong>建议开发者用安全规则取代简易的权限控制</strong>。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/permission.html\">权限控制</a></p>\n<h4 id=\"一窥数据查询的全貌\"><a href=\"#一窥数据查询的全貌\" class=\"headerlink\" title=\"一窥数据查询的全貌\"></a><strong>一窥数据查询的全貌</strong></h4><p><strong>查询集合collection里的记录</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//获取数据库的引用</span>\n<span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>command     <span class=\"token comment\">//获取数据库查询及更新指令</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"china\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//获取集合china的引用</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>              <span class=\"token comment\">//查询的条件指令where</span>\n    gdp<span class=\"token operator\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//查询筛选条件，gt表示字段需大于指定值。</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>             <span class=\"token comment\">//显示哪些字段</span>\n    _id<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">//默认显示_id，这个隐藏</span>\n    city<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    province<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    gdp<span class=\"token operator\">:</span><span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gdp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//排序方式，降序排列</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                 <span class=\"token comment\">//跳过多少个记录（常用于分页），0表示这里不跳过</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\">//限制显示多少条记录，这里为10</span>\n \n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">//获取根据查询条件筛选后的集合数据  </span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>大家可以留意一下数据查询的<strong>链式写法</strong>， wx.cloud.database().collection(‘数据库名’).where().get().then().catch()，前半部分是数据查询时对对象的引用和方法的调用；后半部分是Promise对象的方法，Promise对象是get的返回值。写的时候为了让结构更加清晰，我们做了换行处理，写在同一行也是可以的。</p>\n</blockquote>\n<h4 id=\"构建查询条件的5个方法\"><a href=\"#构建查询条件的5个方法\" class=\"headerlink\" title=\"构建查询条件的5个方法\"></a>构建查询条件的5个方法</h4><p>在上面的案例中，就包含了构建查询条件的五个方法： Collection.where()、 Collection.field()、 Collection.orderBy()、 Collection.skip()、 Collection.limit()，这五个方法是可以单独拆开使用的，比如只使用where或只使用field、limit，也可以从这5个中抽几个组合在一起使用，还可以一次查询里写多个相同的方法，比如orderBy、where可以写多次相同的。</p>\n<ul>\n<li><strong>指令查询条件 where，</strong>注意在后面我们会介绍的<strong>command查询指令</strong>比如筛选字段大于/小于/不等于某个值的比较指令，同时满足多个筛选条件的逻辑指令等，以及<strong>模糊查询的正则</strong>都是写在where内；</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.where.html\">Collection.where</a></p>\n<ul>\n<li><strong>指定返回哪些字段field，</strong>查询时只需要传入 true|false（或 1|-1）就可以返回或不返回哪些字段，在上面的案例里我们就只返回city、province、gdp三个字段的值：</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.field.html\">Collection.field</a></p>\n<ul>\n<li><strong>数据排序orderBy，</strong>排序的语法如下，里面为排序的条件，这里的字段名可不受field的限制（不在field内，没有显示，但是还是会起作用）： orderBy(‘字段名’, ‘排序方式’)。<br>排序方式只支持<strong>desc降序</strong>、<strong>asc升序</strong>这两种方式，如果字段里面的值时数字就按照大小，如果是字母就按照先后顺序，<strong>不支持中文的排序方式</strong>。排序支持按多个字段排序，多次调用 orderBy 即可，多字段排序时的顺序会按照 orderBy 调用顺序先后对多个字段排序。如果需要对嵌套字段排序，可以使用点表示法，比如上面的books根据出版年份year从旧到新排序，可以写为 orderBy(‘publishInfo.year’, ‘asc’)。</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.orderBy.html\">Collection.orderBy</a></p>\n<ul>\n<li><strong>分页显示skip，</strong>skip常与limit一起用于分页，比如商品列表一页只显示20个商品，第1页显示整个数据的0~20个，那么第2页我们用skip(20)可以跳过第一页的20条数据，第3页则跳过40个数据，第N页则是skip((n-1)*20)个数据：</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.skip.html\">Collection.skip</a></p>\n<ul>\n<li><strong>限制数量上限的limit，</strong>集合数据查询的数量上限limit在小程序端最大数量为20，在服务端为100，比如limit(30)在小程序端还是只会显示20条数据，更多数据则需要我们结合分页skip与javascript进行编程处理。</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.limit.html\">Collection.limit</a></p>\n<blockquote>\n<p>小程序查询数据显示的结果虽然有数量限制，比如服务端为100个，但是排序仍然是基于整个集合的数据进行排序的，并不是只针对这100个数据。</p>\n</blockquote>\n<h4 id=\"匹配查询\"><a href=\"#匹配查询\" class=\"headerlink\" title=\"匹配查询\"></a><strong>匹配查询</strong></h4><p>传入的对象的每个 &lt;key, value&gt; 构成一个筛选条件，有多个 &lt;key, value&gt; 则表示需同时满足这些条件，是 与的关系，如果需要 或关系，可使用 <a href=\"(Command.or)\">command.or</a></p>\n<h4 id=\"查询指令Command\"><a href=\"#查询指令Command\" class=\"headerlink\" title=\"查询指令Command\"></a>查询指令Command</h4><p><strong>指令用于查询时，都会写在where内</strong>，主要对字段的值进行比较和逻辑的筛选判断。数据库 API 提供了大于、小于等多种查询指令，这些指令都暴露在 db.command 对象上。</p>\n<p><strong>比较操作符和逻辑操作符</strong></p>\n<p>下面我们把查询指令的比较操作符和逻辑操作符整理成了一张表格，并附上相应的技术文档，方便大家对它们有一个清晰而整体的认识。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">查询指令之比较</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gt.html\">gt</a></td>\n<td>大于</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lt.html\">lt</a></td>\n<td>小于</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.eq.html\">eq</a></td>\n<td>等于</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.neq.html\">neq</a></td>\n<td>不等于</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lte.html\">lte</a></td>\n<td>小于或等于</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gte.html\">gte</a></td>\n<td>大于或等于</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.in.html\">in</a></td>\n<td>在数组中</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nin.html\">nin</a></td>\n<td>不在数组中</td>\n</tr>\n<tr>\n<td align=\"center\">查询指令之逻辑</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.and.html\">and</a></td>\n<td>条件与</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.or.html\">or</a></td>\n<td>条件或</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.not.html\">not</a></td>\n<td>条件非</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nor.html\">nor</a></td>\n<td>都不</td>\n</tr>\n</tbody></table>\n<p><strong>字段内的逻辑指令</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    province<span class=\"token operator\">:</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"广东\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    gdp<span class=\"token operator\">:</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>跨字段的逻辑指令</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n   gdp<span class=\"token operator\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   resident_pop<span class=\"token operator\">:</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  _<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n   builtup_area<span class=\"token operator\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正则查询db-RegExp\"><a href=\"#正则查询db-RegExp\" class=\"headerlink\" title=\"正则查询db.RegExp\"></a>正则查询db.RegExp</h4><p><strong>正则查询也是写在where字段的条件筛选里。</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Database.RegExp.html\">Database.RegExp</a></p>\n<p><strong>字段字符串的模糊查询</strong></p>\n<h4 id=\"在小程序端新增记录和统计记录\"><a href=\"#在小程序端新增记录和统计记录\" class=\"headerlink\" title=\"在小程序端新增记录和统计记录\"></a>在小程序端新增记录和统计记录</h4><p><strong>统计记录Collection.count</strong></p>\n<blockquote>\n<p>field、orderBy、skip、limit对count是无效的，只有where才会影响count的结果，count只会返回记录数，不会返回查询到的数据</p>\n</blockquote>\n<p><strong>新增记录Collection.add</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">addDaily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        _id<span class=\"token operator\">:</span><span class=\"token string\">\"daily9718005\"</span><span class=\"token punctuation\">,</span>\n        title<span class=\"token operator\">:</span> <span class=\"token string\">\"元素，生生不息的宇宙诸子\"</span><span class=\"token punctuation\">,</span>\n        images<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"https://pic4.zhimg.com/v2-3c5d866701650615f50ff4016b2f521b.jpg\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">9718005</span><span class=\"token punctuation\">,</span>\n        url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://daily.zhihu.com/story/9718005\"</span><span class=\"token punctuation\">,</span>\n        image<span class=\"token operator\">:</span> <span class=\"token string\">\"https://pic2.zhimg.com/v2-c6a33965175cf81a1b6e2d0af633490d.jpg\"</span><span class=\"token punctuation\">,</span>\n        share_url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://daily.zhihu.com/story/9718005\"</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span><span class=\"token string\">\"&lt;p&gt;&lt;strong&gt;&lt;strong&gt;谨以此文，纪念元素周期表发布 150 周年。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;\\r\\n&lt;p&gt;地球，世界，和生活在这里的芸芸众生从何而来，这是每个人都曾有意无意思考过的问题。&lt;/p&gt;\\r\\n&lt;p&gt;科幻小说家道格拉斯·亚当斯给了一个无厘头的答案，42；宗教也给出了诸神创世的虚构场景；&lt;/p&gt;\\r\\n&lt;p&gt;最为恢弘的画面，则是由科学给出的，另一个意义上的&lt;strong&gt;生死轮回，一场属于元素的生死轮回&lt;/strong&gt;。&lt;/p&gt;\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>_openid与集合权限</strong></p>\n<h4 id=\"云函数端操作集合内记录\"><a href=\"#云函数端操作集合内记录\" class=\"headerlink\" title=\"云函数端操作集合内记录\"></a>云函数端操作集合内记录</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> cloud<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>command\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"china\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>           \n    gdp<span class=\"token operator\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>           \n    _id<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> \n    city<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    province<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    gdp<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gdp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><strong>try/catch async错误处理</strong></p>\n<p>当 async 函数中只要一个 await 出现 reject 状态，则后面的 await 都不会被执行。如果有多个 await 则可以将其都放在 try/catch 中。</p>\n</blockquote>\n<p><strong>删除多条数据记录</strong></p>\n<p><strong>更新多条记录Collection.update</strong></p>\n<h4 id=\"操作单个记录doc的字段值\"><a href=\"#操作单个记录doc的字段值\" class=\"headerlink\" title=\"操作单个记录doc的字段值\"></a>操作单个记录doc的字段值</h4><blockquote>\n<p>查询集合collection里的记录常用于获取文章、资讯、商品、产品等等的<strong>列表</strong>；而查询单个记录doc的字段值则常用于这些列表里的<strong>详情</strong>内容。如果你在开发中需要增删改查某个记录的字段值，为了方便让程序可以根据_id找到对应的记录，建议在创建记录的时候_id用程序有规则的生成。</p>\n</blockquote>\n<p><strong>查询单个记录doc的字段值</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.get.html\">获取单个记录数据Document.get()</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily9718006\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'单个记录的值'</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>删除单条记录</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.remove.html\">删除单个记录Document.remove()</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">removeDaily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily9718006\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>更新单条记录</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.update.html\">更新单个记录Document.update()</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">updateDaily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily9718006\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n       data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n         title<span class=\"token operator\">:</span> <span class=\"token string\">\"【知乎日报】元素，生生不息的宇宙诸子\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>替换更新记录</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.set.html\">替换更新单个记录Document.set()</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setDaily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily9718006\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"为什么狗会如此亲近人类?\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"images\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"https://pic4.zhimg.com/v2-4cab2fbf4fe9d487910a6f2c54ab3ed3.jpg\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9717547</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://daily.zhihu.com/story/9717547\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"image\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://pic4.zhimg.com/v2-60f220ee6c5bf035d0eaf2dd4736342b.jpg\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"share_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://daily.zhihu.com/story/9717547\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"body\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"&lt;p&gt;让狗从凶猛的野兽变成忠实的爱宠，涉及了宏观与微观上的两层故事：我们如何在宏观上驯养了它们，以及这些驯养在生理层面究竟意味着什么。&lt;/p&gt;\\r\\n&lt;p&gt;&lt;img class=\\\"content-image\\\" src=\\\"http://pic1.zhimg.com/70/v2-4147c4b02bf97e95d8a9f00727d4c184_b.jpg\\\" alt=\\\"\\\"&gt;&lt;/p&gt;\\r\\n&lt;p&gt;狗是灰狼（Canis lupus）被人类驯养后形成的亚种，至少可以追溯到 1 万多年以前，是人类成功驯化的第一种动物。在这漫长的岁月里，人类的定向选择强烈改变了这个驯化亚种的基因频率，使它呈现出极高的多样性，尤其体现在生理形态上。&lt;/p&gt;\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"存储、数组、对象\"><a href=\"#存储、数组、对象\" class=\"headerlink\" title=\"存储、数组、对象\"></a>存储、数组、对象</h1><p>在实际开发中<strong>云存储里的文件链接需要被记录在数据库里才方便调用</strong>.</p>\n<p><strong>如何操作数据库的数组和对象等复杂数据类型的增删改查</strong>。</p>\n<h4 id=\"云存储与数据库的关系\"><a href=\"#云存储与数据库的关系\" class=\"headerlink\" title=\"云存储与数据库的关系\"></a>云存储与数据库的关系</h4><p><strong>数据库的设计与结构</strong></p>\n<p>和Excel表、关系型数据库（如MySQL）以行和列、多表关系来设计表结构不同的是，云开发的数据库是基于文档的。我们可以在一个记录里嵌套多层数组和对象，把每个文档所需要的数据都嵌入到一个文档里，而不是分散到多个不同的集合。</p>\n<p><strong>fileID是存储与数据库的纽带</strong></p>\n<p>云存储与数据库就是<strong>通过fileID来取得联系</strong>的，数据库<strong>只记录文件在云存储的fileID</strong>，我们可以访问数据库相应的fileID属性进行记录的增删改查操作，与此同时调用云存储的上传文件、下载文件、删除文件等API，这样云存储就被数据库给管理起来了。</p>\n<h4 id=\"建立用户与数据的关系\"><a href=\"#建立用户与数据的关系\" class=\"headerlink\" title=\"建立用户与数据的关系\"></a>建立用户与数据的关系</h4><p><strong>openid与云开发</strong></p>\n<p><strong>_id与云开发</strong></p>\n<p><strong>判断用户是否存在并创建记录</strong></p>\n<h4 id=\"async-await的使用说明\"><a href=\"#async-await的使用说明\" class=\"headerlink\" title=\"async/await的使用说明\"></a>async/await的使用说明</h4><p>async 是“异步”的简写，async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成，await 只能出现在 async 函数中。await 在 async 函数中才会有效。假设一个业务需要分步完成，每个步骤都是异步的，而且依赖上一步的执行结果，甚至依赖之前每一步的结果，就可以使用Async Await来完成</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"云数据库入门\"><a href=\"#云数据库入门\" class=\"headerlink\" title=\"云数据库入门\"></a>云数据库入门</h1><p><strong>任何</strong>一个大型的应用程序和服务，都<strong>必须</strong>会使用到<strong>高性能的</strong>数据存储解决方案，用来<strong>准确</strong>（ACID,原子性Atomicity、一致性Consistency、隔离性Isolation、持久性Durability，可以拓展了解一下）、<strong>快速</strong>、<strong>可靠</strong>地<strong>存储和检索</strong>用户的账户信息、商品以及商品交易信息、产品数据、资讯文章等等等等，而云开发就自带高性能、高可用、高拓展性且安全的数据库。</p>\n<h4 id=\"云数据库的基础知识\"><a href=\"#云数据库的基础知识\" class=\"headerlink\" title=\"云数据库的基础知识\"></a>云数据库的基础知识</h4><blockquote>\n<p>在操作数据库时，我们要对<strong>数据库database</strong>、<strong>集合collection</strong>、<strong>记录doc</strong>以及<strong>字段field</strong>要有一定的了解，首先要<strong>记住这些对应的英文单词</strong>，当你要操作某个记录doc的字段内容时，就像投送快递一样，要先搞清楚它到底在哪个数据库、在哪个集合、在哪个记录里，一级一级的去找。操作数据库通常都是对数据库、集合、记录、字段进行<strong>增、删、改、查</strong>，当你清楚了这些，操作数据库就不会迷糊了。</p>\n</blockquote>\n<p><strong>云数据库与Excel、MySQL的对应理解</strong></p>\n<p>我们可以结合Excel以及MySQL（之前没有接触过MySQL也没有关系，只看与Excel的对应就行）来理解云开发的数据库。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">云数据库</th>\n<th><strong>MySQL数据库</strong></th>\n<th><strong>Excel文件</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据库database</td>\n<td>数据库 <strong>database</strong></td>\n<td>工作簿</td>\n</tr>\n<tr>\n<td align=\"center\">集合 collection</td>\n<td>表 <strong>table</strong></td>\n<td>工作表</td>\n</tr>\n<tr>\n<td align=\"center\">字段field</td>\n<td>数据列<strong>column</strong></td>\n<td>数据表的每一列</td>\n</tr>\n<tr>\n<td align=\"center\">记录 record/doc</td>\n<td>记录<strong>row</strong></td>\n<td>数据表除开第一行的每一行</td>\n</tr>\n</tbody></table>\n<p><strong>集合的创建与数据类型</strong></p>\n<h4 id=\"数据库的权限控制与安全规则\"><a href=\"#数据库的权限控制与安全规则\" class=\"headerlink\" title=\"数据库的权限控制与安全规则\"></a>数据库的权限控制与安全规则</h4><p>在数据库创建之后，我们需要在云开发控制台-数据库-集合的权限设置标签对数据库进行<strong>权限设置</strong>。<strong>数据库的权限分为**</strong>小程序端**<strong>和**</strong>服务端**<strong>（云函数、云开发控制台</strong>）。服务端拥有读写所有数据的读写权限，所以这里的权限设置<strong>只是在设置小程序端的用户对数据库的操作权限</strong>。权限控制分简易权限控制和自定义权限（也就是安全规则），<strong>建议开发者用安全规则取代简易的权限控制</strong>。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/permission.html\">权限控制</a></p>\n<h4 id=\"一窥数据查询的全貌\"><a href=\"#一窥数据查询的全貌\" class=\"headerlink\" title=\"一窥数据查询的全貌\"></a><strong>一窥数据查询的全貌</strong></h4><p><strong>查询集合collection里的记录</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//获取数据库的引用</span>\n<span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>command     <span class=\"token comment\">//获取数据库查询及更新指令</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"china\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//获取集合china的引用</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>              <span class=\"token comment\">//查询的条件指令where</span>\n    gdp<span class=\"token operator\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//查询筛选条件，gt表示字段需大于指定值。</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>             <span class=\"token comment\">//显示哪些字段</span>\n    _id<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">//默认显示_id，这个隐藏</span>\n    city<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    province<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    gdp<span class=\"token operator\">:</span><span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gdp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//排序方式，降序排列</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                 <span class=\"token comment\">//跳过多少个记录（常用于分页），0表示这里不跳过</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\">//限制显示多少条记录，这里为10</span>\n \n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">//获取根据查询条件筛选后的集合数据  </span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>大家可以留意一下数据查询的<strong>链式写法</strong>， wx.cloud.database().collection(‘数据库名’).where().get().then().catch()，前半部分是数据查询时对对象的引用和方法的调用；后半部分是Promise对象的方法，Promise对象是get的返回值。写的时候为了让结构更加清晰，我们做了换行处理，写在同一行也是可以的。</p>\n</blockquote>\n<h4 id=\"构建查询条件的5个方法\"><a href=\"#构建查询条件的5个方法\" class=\"headerlink\" title=\"构建查询条件的5个方法\"></a>构建查询条件的5个方法</h4><p>在上面的案例中，就包含了构建查询条件的五个方法： Collection.where()、 Collection.field()、 Collection.orderBy()、 Collection.skip()、 Collection.limit()，这五个方法是可以单独拆开使用的，比如只使用where或只使用field、limit，也可以从这5个中抽几个组合在一起使用，还可以一次查询里写多个相同的方法，比如orderBy、where可以写多次相同的。</p>\n<ul>\n<li><strong>指令查询条件 where，</strong>注意在后面我们会介绍的<strong>command查询指令</strong>比如筛选字段大于/小于/不等于某个值的比较指令，同时满足多个筛选条件的逻辑指令等，以及<strong>模糊查询的正则</strong>都是写在where内；</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.where.html\">Collection.where</a></p>\n<ul>\n<li><strong>指定返回哪些字段field，</strong>查询时只需要传入 true|false（或 1|-1）就可以返回或不返回哪些字段，在上面的案例里我们就只返回city、province、gdp三个字段的值：</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.field.html\">Collection.field</a></p>\n<ul>\n<li><strong>数据排序orderBy，</strong>排序的语法如下，里面为排序的条件，这里的字段名可不受field的限制（不在field内，没有显示，但是还是会起作用）： orderBy(‘字段名’, ‘排序方式’)。<br>排序方式只支持<strong>desc降序</strong>、<strong>asc升序</strong>这两种方式，如果字段里面的值时数字就按照大小，如果是字母就按照先后顺序，<strong>不支持中文的排序方式</strong>。排序支持按多个字段排序，多次调用 orderBy 即可，多字段排序时的顺序会按照 orderBy 调用顺序先后对多个字段排序。如果需要对嵌套字段排序，可以使用点表示法，比如上面的books根据出版年份year从旧到新排序，可以写为 orderBy(‘publishInfo.year’, ‘asc’)。</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.orderBy.html\">Collection.orderBy</a></p>\n<ul>\n<li><strong>分页显示skip，</strong>skip常与limit一起用于分页，比如商品列表一页只显示20个商品，第1页显示整个数据的0~20个，那么第2页我们用skip(20)可以跳过第一页的20条数据，第3页则跳过40个数据，第N页则是skip((n-1)*20)个数据：</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.skip.html\">Collection.skip</a></p>\n<ul>\n<li><strong>限制数量上限的limit，</strong>集合数据查询的数量上限limit在小程序端最大数量为20，在服务端为100，比如limit(30)在小程序端还是只会显示20条数据，更多数据则需要我们结合分页skip与javascript进行编程处理。</li>\n</ul>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.limit.html\">Collection.limit</a></p>\n<blockquote>\n<p>小程序查询数据显示的结果虽然有数量限制，比如服务端为100个，但是排序仍然是基于整个集合的数据进行排序的，并不是只针对这100个数据。</p>\n</blockquote>\n<h4 id=\"匹配查询\"><a href=\"#匹配查询\" class=\"headerlink\" title=\"匹配查询\"></a><strong>匹配查询</strong></h4><p>传入的对象的每个 &lt;key, value&gt; 构成一个筛选条件，有多个 &lt;key, value&gt; 则表示需同时满足这些条件，是 与的关系，如果需要 或关系，可使用 <a href=\"(Command.or)\">command.or</a></p>\n<h4 id=\"查询指令Command\"><a href=\"#查询指令Command\" class=\"headerlink\" title=\"查询指令Command\"></a>查询指令Command</h4><p><strong>指令用于查询时，都会写在where内</strong>，主要对字段的值进行比较和逻辑的筛选判断。数据库 API 提供了大于、小于等多种查询指令，这些指令都暴露在 db.command 对象上。</p>\n<p><strong>比较操作符和逻辑操作符</strong></p>\n<p>下面我们把查询指令的比较操作符和逻辑操作符整理成了一张表格，并附上相应的技术文档，方便大家对它们有一个清晰而整体的认识。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">查询指令之比较</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gt.html\">gt</a></td>\n<td>大于</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lt.html\">lt</a></td>\n<td>小于</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.eq.html\">eq</a></td>\n<td>等于</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.neq.html\">neq</a></td>\n<td>不等于</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.lte.html\">lte</a></td>\n<td>小于或等于</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.gte.html\">gte</a></td>\n<td>大于或等于</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.in.html\">in</a></td>\n<td>在数组中</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nin.html\">nin</a></td>\n<td>不在数组中</td>\n</tr>\n<tr>\n<td align=\"center\">查询指令之逻辑</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.and.html\">and</a></td>\n<td>条件与</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.or.html\">or</a></td>\n<td>条件或</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.not.html\">not</a></td>\n<td>条件非</td>\n<td><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/command/Command.nor.html\">nor</a></td>\n<td>都不</td>\n</tr>\n</tbody></table>\n<p><strong>字段内的逻辑指令</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    province<span class=\"token operator\">:</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"广东\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    gdp<span class=\"token operator\">:</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>跨字段的逻辑指令</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">&#123;</span>\n   gdp<span class=\"token operator\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   resident_pop<span class=\"token operator\">:</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  _<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n   builtup_area<span class=\"token operator\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正则查询db-RegExp\"><a href=\"#正则查询db-RegExp\" class=\"headerlink\" title=\"正则查询db.RegExp\"></a>正则查询db.RegExp</h4><p><strong>正则查询也是写在where字段的条件筛选里。</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Database.RegExp.html\">Database.RegExp</a></p>\n<p><strong>字段字符串的模糊查询</strong></p>\n<h4 id=\"在小程序端新增记录和统计记录\"><a href=\"#在小程序端新增记录和统计记录\" class=\"headerlink\" title=\"在小程序端新增记录和统计记录\"></a>在小程序端新增记录和统计记录</h4><p><strong>统计记录Collection.count</strong></p>\n<blockquote>\n<p>field、orderBy、skip、limit对count是无效的，只有where才会影响count的结果，count只会返回记录数，不会返回查询到的数据</p>\n</blockquote>\n<p><strong>新增记录Collection.add</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">addDaily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        _id<span class=\"token operator\">:</span><span class=\"token string\">\"daily9718005\"</span><span class=\"token punctuation\">,</span>\n        title<span class=\"token operator\">:</span> <span class=\"token string\">\"元素，生生不息的宇宙诸子\"</span><span class=\"token punctuation\">,</span>\n        images<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"https://pic4.zhimg.com/v2-3c5d866701650615f50ff4016b2f521b.jpg\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">9718005</span><span class=\"token punctuation\">,</span>\n        url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://daily.zhihu.com/story/9718005\"</span><span class=\"token punctuation\">,</span>\n        image<span class=\"token operator\">:</span> <span class=\"token string\">\"https://pic2.zhimg.com/v2-c6a33965175cf81a1b6e2d0af633490d.jpg\"</span><span class=\"token punctuation\">,</span>\n        share_url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://daily.zhihu.com/story/9718005\"</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span><span class=\"token string\">\"&lt;p>&lt;strong>&lt;strong>谨以此文，纪念元素周期表发布 150 周年。&lt;/strong>&lt;/strong>&lt;/p>\\r\\n&lt;p>地球，世界，和生活在这里的芸芸众生从何而来，这是每个人都曾有意无意思考过的问题。&lt;/p>\\r\\n&lt;p>科幻小说家道格拉斯·亚当斯给了一个无厘头的答案，42；宗教也给出了诸神创世的虚构场景；&lt;/p>\\r\\n&lt;p>最为恢弘的画面，则是由科学给出的，另一个意义上的&lt;strong>生死轮回，一场属于元素的生死轮回&lt;/strong>。&lt;/p>\"</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>_openid与集合权限</strong></p>\n<h4 id=\"云函数端操作集合内记录\"><a href=\"#云函数端操作集合内记录\" class=\"headerlink\" title=\"云函数端操作集合内记录\"></a>云函数端操作集合内记录</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> cloud<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>command\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"china\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>           \n    gdp<span class=\"token operator\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>    \n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>           \n    _id<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> \n    city<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    province<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    gdp<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gdp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><strong>try/catch async错误处理</strong></p>\n<p>当 async 函数中只要一个 await 出现 reject 状态，则后面的 await 都不会被执行。如果有多个 await 则可以将其都放在 try/catch 中。</p>\n</blockquote>\n<p><strong>删除多条数据记录</strong></p>\n<p><strong>更新多条记录Collection.update</strong></p>\n<h4 id=\"操作单个记录doc的字段值\"><a href=\"#操作单个记录doc的字段值\" class=\"headerlink\" title=\"操作单个记录doc的字段值\"></a>操作单个记录doc的字段值</h4><blockquote>\n<p>查询集合collection里的记录常用于获取文章、资讯、商品、产品等等的<strong>列表</strong>；而查询单个记录doc的字段值则常用于这些列表里的<strong>详情</strong>内容。如果你在开发中需要增删改查某个记录的字段值，为了方便让程序可以根据_id找到对应的记录，建议在创建记录的时候_id用程序有规则的生成。</p>\n</blockquote>\n<p><strong>查询单个记录doc的字段值</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.get.html\">获取单个记录数据Document.get()</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily9718006\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'单个记录的值'</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>删除单条记录</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.remove.html\">删除单个记录Document.remove()</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">removeDaily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily9718006\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>更新单条记录</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.update.html\">更新单个记录Document.update()</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">updateDaily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily9718006\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n       data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n         title<span class=\"token operator\">:</span> <span class=\"token string\">\"【知乎日报】元素，生生不息的宇宙诸子\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>替换更新记录</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/document/Document.set.html\">替换更新单个记录Document.set()</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setDaily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daily9718006\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"为什么狗会如此亲近人类?\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"images\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"https://pic4.zhimg.com/v2-4cab2fbf4fe9d487910a6f2c54ab3ed3.jpg\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9717547</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://daily.zhihu.com/story/9717547\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"image\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://pic4.zhimg.com/v2-60f220ee6c5bf035d0eaf2dd4736342b.jpg\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"share_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://daily.zhihu.com/story/9717547\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"body\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"&lt;p>让狗从凶猛的野兽变成忠实的爱宠，涉及了宏观与微观上的两层故事：我们如何在宏观上驯养了它们，以及这些驯养在生理层面究竟意味着什么。&lt;/p>\\r\\n&lt;p>&lt;img class=\\\"content-image\\\" src=\\\"http://pic1.zhimg.com/70/v2-4147c4b02bf97e95d8a9f00727d4c184_b.jpg\\\" alt=\\\"\\\">&lt;/p>\\r\\n&lt;p>狗是灰狼（Canis lupus）被人类驯养后形成的亚种，至少可以追溯到 1 万多年以前，是人类成功驯化的第一种动物。在这漫长的岁月里，人类的定向选择强烈改变了这个驯化亚种的基因频率，使它呈现出极高的多样性，尤其体现在生理形态上。&lt;/p>\"</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"存储、数组、对象\"><a href=\"#存储、数组、对象\" class=\"headerlink\" title=\"存储、数组、对象\"></a>存储、数组、对象</h1><p>在实际开发中<strong>云存储里的文件链接需要被记录在数据库里才方便调用</strong>.</p>\n<p><strong>如何操作数据库的数组和对象等复杂数据类型的增删改查</strong>。</p>\n<h4 id=\"云存储与数据库的关系\"><a href=\"#云存储与数据库的关系\" class=\"headerlink\" title=\"云存储与数据库的关系\"></a>云存储与数据库的关系</h4><p><strong>数据库的设计与结构</strong></p>\n<p>和Excel表、关系型数据库（如MySQL）以行和列、多表关系来设计表结构不同的是，云开发的数据库是基于文档的。我们可以在一个记录里嵌套多层数组和对象，把每个文档所需要的数据都嵌入到一个文档里，而不是分散到多个不同的集合。</p>\n<p><strong>fileID是存储与数据库的纽带</strong></p>\n<p>云存储与数据库就是<strong>通过fileID来取得联系</strong>的，数据库<strong>只记录文件在云存储的fileID</strong>，我们可以访问数据库相应的fileID属性进行记录的增删改查操作，与此同时调用云存储的上传文件、下载文件、删除文件等API，这样云存储就被数据库给管理起来了。</p>\n<h4 id=\"建立用户与数据的关系\"><a href=\"#建立用户与数据的关系\" class=\"headerlink\" title=\"建立用户与数据的关系\"></a>建立用户与数据的关系</h4><p><strong>openid与云开发</strong></p>\n<p><strong>_id与云开发</strong></p>\n<p><strong>判断用户是否存在并创建记录</strong></p>\n<h4 id=\"async-await的使用说明\"><a href=\"#async-await的使用说明\" class=\"headerlink\" title=\"async/await的使用说明\"></a>async/await的使用说明</h4><p>async 是“异步”的简写，async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成，await 只能出现在 async 函数中。await 在 async 函数中才会有效。假设一个业务需要分步完成，每个步骤都是异步的，而且依赖上一步的执行结果，甚至依赖之前每一步的结果，就可以使用Async Await来完成</p>\n"},{"title":"腾讯犀牛鸟云开发校园技术布道师养成计划第三天","top":false,"indexing":false,"date":"2020-03-19T09:01:22.000Z","_content":"\n# JavaScript入门\n\nJavaScript是目前世界上最流行的编程语言之一，它也是小程序开发最重要的基础语言。要做出一个功能复杂的小程序，除了需要掌握JavaScript的基本语法，还要了解如何使用JavaScript来操作小程序（通过API接口）.\n\n#### 控制台Console\n\n打开微信开发者工具，在**调试器**里可以看到**Console**、Sources、Network、Appdata、Wxml等标签，这些都是调试器的功能模块。 而**控制台Console**除了可以显示小程序的错误信息外，还可以用于输入和调试代码。\n\n**数学运算**\n\n**Console.log打印日志**\n\n**console.log打印数组Array**\n\n**console.log打印对象Object**\n\n#### 变量与赋值\n\nJavaScript可以使用**let语句声明变量**，使用**等号=**可以**给变量赋值**，等号=左侧为**变量名**，右侧为**给该变量赋的值**，变量的值可以是任何**数据类型**。JavaScript常见的数据类型有：数值（Number）、字符串（String）、布尔值（Boolean）、对象（Object）、函数（Function）等。\n\n**将数据赋值给变量**\n\n**变量的冲突与覆盖**\n\n#### 操作数组\n\n**分隔符join方法**\n\n**添加数组push方法**\n\n**移除最后一项pop方法**\n\n**技术文档：**[MDN数组Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\n> 了解一下数组的concat()、reverse()、shift()、slice()、sort()、splice()、unshift()方法   -> 连接、翻转、删除第一个、浅拷贝、排序、删除或替换现有元素或者原地添加新的元素、添加一个在开头\n\n#### 操作对象\n\n我们可以用点表示法访问对象的属性，通过给该属性赋值就能够添加和修改对象的属性的值了。\n\n**给对象添加属性**\n\n**删除对象的某个属性**  delete\n\n**更新对象的某个属性**  通过重新赋值的方式来更新\n\n#### 常量\n\n在前面我们知道变量的值可以通过重新赋值的方式来改变，但是有些数据我们希望是固定的（写死，不会经常改变），这个时候可以使用**const声明**创建一个值的**只读**引用。const声明和let声明挺像的。\n\n#### 字符串的操作\n\n**MDN文档是前端最为依赖的技术文档**\n\n**技术文档：**[MDN技术文档之JavaScript标准库之String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n#### Math对象\n\nMath是一个内置对象， 它具有数学常数和函数的属性和方法，但**它不是一个函数对象。**\n\n#### Date对象\n\nDate 对象用于处理日期和时间。时间有年、月、日、星期、小时、分钟、秒、毫秒以及时区的概念，因此Date对象属性和方法也显得比较多。\n\n#### 全局对象wx\n\nwx是小程序的全局对象，用于承载小程序能力相关 API。小程序开发框架提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，了解网络状态等。\n\n**技术文档：**[API技术文档](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API)\n\n**了解网络状态**\n\n**获取网络类型技术文档：**[wx.getNetworkType()](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getNetworkType.html)\n\n**了解用户信息**\n\n**获取用户信息技术文档：**[wx.getUserInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html)\n\n**获取设备信息**\n\n**获取设备信息技术文档：**[wx.getSystemInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html)\n\n**页面链接跳转**\n\n**页面跳转技术文档：**[wx.navigateTo()](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html)\n\n除了可以获取到用户、设备、网络等的信息，使用控制台来调用对象的方法也可以执行一些动作，比如页面跳转。\n\n还可以返回页面的上一层，在控制台里输入\n\n**页面返回技术文档：**[wx.navigateBack()](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html)\n\n**显示消息提示框**\n\n**显示消息提示框技术文档：**[wx.showToast()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html)\n\n**设置当前页面的标题**\n\n**设置标题技术文档：**[wx.setNavigationBarTitle()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html)\n\n**打开文件选择**\n\n**打开文件选择技术文档：**[wx.chooseImage()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html)\n\n# 点击事件\n\n**事件**是视图层到逻辑层的通信方式，当我们**点击tap**、**触摸touch**、**长按longpress**小程序**绑定了事件的组件**时，就会触发事件，执行逻辑层中对应的**事件处理函数**。\n\n> 小程序框架的视图层由 WXML 与 WXSS 来编写的，由组件来进行展示。将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。\n\n#### 页面滚动\n\n函数名scrollToPosition和scrollToTop是可以自己定义的，然后我们再来在相应的js文件里要添加和函数名scrollToPosition和scrollToTop对应的事件处理函数。\n\n当用户点击该button组件的时候会在该页面对应的Page中找到相应的事件处理函数。保存编译之后，看看是不是就有了页面滚动的效果了？原理是scrollToTop()和scrollToPosition()这两个函数实际上都是调用了同一个小程序的**滚动API** wx.pageScrollTo()，关于该API的具体参数信息，我们可以查阅技术文档。\n\n**滚动API技术文档：**[wx.pageScrollTo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/scroll/wx.pageScrollTo.html)\n\n在官方文档我们可以看到wx.pageScrollTo()的作用是将页面滚动到目标位置，支持选择器和滚动距离两种方式定位\n\n- scrollTop滚动到页面的目标位置，单位 px，值为0就是滚动到顶部；值为600就是\n- duration是滚动动画的时长，单位为ms，而1秒=1000毫秒\n\n那如何滚动到指定的选择器的位置呢？前面我们已经给view分别添\n\n#### 消息提示框Toast\n\n消息提示框是移动端App、H5(WebApp)、小程序经常会使用到的一个交互界面。\n\n**消息提示技术文档：**[wx.showToast(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html)\n\n- title：为必填，提示的内容\n- icon：只有三个选项，success、loading、none，大家可以自行测试一下三个不同取值的效果\n- duration：提示延迟的时间，默认为1500毫秒，也就是1.5秒\n\n#### 模态对话框\n\n**模态对话框技术文档：**[wx.showModal(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html)\n\n**千变万化之API**\n\n阅读API的技术文档，就要了解该API有哪些属性，属性代表得是什么含义，属性是什么类型（**这一点非常重要**），以及它的默认值是什么，可以有哪些取值。\n\n- title属性不是必填，删除title的赋值，就不会显示标题啦；\n- content属性也不是必填，为提示的内容；\n- showCancel默认值就是true，意思是默认显示取消按钮，改为false就不显示了\n- confirmText默认值为确定，你可以改成别的试试\n\n\n\n编译之后点击模态框的取消和确定按钮，看打印出来什么结果。当点击确认时，res.confirm的值为true，就执行if分支里的语句；当res.cancel的值为true，就执行res.cancel的语句。在**模态对话框技术文档：**[wx.showModal(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html)也有**object.success 回调函数**的说明。\n\n> **success、fail、complete回调函数** 在技术文档里可以看到属性里有success和fail两个回调函数，success为接口调用成功的回调函数；fail为接口调用失败的回调函数。关于这方面的知识大家可以阅读技术文档[小程序API](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API)，大致了解一下异步API与回调函数的参数，理解异步 API 的执行结果需要通过 Object 类型的参数中传入的对应回调函数获取。\n\n#### 手机振动\n\n手机振动API分两种，一种是长振动，一种是短振动，两个API写法大致相同.\n\n**长振动技术文档：**[wx.vibrateLong()](https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateLong.html)\n\n在长振动技术文档里我们再次看到API里三个回调函数，success、fail、complete。在模拟器上点击按钮时，就可以看到打印日志。console.error向控制台的console中打印 error 日志，如果不能调用长振动，那一般是手机权限的问题了\n\n**弹出操作菜单**\n\n点击按钮就会弹出显示**添加照片**、**删除照片**、**更新照片**、**查询更多**等选项的操作菜单，当然我们点击操作菜单的选项之后是没有反应的，点击之后的反应还需要我们以后来写事件处理函数才行。\n\n**success回调函数**\n\n当我们点击操作菜单的不同选项时，会返回不同的数字，这取决于success回调函数里的e.tapIndex的值。在官方文档里我们可以了解到，当用户点击的按钮序号，从上到下的顺序，从0开始，相当于对应着数组itemList的序号，这样就为我们以后根据不同的菜单选项来执行不同的操作提供了可能。\n\n#### 页面路由\n\n页面路由是一个非常重要的概念，打开新页面、页面返回、Tab页面切换、页面重定向等都是也能路由的不同方式。\n\n> 关于页面路由，大家可以阅读一下[页面路由技术文档](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html)，页面路由我们可以简单的理解为对页面链接的管理，根据不同的url链接来显示不同的内容和页面信息。\n\n**Navigator组件与页面路由API**\n\n|                       **页面路由API**                        | **Navigator open-type值** | **含义**                                                     |\n| :----------------------------------------------------------: | ------------------------- | ------------------------------------------------------------ |\n| [redirectTo](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html) | redirect                  | 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。 |\n| [navigateTo](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html) | navigate                  | 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。 |\n| [navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html) | navigateBack              | 关闭当前页面，返回上一页面或多级页面。                       |\n| [switchTab](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html) | switchTab                 | 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面             |\n| [reLaunch](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html) | reLaunch                  | 关闭所有页面，打开到应用内的某个页面                         |\n\n> Navigator组件可以做到的事情，使用JavaScript调用小程序也能路由API也可以做到。Navigator组件的内容是写死的，而JavaScript则可以提供动态的数据。\n\n**返回上一页**\n\n点击**保留页面跳转按钮**以及**返回上一页**按钮，这样我们就可以在小程序里通过点击组件实现了页面的切换与页面的返回。而如果是使用wx.redirectTo跳转到新的页面就没法使用返回上一页了。\n\n> wx.navigateTo 是保留当前页面、跳转到应用内的某个页面，使用 wx.navigateBack可以返回到原页面。对于页面不是特别多的小程序，且页面间存在经常切换时，推荐使用 wx.navigateTo进行跳转， 然后返回，提高加载速度。\n\n# 页面渲染\n\n#### 将变量值渲染到页面\n\n**将变量值渲染到页面**\n\n**toString()方法**\n\n**技术文档：**[toString()方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString)\n\n#### 响应的数据绑定\n\n逻辑层js文件里的data数据，无论是基础的字符串、数组、对象等，还是通过变量给赋的值，都可以渲染到页面。不仅如此，只要对逻辑层data里的数据进行修改，视图层也会做相应的更新，我们称之为响应的数据绑定，而这是通过Page的setData()方法来实现的。\n\n\n\n#### 响应的布尔操作\n\n在前面我们已经了解到，有些组件的私有属性的数据类型为Boolean布尔值，比如视频、Swiper轮播组件是否自动播放、是否轮播，视频组件是否显示播放按钮等等，这些我们都可以使用setData将true改为false，false改为true来达到控制的目的。\n\n在交互方面，响应的布尔操作可以用于单一属性true与false的切换，比如显示与隐藏、展开与折叠、聚焦与失焦、选中与不选中。\n\n在开发者工具的模拟器里点击按钮，我们发现静音和取消静音都是这个按钮。这里的感叹号 !是逻辑非的意思，可以理解为not。\n\n> this.setData和 this.data都用到了一个关键字 this。 this和中文里的“这个的”有类似的指代作用，在方法中， this 指代该方法所属的对象，比如这里的是Page对象， this.data就是指Page函数对象里的data对象。\n\n#### 响应的数组操作\n\n> 数组操作知识，push为往数组的末尾新增数据，而pop则删除数组末尾一行的数据，join为数组数据之前的连接符。\n\n点击按钮**新增一行**，触发绑定的事件处理函数**addLine**，首先会执行extraLine数组新增一条数据“新增的内容”，但是这时extraLine和text还没有关系，这时在setData()函数里将initData和extraLine进行拼接（注意extraLine本来是一个数组，但是调用join方法后返回的是数组的值拼接好的字符串）。点击按钮删除最后一行，会先删除extraLine数组里最后一行的数据。\n\n> 小任务：新增内容过于单一，我们可以给它后面添加一个随机数，将 extraLine.push('新增的内容')改成 extraLine.push('新增的内容'+Math.random())，再来看看新增数据的效果，关于Math.random()大家可以自行去MDN查阅。大家也可以把拼接的连接符由 \\n换成其他字符。\n\n#### 函数与调用函数\n\n函数的作用，可以写一次代码，然后反复地重用这个代码。**JavaScript的函数本身也是对象**，因此可以把函数赋值给变量，或者作为参数传递给其他函数。\n\n**函数的定义和结构**\n\n我们可以使用**function**关键词来定义一个函数，括号()里为函数的参数，参数可以有很多个，使用逗号,隔开；函数要执行的代码（语句）使用大括号包住：\n\n```javascript\nfunction 函数名(参数 1, 参数 2, 参数 3) {\n    代码块内要执行的语句\n}\n```\n\n**不带参数的函数**\n\n**只有一个参数的函数**\n\n下面定义了一个简单的平方函数square()，square为函数名，number为函数的参数(名称可以自定义)，使用return语句确定函数的返回值.\n\n- **形参**是在定义函数时使用的参数，目的是用来接收调用该函数时传进来的实际参数。\n- **实参**是在调用时传递给函数的参数\n\n> JavaScript允许传入任意个参数而不影响调用，因此传入的参数可以比定义的参数多，但是不能少。也就是说实参的数量可以多于形参但是不能少于形参。\n\n#### 对象的方法\n\n在小程序里我们会经常将一个匿名函数赋值给对象的一个属性，而这个属性我们可以称之为对象的方法。\n\n**匿名函数**\n\n函数声明function在语法上是一个语句，但函数也可以由**函数表达式**创建，这样的函数没有函数名称（匿名）。\n\n**箭头函数**\n\n为什么叫箭头函数（Arrow Function），因为它定义一个函数用的就是一个箭头=>\n\n```javascript\nconst multiply = (x, y) => {\n  return x * y;\n}\nconst sum = (x, y) => x + y;//连{}和return语句都可以省掉\nconsole.log(multiply(20, 4));\nconsole.log(sum(20, 4));\n```\n\n在控制台我们可以看到箭头函数打印的结果。箭头函数相当于匿名函数，它没有函数名，而且也简化了函数定义。箭头函数可以只包含一个表达式，甚至连花括号和return都可以省略掉。**大家可以先只需要了解这个写法就可以了，以后碰到不至于比较迷惑，见多了也试着尝试多写一下。**\n\n**调用对象的方法**\n\n可以使用点表示法来调用对象的方法，这个和访问对象的属性没有区别。而调用对象的方法和调用一个函数也是大同小异。\n\n调用对象的方法我们在前面就已经接触过大量的案例了，在前面我们已经说过，wx是小程序的全局对象，而在第一节我们打印的很多API，就是调用了wx对象里的方法。\n\n**JavaScript函数的写法**\n\n在点击事件章节里，我们创建的事件点击处理函数的写法如下：\n\n```javascript\ncrollToPosition() {},\n```\n\n而在这一节我们创建的事件点击函数的写法为：\n\n```javascript\nyellowTap:function(){},\n```\n\n这两种写法都是可以执行的currentTarget事件对象\n\n### currentTarget事件对象\n\n当点击组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象，通过 event 对象可以获取事件触发时候的一些信息，比如时间戳、 detail 以及当前组件的一些属性值集合，尤其是事件源组件的id。\n\n当我们点击上面的tab时，触发tabClick事件处理函数，这时候事件处理函数会收到一个事件对象e，我们可以看一下控制台打印的e对象的内容，关于e对象具体属性的解释可以看技术文档。\n\n**技术文档：**[事件对象](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#currenttarget)\n\ncurrentTarget就是事件对象的一个属性，我们可以使用点表示法获取到点击的组件的Id，并将其赋值给activeIndex，所谓active就是激活的意思，也就是我们点击哪个tab，哪个tab就激活。\n\n- 当点击的id为0，也就是第一个tab时，activeIndex的值被事件处理函数修改为0；\n- activeIndex == index相同的tab，也就是激活的tab就会有weui-bar__item_on的class，也就显示为绿色\n- !=是不等于操作符，activeIndex != 0显然不成立条件为false，也就是组件hidden为false，即为显示；而activeIndex != 1，2，3则都会true，hidden生效，组件不显示，于是tab的效果就有了。\n\n> 当我们对字符串、Math对象、Date对象、数组对象、函数对象、事件对象所包含的信息不了解时，把他们打印出来即可。打印出来的结果基本都是字符串、列表、对象，而在前面我们已经掌握如何操作它们。通过实战，通过打印日志，既有利于我们调试代码，也加强我们对逻辑的理解。\n\n![2020-03-19 22-59-59 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gczmyjxv4bj31hc0u0tir.jpg)","source":"_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第三天.md","raw":"---\ntitle: 腾讯犀牛鸟云开发校园技术布道师养成计划第三天\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\nindexing: false\ndate: 2020-03-19 17:01:22\n---\n\n# JavaScript入门\n\nJavaScript是目前世界上最流行的编程语言之一，它也是小程序开发最重要的基础语言。要做出一个功能复杂的小程序，除了需要掌握JavaScript的基本语法，还要了解如何使用JavaScript来操作小程序（通过API接口）.\n\n#### 控制台Console\n\n打开微信开发者工具，在**调试器**里可以看到**Console**、Sources、Network、Appdata、Wxml等标签，这些都是调试器的功能模块。 而**控制台Console**除了可以显示小程序的错误信息外，还可以用于输入和调试代码。\n\n**数学运算**\n\n**Console.log打印日志**\n\n**console.log打印数组Array**\n\n**console.log打印对象Object**\n\n#### 变量与赋值\n\nJavaScript可以使用**let语句声明变量**，使用**等号=**可以**给变量赋值**，等号=左侧为**变量名**，右侧为**给该变量赋的值**，变量的值可以是任何**数据类型**。JavaScript常见的数据类型有：数值（Number）、字符串（String）、布尔值（Boolean）、对象（Object）、函数（Function）等。\n\n**将数据赋值给变量**\n\n**变量的冲突与覆盖**\n\n#### 操作数组\n\n**分隔符join方法**\n\n**添加数组push方法**\n\n**移除最后一项pop方法**\n\n**技术文档：**[MDN数组Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\n> 了解一下数组的concat()、reverse()、shift()、slice()、sort()、splice()、unshift()方法   -> 连接、翻转、删除第一个、浅拷贝、排序、删除或替换现有元素或者原地添加新的元素、添加一个在开头\n\n#### 操作对象\n\n我们可以用点表示法访问对象的属性，通过给该属性赋值就能够添加和修改对象的属性的值了。\n\n**给对象添加属性**\n\n**删除对象的某个属性**  delete\n\n**更新对象的某个属性**  通过重新赋值的方式来更新\n\n#### 常量\n\n在前面我们知道变量的值可以通过重新赋值的方式来改变，但是有些数据我们希望是固定的（写死，不会经常改变），这个时候可以使用**const声明**创建一个值的**只读**引用。const声明和let声明挺像的。\n\n#### 字符串的操作\n\n**MDN文档是前端最为依赖的技术文档**\n\n**技术文档：**[MDN技术文档之JavaScript标准库之String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n#### Math对象\n\nMath是一个内置对象， 它具有数学常数和函数的属性和方法，但**它不是一个函数对象。**\n\n#### Date对象\n\nDate 对象用于处理日期和时间。时间有年、月、日、星期、小时、分钟、秒、毫秒以及时区的概念，因此Date对象属性和方法也显得比较多。\n\n#### 全局对象wx\n\nwx是小程序的全局对象，用于承载小程序能力相关 API。小程序开发框架提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，了解网络状态等。\n\n**技术文档：**[API技术文档](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API)\n\n**了解网络状态**\n\n**获取网络类型技术文档：**[wx.getNetworkType()](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getNetworkType.html)\n\n**了解用户信息**\n\n**获取用户信息技术文档：**[wx.getUserInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html)\n\n**获取设备信息**\n\n**获取设备信息技术文档：**[wx.getSystemInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html)\n\n**页面链接跳转**\n\n**页面跳转技术文档：**[wx.navigateTo()](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html)\n\n除了可以获取到用户、设备、网络等的信息，使用控制台来调用对象的方法也可以执行一些动作，比如页面跳转。\n\n还可以返回页面的上一层，在控制台里输入\n\n**页面返回技术文档：**[wx.navigateBack()](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html)\n\n**显示消息提示框**\n\n**显示消息提示框技术文档：**[wx.showToast()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html)\n\n**设置当前页面的标题**\n\n**设置标题技术文档：**[wx.setNavigationBarTitle()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html)\n\n**打开文件选择**\n\n**打开文件选择技术文档：**[wx.chooseImage()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html)\n\n# 点击事件\n\n**事件**是视图层到逻辑层的通信方式，当我们**点击tap**、**触摸touch**、**长按longpress**小程序**绑定了事件的组件**时，就会触发事件，执行逻辑层中对应的**事件处理函数**。\n\n> 小程序框架的视图层由 WXML 与 WXSS 来编写的，由组件来进行展示。将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。\n\n#### 页面滚动\n\n函数名scrollToPosition和scrollToTop是可以自己定义的，然后我们再来在相应的js文件里要添加和函数名scrollToPosition和scrollToTop对应的事件处理函数。\n\n当用户点击该button组件的时候会在该页面对应的Page中找到相应的事件处理函数。保存编译之后，看看是不是就有了页面滚动的效果了？原理是scrollToTop()和scrollToPosition()这两个函数实际上都是调用了同一个小程序的**滚动API** wx.pageScrollTo()，关于该API的具体参数信息，我们可以查阅技术文档。\n\n**滚动API技术文档：**[wx.pageScrollTo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/scroll/wx.pageScrollTo.html)\n\n在官方文档我们可以看到wx.pageScrollTo()的作用是将页面滚动到目标位置，支持选择器和滚动距离两种方式定位\n\n- scrollTop滚动到页面的目标位置，单位 px，值为0就是滚动到顶部；值为600就是\n- duration是滚动动画的时长，单位为ms，而1秒=1000毫秒\n\n那如何滚动到指定的选择器的位置呢？前面我们已经给view分别添\n\n#### 消息提示框Toast\n\n消息提示框是移动端App、H5(WebApp)、小程序经常会使用到的一个交互界面。\n\n**消息提示技术文档：**[wx.showToast(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html)\n\n- title：为必填，提示的内容\n- icon：只有三个选项，success、loading、none，大家可以自行测试一下三个不同取值的效果\n- duration：提示延迟的时间，默认为1500毫秒，也就是1.5秒\n\n#### 模态对话框\n\n**模态对话框技术文档：**[wx.showModal(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html)\n\n**千变万化之API**\n\n阅读API的技术文档，就要了解该API有哪些属性，属性代表得是什么含义，属性是什么类型（**这一点非常重要**），以及它的默认值是什么，可以有哪些取值。\n\n- title属性不是必填，删除title的赋值，就不会显示标题啦；\n- content属性也不是必填，为提示的内容；\n- showCancel默认值就是true，意思是默认显示取消按钮，改为false就不显示了\n- confirmText默认值为确定，你可以改成别的试试\n\n\n\n编译之后点击模态框的取消和确定按钮，看打印出来什么结果。当点击确认时，res.confirm的值为true，就执行if分支里的语句；当res.cancel的值为true，就执行res.cancel的语句。在**模态对话框技术文档：**[wx.showModal(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html)也有**object.success 回调函数**的说明。\n\n> **success、fail、complete回调函数** 在技术文档里可以看到属性里有success和fail两个回调函数，success为接口调用成功的回调函数；fail为接口调用失败的回调函数。关于这方面的知识大家可以阅读技术文档[小程序API](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API)，大致了解一下异步API与回调函数的参数，理解异步 API 的执行结果需要通过 Object 类型的参数中传入的对应回调函数获取。\n\n#### 手机振动\n\n手机振动API分两种，一种是长振动，一种是短振动，两个API写法大致相同.\n\n**长振动技术文档：**[wx.vibrateLong()](https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateLong.html)\n\n在长振动技术文档里我们再次看到API里三个回调函数，success、fail、complete。在模拟器上点击按钮时，就可以看到打印日志。console.error向控制台的console中打印 error 日志，如果不能调用长振动，那一般是手机权限的问题了\n\n**弹出操作菜单**\n\n点击按钮就会弹出显示**添加照片**、**删除照片**、**更新照片**、**查询更多**等选项的操作菜单，当然我们点击操作菜单的选项之后是没有反应的，点击之后的反应还需要我们以后来写事件处理函数才行。\n\n**success回调函数**\n\n当我们点击操作菜单的不同选项时，会返回不同的数字，这取决于success回调函数里的e.tapIndex的值。在官方文档里我们可以了解到，当用户点击的按钮序号，从上到下的顺序，从0开始，相当于对应着数组itemList的序号，这样就为我们以后根据不同的菜单选项来执行不同的操作提供了可能。\n\n#### 页面路由\n\n页面路由是一个非常重要的概念，打开新页面、页面返回、Tab页面切换、页面重定向等都是也能路由的不同方式。\n\n> 关于页面路由，大家可以阅读一下[页面路由技术文档](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html)，页面路由我们可以简单的理解为对页面链接的管理，根据不同的url链接来显示不同的内容和页面信息。\n\n**Navigator组件与页面路由API**\n\n|                       **页面路由API**                        | **Navigator open-type值** | **含义**                                                     |\n| :----------------------------------------------------------: | ------------------------- | ------------------------------------------------------------ |\n| [redirectTo](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html) | redirect                  | 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。 |\n| [navigateTo](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html) | navigate                  | 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。 |\n| [navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html) | navigateBack              | 关闭当前页面，返回上一页面或多级页面。                       |\n| [switchTab](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html) | switchTab                 | 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面             |\n| [reLaunch](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html) | reLaunch                  | 关闭所有页面，打开到应用内的某个页面                         |\n\n> Navigator组件可以做到的事情，使用JavaScript调用小程序也能路由API也可以做到。Navigator组件的内容是写死的，而JavaScript则可以提供动态的数据。\n\n**返回上一页**\n\n点击**保留页面跳转按钮**以及**返回上一页**按钮，这样我们就可以在小程序里通过点击组件实现了页面的切换与页面的返回。而如果是使用wx.redirectTo跳转到新的页面就没法使用返回上一页了。\n\n> wx.navigateTo 是保留当前页面、跳转到应用内的某个页面，使用 wx.navigateBack可以返回到原页面。对于页面不是特别多的小程序，且页面间存在经常切换时，推荐使用 wx.navigateTo进行跳转， 然后返回，提高加载速度。\n\n# 页面渲染\n\n#### 将变量值渲染到页面\n\n**将变量值渲染到页面**\n\n**toString()方法**\n\n**技术文档：**[toString()方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString)\n\n#### 响应的数据绑定\n\n逻辑层js文件里的data数据，无论是基础的字符串、数组、对象等，还是通过变量给赋的值，都可以渲染到页面。不仅如此，只要对逻辑层data里的数据进行修改，视图层也会做相应的更新，我们称之为响应的数据绑定，而这是通过Page的setData()方法来实现的。\n\n\n\n#### 响应的布尔操作\n\n在前面我们已经了解到，有些组件的私有属性的数据类型为Boolean布尔值，比如视频、Swiper轮播组件是否自动播放、是否轮播，视频组件是否显示播放按钮等等，这些我们都可以使用setData将true改为false，false改为true来达到控制的目的。\n\n在交互方面，响应的布尔操作可以用于单一属性true与false的切换，比如显示与隐藏、展开与折叠、聚焦与失焦、选中与不选中。\n\n在开发者工具的模拟器里点击按钮，我们发现静音和取消静音都是这个按钮。这里的感叹号 !是逻辑非的意思，可以理解为not。\n\n> this.setData和 this.data都用到了一个关键字 this。 this和中文里的“这个的”有类似的指代作用，在方法中， this 指代该方法所属的对象，比如这里的是Page对象， this.data就是指Page函数对象里的data对象。\n\n#### 响应的数组操作\n\n> 数组操作知识，push为往数组的末尾新增数据，而pop则删除数组末尾一行的数据，join为数组数据之前的连接符。\n\n点击按钮**新增一行**，触发绑定的事件处理函数**addLine**，首先会执行extraLine数组新增一条数据“新增的内容”，但是这时extraLine和text还没有关系，这时在setData()函数里将initData和extraLine进行拼接（注意extraLine本来是一个数组，但是调用join方法后返回的是数组的值拼接好的字符串）。点击按钮删除最后一行，会先删除extraLine数组里最后一行的数据。\n\n> 小任务：新增内容过于单一，我们可以给它后面添加一个随机数，将 extraLine.push('新增的内容')改成 extraLine.push('新增的内容'+Math.random())，再来看看新增数据的效果，关于Math.random()大家可以自行去MDN查阅。大家也可以把拼接的连接符由 \\n换成其他字符。\n\n#### 函数与调用函数\n\n函数的作用，可以写一次代码，然后反复地重用这个代码。**JavaScript的函数本身也是对象**，因此可以把函数赋值给变量，或者作为参数传递给其他函数。\n\n**函数的定义和结构**\n\n我们可以使用**function**关键词来定义一个函数，括号()里为函数的参数，参数可以有很多个，使用逗号,隔开；函数要执行的代码（语句）使用大括号包住：\n\n```javascript\nfunction 函数名(参数 1, 参数 2, 参数 3) {\n    代码块内要执行的语句\n}\n```\n\n**不带参数的函数**\n\n**只有一个参数的函数**\n\n下面定义了一个简单的平方函数square()，square为函数名，number为函数的参数(名称可以自定义)，使用return语句确定函数的返回值.\n\n- **形参**是在定义函数时使用的参数，目的是用来接收调用该函数时传进来的实际参数。\n- **实参**是在调用时传递给函数的参数\n\n> JavaScript允许传入任意个参数而不影响调用，因此传入的参数可以比定义的参数多，但是不能少。也就是说实参的数量可以多于形参但是不能少于形参。\n\n#### 对象的方法\n\n在小程序里我们会经常将一个匿名函数赋值给对象的一个属性，而这个属性我们可以称之为对象的方法。\n\n**匿名函数**\n\n函数声明function在语法上是一个语句，但函数也可以由**函数表达式**创建，这样的函数没有函数名称（匿名）。\n\n**箭头函数**\n\n为什么叫箭头函数（Arrow Function），因为它定义一个函数用的就是一个箭头=>\n\n```javascript\nconst multiply = (x, y) => {\n  return x * y;\n}\nconst sum = (x, y) => x + y;//连{}和return语句都可以省掉\nconsole.log(multiply(20, 4));\nconsole.log(sum(20, 4));\n```\n\n在控制台我们可以看到箭头函数打印的结果。箭头函数相当于匿名函数，它没有函数名，而且也简化了函数定义。箭头函数可以只包含一个表达式，甚至连花括号和return都可以省略掉。**大家可以先只需要了解这个写法就可以了，以后碰到不至于比较迷惑，见多了也试着尝试多写一下。**\n\n**调用对象的方法**\n\n可以使用点表示法来调用对象的方法，这个和访问对象的属性没有区别。而调用对象的方法和调用一个函数也是大同小异。\n\n调用对象的方法我们在前面就已经接触过大量的案例了，在前面我们已经说过，wx是小程序的全局对象，而在第一节我们打印的很多API，就是调用了wx对象里的方法。\n\n**JavaScript函数的写法**\n\n在点击事件章节里，我们创建的事件点击处理函数的写法如下：\n\n```javascript\ncrollToPosition() {},\n```\n\n而在这一节我们创建的事件点击函数的写法为：\n\n```javascript\nyellowTap:function(){},\n```\n\n这两种写法都是可以执行的currentTarget事件对象\n\n### currentTarget事件对象\n\n当点击组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象，通过 event 对象可以获取事件触发时候的一些信息，比如时间戳、 detail 以及当前组件的一些属性值集合，尤其是事件源组件的id。\n\n当我们点击上面的tab时，触发tabClick事件处理函数，这时候事件处理函数会收到一个事件对象e，我们可以看一下控制台打印的e对象的内容，关于e对象具体属性的解释可以看技术文档。\n\n**技术文档：**[事件对象](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#currenttarget)\n\ncurrentTarget就是事件对象的一个属性，我们可以使用点表示法获取到点击的组件的Id，并将其赋值给activeIndex，所谓active就是激活的意思，也就是我们点击哪个tab，哪个tab就激活。\n\n- 当点击的id为0，也就是第一个tab时，activeIndex的值被事件处理函数修改为0；\n- activeIndex == index相同的tab，也就是激活的tab就会有weui-bar__item_on的class，也就显示为绿色\n- !=是不等于操作符，activeIndex != 0显然不成立条件为false，也就是组件hidden为false，即为显示；而activeIndex != 1，2，3则都会true，hidden生效，组件不显示，于是tab的效果就有了。\n\n> 当我们对字符串、Math对象、Date对象、数组对象、函数对象、事件对象所包含的信息不了解时，把他们打印出来即可。打印出来的结果基本都是字符串、列表、对象，而在前面我们已经掌握如何操作它们。通过实战，通过打印日志，既有利于我们调试代码，也加强我们对逻辑的理解。\n\n![2020-03-19 22-59-59 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gczmyjxv4bj31hc0u0tir.jpg)","slug":"腾讯犀牛鸟云开发校园技术布道师养成计划第三天","published":1,"updated":"2022-08-25T14:12:05.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39c004w12mj3i6df1t6","content":"<h1 id=\"JavaScript入门\"><a href=\"#JavaScript入门\" class=\"headerlink\" title=\"JavaScript入门\"></a>JavaScript入门</h1><p>JavaScript是目前世界上最流行的编程语言之一，它也是小程序开发最重要的基础语言。要做出一个功能复杂的小程序，除了需要掌握JavaScript的基本语法，还要了解如何使用JavaScript来操作小程序（通过API接口）.</p>\n<h4 id=\"控制台Console\"><a href=\"#控制台Console\" class=\"headerlink\" title=\"控制台Console\"></a>控制台Console</h4><p>打开微信开发者工具，在<strong>调试器</strong>里可以看到<strong>Console</strong>、Sources、Network、Appdata、Wxml等标签，这些都是调试器的功能模块。 而<strong>控制台Console</strong>除了可以显示小程序的错误信息外，还可以用于输入和调试代码。</p>\n<p><strong>数学运算</strong></p>\n<p><strong>Console.log打印日志</strong></p>\n<p><strong>console.log打印数组Array</strong></p>\n<p><strong>console.log打印对象Object</strong></p>\n<h4 id=\"变量与赋值\"><a href=\"#变量与赋值\" class=\"headerlink\" title=\"变量与赋值\"></a>变量与赋值</h4><p>JavaScript可以使用<strong>let语句声明变量</strong>，使用<strong>等号=**可以</strong>给变量赋值<strong>，等号=左侧为</strong>变量名<strong>，右侧为</strong>给该变量赋的值<strong>，变量的值可以是任何</strong>数据类型**。JavaScript常见的数据类型有：数值（Number）、字符串（String）、布尔值（Boolean）、对象（Object）、函数（Function）等。</p>\n<p><strong>将数据赋值给变量</strong></p>\n<p><strong>变量的冲突与覆盖</strong></p>\n<h4 id=\"操作数组\"><a href=\"#操作数组\" class=\"headerlink\" title=\"操作数组\"></a>操作数组</h4><p><strong>分隔符join方法</strong></p>\n<p><strong>添加数组push方法</strong></p>\n<p><strong>移除最后一项pop方法</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">MDN数组Array</a></p>\n<blockquote>\n<p>了解一下数组的concat()、reverse()、shift()、slice()、sort()、splice()、unshift()方法   -&gt; 连接、翻转、删除第一个、浅拷贝、排序、删除或替换现有元素或者原地添加新的元素、添加一个在开头</p>\n</blockquote>\n<h4 id=\"操作对象\"><a href=\"#操作对象\" class=\"headerlink\" title=\"操作对象\"></a>操作对象</h4><p>我们可以用点表示法访问对象的属性，通过给该属性赋值就能够添加和修改对象的属性的值了。</p>\n<p><strong>给对象添加属性</strong></p>\n<p><strong>删除对象的某个属性</strong>  delete</p>\n<p><strong>更新对象的某个属性</strong>  通过重新赋值的方式来更新</p>\n<h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><p>在前面我们知道变量的值可以通过重新赋值的方式来改变，但是有些数据我们希望是固定的（写死，不会经常改变），这个时候可以使用<strong>const声明</strong>创建一个值的<strong>只读</strong>引用。const声明和let声明挺像的。</p>\n<h4 id=\"字符串的操作\"><a href=\"#字符串的操作\" class=\"headerlink\" title=\"字符串的操作\"></a>字符串的操作</h4><p><strong>MDN文档是前端最为依赖的技术文档</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\">MDN技术文档之JavaScript标准库之String</a></p>\n<h4 id=\"Math对象\"><a href=\"#Math对象\" class=\"headerlink\" title=\"Math对象\"></a>Math对象</h4><p>Math是一个内置对象， 它具有数学常数和函数的属性和方法，但<strong>它不是一个函数对象。</strong></p>\n<h4 id=\"Date对象\"><a href=\"#Date对象\" class=\"headerlink\" title=\"Date对象\"></a>Date对象</h4><p>Date 对象用于处理日期和时间。时间有年、月、日、星期、小时、分钟、秒、毫秒以及时区的概念，因此Date对象属性和方法也显得比较多。</p>\n<h4 id=\"全局对象wx\"><a href=\"#全局对象wx\" class=\"headerlink\" title=\"全局对象wx\"></a>全局对象wx</h4><p>wx是小程序的全局对象，用于承载小程序能力相关 API。小程序开发框架提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，了解网络状态等。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API\">API技术文档</a></p>\n<p><strong>了解网络状态</strong></p>\n<p><strong>获取网络类型技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getNetworkType.html\">wx.getNetworkType()</a></p>\n<p><strong>了解用户信息</strong></p>\n<p><strong>获取用户信息技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html\">wx.getUserInfo()</a></p>\n<p><strong>获取设备信息</strong></p>\n<p><strong>获取设备信息技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html\">wx.getSystemInfo()</a></p>\n<p><strong>页面链接跳转</strong></p>\n<p><strong>页面跳转技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html\">wx.navigateTo()</a></p>\n<p>除了可以获取到用户、设备、网络等的信息，使用控制台来调用对象的方法也可以执行一些动作，比如页面跳转。</p>\n<p>还可以返回页面的上一层，在控制台里输入</p>\n<p><strong>页面返回技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">wx.navigateBack()</a></p>\n<p><strong>显示消息提示框</strong></p>\n<p><strong>显示消息提示框技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html\">wx.showToast()</a></p>\n<p><strong>设置当前页面的标题</strong></p>\n<p><strong>设置标题技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html\">wx.setNavigationBarTitle()</a></p>\n<p><strong>打开文件选择</strong></p>\n<p><strong>打开文件选择技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html\">wx.chooseImage()</a></p>\n<h1 id=\"点击事件\"><a href=\"#点击事件\" class=\"headerlink\" title=\"点击事件\"></a>点击事件</h1><p><strong>事件</strong>是视图层到逻辑层的通信方式，当我们<strong>点击tap</strong>、<strong>触摸touch</strong>、<strong>长按longpress</strong>小程序<strong>绑定了事件的组件</strong>时，就会触发事件，执行逻辑层中对应的<strong>事件处理函数</strong>。</p>\n<blockquote>\n<p>小程序框架的视图层由 WXML 与 WXSS 来编写的，由组件来进行展示。将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。</p>\n</blockquote>\n<h4 id=\"页面滚动\"><a href=\"#页面滚动\" class=\"headerlink\" title=\"页面滚动\"></a>页面滚动</h4><p>函数名scrollToPosition和scrollToTop是可以自己定义的，然后我们再来在相应的js文件里要添加和函数名scrollToPosition和scrollToTop对应的事件处理函数。</p>\n<p>当用户点击该button组件的时候会在该页面对应的Page中找到相应的事件处理函数。保存编译之后，看看是不是就有了页面滚动的效果了？原理是scrollToTop()和scrollToPosition()这两个函数实际上都是调用了同一个小程序的<strong>滚动API</strong> wx.pageScrollTo()，关于该API的具体参数信息，我们可以查阅技术文档。</p>\n<p><strong>滚动API技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/scroll/wx.pageScrollTo.html\">wx.pageScrollTo(Object object)</a></p>\n<p>在官方文档我们可以看到wx.pageScrollTo()的作用是将页面滚动到目标位置，支持选择器和滚动距离两种方式定位</p>\n<ul>\n<li>scrollTop滚动到页面的目标位置，单位 px，值为0就是滚动到顶部；值为600就是</li>\n<li>duration是滚动动画的时长，单位为ms，而1秒=1000毫秒</li>\n</ul>\n<p>那如何滚动到指定的选择器的位置呢？前面我们已经给view分别添</p>\n<h4 id=\"消息提示框Toast\"><a href=\"#消息提示框Toast\" class=\"headerlink\" title=\"消息提示框Toast\"></a>消息提示框Toast</h4><p>消息提示框是移动端App、H5(WebApp)、小程序经常会使用到的一个交互界面。</p>\n<p><strong>消息提示技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html\">wx.showToast(Object object)</a></p>\n<ul>\n<li>title：为必填，提示的内容</li>\n<li>icon：只有三个选项，success、loading、none，大家可以自行测试一下三个不同取值的效果</li>\n<li>duration：提示延迟的时间，默认为1500毫秒，也就是1.5秒</li>\n</ul>\n<h4 id=\"模态对话框\"><a href=\"#模态对话框\" class=\"headerlink\" title=\"模态对话框\"></a>模态对话框</h4><p><strong>模态对话框技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html\">wx.showModal(Object object)</a></p>\n<p><strong>千变万化之API</strong></p>\n<p>阅读API的技术文档，就要了解该API有哪些属性，属性代表得是什么含义，属性是什么类型（<strong>这一点非常重要</strong>），以及它的默认值是什么，可以有哪些取值。</p>\n<ul>\n<li>title属性不是必填，删除title的赋值，就不会显示标题啦；</li>\n<li>content属性也不是必填，为提示的内容；</li>\n<li>showCancel默认值就是true，意思是默认显示取消按钮，改为false就不显示了</li>\n<li>confirmText默认值为确定，你可以改成别的试试</li>\n</ul>\n<p>编译之后点击模态框的取消和确定按钮，看打印出来什么结果。当点击确认时，res.confirm的值为true，就执行if分支里的语句；当res.cancel的值为true，就执行res.cancel的语句。在<strong>模态对话框技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html\">wx.showModal(Object object)</a>也有<strong>object.success 回调函数</strong>的说明。</p>\n<blockquote>\n<p><strong>success、fail、complete回调函数</strong> 在技术文档里可以看到属性里有success和fail两个回调函数，success为接口调用成功的回调函数；fail为接口调用失败的回调函数。关于这方面的知识大家可以阅读技术文档<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API\">小程序API</a>，大致了解一下异步API与回调函数的参数，理解异步 API 的执行结果需要通过 Object 类型的参数中传入的对应回调函数获取。</p>\n</blockquote>\n<h4 id=\"手机振动\"><a href=\"#手机振动\" class=\"headerlink\" title=\"手机振动\"></a>手机振动</h4><p>手机振动API分两种，一种是长振动，一种是短振动，两个API写法大致相同.</p>\n<p><strong>长振动技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateLong.html\">wx.vibrateLong()</a></p>\n<p>在长振动技术文档里我们再次看到API里三个回调函数，success、fail、complete。在模拟器上点击按钮时，就可以看到打印日志。console.error向控制台的console中打印 error 日志，如果不能调用长振动，那一般是手机权限的问题了</p>\n<p><strong>弹出操作菜单</strong></p>\n<p>点击按钮就会弹出显示<strong>添加照片</strong>、<strong>删除照片</strong>、<strong>更新照片</strong>、<strong>查询更多</strong>等选项的操作菜单，当然我们点击操作菜单的选项之后是没有反应的，点击之后的反应还需要我们以后来写事件处理函数才行。</p>\n<p><strong>success回调函数</strong></p>\n<p>当我们点击操作菜单的不同选项时，会返回不同的数字，这取决于success回调函数里的e.tapIndex的值。在官方文档里我们可以了解到，当用户点击的按钮序号，从上到下的顺序，从0开始，相当于对应着数组itemList的序号，这样就为我们以后根据不同的菜单选项来执行不同的操作提供了可能。</p>\n<h4 id=\"页面路由\"><a href=\"#页面路由\" class=\"headerlink\" title=\"页面路由\"></a>页面路由</h4><p>页面路由是一个非常重要的概念，打开新页面、页面返回、Tab页面切换、页面重定向等都是也能路由的不同方式。</p>\n<blockquote>\n<p>关于页面路由，大家可以阅读一下<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html\">页面路由技术文档</a>，页面路由我们可以简单的理解为对页面链接的管理，根据不同的url链接来显示不同的内容和页面信息。</p>\n</blockquote>\n<p><strong>Navigator组件与页面路由API</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>页面路由API</strong></th>\n<th><strong>Navigator open-type值</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html\">redirectTo</a></td>\n<td>redirect</td>\n<td>关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html\">navigateTo</a></td>\n<td>navigate</td>\n<td>保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">navigateBack</a></td>\n<td>navigateBack</td>\n<td>关闭当前页面，返回上一页面或多级页面。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html\">switchTab</a></td>\n<td>switchTab</td>\n<td>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html\">reLaunch</a></td>\n<td>reLaunch</td>\n<td>关闭所有页面，打开到应用内的某个页面</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Navigator组件可以做到的事情，使用JavaScript调用小程序也能路由API也可以做到。Navigator组件的内容是写死的，而JavaScript则可以提供动态的数据。</p>\n</blockquote>\n<p><strong>返回上一页</strong></p>\n<p>点击<strong>保留页面跳转按钮</strong>以及<strong>返回上一页</strong>按钮，这样我们就可以在小程序里通过点击组件实现了页面的切换与页面的返回。而如果是使用wx.redirectTo跳转到新的页面就没法使用返回上一页了。</p>\n<blockquote>\n<p>wx.navigateTo 是保留当前页面、跳转到应用内的某个页面，使用 wx.navigateBack可以返回到原页面。对于页面不是特别多的小程序，且页面间存在经常切换时，推荐使用 wx.navigateTo进行跳转， 然后返回，提高加载速度。</p>\n</blockquote>\n<h1 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h1><h4 id=\"将变量值渲染到页面\"><a href=\"#将变量值渲染到页面\" class=\"headerlink\" title=\"将变量值渲染到页面\"></a>将变量值渲染到页面</h4><p><strong>将变量值渲染到页面</strong></p>\n<p><strong>toString()方法</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">toString()方法</a></p>\n<h4 id=\"响应的数据绑定\"><a href=\"#响应的数据绑定\" class=\"headerlink\" title=\"响应的数据绑定\"></a>响应的数据绑定</h4><p>逻辑层js文件里的data数据，无论是基础的字符串、数组、对象等，还是通过变量给赋的值，都可以渲染到页面。不仅如此，只要对逻辑层data里的数据进行修改，视图层也会做相应的更新，我们称之为响应的数据绑定，而这是通过Page的setData()方法来实现的。</p>\n<h4 id=\"响应的布尔操作\"><a href=\"#响应的布尔操作\" class=\"headerlink\" title=\"响应的布尔操作\"></a>响应的布尔操作</h4><p>在前面我们已经了解到，有些组件的私有属性的数据类型为Boolean布尔值，比如视频、Swiper轮播组件是否自动播放、是否轮播，视频组件是否显示播放按钮等等，这些我们都可以使用setData将true改为false，false改为true来达到控制的目的。</p>\n<p>在交互方面，响应的布尔操作可以用于单一属性true与false的切换，比如显示与隐藏、展开与折叠、聚焦与失焦、选中与不选中。</p>\n<p>在开发者工具的模拟器里点击按钮，我们发现静音和取消静音都是这个按钮。这里的感叹号 !是逻辑非的意思，可以理解为not。</p>\n<blockquote>\n<p>this.setData和 this.data都用到了一个关键字 this。 this和中文里的“这个的”有类似的指代作用，在方法中， this 指代该方法所属的对象，比如这里的是Page对象， this.data就是指Page函数对象里的data对象。</p>\n</blockquote>\n<h4 id=\"响应的数组操作\"><a href=\"#响应的数组操作\" class=\"headerlink\" title=\"响应的数组操作\"></a>响应的数组操作</h4><blockquote>\n<p>数组操作知识，push为往数组的末尾新增数据，而pop则删除数组末尾一行的数据，join为数组数据之前的连接符。</p>\n</blockquote>\n<p>点击按钮<strong>新增一行</strong>，触发绑定的事件处理函数<strong>addLine</strong>，首先会执行extraLine数组新增一条数据“新增的内容”，但是这时extraLine和text还没有关系，这时在setData()函数里将initData和extraLine进行拼接（注意extraLine本来是一个数组，但是调用join方法后返回的是数组的值拼接好的字符串）。点击按钮删除最后一行，会先删除extraLine数组里最后一行的数据。</p>\n<blockquote>\n<p>小任务：新增内容过于单一，我们可以给它后面添加一个随机数，将 extraLine.push(‘新增的内容’)改成 extraLine.push(‘新增的内容’+Math.random())，再来看看新增数据的效果，关于Math.random()大家可以自行去MDN查阅。大家也可以把拼接的连接符由 \\n换成其他字符。</p>\n</blockquote>\n<h4 id=\"函数与调用函数\"><a href=\"#函数与调用函数\" class=\"headerlink\" title=\"函数与调用函数\"></a>函数与调用函数</h4><p>函数的作用，可以写一次代码，然后反复地重用这个代码。<strong>JavaScript的函数本身也是对象</strong>，因此可以把函数赋值给变量，或者作为参数传递给其他函数。</p>\n<p><strong>函数的定义和结构</strong></p>\n<p>我们可以使用<strong>function</strong>关键词来定义一个函数，括号()里为函数的参数，参数可以有很多个，使用逗号,隔开；函数要执行的代码（语句）使用大括号包住：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 参数 <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 参数 <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    代码块内要执行的语句\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>不带参数的函数</strong></p>\n<p><strong>只有一个参数的函数</strong></p>\n<p>下面定义了一个简单的平方函数square()，square为函数名，number为函数的参数(名称可以自定义)，使用return语句确定函数的返回值.</p>\n<ul>\n<li><strong>形参</strong>是在定义函数时使用的参数，目的是用来接收调用该函数时传进来的实际参数。</li>\n<li><strong>实参</strong>是在调用时传递给函数的参数</li>\n</ul>\n<blockquote>\n<p>JavaScript允许传入任意个参数而不影响调用，因此传入的参数可以比定义的参数多，但是不能少。也就是说实参的数量可以多于形参但是不能少于形参。</p>\n</blockquote>\n<h4 id=\"对象的方法\"><a href=\"#对象的方法\" class=\"headerlink\" title=\"对象的方法\"></a>对象的方法</h4><p>在小程序里我们会经常将一个匿名函数赋值给对象的一个属性，而这个属性我们可以称之为对象的方法。</p>\n<p><strong>匿名函数</strong></p>\n<p>函数声明function在语法上是一个语句，但函数也可以由<strong>函数表达式</strong>创建，这样的函数没有函数名称（匿名）。</p>\n<p><strong>箭头函数</strong></p>\n<p>为什么叫箭头函数（Arrow Function），因为它定义一个函数用的就是一个箭头=&gt;</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span><span class=\"token comment\">//连{}和return语句都可以省掉</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在控制台我们可以看到箭头函数打印的结果。箭头函数相当于匿名函数，它没有函数名，而且也简化了函数定义。箭头函数可以只包含一个表达式，甚至连花括号和return都可以省略掉。<strong>大家可以先只需要了解这个写法就可以了，以后碰到不至于比较迷惑，见多了也试着尝试多写一下。</strong></p>\n<p><strong>调用对象的方法</strong></p>\n<p>可以使用点表示法来调用对象的方法，这个和访问对象的属性没有区别。而调用对象的方法和调用一个函数也是大同小异。</p>\n<p>调用对象的方法我们在前面就已经接触过大量的案例了，在前面我们已经说过，wx是小程序的全局对象，而在第一节我们打印的很多API，就是调用了wx对象里的方法。</p>\n<p><strong>JavaScript函数的写法</strong></p>\n<p>在点击事件章节里，我们创建的事件点击处理函数的写法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">crollToPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而在这一节我们创建的事件点击函数的写法为：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">yellowTap</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这两种写法都是可以执行的currentTarget事件对象</p>\n<h3 id=\"currentTarget事件对象\"><a href=\"#currentTarget事件对象\" class=\"headerlink\" title=\"currentTarget事件对象\"></a>currentTarget事件对象</h3><p>当点击组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象，通过 event 对象可以获取事件触发时候的一些信息，比如时间戳、 detail 以及当前组件的一些属性值集合，尤其是事件源组件的id。</p>\n<p>当我们点击上面的tab时，触发tabClick事件处理函数，这时候事件处理函数会收到一个事件对象e，我们可以看一下控制台打印的e对象的内容，关于e对象具体属性的解释可以看技术文档。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#currenttarget\">事件对象</a></p>\n<p>currentTarget就是事件对象的一个属性，我们可以使用点表示法获取到点击的组件的Id，并将其赋值给activeIndex，所谓active就是激活的意思，也就是我们点击哪个tab，哪个tab就激活。</p>\n<ul>\n<li>当点击的id为0，也就是第一个tab时，activeIndex的值被事件处理函数修改为0；</li>\n<li>activeIndex == index相同的tab，也就是激活的tab就会有weui-bar__item_on的class，也就显示为绿色</li>\n<li>!=是不等于操作符，activeIndex != 0显然不成立条件为false，也就是组件hidden为false，即为显示；而activeIndex != 1，2，3则都会true，hidden生效，组件不显示，于是tab的效果就有了。</li>\n</ul>\n<blockquote>\n<p>当我们对字符串、Math对象、Date对象、数组对象、函数对象、事件对象所包含的信息不了解时，把他们打印出来即可。打印出来的结果基本都是字符串、列表、对象，而在前面我们已经掌握如何操作它们。通过实战，通过打印日志，既有利于我们调试代码，也加强我们对逻辑的理解。</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gczmyjxv4bj31hc0u0tir.jpg\" alt=\"2020-03-19 22-59-59 的屏幕截图.png\"></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"JavaScript入门\"><a href=\"#JavaScript入门\" class=\"headerlink\" title=\"JavaScript入门\"></a>JavaScript入门</h1><p>JavaScript是目前世界上最流行的编程语言之一，它也是小程序开发最重要的基础语言。要做出一个功能复杂的小程序，除了需要掌握JavaScript的基本语法，还要了解如何使用JavaScript来操作小程序（通过API接口）.</p>\n<h4 id=\"控制台Console\"><a href=\"#控制台Console\" class=\"headerlink\" title=\"控制台Console\"></a>控制台Console</h4><p>打开微信开发者工具，在<strong>调试器</strong>里可以看到<strong>Console</strong>、Sources、Network、Appdata、Wxml等标签，这些都是调试器的功能模块。 而<strong>控制台Console</strong>除了可以显示小程序的错误信息外，还可以用于输入和调试代码。</p>\n<p><strong>数学运算</strong></p>\n<p><strong>Console.log打印日志</strong></p>\n<p><strong>console.log打印数组Array</strong></p>\n<p><strong>console.log打印对象Object</strong></p>\n<h4 id=\"变量与赋值\"><a href=\"#变量与赋值\" class=\"headerlink\" title=\"变量与赋值\"></a>变量与赋值</h4><p>JavaScript可以使用<strong>let语句声明变量</strong>，使用<strong>等号=**可以</strong>给变量赋值<strong>，等号=左侧为</strong>变量名<strong>，右侧为</strong>给该变量赋的值<strong>，变量的值可以是任何</strong>数据类型**。JavaScript常见的数据类型有：数值（Number）、字符串（String）、布尔值（Boolean）、对象（Object）、函数（Function）等。</p>\n<p><strong>将数据赋值给变量</strong></p>\n<p><strong>变量的冲突与覆盖</strong></p>\n<h4 id=\"操作数组\"><a href=\"#操作数组\" class=\"headerlink\" title=\"操作数组\"></a>操作数组</h4><p><strong>分隔符join方法</strong></p>\n<p><strong>添加数组push方法</strong></p>\n<p><strong>移除最后一项pop方法</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">MDN数组Array</a></p>\n<blockquote>\n<p>了解一下数组的concat()、reverse()、shift()、slice()、sort()、splice()、unshift()方法   -&gt; 连接、翻转、删除第一个、浅拷贝、排序、删除或替换现有元素或者原地添加新的元素、添加一个在开头</p>\n</blockquote>\n<h4 id=\"操作对象\"><a href=\"#操作对象\" class=\"headerlink\" title=\"操作对象\"></a>操作对象</h4><p>我们可以用点表示法访问对象的属性，通过给该属性赋值就能够添加和修改对象的属性的值了。</p>\n<p><strong>给对象添加属性</strong></p>\n<p><strong>删除对象的某个属性</strong>  delete</p>\n<p><strong>更新对象的某个属性</strong>  通过重新赋值的方式来更新</p>\n<h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><p>在前面我们知道变量的值可以通过重新赋值的方式来改变，但是有些数据我们希望是固定的（写死，不会经常改变），这个时候可以使用<strong>const声明</strong>创建一个值的<strong>只读</strong>引用。const声明和let声明挺像的。</p>\n<h4 id=\"字符串的操作\"><a href=\"#字符串的操作\" class=\"headerlink\" title=\"字符串的操作\"></a>字符串的操作</h4><p><strong>MDN文档是前端最为依赖的技术文档</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\">MDN技术文档之JavaScript标准库之String</a></p>\n<h4 id=\"Math对象\"><a href=\"#Math对象\" class=\"headerlink\" title=\"Math对象\"></a>Math对象</h4><p>Math是一个内置对象， 它具有数学常数和函数的属性和方法，但<strong>它不是一个函数对象。</strong></p>\n<h4 id=\"Date对象\"><a href=\"#Date对象\" class=\"headerlink\" title=\"Date对象\"></a>Date对象</h4><p>Date 对象用于处理日期和时间。时间有年、月、日、星期、小时、分钟、秒、毫秒以及时区的概念，因此Date对象属性和方法也显得比较多。</p>\n<h4 id=\"全局对象wx\"><a href=\"#全局对象wx\" class=\"headerlink\" title=\"全局对象wx\"></a>全局对象wx</h4><p>wx是小程序的全局对象，用于承载小程序能力相关 API。小程序开发框架提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，了解网络状态等。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API\">API技术文档</a></p>\n<p><strong>了解网络状态</strong></p>\n<p><strong>获取网络类型技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getNetworkType.html\">wx.getNetworkType()</a></p>\n<p><strong>了解用户信息</strong></p>\n<p><strong>获取用户信息技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html\">wx.getUserInfo()</a></p>\n<p><strong>获取设备信息</strong></p>\n<p><strong>获取设备信息技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html\">wx.getSystemInfo()</a></p>\n<p><strong>页面链接跳转</strong></p>\n<p><strong>页面跳转技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html\">wx.navigateTo()</a></p>\n<p>除了可以获取到用户、设备、网络等的信息，使用控制台来调用对象的方法也可以执行一些动作，比如页面跳转。</p>\n<p>还可以返回页面的上一层，在控制台里输入</p>\n<p><strong>页面返回技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">wx.navigateBack()</a></p>\n<p><strong>显示消息提示框</strong></p>\n<p><strong>显示消息提示框技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html\">wx.showToast()</a></p>\n<p><strong>设置当前页面的标题</strong></p>\n<p><strong>设置标题技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html\">wx.setNavigationBarTitle()</a></p>\n<p><strong>打开文件选择</strong></p>\n<p><strong>打开文件选择技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html\">wx.chooseImage()</a></p>\n<h1 id=\"点击事件\"><a href=\"#点击事件\" class=\"headerlink\" title=\"点击事件\"></a>点击事件</h1><p><strong>事件</strong>是视图层到逻辑层的通信方式，当我们<strong>点击tap</strong>、<strong>触摸touch</strong>、<strong>长按longpress</strong>小程序<strong>绑定了事件的组件</strong>时，就会触发事件，执行逻辑层中对应的<strong>事件处理函数</strong>。</p>\n<blockquote>\n<p>小程序框架的视图层由 WXML 与 WXSS 来编写的，由组件来进行展示。将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。</p>\n</blockquote>\n<h4 id=\"页面滚动\"><a href=\"#页面滚动\" class=\"headerlink\" title=\"页面滚动\"></a>页面滚动</h4><p>函数名scrollToPosition和scrollToTop是可以自己定义的，然后我们再来在相应的js文件里要添加和函数名scrollToPosition和scrollToTop对应的事件处理函数。</p>\n<p>当用户点击该button组件的时候会在该页面对应的Page中找到相应的事件处理函数。保存编译之后，看看是不是就有了页面滚动的效果了？原理是scrollToTop()和scrollToPosition()这两个函数实际上都是调用了同一个小程序的<strong>滚动API</strong> wx.pageScrollTo()，关于该API的具体参数信息，我们可以查阅技术文档。</p>\n<p><strong>滚动API技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/scroll/wx.pageScrollTo.html\">wx.pageScrollTo(Object object)</a></p>\n<p>在官方文档我们可以看到wx.pageScrollTo()的作用是将页面滚动到目标位置，支持选择器和滚动距离两种方式定位</p>\n<ul>\n<li>scrollTop滚动到页面的目标位置，单位 px，值为0就是滚动到顶部；值为600就是</li>\n<li>duration是滚动动画的时长，单位为ms，而1秒=1000毫秒</li>\n</ul>\n<p>那如何滚动到指定的选择器的位置呢？前面我们已经给view分别添</p>\n<h4 id=\"消息提示框Toast\"><a href=\"#消息提示框Toast\" class=\"headerlink\" title=\"消息提示框Toast\"></a>消息提示框Toast</h4><p>消息提示框是移动端App、H5(WebApp)、小程序经常会使用到的一个交互界面。</p>\n<p><strong>消息提示技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html\">wx.showToast(Object object)</a></p>\n<ul>\n<li>title：为必填，提示的内容</li>\n<li>icon：只有三个选项，success、loading、none，大家可以自行测试一下三个不同取值的效果</li>\n<li>duration：提示延迟的时间，默认为1500毫秒，也就是1.5秒</li>\n</ul>\n<h4 id=\"模态对话框\"><a href=\"#模态对话框\" class=\"headerlink\" title=\"模态对话框\"></a>模态对话框</h4><p><strong>模态对话框技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html\">wx.showModal(Object object)</a></p>\n<p><strong>千变万化之API</strong></p>\n<p>阅读API的技术文档，就要了解该API有哪些属性，属性代表得是什么含义，属性是什么类型（<strong>这一点非常重要</strong>），以及它的默认值是什么，可以有哪些取值。</p>\n<ul>\n<li>title属性不是必填，删除title的赋值，就不会显示标题啦；</li>\n<li>content属性也不是必填，为提示的内容；</li>\n<li>showCancel默认值就是true，意思是默认显示取消按钮，改为false就不显示了</li>\n<li>confirmText默认值为确定，你可以改成别的试试</li>\n</ul>\n<p>编译之后点击模态框的取消和确定按钮，看打印出来什么结果。当点击确认时，res.confirm的值为true，就执行if分支里的语句；当res.cancel的值为true，就执行res.cancel的语句。在<strong>模态对话框技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html\">wx.showModal(Object object)</a>也有<strong>object.success 回调函数</strong>的说明。</p>\n<blockquote>\n<p><strong>success、fail、complete回调函数</strong> 在技术文档里可以看到属性里有success和fail两个回调函数，success为接口调用成功的回调函数；fail为接口调用失败的回调函数。关于这方面的知识大家可以阅读技术文档<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API\">小程序API</a>，大致了解一下异步API与回调函数的参数，理解异步 API 的执行结果需要通过 Object 类型的参数中传入的对应回调函数获取。</p>\n</blockquote>\n<h4 id=\"手机振动\"><a href=\"#手机振动\" class=\"headerlink\" title=\"手机振动\"></a>手机振动</h4><p>手机振动API分两种，一种是长振动，一种是短振动，两个API写法大致相同.</p>\n<p><strong>长振动技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateLong.html\">wx.vibrateLong()</a></p>\n<p>在长振动技术文档里我们再次看到API里三个回调函数，success、fail、complete。在模拟器上点击按钮时，就可以看到打印日志。console.error向控制台的console中打印 error 日志，如果不能调用长振动，那一般是手机权限的问题了</p>\n<p><strong>弹出操作菜单</strong></p>\n<p>点击按钮就会弹出显示<strong>添加照片</strong>、<strong>删除照片</strong>、<strong>更新照片</strong>、<strong>查询更多</strong>等选项的操作菜单，当然我们点击操作菜单的选项之后是没有反应的，点击之后的反应还需要我们以后来写事件处理函数才行。</p>\n<p><strong>success回调函数</strong></p>\n<p>当我们点击操作菜单的不同选项时，会返回不同的数字，这取决于success回调函数里的e.tapIndex的值。在官方文档里我们可以了解到，当用户点击的按钮序号，从上到下的顺序，从0开始，相当于对应着数组itemList的序号，这样就为我们以后根据不同的菜单选项来执行不同的操作提供了可能。</p>\n<h4 id=\"页面路由\"><a href=\"#页面路由\" class=\"headerlink\" title=\"页面路由\"></a>页面路由</h4><p>页面路由是一个非常重要的概念，打开新页面、页面返回、Tab页面切换、页面重定向等都是也能路由的不同方式。</p>\n<blockquote>\n<p>关于页面路由，大家可以阅读一下<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html\">页面路由技术文档</a>，页面路由我们可以简单的理解为对页面链接的管理，根据不同的url链接来显示不同的内容和页面信息。</p>\n</blockquote>\n<p><strong>Navigator组件与页面路由API</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>页面路由API</strong></th>\n<th><strong>Navigator open-type值</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html\">redirectTo</a></td>\n<td>redirect</td>\n<td>关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html\">navigateTo</a></td>\n<td>navigate</td>\n<td>保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">navigateBack</a></td>\n<td>navigateBack</td>\n<td>关闭当前页面，返回上一页面或多级页面。</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html\">switchTab</a></td>\n<td>switchTab</td>\n<td>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html\">reLaunch</a></td>\n<td>reLaunch</td>\n<td>关闭所有页面，打开到应用内的某个页面</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Navigator组件可以做到的事情，使用JavaScript调用小程序也能路由API也可以做到。Navigator组件的内容是写死的，而JavaScript则可以提供动态的数据。</p>\n</blockquote>\n<p><strong>返回上一页</strong></p>\n<p>点击<strong>保留页面跳转按钮</strong>以及<strong>返回上一页</strong>按钮，这样我们就可以在小程序里通过点击组件实现了页面的切换与页面的返回。而如果是使用wx.redirectTo跳转到新的页面就没法使用返回上一页了。</p>\n<blockquote>\n<p>wx.navigateTo 是保留当前页面、跳转到应用内的某个页面，使用 wx.navigateBack可以返回到原页面。对于页面不是特别多的小程序，且页面间存在经常切换时，推荐使用 wx.navigateTo进行跳转， 然后返回，提高加载速度。</p>\n</blockquote>\n<h1 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h1><h4 id=\"将变量值渲染到页面\"><a href=\"#将变量值渲染到页面\" class=\"headerlink\" title=\"将变量值渲染到页面\"></a>将变量值渲染到页面</h4><p><strong>将变量值渲染到页面</strong></p>\n<p><strong>toString()方法</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">toString()方法</a></p>\n<h4 id=\"响应的数据绑定\"><a href=\"#响应的数据绑定\" class=\"headerlink\" title=\"响应的数据绑定\"></a>响应的数据绑定</h4><p>逻辑层js文件里的data数据，无论是基础的字符串、数组、对象等，还是通过变量给赋的值，都可以渲染到页面。不仅如此，只要对逻辑层data里的数据进行修改，视图层也会做相应的更新，我们称之为响应的数据绑定，而这是通过Page的setData()方法来实现的。</p>\n<h4 id=\"响应的布尔操作\"><a href=\"#响应的布尔操作\" class=\"headerlink\" title=\"响应的布尔操作\"></a>响应的布尔操作</h4><p>在前面我们已经了解到，有些组件的私有属性的数据类型为Boolean布尔值，比如视频、Swiper轮播组件是否自动播放、是否轮播，视频组件是否显示播放按钮等等，这些我们都可以使用setData将true改为false，false改为true来达到控制的目的。</p>\n<p>在交互方面，响应的布尔操作可以用于单一属性true与false的切换，比如显示与隐藏、展开与折叠、聚焦与失焦、选中与不选中。</p>\n<p>在开发者工具的模拟器里点击按钮，我们发现静音和取消静音都是这个按钮。这里的感叹号 !是逻辑非的意思，可以理解为not。</p>\n<blockquote>\n<p>this.setData和 this.data都用到了一个关键字 this。 this和中文里的“这个的”有类似的指代作用，在方法中， this 指代该方法所属的对象，比如这里的是Page对象， this.data就是指Page函数对象里的data对象。</p>\n</blockquote>\n<h4 id=\"响应的数组操作\"><a href=\"#响应的数组操作\" class=\"headerlink\" title=\"响应的数组操作\"></a>响应的数组操作</h4><blockquote>\n<p>数组操作知识，push为往数组的末尾新增数据，而pop则删除数组末尾一行的数据，join为数组数据之前的连接符。</p>\n</blockquote>\n<p>点击按钮<strong>新增一行</strong>，触发绑定的事件处理函数<strong>addLine</strong>，首先会执行extraLine数组新增一条数据“新增的内容”，但是这时extraLine和text还没有关系，这时在setData()函数里将initData和extraLine进行拼接（注意extraLine本来是一个数组，但是调用join方法后返回的是数组的值拼接好的字符串）。点击按钮删除最后一行，会先删除extraLine数组里最后一行的数据。</p>\n<blockquote>\n<p>小任务：新增内容过于单一，我们可以给它后面添加一个随机数，将 extraLine.push(‘新增的内容’)改成 extraLine.push(‘新增的内容’+Math.random())，再来看看新增数据的效果，关于Math.random()大家可以自行去MDN查阅。大家也可以把拼接的连接符由 \\n换成其他字符。</p>\n</blockquote>\n<h4 id=\"函数与调用函数\"><a href=\"#函数与调用函数\" class=\"headerlink\" title=\"函数与调用函数\"></a>函数与调用函数</h4><p>函数的作用，可以写一次代码，然后反复地重用这个代码。<strong>JavaScript的函数本身也是对象</strong>，因此可以把函数赋值给变量，或者作为参数传递给其他函数。</p>\n<p><strong>函数的定义和结构</strong></p>\n<p>我们可以使用<strong>function</strong>关键词来定义一个函数，括号()里为函数的参数，参数可以有很多个，使用逗号,隔开；函数要执行的代码（语句）使用大括号包住：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数 <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 参数 <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 参数 <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    代码块内要执行的语句\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>不带参数的函数</strong></p>\n<p><strong>只有一个参数的函数</strong></p>\n<p>下面定义了一个简单的平方函数square()，square为函数名，number为函数的参数(名称可以自定义)，使用return语句确定函数的返回值.</p>\n<ul>\n<li><strong>形参</strong>是在定义函数时使用的参数，目的是用来接收调用该函数时传进来的实际参数。</li>\n<li><strong>实参</strong>是在调用时传递给函数的参数</li>\n</ul>\n<blockquote>\n<p>JavaScript允许传入任意个参数而不影响调用，因此传入的参数可以比定义的参数多，但是不能少。也就是说实参的数量可以多于形参但是不能少于形参。</p>\n</blockquote>\n<h4 id=\"对象的方法\"><a href=\"#对象的方法\" class=\"headerlink\" title=\"对象的方法\"></a>对象的方法</h4><p>在小程序里我们会经常将一个匿名函数赋值给对象的一个属性，而这个属性我们可以称之为对象的方法。</p>\n<p><strong>匿名函数</strong></p>\n<p>函数声明function在语法上是一个语句，但函数也可以由<strong>函数表达式</strong>创建，这样的函数没有函数名称（匿名）。</p>\n<p><strong>箭头函数</strong></p>\n<p>为什么叫箭头函数（Arrow Function），因为它定义一个函数用的就是一个箭头=&gt;</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span><span class=\"token comment\">//连&#123;&#125;和return语句都可以省掉</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在控制台我们可以看到箭头函数打印的结果。箭头函数相当于匿名函数，它没有函数名，而且也简化了函数定义。箭头函数可以只包含一个表达式，甚至连花括号和return都可以省略掉。<strong>大家可以先只需要了解这个写法就可以了，以后碰到不至于比较迷惑，见多了也试着尝试多写一下。</strong></p>\n<p><strong>调用对象的方法</strong></p>\n<p>可以使用点表示法来调用对象的方法，这个和访问对象的属性没有区别。而调用对象的方法和调用一个函数也是大同小异。</p>\n<p>调用对象的方法我们在前面就已经接触过大量的案例了，在前面我们已经说过，wx是小程序的全局对象，而在第一节我们打印的很多API，就是调用了wx对象里的方法。</p>\n<p><strong>JavaScript函数的写法</strong></p>\n<p>在点击事件章节里，我们创建的事件点击处理函数的写法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">crollToPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而在这一节我们创建的事件点击函数的写法为：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">yellowTap</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这两种写法都是可以执行的currentTarget事件对象</p>\n<h3 id=\"currentTarget事件对象\"><a href=\"#currentTarget事件对象\" class=\"headerlink\" title=\"currentTarget事件对象\"></a>currentTarget事件对象</h3><p>当点击组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象，通过 event 对象可以获取事件触发时候的一些信息，比如时间戳、 detail 以及当前组件的一些属性值集合，尤其是事件源组件的id。</p>\n<p>当我们点击上面的tab时，触发tabClick事件处理函数，这时候事件处理函数会收到一个事件对象e，我们可以看一下控制台打印的e对象的内容，关于e对象具体属性的解释可以看技术文档。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#currenttarget\">事件对象</a></p>\n<p>currentTarget就是事件对象的一个属性，我们可以使用点表示法获取到点击的组件的Id，并将其赋值给activeIndex，所谓active就是激活的意思，也就是我们点击哪个tab，哪个tab就激活。</p>\n<ul>\n<li>当点击的id为0，也就是第一个tab时，activeIndex的值被事件处理函数修改为0；</li>\n<li>activeIndex == index相同的tab，也就是激活的tab就会有weui-bar__item_on的class，也就显示为绿色</li>\n<li>!=是不等于操作符，activeIndex != 0显然不成立条件为false，也就是组件hidden为false，即为显示；而activeIndex != 1，2，3则都会true，hidden生效，组件不显示，于是tab的效果就有了。</li>\n</ul>\n<blockquote>\n<p>当我们对字符串、Math对象、Date对象、数组对象、函数对象、事件对象所包含的信息不了解时，把他们打印出来即可。打印出来的结果基本都是字符串、列表、对象，而在前面我们已经掌握如何操作它们。通过实战，通过打印日志，既有利于我们调试代码，也加强我们对逻辑的理解。</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gczmyjxv4bj31hc0u0tir.jpg\" alt=\"2020-03-19 22-59-59 的屏幕截图.png\"></p>\n"},{"title":"腾讯犀牛鸟云开发校园技术布道师养成计划第二天","top":false,"date":"2020-03-18T05:22:26.000Z","_content":"\n# 渐变与动画\n\n​\t\tCSS是编程科技与设计艺术结合得最为完美的一项技术，编程的优雅在于代码的**清晰可读**，而设计的优雅在于能够结合技术为用户带来一场**视觉和交互的盛宴**。借助于CSS，不仅可以做出平面设计师常用的滤镜、渐变等设计效果，还可以设计出一些交互动画，增强用户的体验。\n\n#### CSS的渐变Gradient\n\n颜色渐变是设计师必不可少的，CSS linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片。\n\n```css\n/* pages/list/gradient/gradient.wxss */\n.gradient-display{\n  /* background-image:linear-gradient(red, blue); */\n  /* background-image: linear-gradient(45deg, blue, red); */\n/* 渐变轴为45度，从蓝色渐变到红色 */\n/* background-image:linear-gradient(to left top, blue, red); */\n/* 从右下到左上、从蓝色渐变到红色 */\n/* background-image:linear-gradient(0deg, blue, green 40%, red); */\n/* 从下到上（渐变轴为0度），从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */\n  background-image: linear-gradient(19deg, rgb(33, 212, 253) 0%, rgb(183, 33, 255) 100%);\n  /* 颜色百分比 */\n  width: 100vw;\n  height: 100vh;\n  }\n```\n\n#### Filter滤镜\n\n滤镜对于设计师来说一定不会陌生，CSS也有滤镜filter属性，可以对图片进行高斯模糊、调整对比度、转换为灰度图像、色相旋转、图片透明等操作。\n\n> 相比于Photoshop等工具的滤镜效果来说，使用CSS可以批量化处理图片滤镜效果，而且通过编程的手段不仅可以叠加各种效果，而且还能与交互相结合。\n\n这里我们主要介绍用的最多的三个滤镜效果，高斯模糊blur，图片变灰grayscale(*%*)，图片透明opacity(*%*)，其他滤镜效果大家以后可以阅读技术文档。\n\n```html\n<view class=\"filter-display\">\n    <view>blur高斯模糊</view>\n    <image class=\"blur\" mode=\"widthFix\" src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n    <view>grayscale图片变灰</view>\n    <image class=\"grayscale\" mode=\"widthFix\" src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n    <view>opacity图片透明</view>\n    <image class=\"opacity\" mode=\"widthFix\" src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n    <view>多个滤镜叠加，注意css的写法即可</view>\n    <image class=\"multiple\" mode=\"widthFix\" src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n</view>\n```\n\n```css\n  .filter-display img{\n        width: 150px;height: auto;\n    }\n    .blur{\n        filter: blur(8px);\n    }\n    .grayscale{\n        filter: grayscale(90%);\n    }\n    .opacity{\n        filter: opacity(25%);\n    }\n    .multiple{\n        filter: blur(8px) grayscale(90%) opacity(25%);\n    }\n```\n\n**图片由灰色变为彩色**\n\n有时我们还会给这些变灰的图片添加一个交互特效，那就是当鼠标悬停在图片上时，图片会由灰色变为彩色。\n\n```html\n<view class=\"filter-display\">\n    <text>将鼠标悬停（模拟器）或手指（手机微信）按住或放开图片查看效果</text>\n    <view class=\"grayscale\" hover-class=\"grayscale-hover\" >\n      <image mode=\"widthFix\"  src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n    </view>\n</view>\n```\n\n```css\nfilter-display image{\n  width: 150px;height: auto;\n}\n.grayscale{\n  filter: grayscale(90%);\n}\n.grayscale-hover{\n  filter:grayscal\n```\n\n#### 变形属性Transform\n\nCSS transform属性能通过修改CSS视觉格式化模型的坐标空间旋转、缩放、倾斜或平移给定的组件。\n\n#### 过渡属性Transition\n\n**CSS transitions** 可以控制组件从一个属性状态切换为另外一个属性状态时的过渡效果。\n\ntransition的语法如下，语法比较复杂\n\n```css\n.selector {\n    transition: [transition-property] [transition-duration] [transition-timing-function] [transition-delay];\n}\n```\n\n- **transition-property**，应用过渡的 CSS 或动画属性的名称；\n- **transition-duration**，整个过渡效果持续的时间，默认时间为0秒，所以要有过渡效果这个是必须定义的；\n- **transition-timing-function**，规定过渡效果的时间曲线，默认为ease；\n- **transition-delay**，过渡效果延迟多久，或者说何时开始，默认为0秒，不定义的话也就是直接开始；\n\n```css\nbox{width: 150px;height: 150px;cursor: pointer;}\n.bg-color{\n    background-color:green;\n}\n.bg-color-hover{\n    background-color: yellow;\n    transition: background-color 5s ease-out 3s;\n}\n```\n\n\n\n动画是需要触发的，这里我们使用的是**悬停hover-class**来触发效果，把鼠标放在元素上8秒以上，看一下正方形的背景颜色有什么变化。\n\n了解了效果之后，我们再来结合实际案例理解语法：\n\n- 因为我们是用hover来触发的，所以transition要写在元素的hover-class里，盒子之前的背景是绿色green，悬停的背景是黄色yellow；\n- 因为我们改变的是盒子background-color，所以transition需要过渡的CSS属性名称，就是background-color；\n- 动画过渡持续的时间，我们设置的是5秒，也就是背景由绿色变为黄色的时间；\n- 这里的ease-out（慢速结束）是颜色过渡的时间曲线效果。还可以有linear（匀速）、ease-in（慢速开始）、ease-in-out（慢速开始和慢速结束）。持续的时间很短的情况下，这几个时间曲线效果差别是及其细微的，**需要设计师对动画足够敏感了**。\n\n- 动画延迟的时间是3秒，也就是说3秒之后动画才开始。\n\n#### 动画属性Animation\n\n**CSS animations** 使得可以将从一个CSS样式配置转换到另一个CSS样式配置。动画包括两个部分:描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。\n\n**CSS3 动画库 Animate.css**\n\nAnimate.css是一个有趣的，跨浏览器的css3动画库，只需要你引入一个CSS文件，就能够给指定的元素添加动画样式。\n\n它预设了抖动（shake）、闪烁（flash）、弹跳（bounce）、翻转（flip）、旋转（rotateIn/rotateOut）、淡入淡出（fadeIn/fadeOut）等多达 80种动画效果，几乎包含了所有常见的动画效果。\n\n![2020-03-18 20-49-15 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcydh6m2caj31hc0u07cl.jpg)\n\n# 数据绑定\n\n数据绑定就是把WXML 中的一些动态数据分离出来放到对应的js文件的 Page 的 data里。\n\n#### 把数据分离出来\n\n```html\n<view>{{username}}，您已登录，欢迎</view>\n```\n\n> 在wxml文件里，只需要用双大括号把变量名包起来，就能把data里面的变量给渲染出来。\n\n#### 数据类型\n\nWXML 中的动态数据均来自对应 Page 的 data。 data 是小程序的页面第一次渲染使用的**初始数据**。小程序的页面加载时， data 将会以 JSON字符串的形式由逻辑层传至渲染层，因此 data中的数据必须是可以转成 JSON的类型：字符串String，数字Number，布尔值Boolean，对象Object，数组Array。\n\n- **字符串String**，用于存储和处理文本，可以结合Excel单元格格式里的文本格式来理解；\n- **数字Number**，这个很好理解，比如233这个数，它的数字格式和文本格式是有很大不同的，学Excel一定不会陌生；\n- **布尔值Boolean**，就是true和false，虽然只有两个值，但是它代表着两种选择，两种不同的条件，两种不同的结果；\n- **对象Object**，结合之前所学，我们再来回顾一下：对象由大括号{}分隔，在大括号{}内部，对象的属性以名称和值对的形式 name : value来定义，属性由逗号,分隔\n- **数组Array**，结合之前所学，我们再来回顾一下：数组由中括号[ ]来分割，有点类似于列表；\n\n#### 组件属性的渲染\n\n通过数据绑定，我们还可以把 style、class 、id等属性分离出来来控制组件的样式等信息。\n\n#### 字符串与数字\n\n数字格式的数字相加和四则运算的加法是一致的，而字符串与字符串的相加是**拼接**。+ 加号在JavaScript里既可以扮演四则运算符的角色，也可以进行拼接，取决于数据的格式.\n\n#### 渲染数组里的单条数据\n\n在前面我们就已经接触过数组，比如**pages配置项**就是小程序里所有页面的一个列表。数组Array是值的**有序**集合，每个值叫做一个元素，而每个元素在数组中有一个位置，以数字表示，称为**索引**。这个索引是从0开始的非负整数，也就是0，1，2，3，4，5…..\n\n#### 渲染对象类型的数据\n\n对象（object）是 JavaScript 语言的核心概念，也是**最重要的数据类型**。对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的**属性**和**方法**）。\n\n有的时候一个对象有多个属性，就拿电影来说，就有电影名称，国家，发行时间、票价、评价等等无数个属性,在双大括号里，输入变量movie+点+属性名即可，这就是**对象的点表示法**。\n\n#### 复杂的数据嵌套\n\n对象是可以嵌套的，也就是一个对象可以作为另外一个对象的值，除了对象里套对象，数组里也可以套对象，对象里也可以套数组。把现实生活中的事物转化成错综复杂的数据，是非常重要的数据思维。\n\n![2020-03-18 22-04-38 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcyflj04ktj31hc0u0qgi.jpg)\n\n# 列表渲染与条件渲染\n\n如果是要输出整个列表,这个时候就需要用到列表渲染啦。\n\n#### 渲染数组里的所有数据\n\n**相同的结构是列表渲染的前提**\n\n在实际的开发场景里，商品、新闻、股票、收藏、书架列表等都会有几千上万条的数据，他们都有一个共同的特征就是数据的结构相同，这也是我们可以批量化渲染的前提。\n\n```html\n<view wx:for=\"{{newstitle}}\" wx:key=\"*this\">\n  {{item}}\n</view>\n```\n\n这里wx:for=”{{newstitle}}”，也就是在数组newstitle里进行循环，*this代表在 for 循环中的 item 本身，而{{item}}的item是默认的。也可以使用如下方法：\n\n```html\n<view wx:for-items=\"{{newstitle}}\" wx:for-item=\"title\" wx:key=\"*this\">\n  {{title}}\n</view>\n```\n\n> 默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item；\n> 使用 wx:for-item 可以指定数组当前元素的变量名，使用 wx:for-index 可以指定数组当前下标的变量名。\n\n**图片样式**\n\n我们发现电影列表里面的图片是变形的，技术文档：[image组件文档](https://developers.weixin.qq.com/miniprogram/dev/component/image.html)\n\n在技术文档里，我们发现如果我们不写图片的模式mode，图片的模式默认为scaleToFill，也就是不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素。\n\n那我们希望图片保持宽度不变，高度自动变化，保持原图宽高比不变，那就需要用到widthFix的模式\n\n```html\n<image class=\"weui-media-box__thumb\" mode=\"widthFix\" src=\"{{movies.img}}\"\n```\n\n#### Grid九宫格样式参考\n\n大家经常会在App里看到一些分类都是以九宫格的方式来布局的.\n\n#### List样式参考\n\n![2020-03-18 22-04-58 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcyfmg8g9ej31hc0u0k1f.jpg)\n\n# 小程序组件\n\n#### 组件的属性\n\n公共属性是指小程序所有的组件都有的属性，比如id、class、style等，而不同属性的值就是数据，有数据就有数据类型。\n\n**技术文档：**[小程序组件](https://developers.weixin.qq.com/miniprogram/dev/framework/view/component.html)\n\n> 主要了解<text>组件、<image>组件、<view>组件、<navigator>组件有哪些私有属性\n\n#### 轮播效果\n\n很多App和小程序的页面顶部都有一个图片的轮播，小程序有专门的轮播组件swiper。\n\n要构成一个完整的轮播，除了配置**相同尺寸规格的图片**以外，还可以配置轮播时的面板指示点、动画效果、是否自动播放等。\n\n#### audio组件\n\naudio组件是音频组件\n\n**技术文档：**[audio组件技术文档](https://developers.weixin.qq.com/miniprogram/dev/component/audio.html)\n\n- src：要播放音频的资源地址\n- poster：默认控件上的音频封面的图片资源地址\n- name：默认控件上的音频名字\n- author：默认控件上的作者名字\n\n可能由于audio组件使用的场景和频次都非常低，audio组件以后就要被抛弃了，需要用到小程序的API来创建音乐播放。\n\n#### video组件\n\nvideo组件用来表示视频\n\n**技术文档：**[video组件技术文档](https://developers.weixin.qq.com/miniprogram/dev/component/video.html)\n\n大家可以结合实际效果和技术文档来理解以下属性，把上面案例的autoplay或者某个属性删掉查看一下具体效果，加深自己对组件属性的理解。\n\n- autoplay：是否自动播放\n- loop：是否循环播放\n- muted：是否静音播放\n- inital-time：指定视频初始播放位置，单位是秒\n- controls：是否显示默认播放控件\n\n#### cover效果\n\n我们也可以把view、图片组件覆盖在地图map或视频video组件之上。比如我们希望在视频的左上角显示视频的标题以及在右上角显示商家的logo，就可以使用cover效果。\n\n#### 地图组件\n\n要想在地图上标记一个地点，首先我们需要知道该地点的经纬度，这个时候就需要使用到坐标拾取器的工具。\n\n**经纬度获取：**[腾讯地图坐标拾取器](https://lbs.qq.com/tool/getpoint/index.html)\n\n在搜索框里我们可以搜索“深圳腾讯大厦”，得到纬度为22.540503，经度为113.934528。\n\n![2020-03-18 22-19-58 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcyh4td1qlj31hc0u0wrz.jpg)\n\n# 优化与部署上线\n\n#### 开发者工具的使用\n\n**缩进与缩进设置**\n\n**快捷键**\n\n- 批量注释快捷键：windows 是Ctrl+/\n- 代码块的缩进：windows是代码左缩进ctrl + [、代码右缩进ctrl + ]\n- 格式化代码：Windows为shift + alt + F\n\n**报错提醒**\n\n**wxml代码查看**\n\n**自动补全与代码提示**\n\n#### 小程序的转发功能\n\n我们只需要在小程序每个页面的js文件下的Page(） 里面，添加以下代码，我们的小程序就有转发功能了\n\n```javascript\n  onShareAppMessage: function (res) {\n        if (res.from === 'button') {\n            // 来自页面内转发按钮\n            console.log(res.target)\n        }\n        return {\n            title: '云开发技术训练营',\n            path: \"pages/home/home,\n            imageUrl:\"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/weapp.jpg\",\n            success: function (res) {\n                // 转发成功\n            },\n            fail: function (res) {\n                // 转发失败\n            }\n        }\n    },\n```\n\n- title为转发的标题，如果不填，默认为当前小程序的名称；\n- path为当前页面路径，也可以为其他页面的路径，如果路径写错的话会显示“当前页面不存在”哦。\n- imageUrl为自定义图片路径，可以是本地文件路径或网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4。如果不填写会取当前页面，从顶部开始，高度为 80% 屏幕宽度的图像作为转发图片\n\n#### 小程序配置的细节\n\n**没有tabBar的小程序**\n\n有时候我们不希望我们的小程序底部有tabBar，那我们该怎么处理呢？我们可以删掉app.json的tabBar配置项即可。\n\n**下拉小程序不出现空白**\n\n当我们下拉很多小程序的时候，都会出现一个白色的空白，很影响美观，但是如果我们在windows的配置项里把**backgroundColor**和**navigationBarBackgroundColor**的颜色配置成一样，下拉就不会有空白啦，比如：\n\n```javascript\n\"window\":{\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarBackgroundColor\": \"#1772cb\",\n    \"navigationBarTitleText\": \"HackWork技术工坊\",\n    \"navigationBarTextStyle\":\"white\",\n    \"backgroundColor\": \"#1772cb\"\n  },\n```\n\n**让整个页面背景变色**\n\n小程序的页面背景的颜色默认为为白色，我们希望整个小程序的页面背景变成其他颜色应该怎么处理呢？\n\n我们可以可以通过直接设置page的样式来设置，在该页面的wxss文件里添加如下样式，如\n\n```css\npage{\n  background-color: #1772cb;\n}\n```\n\n**禁止页面下拉**\n\n有的时候我们的页面做得比较短，为了增强用户体验，不希望用户可以下拉页面，因为下拉页面会有种页面松动的感觉，可以在该页面的json文件里配置，比如\n\n```json\n{\n  \"window\": {\n    \"disableScroll\": true\n  }\n}\n```\n\n#### 自定义顶部导航栏\n\n官方默认的导航栏只能对背景颜色进行更改，对于想要在导航栏添加一些比较酷炫的效果则需要通过自定义导航栏实现。通过设置 app.json中页面配置的 navigationStyle(导航栏样式)配置项的值为 custom，即可实现自定义导航：\n\n```json\n\"window\":{\n    \"navigationStyle\":\"custom\"\n}\n```\n\n\n\n比如我们给小程序的页面配一个好看的壁纸，比如在home.wxss里添加以下样式：\n\n```css\npage{\n    background-image: url(https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/background.jpg)\n}\n```\n\n#### 模板\n\n**静态的页面片段**\n\n比如使用开发者工具在小程序的pages页面新建一个common文件夹，在common里新建一个foot.wxml,在要引入的页面比如home.wxml的顶部，使用**import**引入这个模板\n\n#### 小程序的客服","source":"_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第二天.md","raw":"---\ntitle: 腾讯犀牛鸟云开发校园技术布道师养成计划第二天\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-03-18 13:22:26\n---\n\n# 渐变与动画\n\n​\t\tCSS是编程科技与设计艺术结合得最为完美的一项技术，编程的优雅在于代码的**清晰可读**，而设计的优雅在于能够结合技术为用户带来一场**视觉和交互的盛宴**。借助于CSS，不仅可以做出平面设计师常用的滤镜、渐变等设计效果，还可以设计出一些交互动画，增强用户的体验。\n\n#### CSS的渐变Gradient\n\n颜色渐变是设计师必不可少的，CSS linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片。\n\n```css\n/* pages/list/gradient/gradient.wxss */\n.gradient-display{\n  /* background-image:linear-gradient(red, blue); */\n  /* background-image: linear-gradient(45deg, blue, red); */\n/* 渐变轴为45度，从蓝色渐变到红色 */\n/* background-image:linear-gradient(to left top, blue, red); */\n/* 从右下到左上、从蓝色渐变到红色 */\n/* background-image:linear-gradient(0deg, blue, green 40%, red); */\n/* 从下到上（渐变轴为0度），从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */\n  background-image: linear-gradient(19deg, rgb(33, 212, 253) 0%, rgb(183, 33, 255) 100%);\n  /* 颜色百分比 */\n  width: 100vw;\n  height: 100vh;\n  }\n```\n\n#### Filter滤镜\n\n滤镜对于设计师来说一定不会陌生，CSS也有滤镜filter属性，可以对图片进行高斯模糊、调整对比度、转换为灰度图像、色相旋转、图片透明等操作。\n\n> 相比于Photoshop等工具的滤镜效果来说，使用CSS可以批量化处理图片滤镜效果，而且通过编程的手段不仅可以叠加各种效果，而且还能与交互相结合。\n\n这里我们主要介绍用的最多的三个滤镜效果，高斯模糊blur，图片变灰grayscale(*%*)，图片透明opacity(*%*)，其他滤镜效果大家以后可以阅读技术文档。\n\n```html\n<view class=\"filter-display\">\n    <view>blur高斯模糊</view>\n    <image class=\"blur\" mode=\"widthFix\" src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n    <view>grayscale图片变灰</view>\n    <image class=\"grayscale\" mode=\"widthFix\" src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n    <view>opacity图片透明</view>\n    <image class=\"opacity\" mode=\"widthFix\" src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n    <view>多个滤镜叠加，注意css的写法即可</view>\n    <image class=\"multiple\" mode=\"widthFix\" src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n</view>\n```\n\n```css\n  .filter-display img{\n        width: 150px;height: auto;\n    }\n    .blur{\n        filter: blur(8px);\n    }\n    .grayscale{\n        filter: grayscale(90%);\n    }\n    .opacity{\n        filter: opacity(25%);\n    }\n    .multiple{\n        filter: blur(8px) grayscale(90%) opacity(25%);\n    }\n```\n\n**图片由灰色变为彩色**\n\n有时我们还会给这些变灰的图片添加一个交互特效，那就是当鼠标悬停在图片上时，图片会由灰色变为彩色。\n\n```html\n<view class=\"filter-display\">\n    <text>将鼠标悬停（模拟器）或手指（手机微信）按住或放开图片查看效果</text>\n    <view class=\"grayscale\" hover-class=\"grayscale-hover\" >\n      <image mode=\"widthFix\"  src=\"https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg\"></image>\n    </view>\n</view>\n```\n\n```css\nfilter-display image{\n  width: 150px;height: auto;\n}\n.grayscale{\n  filter: grayscale(90%);\n}\n.grayscale-hover{\n  filter:grayscal\n```\n\n#### 变形属性Transform\n\nCSS transform属性能通过修改CSS视觉格式化模型的坐标空间旋转、缩放、倾斜或平移给定的组件。\n\n#### 过渡属性Transition\n\n**CSS transitions** 可以控制组件从一个属性状态切换为另外一个属性状态时的过渡效果。\n\ntransition的语法如下，语法比较复杂\n\n```css\n.selector {\n    transition: [transition-property] [transition-duration] [transition-timing-function] [transition-delay];\n}\n```\n\n- **transition-property**，应用过渡的 CSS 或动画属性的名称；\n- **transition-duration**，整个过渡效果持续的时间，默认时间为0秒，所以要有过渡效果这个是必须定义的；\n- **transition-timing-function**，规定过渡效果的时间曲线，默认为ease；\n- **transition-delay**，过渡效果延迟多久，或者说何时开始，默认为0秒，不定义的话也就是直接开始；\n\n```css\nbox{width: 150px;height: 150px;cursor: pointer;}\n.bg-color{\n    background-color:green;\n}\n.bg-color-hover{\n    background-color: yellow;\n    transition: background-color 5s ease-out 3s;\n}\n```\n\n\n\n动画是需要触发的，这里我们使用的是**悬停hover-class**来触发效果，把鼠标放在元素上8秒以上，看一下正方形的背景颜色有什么变化。\n\n了解了效果之后，我们再来结合实际案例理解语法：\n\n- 因为我们是用hover来触发的，所以transition要写在元素的hover-class里，盒子之前的背景是绿色green，悬停的背景是黄色yellow；\n- 因为我们改变的是盒子background-color，所以transition需要过渡的CSS属性名称，就是background-color；\n- 动画过渡持续的时间，我们设置的是5秒，也就是背景由绿色变为黄色的时间；\n- 这里的ease-out（慢速结束）是颜色过渡的时间曲线效果。还可以有linear（匀速）、ease-in（慢速开始）、ease-in-out（慢速开始和慢速结束）。持续的时间很短的情况下，这几个时间曲线效果差别是及其细微的，**需要设计师对动画足够敏感了**。\n\n- 动画延迟的时间是3秒，也就是说3秒之后动画才开始。\n\n#### 动画属性Animation\n\n**CSS animations** 使得可以将从一个CSS样式配置转换到另一个CSS样式配置。动画包括两个部分:描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。\n\n**CSS3 动画库 Animate.css**\n\nAnimate.css是一个有趣的，跨浏览器的css3动画库，只需要你引入一个CSS文件，就能够给指定的元素添加动画样式。\n\n它预设了抖动（shake）、闪烁（flash）、弹跳（bounce）、翻转（flip）、旋转（rotateIn/rotateOut）、淡入淡出（fadeIn/fadeOut）等多达 80种动画效果，几乎包含了所有常见的动画效果。\n\n![2020-03-18 20-49-15 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcydh6m2caj31hc0u07cl.jpg)\n\n# 数据绑定\n\n数据绑定就是把WXML 中的一些动态数据分离出来放到对应的js文件的 Page 的 data里。\n\n#### 把数据分离出来\n\n```html\n<view>{{username}}，您已登录，欢迎</view>\n```\n\n> 在wxml文件里，只需要用双大括号把变量名包起来，就能把data里面的变量给渲染出来。\n\n#### 数据类型\n\nWXML 中的动态数据均来自对应 Page 的 data。 data 是小程序的页面第一次渲染使用的**初始数据**。小程序的页面加载时， data 将会以 JSON字符串的形式由逻辑层传至渲染层，因此 data中的数据必须是可以转成 JSON的类型：字符串String，数字Number，布尔值Boolean，对象Object，数组Array。\n\n- **字符串String**，用于存储和处理文本，可以结合Excel单元格格式里的文本格式来理解；\n- **数字Number**，这个很好理解，比如233这个数，它的数字格式和文本格式是有很大不同的，学Excel一定不会陌生；\n- **布尔值Boolean**，就是true和false，虽然只有两个值，但是它代表着两种选择，两种不同的条件，两种不同的结果；\n- **对象Object**，结合之前所学，我们再来回顾一下：对象由大括号{}分隔，在大括号{}内部，对象的属性以名称和值对的形式 name : value来定义，属性由逗号,分隔\n- **数组Array**，结合之前所学，我们再来回顾一下：数组由中括号[ ]来分割，有点类似于列表；\n\n#### 组件属性的渲染\n\n通过数据绑定，我们还可以把 style、class 、id等属性分离出来来控制组件的样式等信息。\n\n#### 字符串与数字\n\n数字格式的数字相加和四则运算的加法是一致的，而字符串与字符串的相加是**拼接**。+ 加号在JavaScript里既可以扮演四则运算符的角色，也可以进行拼接，取决于数据的格式.\n\n#### 渲染数组里的单条数据\n\n在前面我们就已经接触过数组，比如**pages配置项**就是小程序里所有页面的一个列表。数组Array是值的**有序**集合，每个值叫做一个元素，而每个元素在数组中有一个位置，以数字表示，称为**索引**。这个索引是从0开始的非负整数，也就是0，1，2，3，4，5…..\n\n#### 渲染对象类型的数据\n\n对象（object）是 JavaScript 语言的核心概念，也是**最重要的数据类型**。对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的**属性**和**方法**）。\n\n有的时候一个对象有多个属性，就拿电影来说，就有电影名称，国家，发行时间、票价、评价等等无数个属性,在双大括号里，输入变量movie+点+属性名即可，这就是**对象的点表示法**。\n\n#### 复杂的数据嵌套\n\n对象是可以嵌套的，也就是一个对象可以作为另外一个对象的值，除了对象里套对象，数组里也可以套对象，对象里也可以套数组。把现实生活中的事物转化成错综复杂的数据，是非常重要的数据思维。\n\n![2020-03-18 22-04-38 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcyflj04ktj31hc0u0qgi.jpg)\n\n# 列表渲染与条件渲染\n\n如果是要输出整个列表,这个时候就需要用到列表渲染啦。\n\n#### 渲染数组里的所有数据\n\n**相同的结构是列表渲染的前提**\n\n在实际的开发场景里，商品、新闻、股票、收藏、书架列表等都会有几千上万条的数据，他们都有一个共同的特征就是数据的结构相同，这也是我们可以批量化渲染的前提。\n\n```html\n<view wx:for=\"{{newstitle}}\" wx:key=\"*this\">\n  {{item}}\n</view>\n```\n\n这里wx:for=”{{newstitle}}”，也就是在数组newstitle里进行循环，*this代表在 for 循环中的 item 本身，而{{item}}的item是默认的。也可以使用如下方法：\n\n```html\n<view wx:for-items=\"{{newstitle}}\" wx:for-item=\"title\" wx:key=\"*this\">\n  {{title}}\n</view>\n```\n\n> 默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item；\n> 使用 wx:for-item 可以指定数组当前元素的变量名，使用 wx:for-index 可以指定数组当前下标的变量名。\n\n**图片样式**\n\n我们发现电影列表里面的图片是变形的，技术文档：[image组件文档](https://developers.weixin.qq.com/miniprogram/dev/component/image.html)\n\n在技术文档里，我们发现如果我们不写图片的模式mode，图片的模式默认为scaleToFill，也就是不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素。\n\n那我们希望图片保持宽度不变，高度自动变化，保持原图宽高比不变，那就需要用到widthFix的模式\n\n```html\n<image class=\"weui-media-box__thumb\" mode=\"widthFix\" src=\"{{movies.img}}\"\n```\n\n#### Grid九宫格样式参考\n\n大家经常会在App里看到一些分类都是以九宫格的方式来布局的.\n\n#### List样式参考\n\n![2020-03-18 22-04-58 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcyfmg8g9ej31hc0u0k1f.jpg)\n\n# 小程序组件\n\n#### 组件的属性\n\n公共属性是指小程序所有的组件都有的属性，比如id、class、style等，而不同属性的值就是数据，有数据就有数据类型。\n\n**技术文档：**[小程序组件](https://developers.weixin.qq.com/miniprogram/dev/framework/view/component.html)\n\n> 主要了解<text>组件、<image>组件、<view>组件、<navigator>组件有哪些私有属性\n\n#### 轮播效果\n\n很多App和小程序的页面顶部都有一个图片的轮播，小程序有专门的轮播组件swiper。\n\n要构成一个完整的轮播，除了配置**相同尺寸规格的图片**以外，还可以配置轮播时的面板指示点、动画效果、是否自动播放等。\n\n#### audio组件\n\naudio组件是音频组件\n\n**技术文档：**[audio组件技术文档](https://developers.weixin.qq.com/miniprogram/dev/component/audio.html)\n\n- src：要播放音频的资源地址\n- poster：默认控件上的音频封面的图片资源地址\n- name：默认控件上的音频名字\n- author：默认控件上的作者名字\n\n可能由于audio组件使用的场景和频次都非常低，audio组件以后就要被抛弃了，需要用到小程序的API来创建音乐播放。\n\n#### video组件\n\nvideo组件用来表示视频\n\n**技术文档：**[video组件技术文档](https://developers.weixin.qq.com/miniprogram/dev/component/video.html)\n\n大家可以结合实际效果和技术文档来理解以下属性，把上面案例的autoplay或者某个属性删掉查看一下具体效果，加深自己对组件属性的理解。\n\n- autoplay：是否自动播放\n- loop：是否循环播放\n- muted：是否静音播放\n- inital-time：指定视频初始播放位置，单位是秒\n- controls：是否显示默认播放控件\n\n#### cover效果\n\n我们也可以把view、图片组件覆盖在地图map或视频video组件之上。比如我们希望在视频的左上角显示视频的标题以及在右上角显示商家的logo，就可以使用cover效果。\n\n#### 地图组件\n\n要想在地图上标记一个地点，首先我们需要知道该地点的经纬度，这个时候就需要使用到坐标拾取器的工具。\n\n**经纬度获取：**[腾讯地图坐标拾取器](https://lbs.qq.com/tool/getpoint/index.html)\n\n在搜索框里我们可以搜索“深圳腾讯大厦”，得到纬度为22.540503，经度为113.934528。\n\n![2020-03-18 22-19-58 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gcyh4td1qlj31hc0u0wrz.jpg)\n\n# 优化与部署上线\n\n#### 开发者工具的使用\n\n**缩进与缩进设置**\n\n**快捷键**\n\n- 批量注释快捷键：windows 是Ctrl+/\n- 代码块的缩进：windows是代码左缩进ctrl + [、代码右缩进ctrl + ]\n- 格式化代码：Windows为shift + alt + F\n\n**报错提醒**\n\n**wxml代码查看**\n\n**自动补全与代码提示**\n\n#### 小程序的转发功能\n\n我们只需要在小程序每个页面的js文件下的Page(） 里面，添加以下代码，我们的小程序就有转发功能了\n\n```javascript\n  onShareAppMessage: function (res) {\n        if (res.from === 'button') {\n            // 来自页面内转发按钮\n            console.log(res.target)\n        }\n        return {\n            title: '云开发技术训练营',\n            path: \"pages/home/home,\n            imageUrl:\"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/weapp.jpg\",\n            success: function (res) {\n                // 转发成功\n            },\n            fail: function (res) {\n                // 转发失败\n            }\n        }\n    },\n```\n\n- title为转发的标题，如果不填，默认为当前小程序的名称；\n- path为当前页面路径，也可以为其他页面的路径，如果路径写错的话会显示“当前页面不存在”哦。\n- imageUrl为自定义图片路径，可以是本地文件路径或网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4。如果不填写会取当前页面，从顶部开始，高度为 80% 屏幕宽度的图像作为转发图片\n\n#### 小程序配置的细节\n\n**没有tabBar的小程序**\n\n有时候我们不希望我们的小程序底部有tabBar，那我们该怎么处理呢？我们可以删掉app.json的tabBar配置项即可。\n\n**下拉小程序不出现空白**\n\n当我们下拉很多小程序的时候，都会出现一个白色的空白，很影响美观，但是如果我们在windows的配置项里把**backgroundColor**和**navigationBarBackgroundColor**的颜色配置成一样，下拉就不会有空白啦，比如：\n\n```javascript\n\"window\":{\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarBackgroundColor\": \"#1772cb\",\n    \"navigationBarTitleText\": \"HackWork技术工坊\",\n    \"navigationBarTextStyle\":\"white\",\n    \"backgroundColor\": \"#1772cb\"\n  },\n```\n\n**让整个页面背景变色**\n\n小程序的页面背景的颜色默认为为白色，我们希望整个小程序的页面背景变成其他颜色应该怎么处理呢？\n\n我们可以可以通过直接设置page的样式来设置，在该页面的wxss文件里添加如下样式，如\n\n```css\npage{\n  background-color: #1772cb;\n}\n```\n\n**禁止页面下拉**\n\n有的时候我们的页面做得比较短，为了增强用户体验，不希望用户可以下拉页面，因为下拉页面会有种页面松动的感觉，可以在该页面的json文件里配置，比如\n\n```json\n{\n  \"window\": {\n    \"disableScroll\": true\n  }\n}\n```\n\n#### 自定义顶部导航栏\n\n官方默认的导航栏只能对背景颜色进行更改，对于想要在导航栏添加一些比较酷炫的效果则需要通过自定义导航栏实现。通过设置 app.json中页面配置的 navigationStyle(导航栏样式)配置项的值为 custom，即可实现自定义导航：\n\n```json\n\"window\":{\n    \"navigationStyle\":\"custom\"\n}\n```\n\n\n\n比如我们给小程序的页面配一个好看的壁纸，比如在home.wxss里添加以下样式：\n\n```css\npage{\n    background-image: url(https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/background.jpg)\n}\n```\n\n#### 模板\n\n**静态的页面片段**\n\n比如使用开发者工具在小程序的pages页面新建一个common文件夹，在common里新建一个foot.wxml,在要引入的页面比如home.wxml的顶部，使用**import**引入这个模板\n\n#### 小程序的客服","slug":"腾讯犀牛鸟云开发校园技术布道师养成计划第二天","published":1,"updated":"2022-08-25T14:12:05.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39d005012mjf5vq23hl","content":"<h1 id=\"渐变与动画\"><a href=\"#渐变与动画\" class=\"headerlink\" title=\"渐变与动画\"></a>渐变与动画</h1><p>​        CSS是编程科技与设计艺术结合得最为完美的一项技术，编程的优雅在于代码的<strong>清晰可读</strong>，而设计的优雅在于能够结合技术为用户带来一场<strong>视觉和交互的盛宴</strong>。借助于CSS，不仅可以做出平面设计师常用的滤镜、渐变等设计效果，还可以设计出一些交互动画，增强用户的体验。</p>\n<h4 id=\"CSS的渐变Gradient\"><a href=\"#CSS的渐变Gradient\" class=\"headerlink\" title=\"CSS的渐变Gradient\"></a>CSS的渐变Gradient</h4><p>颜色渐变是设计师必不可少的，CSS linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* pages/list/gradient/gradient.wxss */</span>\n<span class=\"token selector\">.gradient-display</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* background-image:linear-gradient(red, blue); */</span>\n  <span class=\"token comment\">/* background-image: linear-gradient(45deg, blue, red); */</span>\n<span class=\"token comment\">/* 渐变轴为45度，从蓝色渐变到红色 */</span>\n<span class=\"token comment\">/* background-image:linear-gradient(to left top, blue, red); */</span>\n<span class=\"token comment\">/* 从右下到左上、从蓝色渐变到红色 */</span>\n<span class=\"token comment\">/* background-image:linear-gradient(0deg, blue, green 40%, red); */</span>\n<span class=\"token comment\">/* 从下到上（渐变轴为0度），从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>19deg<span class=\"token punctuation\">,</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>33<span class=\"token punctuation\">,</span> 212<span class=\"token punctuation\">,</span> 253<span class=\"token punctuation\">)</span> 0%<span class=\"token punctuation\">,</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>183<span class=\"token punctuation\">,</span> 33<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">)</span> 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 颜色百分比 */</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Filter滤镜\"><a href=\"#Filter滤镜\" class=\"headerlink\" title=\"Filter滤镜\"></a>Filter滤镜</h4><p>滤镜对于设计师来说一定不会陌生，CSS也有滤镜filter属性，可以对图片进行高斯模糊、调整对比度、转换为灰度图像、色相旋转、图片透明等操作。</p>\n<blockquote>\n<p>相比于Photoshop等工具的滤镜效果来说，使用CSS可以批量化处理图片滤镜效果，而且通过编程的手段不仅可以叠加各种效果，而且还能与交互相结合。</p>\n</blockquote>\n<p>这里我们主要介绍用的最多的三个滤镜效果，高斯模糊blur，图片变灰grayscale(<em>%</em>)，图片透明opacity(<em>%</em>)，其他滤镜效果大家以后可以阅读技术文档。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-display<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">&gt;</span></span>blur高斯模糊<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blur<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">&gt;</span></span>grayscale图片变灰<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grayscale<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">&gt;</span></span>opacity图片透明<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>opacity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">&gt;</span></span>多个滤镜叠加，注意css的写法即可<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multiple<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.filter-display img</span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.blur</span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>8px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.grayscale</span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>90%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.opacity</span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span>25%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.multiple</span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>8px<span class=\"token punctuation\">)</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>90%<span class=\"token punctuation\">)</span> <span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span>25%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>图片由灰色变为彩色</strong></p>\n<p>有时我们还会给这些变灰的图片添加一个交互特效，那就是当鼠标悬停在图片上时，图片会由灰色变为彩色。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-display<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">&gt;</span></span>将鼠标悬停（模拟器）或手指（手机微信）按住或放开图片查看效果<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grayscale<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">hover-class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grayscale-hover<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">filter-display image</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.grayscale</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>90%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.grayscale-hover</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span>grayscal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"变形属性Transform\"><a href=\"#变形属性Transform\" class=\"headerlink\" title=\"变形属性Transform\"></a>变形属性Transform</h4><p>CSS transform属性能通过修改CSS视觉格式化模型的坐标空间旋转、缩放、倾斜或平移给定的组件。</p>\n<h4 id=\"过渡属性Transition\"><a href=\"#过渡属性Transition\" class=\"headerlink\" title=\"过渡属性Transition\"></a>过渡属性Transition</h4><p><strong>CSS transitions</strong> 可以控制组件从一个属性状态切换为另外一个属性状态时的过渡效果。</p>\n<p>transition的语法如下，语法比较复杂</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.selector</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> [transition-property] [transition-duration] [transition-timing-function] [transition-delay]<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>transition-property</strong>，应用过渡的 CSS 或动画属性的名称；</li>\n<li><strong>transition-duration</strong>，整个过渡效果持续的时间，默认时间为0秒，所以要有过渡效果这个是必须定义的；</li>\n<li><strong>transition-timing-function</strong>，规定过渡效果的时间曲线，默认为ease；</li>\n<li><strong>transition-delay</strong>，过渡效果延迟多久，或者说何时开始，默认为0秒，不定义的话也就是直接开始；</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">box</span><span class=\"token punctuation\">{</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.bg-color</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.bg-color-hover</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> background-color 5s ease-out 3s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>动画是需要触发的，这里我们使用的是<strong>悬停hover-class</strong>来触发效果，把鼠标放在元素上8秒以上，看一下正方形的背景颜色有什么变化。</p>\n<p>了解了效果之后，我们再来结合实际案例理解语法：</p>\n<ul>\n<li><p>因为我们是用hover来触发的，所以transition要写在元素的hover-class里，盒子之前的背景是绿色green，悬停的背景是黄色yellow；</p>\n</li>\n<li><p>因为我们改变的是盒子background-color，所以transition需要过渡的CSS属性名称，就是background-color；</p>\n</li>\n<li><p>动画过渡持续的时间，我们设置的是5秒，也就是背景由绿色变为黄色的时间；</p>\n</li>\n<li><p>这里的ease-out（慢速结束）是颜色过渡的时间曲线效果。还可以有linear（匀速）、ease-in（慢速开始）、ease-in-out（慢速开始和慢速结束）。持续的时间很短的情况下，这几个时间曲线效果差别是及其细微的，<strong>需要设计师对动画足够敏感了</strong>。</p>\n</li>\n<li><p>动画延迟的时间是3秒，也就是说3秒之后动画才开始。</p>\n</li>\n</ul>\n<h4 id=\"动画属性Animation\"><a href=\"#动画属性Animation\" class=\"headerlink\" title=\"动画属性Animation\"></a>动画属性Animation</h4><p><strong>CSS animations</strong> 使得可以将从一个CSS样式配置转换到另一个CSS样式配置。动画包括两个部分:描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。</p>\n<p><strong>CSS3 动画库 Animate.css</strong></p>\n<p>Animate.css是一个有趣的，跨浏览器的css3动画库，只需要你引入一个CSS文件，就能够给指定的元素添加动画样式。</p>\n<p>它预设了抖动（shake）、闪烁（flash）、弹跳（bounce）、翻转（flip）、旋转（rotateIn/rotateOut）、淡入淡出（fadeIn/fadeOut）等多达 80种动画效果，几乎包含了所有常见的动画效果。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcydh6m2caj31hc0u07cl.jpg\" alt=\"2020-03-18 20-49-15 的屏幕截图.png\"></p>\n<h1 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h1><p>数据绑定就是把WXML 中的一些动态数据分离出来放到对应的js文件的 Page 的 data里。</p>\n<h4 id=\"把数据分离出来\"><a href=\"#把数据分离出来\" class=\"headerlink\" title=\"把数据分离出来\"></a>把数据分离出来</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">&gt;</span></span>{{username}}，您已登录，欢迎<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>在wxml文件里，只需要用双大括号把变量名包起来，就能把data里面的变量给渲染出来。</p>\n</blockquote>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>WXML 中的动态数据均来自对应 Page 的 data。 data 是小程序的页面第一次渲染使用的<strong>初始数据</strong>。小程序的页面加载时， data 将会以 JSON字符串的形式由逻辑层传至渲染层，因此 data中的数据必须是可以转成 JSON的类型：字符串String，数字Number，布尔值Boolean，对象Object，数组Array。</p>\n<ul>\n<li><strong>字符串String</strong>，用于存储和处理文本，可以结合Excel单元格格式里的文本格式来理解；</li>\n<li><strong>数字Number</strong>，这个很好理解，比如233这个数，它的数字格式和文本格式是有很大不同的，学Excel一定不会陌生；</li>\n<li><strong>布尔值Boolean</strong>，就是true和false，虽然只有两个值，但是它代表着两种选择，两种不同的条件，两种不同的结果；</li>\n<li><strong>对象Object</strong>，结合之前所学，我们再来回顾一下：对象由大括号{}分隔，在大括号{}内部，对象的属性以名称和值对的形式 name : value来定义，属性由逗号,分隔</li>\n<li><strong>数组Array</strong>，结合之前所学，我们再来回顾一下：数组由中括号[ ]来分割，有点类似于列表；</li>\n</ul>\n<h4 id=\"组件属性的渲染\"><a href=\"#组件属性的渲染\" class=\"headerlink\" title=\"组件属性的渲染\"></a>组件属性的渲染</h4><p>通过数据绑定，我们还可以把 style、class 、id等属性分离出来来控制组件的样式等信息。</p>\n<h4 id=\"字符串与数字\"><a href=\"#字符串与数字\" class=\"headerlink\" title=\"字符串与数字\"></a>字符串与数字</h4><p>数字格式的数字相加和四则运算的加法是一致的，而字符串与字符串的相加是<strong>拼接</strong>。+ 加号在JavaScript里既可以扮演四则运算符的角色，也可以进行拼接，取决于数据的格式.</p>\n<h4 id=\"渲染数组里的单条数据\"><a href=\"#渲染数组里的单条数据\" class=\"headerlink\" title=\"渲染数组里的单条数据\"></a>渲染数组里的单条数据</h4><p>在前面我们就已经接触过数组，比如<strong>pages配置项</strong>就是小程序里所有页面的一个列表。数组Array是值的<strong>有序</strong>集合，每个值叫做一个元素，而每个元素在数组中有一个位置，以数字表示，称为<strong>索引</strong>。这个索引是从0开始的非负整数，也就是0，1，2，3，4，5…..</p>\n<h4 id=\"渲染对象类型的数据\"><a href=\"#渲染对象类型的数据\" class=\"headerlink\" title=\"渲染对象类型的数据\"></a>渲染对象类型的数据</h4><p>对象（object）是 JavaScript 语言的核心概念，也是<strong>最重要的数据类型</strong>。对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的<strong>属性</strong>和<strong>方法</strong>）。</p>\n<p>有的时候一个对象有多个属性，就拿电影来说，就有电影名称，国家，发行时间、票价、评价等等无数个属性,在双大括号里，输入变量movie+点+属性名即可，这就是<strong>对象的点表示法</strong>。</p>\n<h4 id=\"复杂的数据嵌套\"><a href=\"#复杂的数据嵌套\" class=\"headerlink\" title=\"复杂的数据嵌套\"></a>复杂的数据嵌套</h4><p>对象是可以嵌套的，也就是一个对象可以作为另外一个对象的值，除了对象里套对象，数组里也可以套对象，对象里也可以套数组。把现实生活中的事物转化成错综复杂的数据，是非常重要的数据思维。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcyflj04ktj31hc0u0qgi.jpg\" alt=\"2020-03-18 22-04-38 的屏幕截图.png\"></p>\n<h1 id=\"列表渲染与条件渲染\"><a href=\"#列表渲染与条件渲染\" class=\"headerlink\" title=\"列表渲染与条件渲染\"></a>列表渲染与条件渲染</h1><p>如果是要输出整个列表,这个时候就需要用到列表渲染啦。</p>\n<h4 id=\"渲染数组里的所有数据\"><a href=\"#渲染数组里的所有数据\" class=\"headerlink\" title=\"渲染数组里的所有数据\"></a>渲染数组里的所有数据</h4><p><strong>相同的结构是列表渲染的前提</strong></p>\n<p>在实际的开发场景里，商品、新闻、股票、收藏、书架列表等都会有几千上万条的数据，他们都有一个共同的特征就是数据的结构相同，这也是我们可以批量化渲染的前提。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{newstitle}}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*this<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  {{item}}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里wx:for=””，也就是在数组newstitle里进行循环，*this代表在 for 循环中的 item 本身，而的item是默认的。也可以使用如下方法：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>for-items</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{newstitle}}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>for-item</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*this<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  {{title}}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item；<br>使用 wx:for-item 可以指定数组当前元素的变量名，使用 wx:for-index 可以指定数组当前下标的变量名。</p>\n</blockquote>\n<p><strong>图片样式</strong></p>\n<p>我们发现电影列表里面的图片是变形的，技术文档：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/image.html\">image组件文档</a></p>\n<p>在技术文档里，我们发现如果我们不写图片的模式mode，图片的模式默认为scaleToFill，也就是不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素。</p>\n<p>那我们希望图片保持宽度不变，高度自动变化，保持原图宽高比不变，那就需要用到widthFix的模式</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;image class=\"weui-media-box__thumb\" mode=\"widthFix\" src=\"{{movies.img}}\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"Grid九宫格样式参考\"><a href=\"#Grid九宫格样式参考\" class=\"headerlink\" title=\"Grid九宫格样式参考\"></a>Grid九宫格样式参考</h4><p>大家经常会在App里看到一些分类都是以九宫格的方式来布局的.</p>\n<h4 id=\"List样式参考\"><a href=\"#List样式参考\" class=\"headerlink\" title=\"List样式参考\"></a>List样式参考</h4><p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcyfmg8g9ej31hc0u0k1f.jpg\" alt=\"2020-03-18 22-04-58 的屏幕截图.png\"></p>\n<h1 id=\"小程序组件\"><a href=\"#小程序组件\" class=\"headerlink\" title=\"小程序组件\"></a>小程序组件</h1><h4 id=\"组件的属性\"><a href=\"#组件的属性\" class=\"headerlink\" title=\"组件的属性\"></a>组件的属性</h4><p>公共属性是指小程序所有的组件都有的属性，比如id、class、style等，而不同属性的值就是数据，有数据就有数据类型。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/component.html\">小程序组件</a></p>\n<blockquote>\n<p>主要了解<text>组件、<img>组件、<view>组件、<navigator>组件有哪些私有属性</navigator></view></text></p>\n</blockquote>\n<h4 id=\"轮播效果\"><a href=\"#轮播效果\" class=\"headerlink\" title=\"轮播效果\"></a>轮播效果</h4><p>很多App和小程序的页面顶部都有一个图片的轮播，小程序有专门的轮播组件swiper。</p>\n<p>要构成一个完整的轮播，除了配置<strong>相同尺寸规格的图片</strong>以外，还可以配置轮播时的面板指示点、动画效果、是否自动播放等。</p>\n<h4 id=\"audio组件\"><a href=\"#audio组件\" class=\"headerlink\" title=\"audio组件\"></a>audio组件</h4><p>audio组件是音频组件</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/audio.html\">audio组件技术文档</a></p>\n<ul>\n<li>src：要播放音频的资源地址</li>\n<li>poster：默认控件上的音频封面的图片资源地址</li>\n<li>name：默认控件上的音频名字</li>\n<li>author：默认控件上的作者名字</li>\n</ul>\n<p>可能由于audio组件使用的场景和频次都非常低，audio组件以后就要被抛弃了，需要用到小程序的API来创建音乐播放。</p>\n<h4 id=\"video组件\"><a href=\"#video组件\" class=\"headerlink\" title=\"video组件\"></a>video组件</h4><p>video组件用来表示视频</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/video.html\">video组件技术文档</a></p>\n<p>大家可以结合实际效果和技术文档来理解以下属性，把上面案例的autoplay或者某个属性删掉查看一下具体效果，加深自己对组件属性的理解。</p>\n<ul>\n<li>autoplay：是否自动播放</li>\n<li>loop：是否循环播放</li>\n<li>muted：是否静音播放</li>\n<li>inital-time：指定视频初始播放位置，单位是秒</li>\n<li>controls：是否显示默认播放控件</li>\n</ul>\n<h4 id=\"cover效果\"><a href=\"#cover效果\" class=\"headerlink\" title=\"cover效果\"></a>cover效果</h4><p>我们也可以把view、图片组件覆盖在地图map或视频video组件之上。比如我们希望在视频的左上角显示视频的标题以及在右上角显示商家的logo，就可以使用cover效果。</p>\n<h4 id=\"地图组件\"><a href=\"#地图组件\" class=\"headerlink\" title=\"地图组件\"></a>地图组件</h4><p>要想在地图上标记一个地点，首先我们需要知道该地点的经纬度，这个时候就需要使用到坐标拾取器的工具。</p>\n<p><strong>经纬度获取：</strong><a href=\"https://lbs.qq.com/tool/getpoint/index.html\">腾讯地图坐标拾取器</a></p>\n<p>在搜索框里我们可以搜索“深圳腾讯大厦”，得到纬度为22.540503，经度为113.934528。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcyh4td1qlj31hc0u0wrz.jpg\" alt=\"2020-03-18 22-19-58 的屏幕截图.png\"></p>\n<h1 id=\"优化与部署上线\"><a href=\"#优化与部署上线\" class=\"headerlink\" title=\"优化与部署上线\"></a>优化与部署上线</h1><h4 id=\"开发者工具的使用\"><a href=\"#开发者工具的使用\" class=\"headerlink\" title=\"开发者工具的使用\"></a>开发者工具的使用</h4><p><strong>缩进与缩进设置</strong></p>\n<p><strong>快捷键</strong></p>\n<ul>\n<li>批量注释快捷键：windows 是Ctrl+/</li>\n<li>代码块的缩进：windows是代码左缩进ctrl + [、代码右缩进ctrl + ]</li>\n<li>格式化代码：Windows为shift + alt + F</li>\n</ul>\n<p><strong>报错提醒</strong></p>\n<p><strong>wxml代码查看</strong></p>\n<p><strong>自动补全与代码提示</strong></p>\n<h4 id=\"小程序的转发功能\"><a href=\"#小程序的转发功能\" class=\"headerlink\" title=\"小程序的转发功能\"></a>小程序的转发功能</h4><p>我们只需要在小程序每个页面的js文件下的Page(） 里面，添加以下代码，我们的小程序就有转发功能了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">onShareAppMessage</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>from <span class=\"token operator\">===</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 来自页面内转发按钮</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          title<span class=\"token operator\">:</span> <span class=\"token string\">'云开发技术训练营'</span><span class=\"token punctuation\">,</span>\n          path<span class=\"token operator\">:</span> \"pages<span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>home<span class=\"token punctuation\">,</span>\n          imageUrl<span class=\"token operator\">:</span><span class=\"token string\">\"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/weapp.jpg\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// 转发成功</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function-variable function\">fail</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// 转发失败</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>title为转发的标题，如果不填，默认为当前小程序的名称；</li>\n<li>path为当前页面路径，也可以为其他页面的路径，如果路径写错的话会显示“当前页面不存在”哦。</li>\n<li>imageUrl为自定义图片路径，可以是本地文件路径或网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4。如果不填写会取当前页面，从顶部开始，高度为 80% 屏幕宽度的图像作为转发图片</li>\n</ul>\n<h4 id=\"小程序配置的细节\"><a href=\"#小程序配置的细节\" class=\"headerlink\" title=\"小程序配置的细节\"></a>小程序配置的细节</h4><p><strong>没有tabBar的小程序</strong></p>\n<p>有时候我们不希望我们的小程序底部有tabBar，那我们该怎么处理呢？我们可以删掉app.json的tabBar配置项即可。</p>\n<p><strong>下拉小程序不出现空白</strong></p>\n<p>当我们下拉很多小程序的时候，都会出现一个白色的空白，很影响美观，但是如果我们在windows的配置项里把<strong>backgroundColor</strong>和<strong>navigationBarBackgroundColor</strong>的颜色配置成一样，下拉就不会有空白啦，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"window\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"backgroundTextStyle\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"light\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"navigationBarBackgroundColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#1772cb\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"navigationBarTitleText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HackWork技术工坊\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"navigationBarTextStyle\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"backgroundColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#1772cb\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>让整个页面背景变色</strong></p>\n<p>小程序的页面背景的颜色默认为为白色，我们希望整个小程序的页面背景变成其他颜色应该怎么处理呢？</p>\n<p>我们可以可以通过直接设置page的样式来设置，在该页面的wxss文件里添加如下样式，如</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">page</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #1772cb<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>禁止页面下拉</strong></p>\n<p>有的时候我们的页面做得比较短，为了增强用户体验，不希望用户可以下拉页面，因为下拉页面会有种页面松动的感觉，可以在该页面的json文件里配置，比如</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"window\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"disableScroll\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"自定义顶部导航栏\"><a href=\"#自定义顶部导航栏\" class=\"headerlink\" title=\"自定义顶部导航栏\"></a>自定义顶部导航栏</h4><p>官方默认的导航栏只能对背景颜色进行更改，对于想要在导航栏添加一些比较酷炫的效果则需要通过自定义导航栏实现。通过设置 app.json中页面配置的 navigationStyle(导航栏样式)配置项的值为 custom，即可实现自定义导航：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"window\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"navigationStyle\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"custom\"</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>比如我们给小程序的页面配一个好看的壁纸，比如在home.wxss里添加以下样式：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">page</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/background.jpg<span class=\"token punctuation\">)</span></span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><strong>静态的页面片段</strong></p>\n<p>比如使用开发者工具在小程序的pages页面新建一个common文件夹，在common里新建一个foot.wxml,在要引入的页面比如home.wxml的顶部，使用<strong>import</strong>引入这个模板</p>\n<h4 id=\"小程序的客服\"><a href=\"#小程序的客服\" class=\"headerlink\" title=\"小程序的客服\"></a>小程序的客服</h4>","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"渐变与动画\"><a href=\"#渐变与动画\" class=\"headerlink\" title=\"渐变与动画\"></a>渐变与动画</h1><p>​        CSS是编程科技与设计艺术结合得最为完美的一项技术，编程的优雅在于代码的<strong>清晰可读</strong>，而设计的优雅在于能够结合技术为用户带来一场<strong>视觉和交互的盛宴</strong>。借助于CSS，不仅可以做出平面设计师常用的滤镜、渐变等设计效果，还可以设计出一些交互动画，增强用户的体验。</p>\n<h4 id=\"CSS的渐变Gradient\"><a href=\"#CSS的渐变Gradient\" class=\"headerlink\" title=\"CSS的渐变Gradient\"></a>CSS的渐变Gradient</h4><p>颜色渐变是设计师必不可少的，CSS linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* pages/list/gradient/gradient.wxss */</span>\n<span class=\"token selector\">.gradient-display</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* background-image:linear-gradient(red, blue); */</span>\n  <span class=\"token comment\">/* background-image: linear-gradient(45deg, blue, red); */</span>\n<span class=\"token comment\">/* 渐变轴为45度，从蓝色渐变到红色 */</span>\n<span class=\"token comment\">/* background-image:linear-gradient(to left top, blue, red); */</span>\n<span class=\"token comment\">/* 从右下到左上、从蓝色渐变到红色 */</span>\n<span class=\"token comment\">/* background-image:linear-gradient(0deg, blue, green 40%, red); */</span>\n<span class=\"token comment\">/* 从下到上（渐变轴为0度），从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>19deg<span class=\"token punctuation\">,</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>33<span class=\"token punctuation\">,</span> 212<span class=\"token punctuation\">,</span> 253<span class=\"token punctuation\">)</span> 0%<span class=\"token punctuation\">,</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>183<span class=\"token punctuation\">,</span> 33<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">)</span> 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 颜色百分比 */</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Filter滤镜\"><a href=\"#Filter滤镜\" class=\"headerlink\" title=\"Filter滤镜\"></a>Filter滤镜</h4><p>滤镜对于设计师来说一定不会陌生，CSS也有滤镜filter属性，可以对图片进行高斯模糊、调整对比度、转换为灰度图像、色相旋转、图片透明等操作。</p>\n<blockquote>\n<p>相比于Photoshop等工具的滤镜效果来说，使用CSS可以批量化处理图片滤镜效果，而且通过编程的手段不仅可以叠加各种效果，而且还能与交互相结合。</p>\n</blockquote>\n<p>这里我们主要介绍用的最多的三个滤镜效果，高斯模糊blur，图片变灰grayscale(<em>%</em>)，图片透明opacity(<em>%</em>)，其他滤镜效果大家以后可以阅读技术文档。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-display<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>blur高斯模糊<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blur<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>grayscale图片变灰<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grayscale<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>opacity图片透明<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>opacity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>多个滤镜叠加，注意css的写法即可<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multiple<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.filter-display img</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.blur</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>8px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.grayscale</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>90%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.opacity</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span>25%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">.multiple</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>8px<span class=\"token punctuation\">)</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>90%<span class=\"token punctuation\">)</span> <span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span>25%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>图片由灰色变为彩色</strong></p>\n<p>有时我们还会给这些变灰的图片添加一个交互特效，那就是当鼠标悬停在图片上时，图片会由灰色变为彩色。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filter-display<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">></span></span>将鼠标悬停（模拟器）或手指（手机微信）按住或放开图片查看效果<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grayscale<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">hover-class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grayscale-hover<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widthFix<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">filter-display image</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.grayscale</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>90%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.grayscale-hover</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span>grayscal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"变形属性Transform\"><a href=\"#变形属性Transform\" class=\"headerlink\" title=\"变形属性Transform\"></a>变形属性Transform</h4><p>CSS transform属性能通过修改CSS视觉格式化模型的坐标空间旋转、缩放、倾斜或平移给定的组件。</p>\n<h4 id=\"过渡属性Transition\"><a href=\"#过渡属性Transition\" class=\"headerlink\" title=\"过渡属性Transition\"></a>过渡属性Transition</h4><p><strong>CSS transitions</strong> 可以控制组件从一个属性状态切换为另外一个属性状态时的过渡效果。</p>\n<p>transition的语法如下，语法比较复杂</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.selector</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> [transition-property] [transition-duration] [transition-timing-function] [transition-delay]<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>transition-property</strong>，应用过渡的 CSS 或动画属性的名称；</li>\n<li><strong>transition-duration</strong>，整个过渡效果持续的时间，默认时间为0秒，所以要有过渡效果这个是必须定义的；</li>\n<li><strong>transition-timing-function</strong>，规定过渡效果的时间曲线，默认为ease；</li>\n<li><strong>transition-delay</strong>，过渡效果延迟多久，或者说何时开始，默认为0秒，不定义的话也就是直接开始；</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">box</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.bg-color</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.bg-color-hover</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> background-color 5s ease-out 3s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>动画是需要触发的，这里我们使用的是<strong>悬停hover-class</strong>来触发效果，把鼠标放在元素上8秒以上，看一下正方形的背景颜色有什么变化。</p>\n<p>了解了效果之后，我们再来结合实际案例理解语法：</p>\n<ul>\n<li><p>因为我们是用hover来触发的，所以transition要写在元素的hover-class里，盒子之前的背景是绿色green，悬停的背景是黄色yellow；</p>\n</li>\n<li><p>因为我们改变的是盒子background-color，所以transition需要过渡的CSS属性名称，就是background-color；</p>\n</li>\n<li><p>动画过渡持续的时间，我们设置的是5秒，也就是背景由绿色变为黄色的时间；</p>\n</li>\n<li><p>这里的ease-out（慢速结束）是颜色过渡的时间曲线效果。还可以有linear（匀速）、ease-in（慢速开始）、ease-in-out（慢速开始和慢速结束）。持续的时间很短的情况下，这几个时间曲线效果差别是及其细微的，<strong>需要设计师对动画足够敏感了</strong>。</p>\n</li>\n<li><p>动画延迟的时间是3秒，也就是说3秒之后动画才开始。</p>\n</li>\n</ul>\n<h4 id=\"动画属性Animation\"><a href=\"#动画属性Animation\" class=\"headerlink\" title=\"动画属性Animation\"></a>动画属性Animation</h4><p><strong>CSS animations</strong> 使得可以将从一个CSS样式配置转换到另一个CSS样式配置。动画包括两个部分:描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。</p>\n<p><strong>CSS3 动画库 Animate.css</strong></p>\n<p>Animate.css是一个有趣的，跨浏览器的css3动画库，只需要你引入一个CSS文件，就能够给指定的元素添加动画样式。</p>\n<p>它预设了抖动（shake）、闪烁（flash）、弹跳（bounce）、翻转（flip）、旋转（rotateIn/rotateOut）、淡入淡出（fadeIn/fadeOut）等多达 80种动画效果，几乎包含了所有常见的动画效果。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcydh6m2caj31hc0u07cl.jpg\" alt=\"2020-03-18 20-49-15 的屏幕截图.png\"></p>\n<h1 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h1><p>数据绑定就是把WXML 中的一些动态数据分离出来放到对应的js文件的 Page 的 data里。</p>\n<h4 id=\"把数据分离出来\"><a href=\"#把数据分离出来\" class=\"headerlink\" title=\"把数据分离出来\"></a>把数据分离出来</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>&#123;&#123;username&#125;&#125;，您已登录，欢迎<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>在wxml文件里，只需要用双大括号把变量名包起来，就能把data里面的变量给渲染出来。</p>\n</blockquote>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>WXML 中的动态数据均来自对应 Page 的 data。 data 是小程序的页面第一次渲染使用的<strong>初始数据</strong>。小程序的页面加载时， data 将会以 JSON字符串的形式由逻辑层传至渲染层，因此 data中的数据必须是可以转成 JSON的类型：字符串String，数字Number，布尔值Boolean，对象Object，数组Array。</p>\n<ul>\n<li><strong>字符串String</strong>，用于存储和处理文本，可以结合Excel单元格格式里的文本格式来理解；</li>\n<li><strong>数字Number</strong>，这个很好理解，比如233这个数，它的数字格式和文本格式是有很大不同的，学Excel一定不会陌生；</li>\n<li><strong>布尔值Boolean</strong>，就是true和false，虽然只有两个值，但是它代表着两种选择，两种不同的条件，两种不同的结果；</li>\n<li><strong>对象Object</strong>，结合之前所学，我们再来回顾一下：对象由大括号{}分隔，在大括号{}内部，对象的属性以名称和值对的形式 name : value来定义，属性由逗号,分隔</li>\n<li><strong>数组Array</strong>，结合之前所学，我们再来回顾一下：数组由中括号[ ]来分割，有点类似于列表；</li>\n</ul>\n<h4 id=\"组件属性的渲染\"><a href=\"#组件属性的渲染\" class=\"headerlink\" title=\"组件属性的渲染\"></a>组件属性的渲染</h4><p>通过数据绑定，我们还可以把 style、class 、id等属性分离出来来控制组件的样式等信息。</p>\n<h4 id=\"字符串与数字\"><a href=\"#字符串与数字\" class=\"headerlink\" title=\"字符串与数字\"></a>字符串与数字</h4><p>数字格式的数字相加和四则运算的加法是一致的，而字符串与字符串的相加是<strong>拼接</strong>。+ 加号在JavaScript里既可以扮演四则运算符的角色，也可以进行拼接，取决于数据的格式.</p>\n<h4 id=\"渲染数组里的单条数据\"><a href=\"#渲染数组里的单条数据\" class=\"headerlink\" title=\"渲染数组里的单条数据\"></a>渲染数组里的单条数据</h4><p>在前面我们就已经接触过数组，比如<strong>pages配置项</strong>就是小程序里所有页面的一个列表。数组Array是值的<strong>有序</strong>集合，每个值叫做一个元素，而每个元素在数组中有一个位置，以数字表示，称为<strong>索引</strong>。这个索引是从0开始的非负整数，也就是0，1，2，3，4，5…..</p>\n<h4 id=\"渲染对象类型的数据\"><a href=\"#渲染对象类型的数据\" class=\"headerlink\" title=\"渲染对象类型的数据\"></a>渲染对象类型的数据</h4><p>对象（object）是 JavaScript 语言的核心概念，也是<strong>最重要的数据类型</strong>。对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的<strong>属性</strong>和<strong>方法</strong>）。</p>\n<p>有的时候一个对象有多个属性，就拿电影来说，就有电影名称，国家，发行时间、票价、评价等等无数个属性,在双大括号里，输入变量movie+点+属性名即可，这就是<strong>对象的点表示法</strong>。</p>\n<h4 id=\"复杂的数据嵌套\"><a href=\"#复杂的数据嵌套\" class=\"headerlink\" title=\"复杂的数据嵌套\"></a>复杂的数据嵌套</h4><p>对象是可以嵌套的，也就是一个对象可以作为另外一个对象的值，除了对象里套对象，数组里也可以套对象，对象里也可以套数组。把现实生活中的事物转化成错综复杂的数据，是非常重要的数据思维。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcyflj04ktj31hc0u0qgi.jpg\" alt=\"2020-03-18 22-04-38 的屏幕截图.png\"></p>\n<h1 id=\"列表渲染与条件渲染\"><a href=\"#列表渲染与条件渲染\" class=\"headerlink\" title=\"列表渲染与条件渲染\"></a>列表渲染与条件渲染</h1><p>如果是要输出整个列表,这个时候就需要用到列表渲染啦。</p>\n<h4 id=\"渲染数组里的所有数据\"><a href=\"#渲染数组里的所有数据\" class=\"headerlink\" title=\"渲染数组里的所有数据\"></a>渲染数组里的所有数据</h4><p><strong>相同的结构是列表渲染的前提</strong></p>\n<p>在实际的开发场景里，商品、新闻、股票、收藏、书架列表等都会有几千上万条的数据，他们都有一个共同的特征就是数据的结构相同，这也是我们可以批量化渲染的前提。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123;newstitle&#125;&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*this<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  &#123;&#123;item&#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里wx:for=””，也就是在数组newstitle里进行循环，*this代表在 for 循环中的 item 本身，而的item是默认的。也可以使用如下方法：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>for-items</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123;newstitle&#125;&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>for-item</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">wx:</span>key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*this<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  &#123;&#123;title&#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item；<br>使用 wx:for-item 可以指定数组当前元素的变量名，使用 wx:for-index 可以指定数组当前下标的变量名。</p>\n</blockquote>\n<p><strong>图片样式</strong></p>\n<p>我们发现电影列表里面的图片是变形的，技术文档：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/image.html\">image组件文档</a></p>\n<p>在技术文档里，我们发现如果我们不写图片的模式mode，图片的模式默认为scaleToFill，也就是不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素。</p>\n<p>那我们希望图片保持宽度不变，高度自动变化，保持原图宽高比不变，那就需要用到widthFix的模式</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;image class=\"weui-media-box__thumb\" mode=\"widthFix\" src=\"&#123;&#123;movies.img&#125;&#125;\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"Grid九宫格样式参考\"><a href=\"#Grid九宫格样式参考\" class=\"headerlink\" title=\"Grid九宫格样式参考\"></a>Grid九宫格样式参考</h4><p>大家经常会在App里看到一些分类都是以九宫格的方式来布局的.</p>\n<h4 id=\"List样式参考\"><a href=\"#List样式参考\" class=\"headerlink\" title=\"List样式参考\"></a>List样式参考</h4><p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcyfmg8g9ej31hc0u0k1f.jpg\" alt=\"2020-03-18 22-04-58 的屏幕截图.png\"></p>\n<h1 id=\"小程序组件\"><a href=\"#小程序组件\" class=\"headerlink\" title=\"小程序组件\"></a>小程序组件</h1><h4 id=\"组件的属性\"><a href=\"#组件的属性\" class=\"headerlink\" title=\"组件的属性\"></a>组件的属性</h4><p>公共属性是指小程序所有的组件都有的属性，比如id、class、style等，而不同属性的值就是数据，有数据就有数据类型。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/component.html\">小程序组件</a></p>\n<blockquote>\n<p>主要了解<text>组件、<image>组件、<view>组件、<navigator>组件有哪些私有属性</p>\n</blockquote>\n<h4 id=\"轮播效果\"><a href=\"#轮播效果\" class=\"headerlink\" title=\"轮播效果\"></a>轮播效果</h4><p>很多App和小程序的页面顶部都有一个图片的轮播，小程序有专门的轮播组件swiper。</p>\n<p>要构成一个完整的轮播，除了配置<strong>相同尺寸规格的图片</strong>以外，还可以配置轮播时的面板指示点、动画效果、是否自动播放等。</p>\n<h4 id=\"audio组件\"><a href=\"#audio组件\" class=\"headerlink\" title=\"audio组件\"></a>audio组件</h4><p>audio组件是音频组件</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/audio.html\">audio组件技术文档</a></p>\n<ul>\n<li>src：要播放音频的资源地址</li>\n<li>poster：默认控件上的音频封面的图片资源地址</li>\n<li>name：默认控件上的音频名字</li>\n<li>author：默认控件上的作者名字</li>\n</ul>\n<p>可能由于audio组件使用的场景和频次都非常低，audio组件以后就要被抛弃了，需要用到小程序的API来创建音乐播放。</p>\n<h4 id=\"video组件\"><a href=\"#video组件\" class=\"headerlink\" title=\"video组件\"></a>video组件</h4><p>video组件用来表示视频</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/video.html\">video组件技术文档</a></p>\n<p>大家可以结合实际效果和技术文档来理解以下属性，把上面案例的autoplay或者某个属性删掉查看一下具体效果，加深自己对组件属性的理解。</p>\n<ul>\n<li>autoplay：是否自动播放</li>\n<li>loop：是否循环播放</li>\n<li>muted：是否静音播放</li>\n<li>inital-time：指定视频初始播放位置，单位是秒</li>\n<li>controls：是否显示默认播放控件</li>\n</ul>\n<h4 id=\"cover效果\"><a href=\"#cover效果\" class=\"headerlink\" title=\"cover效果\"></a>cover效果</h4><p>我们也可以把view、图片组件覆盖在地图map或视频video组件之上。比如我们希望在视频的左上角显示视频的标题以及在右上角显示商家的logo，就可以使用cover效果。</p>\n<h4 id=\"地图组件\"><a href=\"#地图组件\" class=\"headerlink\" title=\"地图组件\"></a>地图组件</h4><p>要想在地图上标记一个地点，首先我们需要知道该地点的经纬度，这个时候就需要使用到坐标拾取器的工具。</p>\n<p><strong>经纬度获取：</strong><a href=\"https://lbs.qq.com/tool/getpoint/index.html\">腾讯地图坐标拾取器</a></p>\n<p>在搜索框里我们可以搜索“深圳腾讯大厦”，得到纬度为22.540503，经度为113.934528。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gcyh4td1qlj31hc0u0wrz.jpg\" alt=\"2020-03-18 22-19-58 的屏幕截图.png\"></p>\n<h1 id=\"优化与部署上线\"><a href=\"#优化与部署上线\" class=\"headerlink\" title=\"优化与部署上线\"></a>优化与部署上线</h1><h4 id=\"开发者工具的使用\"><a href=\"#开发者工具的使用\" class=\"headerlink\" title=\"开发者工具的使用\"></a>开发者工具的使用</h4><p><strong>缩进与缩进设置</strong></p>\n<p><strong>快捷键</strong></p>\n<ul>\n<li>批量注释快捷键：windows 是Ctrl+/</li>\n<li>代码块的缩进：windows是代码左缩进ctrl + [、代码右缩进ctrl + ]</li>\n<li>格式化代码：Windows为shift + alt + F</li>\n</ul>\n<p><strong>报错提醒</strong></p>\n<p><strong>wxml代码查看</strong></p>\n<p><strong>自动补全与代码提示</strong></p>\n<h4 id=\"小程序的转发功能\"><a href=\"#小程序的转发功能\" class=\"headerlink\" title=\"小程序的转发功能\"></a>小程序的转发功能</h4><p>我们只需要在小程序每个页面的js文件下的Page(） 里面，添加以下代码，我们的小程序就有转发功能了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">onShareAppMessage</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>from <span class=\"token operator\">===</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 来自页面内转发按钮</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n          title<span class=\"token operator\">:</span> <span class=\"token string\">'云开发技术训练营'</span><span class=\"token punctuation\">,</span>\n          path<span class=\"token operator\">:</span> \"pages<span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>home<span class=\"token punctuation\">,</span>\n          imageUrl<span class=\"token operator\">:</span><span class=\"token string\">\"https://hackwork.oss-cn-shanghai.aliyuncs.com/lesson/weapp/4/weapp.jpg\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token comment\">// 转发成功</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function-variable function\">fail</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token comment\">// 转发失败</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>title为转发的标题，如果不填，默认为当前小程序的名称；</li>\n<li>path为当前页面路径，也可以为其他页面的路径，如果路径写错的话会显示“当前页面不存在”哦。</li>\n<li>imageUrl为自定义图片路径，可以是本地文件路径或网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4。如果不填写会取当前页面，从顶部开始，高度为 80% 屏幕宽度的图像作为转发图片</li>\n</ul>\n<h4 id=\"小程序配置的细节\"><a href=\"#小程序配置的细节\" class=\"headerlink\" title=\"小程序配置的细节\"></a>小程序配置的细节</h4><p><strong>没有tabBar的小程序</strong></p>\n<p>有时候我们不希望我们的小程序底部有tabBar，那我们该怎么处理呢？我们可以删掉app.json的tabBar配置项即可。</p>\n<p><strong>下拉小程序不出现空白</strong></p>\n<p>当我们下拉很多小程序的时候，都会出现一个白色的空白，很影响美观，但是如果我们在windows的配置项里把<strong>backgroundColor</strong>和<strong>navigationBarBackgroundColor</strong>的颜色配置成一样，下拉就不会有空白啦，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"window\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"backgroundTextStyle\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"light\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"navigationBarBackgroundColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#1772cb\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"navigationBarTitleText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HackWork技术工坊\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"navigationBarTextStyle\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"backgroundColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#1772cb\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>让整个页面背景变色</strong></p>\n<p>小程序的页面背景的颜色默认为为白色，我们希望整个小程序的页面背景变成其他颜色应该怎么处理呢？</p>\n<p>我们可以可以通过直接设置page的样式来设置，在该页面的wxss文件里添加如下样式，如</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">page</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #1772cb<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>禁止页面下拉</strong></p>\n<p>有的时候我们的页面做得比较短，为了增强用户体验，不希望用户可以下拉页面，因为下拉页面会有种页面松动的感觉，可以在该页面的json文件里配置，比如</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"window\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"disableScroll\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"自定义顶部导航栏\"><a href=\"#自定义顶部导航栏\" class=\"headerlink\" title=\"自定义顶部导航栏\"></a>自定义顶部导航栏</h4><p>官方默认的导航栏只能对背景颜色进行更改，对于想要在导航栏添加一些比较酷炫的效果则需要通过自定义导航栏实现。通过设置 app.json中页面配置的 navigationStyle(导航栏样式)配置项的值为 custom，即可实现自定义导航：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"window\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"navigationStyle\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"custom\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>比如我们给小程序的页面配一个好看的壁纸，比如在home.wxss里添加以下样式：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">page</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/background.jpg<span class=\"token punctuation\">)</span></span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><strong>静态的页面片段</strong></p>\n<p>比如使用开发者工具在小程序的pages页面新建一个common文件夹，在common里新建一个foot.wxml,在要引入的页面比如home.wxml的顶部，使用<strong>import</strong>引入这个模板</p>\n<h4 id=\"小程序的客服\"><a href=\"#小程序的客服\" class=\"headerlink\" title=\"小程序的客服\"></a>小程序的客服</h4>"},{"title":"腾讯犀牛鸟云开发校园技术布道师养成计划第五天","top":false,"date":"2020-03-21T07:51:10.000Z","_content":"\n# 网络API\n\n数据和文件是小程序开发非常重要的元素，在前面的章节里，数据和文件等的存储都是在小程序的页面进行渲染、或是页面间传递或与本地手机交互。\n\n#### 数据API\n\n小程序以及很多程序的API是**预先就已经写好的函数**，使我们不需要对底层有太多了解，只需要按照技术文档进行传递参数就能调用出非常复杂的功能。而还有一类API则侧重于把**数据资源**给开放出来，我们可以通过**HTTP的方式**来使用这些数据。\n\n**了解网络数据API**\n\n```html\n//知乎日报的最新话题\nhttps://news-at.zhihu.com/api/4/news/latest\n \n//知乎日报某一个话题的内容\nhttps://news-at.zhihu.com/api/4/news/9714883\n \n//v2ex论坛的最新主题\nhttps://www.v2ex.com/api/topics/latest.json\n \n//CNode论坛的最新话题\nhttps://cnodejs.org/api/v1/topics\n```\n\n**练手API资源推荐**\n\n- [聚合API](https://www.juhe.cn/)：一个比较全面的综合性API服务平台\n- [即速API](https://www.jisuapi.com/)：也是提供一些综合性的API服务\n- [V2EX API](https://www.v2ex.com/p/7v9TEc53)：v2ex论坛是很多程序员经常会光顾的综合性技术论坛\n- [CNode API](https://cnodejs.org/api/)：Nodejs交流论坛\n- [和风天气](https://www.heweather.com/)：含天气预报、空气质量、实况天气等数据\n- [Github API](https://developer.github.com/v3/)：Github是所有程序员都（必须）会使用的网站\n- [知乎日报API](https://github.com/izzyleung/ZhihuDailyPurify/wiki/知乎日报-API-分析)：知乎日报API分析\n\n#### 渲染网络数据到页面\n\n要渲染从API里获取到的数据，首先我们需要对API里的字段（属性）到底是干什么的要有一定的了解。\n\n**获取网络数据**\n\n**域名校验与白名单**\n\n**res对象和res.data对象**\n\n**技术文档：**[wx.request网络数据请求](https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html)\n\n- **statusCode：**开发者服务器返回的 **HTTP 状态码**，也就是指示HTTP请求是否成功，其中**200为请求成功**，**404请求失败**，更多状态码的知识可以查阅[MDN HTTP响应代码](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status)\n- **header：**开发者服务器返回的 HTTP消息头，其中Content-Type为服务器文档的**MIME 类型**，API的MIME类型通常为 \"application/json; charset=UTF-8\"，建议服务器返回值使用 **UTF-8** 编码（如果你有服务器的话）。\n- wx.request只能发起 HTTPS 请求，默认超时时间为60s，最大并发限制为10个\n\n#### 将数据渲染到页面\n\n**简单的知乎日报首页**\n\n> 打开开发者工具调试工具栏的AppData标签页，就能看到从网络API里获取到的数据。也可以在此处编辑数据，并及时地反馈到界面上。如果AppData里有数据，可以确认页面已经取得res里的data数据，如果数据没有渲染到页面，说明列表渲染可能有误。通过这种方式可以诊断页面渲染问题所在。\n\n**详情页数据渲染**\n\n**HTML标签解析rich-text**\n\n只需要将富文本对象放在rich-text的nodes里，就能将富文本解析出来了，比如将上面的{{body}}替换成以下代码。\n\n```html\n<rich-text nodes=\"{{body}}\"></rich-text>\n```\n\n**跨页面数据渲染**\n\n**解构赋值**\n\n解构赋值也就是从数组Array和对象Object中提取值，按照对照的位置，对变量进行赋值,简写\n\n```javascript\n\tlet { title, body, image, share_url}=res.data\n```\n\n#### 历史上的今天\n\n**注册历史上的今天的服务**\n\n注册[聚合API](https://www.juhe.cn/)并认证，认证之后可以申请开通**历史上的今天**、图书电商数据等免费的API服务，并找到你的与之**对应的AppKey**。\n\n替换下面链接**你的历史上的今天对应的key**（直接输AppKey就行），然后在浏览器打开链接（下面这个是1.0版）\n\n```url\nhttp://api.juheapi.com/japi/toh?month=9&day=15&key=d68ed793a10607f864d31744f986e8d6\n```\n\n> 将一些通用的数据、函数单独拿出来存放在globalData里或进行模块化，是在实际开发中会经常使用到的一种方法，它可以让数据、函数更容易管理以及可以重复利用，使得代码更加精简。\n\n**wx.request请求数据**\n\nwx.request里的data就是要传入的参数，我们把month、day、key传入到请求的链接里。它等价于以下链接（注意把data里的属性值，以免传两次参数）\n\n![2020-03-21 21-04-34 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gd1wpezewtj31hc0u0wph.jpg)\n\n#### 天气API\n\n**技术文档：**[和风常规天气数据API](https://dev.heweather.com/docs/api/weather)\n\n#### encodeURI与decodeURI\n\n在浏览网页的时候我们经常看到汉字或一些字符变成了一个“乱码”，原因就在于链接进行了编码处理。encodeURI() 函数可把字符串作为 URI 进行编码，而decodeURI()函数则可以进行解码。\n\n#### 腾讯地图LBS\n\n如果想在小程序中调用地图的POI检索（POI，即兴趣点Point of Interest，区域内搜索酒店、学校、ATM等）、 关键词输入提示、地址解析、逆地址解析、行政区划、距离计算、路径规划等数据服务，这时候就需要使用到地图类相关的API。\n\n**地图API：**[腾讯LBS位置服务](https://lbs.qq.com/index.html)\n\n**md5加密算法**\n\n在[WebServiceAPI Key配置中签名校验](https://lbs.qq.com/FAQ/key_faq.html#4)里提到我们使用WebServiceAPI的方法需要对请求路径+”?”+请求参数+SK进行拼接，并计算拼接后字符串**md5值**，即为签名(sig)。MD5是计算机安全领域广泛使用到的一种加密算法，主要用于确保消息传输的完整一致。\n\n**md5依赖：**[md5开源项目下载链接](https://github.com/blueimp/JavaScript-MD5/archive/master.zip)\n\n**坐标逆解析**\n\n坐标的逆解析就是坐标(latitude,longitude)转化为详细的地址名。\n\n小程序使用腾讯地图位置服务，还有一种更加简单的方法，具体可以阅读《[微信小程序：个性地图使用指南](https://lbs.qq.com/product/miniapp/guide/)》","source":"_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第五天.md","raw":"---\ntitle: 腾讯犀牛鸟云开发校园技术布道师养成计划第五天\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-03-21 15:51:10\n---\n\n# 网络API\n\n数据和文件是小程序开发非常重要的元素，在前面的章节里，数据和文件等的存储都是在小程序的页面进行渲染、或是页面间传递或与本地手机交互。\n\n#### 数据API\n\n小程序以及很多程序的API是**预先就已经写好的函数**，使我们不需要对底层有太多了解，只需要按照技术文档进行传递参数就能调用出非常复杂的功能。而还有一类API则侧重于把**数据资源**给开放出来，我们可以通过**HTTP的方式**来使用这些数据。\n\n**了解网络数据API**\n\n```html\n//知乎日报的最新话题\nhttps://news-at.zhihu.com/api/4/news/latest\n \n//知乎日报某一个话题的内容\nhttps://news-at.zhihu.com/api/4/news/9714883\n \n//v2ex论坛的最新主题\nhttps://www.v2ex.com/api/topics/latest.json\n \n//CNode论坛的最新话题\nhttps://cnodejs.org/api/v1/topics\n```\n\n**练手API资源推荐**\n\n- [聚合API](https://www.juhe.cn/)：一个比较全面的综合性API服务平台\n- [即速API](https://www.jisuapi.com/)：也是提供一些综合性的API服务\n- [V2EX API](https://www.v2ex.com/p/7v9TEc53)：v2ex论坛是很多程序员经常会光顾的综合性技术论坛\n- [CNode API](https://cnodejs.org/api/)：Nodejs交流论坛\n- [和风天气](https://www.heweather.com/)：含天气预报、空气质量、实况天气等数据\n- [Github API](https://developer.github.com/v3/)：Github是所有程序员都（必须）会使用的网站\n- [知乎日报API](https://github.com/izzyleung/ZhihuDailyPurify/wiki/知乎日报-API-分析)：知乎日报API分析\n\n#### 渲染网络数据到页面\n\n要渲染从API里获取到的数据，首先我们需要对API里的字段（属性）到底是干什么的要有一定的了解。\n\n**获取网络数据**\n\n**域名校验与白名单**\n\n**res对象和res.data对象**\n\n**技术文档：**[wx.request网络数据请求](https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html)\n\n- **statusCode：**开发者服务器返回的 **HTTP 状态码**，也就是指示HTTP请求是否成功，其中**200为请求成功**，**404请求失败**，更多状态码的知识可以查阅[MDN HTTP响应代码](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status)\n- **header：**开发者服务器返回的 HTTP消息头，其中Content-Type为服务器文档的**MIME 类型**，API的MIME类型通常为 \"application/json; charset=UTF-8\"，建议服务器返回值使用 **UTF-8** 编码（如果你有服务器的话）。\n- wx.request只能发起 HTTPS 请求，默认超时时间为60s，最大并发限制为10个\n\n#### 将数据渲染到页面\n\n**简单的知乎日报首页**\n\n> 打开开发者工具调试工具栏的AppData标签页，就能看到从网络API里获取到的数据。也可以在此处编辑数据，并及时地反馈到界面上。如果AppData里有数据，可以确认页面已经取得res里的data数据，如果数据没有渲染到页面，说明列表渲染可能有误。通过这种方式可以诊断页面渲染问题所在。\n\n**详情页数据渲染**\n\n**HTML标签解析rich-text**\n\n只需要将富文本对象放在rich-text的nodes里，就能将富文本解析出来了，比如将上面的{{body}}替换成以下代码。\n\n```html\n<rich-text nodes=\"{{body}}\"></rich-text>\n```\n\n**跨页面数据渲染**\n\n**解构赋值**\n\n解构赋值也就是从数组Array和对象Object中提取值，按照对照的位置，对变量进行赋值,简写\n\n```javascript\n\tlet { title, body, image, share_url}=res.data\n```\n\n#### 历史上的今天\n\n**注册历史上的今天的服务**\n\n注册[聚合API](https://www.juhe.cn/)并认证，认证之后可以申请开通**历史上的今天**、图书电商数据等免费的API服务，并找到你的与之**对应的AppKey**。\n\n替换下面链接**你的历史上的今天对应的key**（直接输AppKey就行），然后在浏览器打开链接（下面这个是1.0版）\n\n```url\nhttp://api.juheapi.com/japi/toh?month=9&day=15&key=d68ed793a10607f864d31744f986e8d6\n```\n\n> 将一些通用的数据、函数单独拿出来存放在globalData里或进行模块化，是在实际开发中会经常使用到的一种方法，它可以让数据、函数更容易管理以及可以重复利用，使得代码更加精简。\n\n**wx.request请求数据**\n\nwx.request里的data就是要传入的参数，我们把month、day、key传入到请求的链接里。它等价于以下链接（注意把data里的属性值，以免传两次参数）\n\n![2020-03-21 21-04-34 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gd1wpezewtj31hc0u0wph.jpg)\n\n#### 天气API\n\n**技术文档：**[和风常规天气数据API](https://dev.heweather.com/docs/api/weather)\n\n#### encodeURI与decodeURI\n\n在浏览网页的时候我们经常看到汉字或一些字符变成了一个“乱码”，原因就在于链接进行了编码处理。encodeURI() 函数可把字符串作为 URI 进行编码，而decodeURI()函数则可以进行解码。\n\n#### 腾讯地图LBS\n\n如果想在小程序中调用地图的POI检索（POI，即兴趣点Point of Interest，区域内搜索酒店、学校、ATM等）、 关键词输入提示、地址解析、逆地址解析、行政区划、距离计算、路径规划等数据服务，这时候就需要使用到地图类相关的API。\n\n**地图API：**[腾讯LBS位置服务](https://lbs.qq.com/index.html)\n\n**md5加密算法**\n\n在[WebServiceAPI Key配置中签名校验](https://lbs.qq.com/FAQ/key_faq.html#4)里提到我们使用WebServiceAPI的方法需要对请求路径+”?”+请求参数+SK进行拼接，并计算拼接后字符串**md5值**，即为签名(sig)。MD5是计算机安全领域广泛使用到的一种加密算法，主要用于确保消息传输的完整一致。\n\n**md5依赖：**[md5开源项目下载链接](https://github.com/blueimp/JavaScript-MD5/archive/master.zip)\n\n**坐标逆解析**\n\n坐标的逆解析就是坐标(latitude,longitude)转化为详细的地址名。\n\n小程序使用腾讯地图位置服务，还有一种更加简单的方法，具体可以阅读《[微信小程序：个性地图使用指南](https://lbs.qq.com/product/miniapp/guide/)》","slug":"腾讯犀牛鸟云开发校园技术布道师养成计划第五天","published":1,"updated":"2022-08-25T14:12:05.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39d005312mjcekqbkrq","content":"<h1 id=\"网络API\"><a href=\"#网络API\" class=\"headerlink\" title=\"网络API\"></a>网络API</h1><p>数据和文件是小程序开发非常重要的元素，在前面的章节里，数据和文件等的存储都是在小程序的页面进行渲染、或是页面间传递或与本地手机交互。</p>\n<h4 id=\"数据API\"><a href=\"#数据API\" class=\"headerlink\" title=\"数据API\"></a>数据API</h4><p>小程序以及很多程序的API是<strong>预先就已经写好的函数</strong>，使我们不需要对底层有太多了解，只需要按照技术文档进行传递参数就能调用出非常复杂的功能。而还有一类API则侧重于把<strong>数据资源</strong>给开放出来，我们可以通过<strong>HTTP的方式</strong>来使用这些数据。</p>\n<p><strong>了解网络数据API</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">//知乎日报的最新话题\nhttps://news-at.zhihu.com/api/4/news/latest\n \n//知乎日报某一个话题的内容\nhttps://news-at.zhihu.com/api/4/news/9714883\n \n//v2ex论坛的最新主题\nhttps://www.v2ex.com/api/topics/latest.json\n \n//CNode论坛的最新话题\nhttps://cnodejs.org/api/v1/topics<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>练手API资源推荐</strong></p>\n<ul>\n<li><a href=\"https://www.juhe.cn/\">聚合API</a>：一个比较全面的综合性API服务平台</li>\n<li><a href=\"https://www.jisuapi.com/\">即速API</a>：也是提供一些综合性的API服务</li>\n<li><a href=\"https://www.v2ex.com/p/7v9TEc53\">V2EX API</a>：v2ex论坛是很多程序员经常会光顾的综合性技术论坛</li>\n<li><a href=\"https://cnodejs.org/api/\">CNode API</a>：Nodejs交流论坛</li>\n<li><a href=\"https://www.heweather.com/\">和风天气</a>：含天气预报、空气质量、实况天气等数据</li>\n<li><a href=\"https://developer.github.com/v3/\">Github API</a>：Github是所有程序员都（必须）会使用的网站</li>\n<li><a href=\"https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90\">知乎日报API</a>：知乎日报API分析</li>\n</ul>\n<h4 id=\"渲染网络数据到页面\"><a href=\"#渲染网络数据到页面\" class=\"headerlink\" title=\"渲染网络数据到页面\"></a>渲染网络数据到页面</h4><p>要渲染从API里获取到的数据，首先我们需要对API里的字段（属性）到底是干什么的要有一定的了解。</p>\n<p><strong>获取网络数据</strong></p>\n<p><strong>域名校验与白名单</strong></p>\n<p><strong>res对象和res.data对象</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html\">wx.request网络数据请求</a></p>\n<ul>\n<li><strong>statusCode：</strong>开发者服务器返回的 <strong>HTTP 状态码</strong>，也就是指示HTTP请求是否成功，其中<strong>200为请求成功</strong>，<strong>404请求失败</strong>，更多状态码的知识可以查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\">MDN HTTP响应代码</a></li>\n<li><strong>header：</strong>开发者服务器返回的 HTTP消息头，其中Content-Type为服务器文档的<strong>MIME 类型</strong>，API的MIME类型通常为 “application/json; charset=UTF-8”，建议服务器返回值使用 <strong>UTF-8</strong> 编码（如果你有服务器的话）。</li>\n<li>wx.request只能发起 HTTPS 请求，默认超时时间为60s，最大并发限制为10个</li>\n</ul>\n<h4 id=\"将数据渲染到页面\"><a href=\"#将数据渲染到页面\" class=\"headerlink\" title=\"将数据渲染到页面\"></a>将数据渲染到页面</h4><p><strong>简单的知乎日报首页</strong></p>\n<blockquote>\n<p>打开开发者工具调试工具栏的AppData标签页，就能看到从网络API里获取到的数据。也可以在此处编辑数据，并及时地反馈到界面上。如果AppData里有数据，可以确认页面已经取得res里的data数据，如果数据没有渲染到页面，说明列表渲染可能有误。通过这种方式可以诊断页面渲染问题所在。</p>\n</blockquote>\n<p><strong>详情页数据渲染</strong></p>\n<p><strong>HTML标签解析rich-text</strong></p>\n<p>只需要将富文本对象放在rich-text的nodes里，就能将富文本解析出来了，比如将上面的替换成以下代码。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rich-text</span> <span class=\"token attr-name\">nodes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{body}}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rich-text</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>跨页面数据渲染</strong></p>\n<p><strong>解构赋值</strong></p>\n<p>解构赋值也就是从数组Array和对象Object中提取值，按照对照的位置，对变量进行赋值,简写</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> share_url<span class=\"token punctuation\">}</span><span class=\"token operator\">=</span>res<span class=\"token punctuation\">.</span>data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"历史上的今天\"><a href=\"#历史上的今天\" class=\"headerlink\" title=\"历史上的今天\"></a>历史上的今天</h4><p><strong>注册历史上的今天的服务</strong></p>\n<p>注册<a href=\"https://www.juhe.cn/\">聚合API</a>并认证，认证之后可以申请开通<strong>历史上的今天</strong>、图书电商数据等免费的API服务，并找到你的与之<strong>对应的AppKey</strong>。</p>\n<p>替换下面链接<strong>你的历史上的今天对应的key</strong>（直接输AppKey就行），然后在浏览器打开链接（下面这个是1.0版）</p>\n<pre class=\"line-numbers language-url\" data-language=\"url\"><code class=\"language-url\">http://api.juheapi.com/japi/toh?month=9&amp;day=15&amp;key=d68ed793a10607f864d31744f986e8d6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>将一些通用的数据、函数单独拿出来存放在globalData里或进行模块化，是在实际开发中会经常使用到的一种方法，它可以让数据、函数更容易管理以及可以重复利用，使得代码更加精简。</p>\n</blockquote>\n<p><strong>wx.request请求数据</strong></p>\n<p>wx.request里的data就是要传入的参数，我们把month、day、key传入到请求的链接里。它等价于以下链接（注意把data里的属性值，以免传两次参数）</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gd1wpezewtj31hc0u0wph.jpg\" alt=\"2020-03-21 21-04-34 的屏幕截图.png\"></p>\n<h4 id=\"天气API\"><a href=\"#天气API\" class=\"headerlink\" title=\"天气API\"></a>天气API</h4><p><strong>技术文档：</strong><a href=\"https://dev.heweather.com/docs/api/weather\">和风常规天气数据API</a></p>\n<h4 id=\"encodeURI与decodeURI\"><a href=\"#encodeURI与decodeURI\" class=\"headerlink\" title=\"encodeURI与decodeURI\"></a>encodeURI与decodeURI</h4><p>在浏览网页的时候我们经常看到汉字或一些字符变成了一个“乱码”，原因就在于链接进行了编码处理。encodeURI() 函数可把字符串作为 URI 进行编码，而decodeURI()函数则可以进行解码。</p>\n<h4 id=\"腾讯地图LBS\"><a href=\"#腾讯地图LBS\" class=\"headerlink\" title=\"腾讯地图LBS\"></a>腾讯地图LBS</h4><p>如果想在小程序中调用地图的POI检索（POI，即兴趣点Point of Interest，区域内搜索酒店、学校、ATM等）、 关键词输入提示、地址解析、逆地址解析、行政区划、距离计算、路径规划等数据服务，这时候就需要使用到地图类相关的API。</p>\n<p><strong>地图API：</strong><a href=\"https://lbs.qq.com/index.html\">腾讯LBS位置服务</a></p>\n<p><strong>md5加密算法</strong></p>\n<p>在<a href=\"https://lbs.qq.com/FAQ/key_faq.html#4\">WebServiceAPI Key配置中签名校验</a>里提到我们使用WebServiceAPI的方法需要对请求路径+”?”+请求参数+SK进行拼接，并计算拼接后字符串<strong>md5值</strong>，即为签名(sig)。MD5是计算机安全领域广泛使用到的一种加密算法，主要用于确保消息传输的完整一致。</p>\n<p><strong>md5依赖：</strong><a href=\"https://github.com/blueimp/JavaScript-MD5/archive/master.zip\">md5开源项目下载链接</a></p>\n<p><strong>坐标逆解析</strong></p>\n<p>坐标的逆解析就是坐标(latitude,longitude)转化为详细的地址名。</p>\n<p>小程序使用腾讯地图位置服务，还有一种更加简单的方法，具体可以阅读《<a href=\"https://lbs.qq.com/product/miniapp/guide/\">微信小程序：个性地图使用指南</a>》</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"网络API\"><a href=\"#网络API\" class=\"headerlink\" title=\"网络API\"></a>网络API</h1><p>数据和文件是小程序开发非常重要的元素，在前面的章节里，数据和文件等的存储都是在小程序的页面进行渲染、或是页面间传递或与本地手机交互。</p>\n<h4 id=\"数据API\"><a href=\"#数据API\" class=\"headerlink\" title=\"数据API\"></a>数据API</h4><p>小程序以及很多程序的API是<strong>预先就已经写好的函数</strong>，使我们不需要对底层有太多了解，只需要按照技术文档进行传递参数就能调用出非常复杂的功能。而还有一类API则侧重于把<strong>数据资源</strong>给开放出来，我们可以通过<strong>HTTP的方式</strong>来使用这些数据。</p>\n<p><strong>了解网络数据API</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">//知乎日报的最新话题\nhttps://news-at.zhihu.com/api/4/news/latest\n \n//知乎日报某一个话题的内容\nhttps://news-at.zhihu.com/api/4/news/9714883\n \n//v2ex论坛的最新主题\nhttps://www.v2ex.com/api/topics/latest.json\n \n//CNode论坛的最新话题\nhttps://cnodejs.org/api/v1/topics<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>练手API资源推荐</strong></p>\n<ul>\n<li><a href=\"https://www.juhe.cn/\">聚合API</a>：一个比较全面的综合性API服务平台</li>\n<li><a href=\"https://www.jisuapi.com/\">即速API</a>：也是提供一些综合性的API服务</li>\n<li><a href=\"https://www.v2ex.com/p/7v9TEc53\">V2EX API</a>：v2ex论坛是很多程序员经常会光顾的综合性技术论坛</li>\n<li><a href=\"https://cnodejs.org/api/\">CNode API</a>：Nodejs交流论坛</li>\n<li><a href=\"https://www.heweather.com/\">和风天气</a>：含天气预报、空气质量、实况天气等数据</li>\n<li><a href=\"https://developer.github.com/v3/\">Github API</a>：Github是所有程序员都（必须）会使用的网站</li>\n<li><a href=\"https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90\">知乎日报API</a>：知乎日报API分析</li>\n</ul>\n<h4 id=\"渲染网络数据到页面\"><a href=\"#渲染网络数据到页面\" class=\"headerlink\" title=\"渲染网络数据到页面\"></a>渲染网络数据到页面</h4><p>要渲染从API里获取到的数据，首先我们需要对API里的字段（属性）到底是干什么的要有一定的了解。</p>\n<p><strong>获取网络数据</strong></p>\n<p><strong>域名校验与白名单</strong></p>\n<p><strong>res对象和res.data对象</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html\">wx.request网络数据请求</a></p>\n<ul>\n<li><strong>statusCode：</strong>开发者服务器返回的 <strong>HTTP 状态码</strong>，也就是指示HTTP请求是否成功，其中<strong>200为请求成功</strong>，<strong>404请求失败</strong>，更多状态码的知识可以查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\">MDN HTTP响应代码</a></li>\n<li><strong>header：</strong>开发者服务器返回的 HTTP消息头，其中Content-Type为服务器文档的<strong>MIME 类型</strong>，API的MIME类型通常为 “application/json; charset=UTF-8”，建议服务器返回值使用 <strong>UTF-8</strong> 编码（如果你有服务器的话）。</li>\n<li>wx.request只能发起 HTTPS 请求，默认超时时间为60s，最大并发限制为10个</li>\n</ul>\n<h4 id=\"将数据渲染到页面\"><a href=\"#将数据渲染到页面\" class=\"headerlink\" title=\"将数据渲染到页面\"></a>将数据渲染到页面</h4><p><strong>简单的知乎日报首页</strong></p>\n<blockquote>\n<p>打开开发者工具调试工具栏的AppData标签页，就能看到从网络API里获取到的数据。也可以在此处编辑数据，并及时地反馈到界面上。如果AppData里有数据，可以确认页面已经取得res里的data数据，如果数据没有渲染到页面，说明列表渲染可能有误。通过这种方式可以诊断页面渲染问题所在。</p>\n</blockquote>\n<p><strong>详情页数据渲染</strong></p>\n<p><strong>HTML标签解析rich-text</strong></p>\n<p>只需要将富文本对象放在rich-text的nodes里，就能将富文本解析出来了，比如将上面的替换成以下代码。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rich-text</span> <span class=\"token attr-name\">nodes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123;body&#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rich-text</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>跨页面数据渲染</strong></p>\n<p><strong>解构赋值</strong></p>\n<p>解构赋值也就是从数组Array和对象Object中提取值，按照对照的位置，对变量进行赋值,简写</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> share_url<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span>res<span class=\"token punctuation\">.</span>data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"历史上的今天\"><a href=\"#历史上的今天\" class=\"headerlink\" title=\"历史上的今天\"></a>历史上的今天</h4><p><strong>注册历史上的今天的服务</strong></p>\n<p>注册<a href=\"https://www.juhe.cn/\">聚合API</a>并认证，认证之后可以申请开通<strong>历史上的今天</strong>、图书电商数据等免费的API服务，并找到你的与之<strong>对应的AppKey</strong>。</p>\n<p>替换下面链接<strong>你的历史上的今天对应的key</strong>（直接输AppKey就行），然后在浏览器打开链接（下面这个是1.0版）</p>\n<pre class=\"line-numbers language-url\" data-language=\"url\"><code class=\"language-url\">http:&#x2F;&#x2F;api.juheapi.com&#x2F;japi&#x2F;toh?month&#x3D;9&amp;day&#x3D;15&amp;key&#x3D;d68ed793a10607f864d31744f986e8d6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>将一些通用的数据、函数单独拿出来存放在globalData里或进行模块化，是在实际开发中会经常使用到的一种方法，它可以让数据、函数更容易管理以及可以重复利用，使得代码更加精简。</p>\n</blockquote>\n<p><strong>wx.request请求数据</strong></p>\n<p>wx.request里的data就是要传入的参数，我们把month、day、key传入到请求的链接里。它等价于以下链接（注意把data里的属性值，以免传两次参数）</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gd1wpezewtj31hc0u0wph.jpg\" alt=\"2020-03-21 21-04-34 的屏幕截图.png\"></p>\n<h4 id=\"天气API\"><a href=\"#天气API\" class=\"headerlink\" title=\"天气API\"></a>天气API</h4><p><strong>技术文档：</strong><a href=\"https://dev.heweather.com/docs/api/weather\">和风常规天气数据API</a></p>\n<h4 id=\"encodeURI与decodeURI\"><a href=\"#encodeURI与decodeURI\" class=\"headerlink\" title=\"encodeURI与decodeURI\"></a>encodeURI与decodeURI</h4><p>在浏览网页的时候我们经常看到汉字或一些字符变成了一个“乱码”，原因就在于链接进行了编码处理。encodeURI() 函数可把字符串作为 URI 进行编码，而decodeURI()函数则可以进行解码。</p>\n<h4 id=\"腾讯地图LBS\"><a href=\"#腾讯地图LBS\" class=\"headerlink\" title=\"腾讯地图LBS\"></a>腾讯地图LBS</h4><p>如果想在小程序中调用地图的POI检索（POI，即兴趣点Point of Interest，区域内搜索酒店、学校、ATM等）、 关键词输入提示、地址解析、逆地址解析、行政区划、距离计算、路径规划等数据服务，这时候就需要使用到地图类相关的API。</p>\n<p><strong>地图API：</strong><a href=\"https://lbs.qq.com/index.html\">腾讯LBS位置服务</a></p>\n<p><strong>md5加密算法</strong></p>\n<p>在<a href=\"https://lbs.qq.com/FAQ/key_faq.html#4\">WebServiceAPI Key配置中签名校验</a>里提到我们使用WebServiceAPI的方法需要对请求路径+”?”+请求参数+SK进行拼接，并计算拼接后字符串<strong>md5值</strong>，即为签名(sig)。MD5是计算机安全领域广泛使用到的一种加密算法，主要用于确保消息传输的完整一致。</p>\n<p><strong>md5依赖：</strong><a href=\"https://github.com/blueimp/JavaScript-MD5/archive/master.zip\">md5开源项目下载链接</a></p>\n<p><strong>坐标逆解析</strong></p>\n<p>坐标的逆解析就是坐标(latitude,longitude)转化为详细的地址名。</p>\n<p>小程序使用腾讯地图位置服务，还有一种更加简单的方法，具体可以阅读《<a href=\"https://lbs.qq.com/product/miniapp/guide/\">微信小程序：个性地图使用指南</a>》</p>\n"},{"title":"腾讯犀牛鸟云开发校园技术布道师养成计划第八天","top":false,"date":"2020-03-24T14:02:04.000Z","_content":"\n# 云开发与Nodejs\n\n云函数的运行环境是 Node.js，我们可以在云函数中使用Nodejs内置模块以及使用 npm 安装第三方依赖来帮助我们更快的开发。借助于一些优秀的开源项目，避免了我们重复造轮子，相比于小程序端，能够大大扩展云函数的使用\n\n#### 云函数与Nodejs\n\n**技术文档：**[Nodejs API 中文技术文档](http://nodejs.cn/api/)\n\n**Nodejs的内置模块**\n\nNodejs的常用内置模块以及功能如下所示，这些模块都是可以在云函数里直接使用的：\n\n- **fs 模块**：文件目录的创建、删除、查询以及文件的读取和写入，下面的createReadStream方法类似于读取文件，\n- **path 模块：**提供了一些用于处理文件路径的API\n- **url模块：**用于处理与解析 URL\n- **http模块：**用于创建一个能够处理和响应 http 响应的服务\n- **querystring模块：**解析查询字符串\n- **until模块** ：提供用于解析和格式化 URL 查询字符串的实用工具；\n- **net模块：**用于创建基于流的 TCP 或 IPC 的服务器\n- **crypto模块：**提供加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装\n\n> 在云函数中使用HTTP请求访问第三方服务可以不受域名限制，即不需要像小程序端一样，要将域名添加到request合法域名里；也不受http和https的限制，没有域名只有IP都是可以的，所以云函数可以应用的场景非常多，即能方便的调用第三方服务，也能够充当一个功能复杂的完整应用的后端。不过需要注意的是，云函数是部署在云端，有些局域网等终端通信的业务只能在小程序里进行。\n\n**常用变量**\n\nmodule、exports、require\n\nrequire用于引入模块、 JSON、或本地文件。 可以从 node_modules 引入模块，可以使用相对路径（例如 ./、）引入本地模块或 JSON 文件，路径会根据 [__dirname](http://nodejs.cn/s/etUQhi) 定义的目录名或当前工作目录进行处理。\n\nnode模块化遵循的是commonjs规范，CommonJs定义的模块分为: 模块标识(module)、模块导出(exports) 、模块引用(require)。\n\n在node中，一个文件即一个模块，使用exports和require来进行处理。\n\n#### Lodash实用工具库\n\nLodash是一个一致性、模块化、高性能的 JavaScript **实用工具库**，通过降低 array、number、objects、string 等数据类型的使用难度从而让 JavaScript 变得更简单。Lodash 的模块化方法非常适用于：遍历 array、object 和 string；对值进行操作和检测；创建符合功能的函数。\n\n**技术文档：**[Lodash官方文档](https://lodash.com/)、[Lodash中文文档](https://www.lodashjs.com/)\n\n#### moment时间处理\n\n开发小程序时经常需要格式化时间、处理相对时间、日历时间以及时间的多语言问题，这个时候就可以使用比较流行的momentjs了。\n\n**技术文档：**[moment官方文档](https://momentjs.com/)、[moment中文文档](http://momentjs.cn/)\n\n#### 获取公网IP\n\n有时我们希望能够获取到服务器的公网IP，比如用于IP地址的白名单，或者想根据IP查询到服务器所在的地址，ipify就是一个免费好用的依赖，通过它我们也可以获取到云函数所在服务器的公网IP。\n\n**技术文档：**[ipify Github地址](https://github.com/sindresorhus/ipify)\n\n#### Buffer文件流\n\n#### 图像处理sharp\n\nsharp是一个高速图像处理库，可以很方便的实现图片编辑操作，如裁剪、格式转换、旋转变换、滤镜添加、图片合成（如添加水印）、图片拼接等，支持JPEG, PNG, WebP, TIFF, GIF 和 SVG格式。在云函数端使用sharp来处理图片，而云存储则可以作为服务端和小程序端来传递图片的桥梁。\n\n**技术文档：**[sharp官方技术文档](https://sharp.pixelplumbing.com/en/stable/)\n\n#### 连接数据库MySQL\n\n**公网连接数据库MySQL**\n\n技术文档：[Sequelize](https://sequelize.org/master/)\n\n**私有网络连接MySQL**\n\n默认情况下，云开发的函数部署在**公共网络**中，只可以访问公网。如果开发者需要访问腾讯云的 **Redis、TencentDB、CVM、Kafka** 等资源，需要建立**私有网络**来确保**数据安全及连接安全**。\n\n**连接数据库Redis**\n\n#### 二维码qrcode\n\n**技术文档：**[node-qrcode Github地址](https://github.com/soldair/node-qrcode)\n\n#### 邮件处理\n\n技术文档：[Nodemailer Github地址](https://github.com/nodemailer/nodemailer)、[Nodemailer官方文档](https://nodemailer.com/about/)\n\n#### Excel文档处理\n\nExcel是存储数据比较常见的格式，那如何让云函数拥有读写Excel文件的能力呢？我们可以在Github上搜索关键词“Node Excel”，去筛选Star比较多，条件比较契合的。\n\nGithub地址：[node-xlsx](https://github.com/mgcrea/node-xlsx)\n\n**读取云存储的Excel文件**\n\n将数据库里的数据保存为CSV\n\n**技术文档：**[json2CSV](https://github.com/zemirco/json2csv)\n\n#### HTTP处理\n\ngot、superagent、request、axios、request-promise\n\n> 尽管云函数的Nodejs版本比较低（目前为8.9），但绝大多数模块我们都可以使用Nodejs 12或13的环境来测试，不过有时候也要留意有些模块不支持8.9，比如got 10.0.1以上的版本。\n\n \n\nnode中，http模块也可作为客户端使用（发送请求），第三方模块request对其使用方法进行了封装，操作更方便！所以来介绍一下request模块\n\n**get请求**\n\n**post请求**\n\n \n\n**结合文件流**\n\n#### 加解密Crypto\n\ncrypto模块是nodejs的核心模块之一，它提供了安全相关的功能，包含对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。由于crypto模块是内置模块，我们引入它是无需下载，就可以直接引入。\n\n#### 发短信\n\n“qcloudsms_js”: “^0.1.1”","source":"_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第八天.md","raw":"---\ntitle: 腾讯犀牛鸟云开发校园技术布道师养成计划第八天\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-03-24 22:02:04\n---\n\n# 云开发与Nodejs\n\n云函数的运行环境是 Node.js，我们可以在云函数中使用Nodejs内置模块以及使用 npm 安装第三方依赖来帮助我们更快的开发。借助于一些优秀的开源项目，避免了我们重复造轮子，相比于小程序端，能够大大扩展云函数的使用\n\n#### 云函数与Nodejs\n\n**技术文档：**[Nodejs API 中文技术文档](http://nodejs.cn/api/)\n\n**Nodejs的内置模块**\n\nNodejs的常用内置模块以及功能如下所示，这些模块都是可以在云函数里直接使用的：\n\n- **fs 模块**：文件目录的创建、删除、查询以及文件的读取和写入，下面的createReadStream方法类似于读取文件，\n- **path 模块：**提供了一些用于处理文件路径的API\n- **url模块：**用于处理与解析 URL\n- **http模块：**用于创建一个能够处理和响应 http 响应的服务\n- **querystring模块：**解析查询字符串\n- **until模块** ：提供用于解析和格式化 URL 查询字符串的实用工具；\n- **net模块：**用于创建基于流的 TCP 或 IPC 的服务器\n- **crypto模块：**提供加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装\n\n> 在云函数中使用HTTP请求访问第三方服务可以不受域名限制，即不需要像小程序端一样，要将域名添加到request合法域名里；也不受http和https的限制，没有域名只有IP都是可以的，所以云函数可以应用的场景非常多，即能方便的调用第三方服务，也能够充当一个功能复杂的完整应用的后端。不过需要注意的是，云函数是部署在云端，有些局域网等终端通信的业务只能在小程序里进行。\n\n**常用变量**\n\nmodule、exports、require\n\nrequire用于引入模块、 JSON、或本地文件。 可以从 node_modules 引入模块，可以使用相对路径（例如 ./、）引入本地模块或 JSON 文件，路径会根据 [__dirname](http://nodejs.cn/s/etUQhi) 定义的目录名或当前工作目录进行处理。\n\nnode模块化遵循的是commonjs规范，CommonJs定义的模块分为: 模块标识(module)、模块导出(exports) 、模块引用(require)。\n\n在node中，一个文件即一个模块，使用exports和require来进行处理。\n\n#### Lodash实用工具库\n\nLodash是一个一致性、模块化、高性能的 JavaScript **实用工具库**，通过降低 array、number、objects、string 等数据类型的使用难度从而让 JavaScript 变得更简单。Lodash 的模块化方法非常适用于：遍历 array、object 和 string；对值进行操作和检测；创建符合功能的函数。\n\n**技术文档：**[Lodash官方文档](https://lodash.com/)、[Lodash中文文档](https://www.lodashjs.com/)\n\n#### moment时间处理\n\n开发小程序时经常需要格式化时间、处理相对时间、日历时间以及时间的多语言问题，这个时候就可以使用比较流行的momentjs了。\n\n**技术文档：**[moment官方文档](https://momentjs.com/)、[moment中文文档](http://momentjs.cn/)\n\n#### 获取公网IP\n\n有时我们希望能够获取到服务器的公网IP，比如用于IP地址的白名单，或者想根据IP查询到服务器所在的地址，ipify就是一个免费好用的依赖，通过它我们也可以获取到云函数所在服务器的公网IP。\n\n**技术文档：**[ipify Github地址](https://github.com/sindresorhus/ipify)\n\n#### Buffer文件流\n\n#### 图像处理sharp\n\nsharp是一个高速图像处理库，可以很方便的实现图片编辑操作，如裁剪、格式转换、旋转变换、滤镜添加、图片合成（如添加水印）、图片拼接等，支持JPEG, PNG, WebP, TIFF, GIF 和 SVG格式。在云函数端使用sharp来处理图片，而云存储则可以作为服务端和小程序端来传递图片的桥梁。\n\n**技术文档：**[sharp官方技术文档](https://sharp.pixelplumbing.com/en/stable/)\n\n#### 连接数据库MySQL\n\n**公网连接数据库MySQL**\n\n技术文档：[Sequelize](https://sequelize.org/master/)\n\n**私有网络连接MySQL**\n\n默认情况下，云开发的函数部署在**公共网络**中，只可以访问公网。如果开发者需要访问腾讯云的 **Redis、TencentDB、CVM、Kafka** 等资源，需要建立**私有网络**来确保**数据安全及连接安全**。\n\n**连接数据库Redis**\n\n#### 二维码qrcode\n\n**技术文档：**[node-qrcode Github地址](https://github.com/soldair/node-qrcode)\n\n#### 邮件处理\n\n技术文档：[Nodemailer Github地址](https://github.com/nodemailer/nodemailer)、[Nodemailer官方文档](https://nodemailer.com/about/)\n\n#### Excel文档处理\n\nExcel是存储数据比较常见的格式，那如何让云函数拥有读写Excel文件的能力呢？我们可以在Github上搜索关键词“Node Excel”，去筛选Star比较多，条件比较契合的。\n\nGithub地址：[node-xlsx](https://github.com/mgcrea/node-xlsx)\n\n**读取云存储的Excel文件**\n\n将数据库里的数据保存为CSV\n\n**技术文档：**[json2CSV](https://github.com/zemirco/json2csv)\n\n#### HTTP处理\n\ngot、superagent、request、axios、request-promise\n\n> 尽管云函数的Nodejs版本比较低（目前为8.9），但绝大多数模块我们都可以使用Nodejs 12或13的环境来测试，不过有时候也要留意有些模块不支持8.9，比如got 10.0.1以上的版本。\n\n \n\nnode中，http模块也可作为客户端使用（发送请求），第三方模块request对其使用方法进行了封装，操作更方便！所以来介绍一下request模块\n\n**get请求**\n\n**post请求**\n\n \n\n**结合文件流**\n\n#### 加解密Crypto\n\ncrypto模块是nodejs的核心模块之一，它提供了安全相关的功能，包含对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。由于crypto模块是内置模块，我们引入它是无需下载，就可以直接引入。\n\n#### 发短信\n\n“qcloudsms_js”: “^0.1.1”","slug":"腾讯犀牛鸟云开发校园技术布道师养成计划第八天","published":1,"updated":"2022-08-25T14:12:05.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39e005712mja940b3ub","content":"<h1 id=\"云开发与Nodejs\"><a href=\"#云开发与Nodejs\" class=\"headerlink\" title=\"云开发与Nodejs\"></a>云开发与Nodejs</h1><p>云函数的运行环境是 Node.js，我们可以在云函数中使用Nodejs内置模块以及使用 npm 安装第三方依赖来帮助我们更快的开发。借助于一些优秀的开源项目，避免了我们重复造轮子，相比于小程序端，能够大大扩展云函数的使用</p>\n<h4 id=\"云函数与Nodejs\"><a href=\"#云函数与Nodejs\" class=\"headerlink\" title=\"云函数与Nodejs\"></a>云函数与Nodejs</h4><p><strong>技术文档：</strong><a href=\"http://nodejs.cn/api/\">Nodejs API 中文技术文档</a></p>\n<p><strong>Nodejs的内置模块</strong></p>\n<p>Nodejs的常用内置模块以及功能如下所示，这些模块都是可以在云函数里直接使用的：</p>\n<ul>\n<li><strong>fs 模块</strong>：文件目录的创建、删除、查询以及文件的读取和写入，下面的createReadStream方法类似于读取文件，</li>\n<li><strong>path 模块：</strong>提供了一些用于处理文件路径的API</li>\n<li><strong>url模块：</strong>用于处理与解析 URL</li>\n<li><strong>http模块：</strong>用于创建一个能够处理和响应 http 响应的服务</li>\n<li><strong>querystring模块：</strong>解析查询字符串</li>\n<li><strong>until模块</strong> ：提供用于解析和格式化 URL 查询字符串的实用工具；</li>\n<li><strong>net模块：</strong>用于创建基于流的 TCP 或 IPC 的服务器</li>\n<li><strong>crypto模块：</strong>提供加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装</li>\n</ul>\n<blockquote>\n<p>在云函数中使用HTTP请求访问第三方服务可以不受域名限制，即不需要像小程序端一样，要将域名添加到request合法域名里；也不受http和https的限制，没有域名只有IP都是可以的，所以云函数可以应用的场景非常多，即能方便的调用第三方服务，也能够充当一个功能复杂的完整应用的后端。不过需要注意的是，云函数是部署在云端，有些局域网等终端通信的业务只能在小程序里进行。</p>\n</blockquote>\n<p><strong>常用变量</strong></p>\n<p>module、exports、require</p>\n<p>require用于引入模块、 JSON、或本地文件。 可以从 node_modules 引入模块，可以使用相对路径（例如 ./、）引入本地模块或 JSON 文件，路径会根据 <a href=\"http://nodejs.cn/s/etUQhi\">__dirname</a> 定义的目录名或当前工作目录进行处理。</p>\n<p>node模块化遵循的是commonjs规范，CommonJs定义的模块分为: 模块标识(module)、模块导出(exports) 、模块引用(require)。</p>\n<p>在node中，一个文件即一个模块，使用exports和require来进行处理。</p>\n<h4 id=\"Lodash实用工具库\"><a href=\"#Lodash实用工具库\" class=\"headerlink\" title=\"Lodash实用工具库\"></a>Lodash实用工具库</h4><p>Lodash是一个一致性、模块化、高性能的 JavaScript <strong>实用工具库</strong>，通过降低 array、number、objects、string 等数据类型的使用难度从而让 JavaScript 变得更简单。Lodash 的模块化方法非常适用于：遍历 array、object 和 string；对值进行操作和检测；创建符合功能的函数。</p>\n<p><strong>技术文档：</strong><a href=\"https://lodash.com/\">Lodash官方文档</a>、<a href=\"https://www.lodashjs.com/\">Lodash中文文档</a></p>\n<h4 id=\"moment时间处理\"><a href=\"#moment时间处理\" class=\"headerlink\" title=\"moment时间处理\"></a>moment时间处理</h4><p>开发小程序时经常需要格式化时间、处理相对时间、日历时间以及时间的多语言问题，这个时候就可以使用比较流行的momentjs了。</p>\n<p><strong>技术文档：</strong><a href=\"https://momentjs.com/\">moment官方文档</a>、<a href=\"http://momentjs.cn/\">moment中文文档</a></p>\n<h4 id=\"获取公网IP\"><a href=\"#获取公网IP\" class=\"headerlink\" title=\"获取公网IP\"></a>获取公网IP</h4><p>有时我们希望能够获取到服务器的公网IP，比如用于IP地址的白名单，或者想根据IP查询到服务器所在的地址，ipify就是一个免费好用的依赖，通过它我们也可以获取到云函数所在服务器的公网IP。</p>\n<p><strong>技术文档：</strong><a href=\"https://github.com/sindresorhus/ipify\">ipify Github地址</a></p>\n<h4 id=\"Buffer文件流\"><a href=\"#Buffer文件流\" class=\"headerlink\" title=\"Buffer文件流\"></a>Buffer文件流</h4><h4 id=\"图像处理sharp\"><a href=\"#图像处理sharp\" class=\"headerlink\" title=\"图像处理sharp\"></a>图像处理sharp</h4><p>sharp是一个高速图像处理库，可以很方便的实现图片编辑操作，如裁剪、格式转换、旋转变换、滤镜添加、图片合成（如添加水印）、图片拼接等，支持JPEG, PNG, WebP, TIFF, GIF 和 SVG格式。在云函数端使用sharp来处理图片，而云存储则可以作为服务端和小程序端来传递图片的桥梁。</p>\n<p><strong>技术文档：</strong><a href=\"https://sharp.pixelplumbing.com/en/stable/\">sharp官方技术文档</a></p>\n<h4 id=\"连接数据库MySQL\"><a href=\"#连接数据库MySQL\" class=\"headerlink\" title=\"连接数据库MySQL\"></a>连接数据库MySQL</h4><p><strong>公网连接数据库MySQL</strong></p>\n<p>技术文档：<a href=\"https://sequelize.org/master/\">Sequelize</a></p>\n<p><strong>私有网络连接MySQL</strong></p>\n<p>默认情况下，云开发的函数部署在<strong>公共网络</strong>中，只可以访问公网。如果开发者需要访问腾讯云的 <strong>Redis、TencentDB、CVM、Kafka</strong> 等资源，需要建立<strong>私有网络</strong>来确保<strong>数据安全及连接安全</strong>。</p>\n<p><strong>连接数据库Redis</strong></p>\n<h4 id=\"二维码qrcode\"><a href=\"#二维码qrcode\" class=\"headerlink\" title=\"二维码qrcode\"></a>二维码qrcode</h4><p><strong>技术文档：</strong><a href=\"https://github.com/soldair/node-qrcode\">node-qrcode Github地址</a></p>\n<h4 id=\"邮件处理\"><a href=\"#邮件处理\" class=\"headerlink\" title=\"邮件处理\"></a>邮件处理</h4><p>技术文档：<a href=\"https://github.com/nodemailer/nodemailer\">Nodemailer Github地址</a>、<a href=\"https://nodemailer.com/about/\">Nodemailer官方文档</a></p>\n<h4 id=\"Excel文档处理\"><a href=\"#Excel文档处理\" class=\"headerlink\" title=\"Excel文档处理\"></a>Excel文档处理</h4><p>Excel是存储数据比较常见的格式，那如何让云函数拥有读写Excel文件的能力呢？我们可以在Github上搜索关键词“Node Excel”，去筛选Star比较多，条件比较契合的。</p>\n<p>Github地址：<a href=\"https://github.com/mgcrea/node-xlsx\">node-xlsx</a></p>\n<p><strong>读取云存储的Excel文件</strong></p>\n<p>将数据库里的数据保存为CSV</p>\n<p><strong>技术文档：</strong><a href=\"https://github.com/zemirco/json2csv\">json2CSV</a></p>\n<h4 id=\"HTTP处理\"><a href=\"#HTTP处理\" class=\"headerlink\" title=\"HTTP处理\"></a>HTTP处理</h4><p>got、superagent、request、axios、request-promise</p>\n<blockquote>\n<p>尽管云函数的Nodejs版本比较低（目前为8.9），但绝大多数模块我们都可以使用Nodejs 12或13的环境来测试，不过有时候也要留意有些模块不支持8.9，比如got 10.0.1以上的版本。</p>\n</blockquote>\n<p>node中，http模块也可作为客户端使用（发送请求），第三方模块request对其使用方法进行了封装，操作更方便！所以来介绍一下request模块</p>\n<p><strong>get请求</strong></p>\n<p><strong>post请求</strong></p>\n<p><strong>结合文件流</strong></p>\n<h4 id=\"加解密Crypto\"><a href=\"#加解密Crypto\" class=\"headerlink\" title=\"加解密Crypto\"></a>加解密Crypto</h4><p>crypto模块是nodejs的核心模块之一，它提供了安全相关的功能，包含对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。由于crypto模块是内置模块，我们引入它是无需下载，就可以直接引入。</p>\n<h4 id=\"发短信\"><a href=\"#发短信\" class=\"headerlink\" title=\"发短信\"></a>发短信</h4><p>“qcloudsms_js”: “^0.1.1”</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"云开发与Nodejs\"><a href=\"#云开发与Nodejs\" class=\"headerlink\" title=\"云开发与Nodejs\"></a>云开发与Nodejs</h1><p>云函数的运行环境是 Node.js，我们可以在云函数中使用Nodejs内置模块以及使用 npm 安装第三方依赖来帮助我们更快的开发。借助于一些优秀的开源项目，避免了我们重复造轮子，相比于小程序端，能够大大扩展云函数的使用</p>\n<h4 id=\"云函数与Nodejs\"><a href=\"#云函数与Nodejs\" class=\"headerlink\" title=\"云函数与Nodejs\"></a>云函数与Nodejs</h4><p><strong>技术文档：</strong><a href=\"http://nodejs.cn/api/\">Nodejs API 中文技术文档</a></p>\n<p><strong>Nodejs的内置模块</strong></p>\n<p>Nodejs的常用内置模块以及功能如下所示，这些模块都是可以在云函数里直接使用的：</p>\n<ul>\n<li><strong>fs 模块</strong>：文件目录的创建、删除、查询以及文件的读取和写入，下面的createReadStream方法类似于读取文件，</li>\n<li><strong>path 模块：</strong>提供了一些用于处理文件路径的API</li>\n<li><strong>url模块：</strong>用于处理与解析 URL</li>\n<li><strong>http模块：</strong>用于创建一个能够处理和响应 http 响应的服务</li>\n<li><strong>querystring模块：</strong>解析查询字符串</li>\n<li><strong>until模块</strong> ：提供用于解析和格式化 URL 查询字符串的实用工具；</li>\n<li><strong>net模块：</strong>用于创建基于流的 TCP 或 IPC 的服务器</li>\n<li><strong>crypto模块：</strong>提供加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装</li>\n</ul>\n<blockquote>\n<p>在云函数中使用HTTP请求访问第三方服务可以不受域名限制，即不需要像小程序端一样，要将域名添加到request合法域名里；也不受http和https的限制，没有域名只有IP都是可以的，所以云函数可以应用的场景非常多，即能方便的调用第三方服务，也能够充当一个功能复杂的完整应用的后端。不过需要注意的是，云函数是部署在云端，有些局域网等终端通信的业务只能在小程序里进行。</p>\n</blockquote>\n<p><strong>常用变量</strong></p>\n<p>module、exports、require</p>\n<p>require用于引入模块、 JSON、或本地文件。 可以从 node_modules 引入模块，可以使用相对路径（例如 ./、）引入本地模块或 JSON 文件，路径会根据 <a href=\"http://nodejs.cn/s/etUQhi\">__dirname</a> 定义的目录名或当前工作目录进行处理。</p>\n<p>node模块化遵循的是commonjs规范，CommonJs定义的模块分为: 模块标识(module)、模块导出(exports) 、模块引用(require)。</p>\n<p>在node中，一个文件即一个模块，使用exports和require来进行处理。</p>\n<h4 id=\"Lodash实用工具库\"><a href=\"#Lodash实用工具库\" class=\"headerlink\" title=\"Lodash实用工具库\"></a>Lodash实用工具库</h4><p>Lodash是一个一致性、模块化、高性能的 JavaScript <strong>实用工具库</strong>，通过降低 array、number、objects、string 等数据类型的使用难度从而让 JavaScript 变得更简单。Lodash 的模块化方法非常适用于：遍历 array、object 和 string；对值进行操作和检测；创建符合功能的函数。</p>\n<p><strong>技术文档：</strong><a href=\"https://lodash.com/\">Lodash官方文档</a>、<a href=\"https://www.lodashjs.com/\">Lodash中文文档</a></p>\n<h4 id=\"moment时间处理\"><a href=\"#moment时间处理\" class=\"headerlink\" title=\"moment时间处理\"></a>moment时间处理</h4><p>开发小程序时经常需要格式化时间、处理相对时间、日历时间以及时间的多语言问题，这个时候就可以使用比较流行的momentjs了。</p>\n<p><strong>技术文档：</strong><a href=\"https://momentjs.com/\">moment官方文档</a>、<a href=\"http://momentjs.cn/\">moment中文文档</a></p>\n<h4 id=\"获取公网IP\"><a href=\"#获取公网IP\" class=\"headerlink\" title=\"获取公网IP\"></a>获取公网IP</h4><p>有时我们希望能够获取到服务器的公网IP，比如用于IP地址的白名单，或者想根据IP查询到服务器所在的地址，ipify就是一个免费好用的依赖，通过它我们也可以获取到云函数所在服务器的公网IP。</p>\n<p><strong>技术文档：</strong><a href=\"https://github.com/sindresorhus/ipify\">ipify Github地址</a></p>\n<h4 id=\"Buffer文件流\"><a href=\"#Buffer文件流\" class=\"headerlink\" title=\"Buffer文件流\"></a>Buffer文件流</h4><h4 id=\"图像处理sharp\"><a href=\"#图像处理sharp\" class=\"headerlink\" title=\"图像处理sharp\"></a>图像处理sharp</h4><p>sharp是一个高速图像处理库，可以很方便的实现图片编辑操作，如裁剪、格式转换、旋转变换、滤镜添加、图片合成（如添加水印）、图片拼接等，支持JPEG, PNG, WebP, TIFF, GIF 和 SVG格式。在云函数端使用sharp来处理图片，而云存储则可以作为服务端和小程序端来传递图片的桥梁。</p>\n<p><strong>技术文档：</strong><a href=\"https://sharp.pixelplumbing.com/en/stable/\">sharp官方技术文档</a></p>\n<h4 id=\"连接数据库MySQL\"><a href=\"#连接数据库MySQL\" class=\"headerlink\" title=\"连接数据库MySQL\"></a>连接数据库MySQL</h4><p><strong>公网连接数据库MySQL</strong></p>\n<p>技术文档：<a href=\"https://sequelize.org/master/\">Sequelize</a></p>\n<p><strong>私有网络连接MySQL</strong></p>\n<p>默认情况下，云开发的函数部署在<strong>公共网络</strong>中，只可以访问公网。如果开发者需要访问腾讯云的 <strong>Redis、TencentDB、CVM、Kafka</strong> 等资源，需要建立<strong>私有网络</strong>来确保<strong>数据安全及连接安全</strong>。</p>\n<p><strong>连接数据库Redis</strong></p>\n<h4 id=\"二维码qrcode\"><a href=\"#二维码qrcode\" class=\"headerlink\" title=\"二维码qrcode\"></a>二维码qrcode</h4><p><strong>技术文档：</strong><a href=\"https://github.com/soldair/node-qrcode\">node-qrcode Github地址</a></p>\n<h4 id=\"邮件处理\"><a href=\"#邮件处理\" class=\"headerlink\" title=\"邮件处理\"></a>邮件处理</h4><p>技术文档：<a href=\"https://github.com/nodemailer/nodemailer\">Nodemailer Github地址</a>、<a href=\"https://nodemailer.com/about/\">Nodemailer官方文档</a></p>\n<h4 id=\"Excel文档处理\"><a href=\"#Excel文档处理\" class=\"headerlink\" title=\"Excel文档处理\"></a>Excel文档处理</h4><p>Excel是存储数据比较常见的格式，那如何让云函数拥有读写Excel文件的能力呢？我们可以在Github上搜索关键词“Node Excel”，去筛选Star比较多，条件比较契合的。</p>\n<p>Github地址：<a href=\"https://github.com/mgcrea/node-xlsx\">node-xlsx</a></p>\n<p><strong>读取云存储的Excel文件</strong></p>\n<p>将数据库里的数据保存为CSV</p>\n<p><strong>技术文档：</strong><a href=\"https://github.com/zemirco/json2csv\">json2CSV</a></p>\n<h4 id=\"HTTP处理\"><a href=\"#HTTP处理\" class=\"headerlink\" title=\"HTTP处理\"></a>HTTP处理</h4><p>got、superagent、request、axios、request-promise</p>\n<blockquote>\n<p>尽管云函数的Nodejs版本比较低（目前为8.9），但绝大多数模块我们都可以使用Nodejs 12或13的环境来测试，不过有时候也要留意有些模块不支持8.9，比如got 10.0.1以上的版本。</p>\n</blockquote>\n<p>node中，http模块也可作为客户端使用（发送请求），第三方模块request对其使用方法进行了封装，操作更方便！所以来介绍一下request模块</p>\n<p><strong>get请求</strong></p>\n<p><strong>post请求</strong></p>\n<p><strong>结合文件流</strong></p>\n<h4 id=\"加解密Crypto\"><a href=\"#加解密Crypto\" class=\"headerlink\" title=\"加解密Crypto\"></a>加解密Crypto</h4><p>crypto模块是nodejs的核心模块之一，它提供了安全相关的功能，包含对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。由于crypto模块是内置模块，我们引入它是无需下载，就可以直接引入。</p>\n<h4 id=\"发短信\"><a href=\"#发短信\" class=\"headerlink\" title=\"发短信\"></a>发短信</h4><p>“qcloudsms_js”: “^0.1.1”</p>\n"},{"title":"腾讯犀牛鸟云开发校园技术布道师养成计划第六天","top":false,"date":"2020-03-22T04:05:42.000Z","_content":"\n# 云开发快速入门\n\n如果你想免费、快速的开发出一个完整的项目，用小程序的云开发可能是最好的选择。小程序的云开发所用到的主要是前端开发的知识。\n\n#### **技术文档：**[云开发官方文档](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html)\n\n#### 开通云开发服务\n\n#### 下载Nodejs\n\n**NodeJS**是在服务端运行JavaScript的运行环境，云开发所使用的服务端环境就是NodeJS。**npm**是Node包管理器，通过npm，我们可以非常方便的安装云开发所需要的依赖包。\n\n#### 部署并上传云函数\n\n**部署并上传云函数**\n\n**cloudfuntions文件夹**图标里有朵小云，表示这就是**云函数根目录**。展开cloudfunctions，我们可以看到里面有login、openapi、callback、echo文件夹，这些就是**云函数目录**。而**miniprogram文件夹**则放置的是小程序的页面文件。\n\n> cloudfunctions里放的是云函数，miniprogram放的是小程序的页面，这并不是一成不变的，也就是说你也可以修改这些文件夹的名称，这取决于项目配置文件project.config.json里的如下配置项：\n>\n> ```javascript\n> \"miniprogramRoot\": \"miniprogram/\",\n> \"cloudfunctionRoot\": \"cloudfunctions/\",\n> ```\n>\n> 但是你最好是让放小程序页面的文件夹以及放云函数的文件夹处于平级关系且都在项目的根目录下，便于管理。\n\n**上传所有云函数**\n\n接下来我们按照这样的流程把**其他所有云函数**（如openapi）都部署都上传，也就是要执行和上面相同的步骤，总结如下：\n\n1. 右键云函数目录，选择在终端中打开，输入 npm install命令下载依赖文件；\n2. 然后再右键云函数目录，点击“**创建并部署：所有文件**”\n3. 在云开发控制台–云函数–**云函数列表**查看云函数是否部署成功。\n\n#### npm包管理器与依赖模块\n\nnpm install会下载云函数目录下的配置文件**package.json**里的**dependencies**，它表示的是当前云函数需要依赖的模块。package.json在哪里，就在哪里执行npm install，没有package.json，没有dependencies，就没法下载.\n\n执行npm install命令下载的依赖模块会放在**node_modules**文件夹里，\n\n#### 获取openid与云函数login\n\n当我们把**云函数login**部署上传成功后，就可以在模拟器以及手机（需要重新点击**预览**图标并扫描二维码）里**点击获取openid**了。\n\n**点击获取openid**\n\nopenid是小程序用户的唯一标识，也就是每一个小程序用户都有一个唯一的openid。点击“**点击获取openid**”，在**用户管理指引**页面如果显示“用户id获取成功”以及一串字母+数字，那么表示你login云函数部署并上传成功啦。**如果获取openid失败，你则需要解决login云函数的部署上传，才能进行下面的步骤哦**。\n\n**调用云函数的解读**\n\n**技术文档：**[调用云函数wx.cloud.callFunction](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/functions/callFunction.html)\n\n调用云函数的方法很简单，只需要填写云函数的名称name（这里为login），以及需要传递的参数（这里并没有上传参数），就可以进行调用。在success回调函数里添加以下代码**打印res对象**：\n\n再点击“**点击获取openid**”按钮，就能看到完整的res对象，res对象有三个参数：\n\n- **requestID**：云函数执行 ID，可用于在**云开发控制台**查找日志，打开云开发控制台–云函数–日志，可以在这里根据云函数函数名以及requestID来筛选查看云函数的调用日志（含返回结果）；\n- **result：****云函数返回的结果**，login云函数返回的结果里包含appid、event对象，我们可以通过res.result.appid以及res.result.event访问它们；\n- errMsg：显示云函数是否调用成功\n\n事件处理函数onGetOpenid调用云函数成功之后，干了三件事情：\n\n- 使用console.log打印openid，可以在点击按钮触发云函数在控制台看到该打印结果；\n- 把获取到的appid赋值给app.js文件里的globalData全局对象；\n- 跳转到userConsole页面；\n\n保存之后，右键点击index.js文件，选择**云函数增量上传:（更新文件）**，更新login云函数，\n\n打开**云开发控制台**–**云函数**–**日志**，**按函数名筛选**，选择login云函数，可以看到云函数被调用的日志记录，我们可以在日志里发现：\n\n- **event对象**包含程序用户的 openid 和小程序的 appid，而openid就相当于用户的身份证，我们可以根据openid获取到用户的昵称、头像等信息（后面会说明）；\n- 而**context对象**则是云函数的调用信息和运行状态。\n- 在**返回结果**里我们可以看到return返回的数据\n\n> 云函数的打印日志会显示**在云开发控制台的日志里面**，这一点非常重要，要多加利用。只要是打印日志，无论是显示在开发者工具控制台还是显示在云开发控制台的就没有不重要的。\n\n**getWXContext()**\n\ngetWXContext()API是云开发服务端的工具类API，会返回小程序用户的openid、小程序appid、小程序用户的unionid等。说这么多不如直接打印，在下面添加一行打印信息：\n\n```javascript\nconst wxContext = cloud.getWXContext()\nconsole.log('getWXContext返回的结果',wxContext)\n```\n\n**技术文档：**[getWXContext()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/utils/getWXContext.html)\n\n**eturn**\n\nreturn语句是终止函数的执行，并返回一个指定的值给**函数调用者**。\n\n#### 新建云函数\n\n#### 体验上传图片\n\n**上传图片到云存储**\n\n#### 体验云调用之服务端调用\n\n#### 体验前端操作数据库\n\n**前端操作数据库的页面逻辑**\n\n以上的函数是在小程序的前端页面来操作数据库，点击开发者工具模拟器云开发QuickStart里的前端操作数据库，\n\n- 在第1步（数据库指引有标注），我们会获取到用户的openid，也就是说你没有获取到openid是没法通过小程序的前端来操作数据库的哦\n- 第2步，需要我们在**云开发控制台**里的**数据库管理页**创建一个**counters**的集合（不需添加数据）；\n- 第3步，点击按钮页面的按钮“**新增记录**”（按钮就在这个页面的第4条与第5条之间，看起来不是那么明显），这时会调用 onAdd方法，往**counters集合**新增一个记录（之前手动添加有木有很辛苦？），我们可以去云开发控制台的**数据库管理页**查看一下counters集合是不是有了一条记录；大家可以多点击几下**新增记录**按钮，然后去云开发控制台看数据库又有什么变化。也就是小程序前端页面通过 onAdd方法，在数据库新增了记录。\n- 第4步，点击按钮**查询记录**，这时调用的是 onQuery方法就能在小程序里**获取到**第3步我们存储到数据库里的数据啦\n- 第5步，点击计数器按钮+号和-号，可以更新count的值，点击+号按钮会调用 onCounterInc方法，而点击-号 onCounterDec方法，比如我们点击加号到7，再去**数据库管理页**查看最新的一条记录（也就是最后一条），它的count由原来的1更新到了7（**先点刷新按钮**），我们再点击-号按钮到5，再来数据库管理页查看有什么变化变化（**先点刷新按钮**）\n- 第6步，点击**删除记录**按钮，会调用 onRemove方法，这时会删掉数据库里最新的记录（也就是第5步里的那一条记录）。\n\n通过实战我们了解到，databaseGuide.js文件里的 onAdd、 onQuery、 onCounterInc、 onCounterDec、 onRemove可以实现小程序的前端页面来操作数据库。\n\n> 在前面JavaScript的章节里我们了解到数据以及数据的存储是非常重要的，而有了数据库，用函数生成的数据能够比缓存存储的更加持久，而且在上面我们实现了对数据进行增(添加)、删(删除)、改(修改、更新)、查(查询并渲染到页面)，不仅如此，缓存的容量也比较有限，最多不过10M，而数据库可以存几百G以上，可见它的重要性。\n\n当新建了并配置了云函数根目录为cloudfunctions文件夹之后，云函数根目录里并没有云函数，我们可以右键点击云函数根目录cloudfunctions文件夹选择**同步云函数列表**，可以把所有云端的云函数列表都列举出来（这只是列举了列表），而要修改云函数里面的内容，我们可以右键点击其中的一个云函数目录选择**下载云函数**即可。\n\n除此之外，我们需要小程序的app.js的生命周期函数onLaunch里使用wx.cloud.init()来初始化云开发能力：\n\n```javascript\n  onLaunch: function () {\n    if (!wx.cloud) {\n      console.error('请使用 2.2.3 或以上的基础库以使用云能力')\n    } else {\n      wx.cloud.init({\n        env: '你的环境ID',\n        traceUser: true,\n      })\n    }\n  },\n```\n\n云开发能力全局只需要初始化一次即可，这里的traceUser属性设置为true，会将用户访问记录到用户管理中，在云开发控制台的**运营分析**—**用户访问**里可以看到访问记录。\n\n#### 基础库与wx.cloud\n\n```javascript\nCloudID: ƒ () //用于云调用获取开放数据\ncallFunction: ƒ () //调用云函数\ndatabase: ƒ () //获取数据库的引用\ndeleteFile: ƒ () //从云存储空间删除文件\ndownloadFile: ƒ () //从云存储空间下载文件\ngetTempFileURL: ƒ () //用云文件 ID 换取真实链接\ninit: ƒ ()  //初始化云开发能力\nuploadFile: ƒ () //上传文件至云存储空间\n```\n\n# 云开发能力\n\n通过云开发的能力进行调用云函数、上传图片、操作数据库以及使用小程序的一些开放接口，下面来进一步了解和使用云开发能力，并加强对**云端测试**、**本地调试**以及**本地Console日志打印**，**云端日志打印**的理解。\n\n#### 本地调试与云端测试\n\n**第一步：新建云函数**\n\n**第二步：本地调试云函数是否正确**\n\n**第三步：云端测试云函数是否正确**\n\n#### 小程序端与服务端\n\n**小程序端与云端的初始化**\n\n小程序默认可以创建两个环境，这两个环境都有云函数配置、数据库、云存储且独立隔离，开发上会存在两个环境切换的情况（一个用于生产环境，一个用于测试环境），而**区别这两个环境的就是它们的环境ID**，小程序端与云端的初始化时要注意。\n\n云函数中的API调用的环境也可以使用初始化来设置。\n\n```javascript\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\n```\n\n**cloud.DYNAMIC_CURRENT_ENV**设置 API 默认环境等于当前所在环境**。**建议所有的云函数都使用以上方式来初始化，也就是配置env的值为cloud.DYNAMIC_CURRENT_ENV或使用你的环境ID，不要为空**。\n\n**关于wx-server-sdk**\n\n每一个云函数都会用到wx-server-sdk这个Node包，而要使用这个包都需要有Nodejs环境，小程序端的本地需要我们自己下载Nodejs（前面已下载），而云端则自带Nodejs环境。\n\n**async与await**\n\n在wx-server-sdk中不再兼容success、fail、complete回调，只会返回Promise。在云函数中也经常会需要处理一些异步操作，在异步操作完成后再返回结果给到调用方，我们可以通过在云函数中返回一个 Promise 的方法来实现。Promise表示异步操作返回的结果。在新建的云函数里会看到下面这样的一个语句（有 async）：\n\n```javascript\nexports.main = async (event, context) => {\n}\n```\n\nasync表示函数里有异步操作，async函数的返回值是一个 Promise 对象。在后面还会遇到 await，表示紧跟在它后面的表达式需要等待结果；以及promise对象的**then()方法**（有点类似于success回调函数），和**catch()方法**（有点类似于fail回调函数）\n\n> **云函数的注意事项**\n>\n> - 在云函数部署并上传到云端之后，更新里面的文件比如index.js、config.json，建议右键点击更新好的文件（不是云函数目录）选择**云函数增量上传：更新文件**，**不建议通过上传并部署所有文件的方式**，否则在几分钟内会出现云函数调用失败的情况；\n> - 删除一个云函数之后，**不建议再新建一个同名的云函数并上传部署**，否则在十多分钟内会出现云函数调用失败的情况，建议换一个云函数名，比如login换成user，在小程序端使用 wx.cloud.callFunction({name: ''})调用云函数时把name的值换成user就可以了\n> - 调用云函数时，我们还可以在开发者工具调试面板的NetWork标签查看调用云函数的情况。\n\n#### 获取用户信息和登录\n\n> 使用open-type=”getUserInfo” 来获取用户信息的作用和 wx.getUserInfo API基本效果是一样的，区别在于wx.getUserInfo 这种方式最好是在用户允许获取公开信息（也就是res.authSetting[‘scope.userInfo’]的值为true）之后再调用，如果用户拒绝了授权就不会再有弹窗（除非用户删掉了你的小程序再使用），调用就会失败，而使用组件的方式是用户主动点击，用户即使拒绝了，再点击仍会弹出授权弹窗。所以推荐先使用组件来获取用户授权，然后再来使用wx.getUserInfo来获取用户信息。\n\n**通过button获取用户信息**\n\n**获取用户高清头像**\n\n我们发现获取到的头像不是很清晰，这是因为默认的头像大小为132*132（[UserInfo用户头像说明](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/UserInfo.html)），如果把avatarUrl链接后面的132修改为0就能获取到640*640大小的头像了：\n\n**页面加载时就显示用户信息**\n\n**openid、用户信息与登录**\n\n尽管我们已经获取到了用户的头像、昵称等信息，但是这不能称之为真正意义的登录，只有获取到了用户身份的唯一ID也就是**openid**，我们才能把用户行为比如点赞、评论、发布文章、收藏等与用户挂钩，用户这些行为都与数据库有关，而**能够确定点赞、评论、文章、收藏这些数据与用户关系的就是openid**，也就是说**只要获取到了openid就意味着用户已经登录**，而获取用户信息（如头像、昵称）不过是一个附加服务，这两个是可以完全独立的。没有openid，我们也无法把用户信息给存储到数据库，也就没法让用户自定义用户信息。无论是用户行为，还是用户的信息，openid都是一个重要的桥梁。\n\n> 通过前面的login云函数，我们就已经可以获取到用户的openid。无需维护复杂的鉴权机制，即可获取天然可信任的用户登录态（openid），是云开发的一个重要优势。无论是云存储还是云数据库，openid都扮演着一个重要的角色。\n\n#### 小程序端上传图片到云存储\n\n要把图片上传到云存储，会使用到wx.cloud.uploadFile，**这个API是小程序端的API**，它是把**本地资源也就是临时文件里的文件**上传到云存储里。在前面《**图片、缓存与文件**》章节里我们已经了解到如何把图片上传到小程序的临时文件，而要把临时文件上传到云存储，则需要调用wx.cloud.uploadFile API。\n\n**技术文档：**[wx.cloud.uploadFile](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html)\n\n在wx.cloud.uploadFile技术文档里，可以看到要调用API，需要获取图片的**filePath**，在小程序里为临时文件的路径，也就是要把上传到小程序的临时文件路径赋值给它；还有一个**cloudPath**，这个为文件的云存储路径，这个是**我们可以任意设置的**。\n\n**文件名与后缀的处理**\n\n我们知道一个文件由**文件名称**和**文件后缀**构成，比如tcb.jpg和cloudbase.png，jpeg说明图片的格式是JPG格式，而png说明图片是PNG格式，文件名称相同**且**格式相同就是出现覆盖，如果我们随意更改了**文件的后缀**，大多数文件就会打不开。所以要把**cloudPath云存储的路径**需要我们把文件名和后缀给处理好。\n\n```javascript\nconst cloudPath = `${Date.now()}-${Math.floor(Math.random(0, 1) * 1000)}` + filePath.match(/\\.[^.]+?$/)[0]\n```\n\n给文件名加上时间戳和一个随机数，时间戳是以毫秒计算，而随机数是以1000内的正整数，除非1秒钟（1秒=1000毫秒）上传几十万张照片，不然文件名是不会重复的。\n\n> **上传图片到云存储是无法直接获取到图片的下载地址的**\n\n**云存储的二级目录**\n\n**渲染云存储图片到组件**\n\n> > 在云开发控制台的存储里，我们可以看到每张图片的详细信息都有**上传者 Open ID**，无论你是使用开发者工具在模拟器的小程序里上传还是预览在手机的小程序里上传，只要你用的是同一个微信账号，这个上传者openid都是一致的，**云存储会自动记录上传者的openid**。\n>\n> > \n\n#### 云函数上传图片到云存储\n\n云开发不仅在小程序端可以上传文件到云存储，还可以通过云函数也就是云端上传图片到云存储（这里会涉及到一点Nodejs的知识）。\n\n**技术文档：**[uploadFile](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/storage/uploadFile.html)\n\n注意**云函数上传图片的API属于服务端API，与wx.cloud.uploadFile是小程序端API不同**。\n\n由于**云端测试无法获取用户登陆态信息**，所以我们不能在云端测试里把图片上传到云存储，需要在小程序端调用，使用开发者工具在login.wxml输入以下代码，也就是新建一个绑定uploadimg事件处理函数的button用于触发：\n\n> 注意，通过这种方式上传到云存储的图片，是**没有上传者 Open ID**的，在云存储里查看这张图片的详细信息，就可以了解到。\n\n#### 调用数据库\n\n**数据库的导入**\n\n打开云开发控制台，在数据库里新建一个集合**zhihu_daily**，导入该json文件，导入时会有冲突模式选择，看下面的介绍，推荐大家使用upsert：\n\n- Insert：总是插入新记录\n- Upsert：如果记录存在则更新，否则插入新记录\n\n导入后，发现数据库自动给每一条数据（记录）都加了唯一的标识**_id**。\n\n**小程序端调用数据库**\n\n在小程序端调用数据库的方式很简单，我们可以把下面的代码写到一个事件处理函数里，然后点击组件触发事件处理函数来调用；也可以直接写到页面的生命周期函数里面；还可以把它写到app.js小程序的生命周期函数里面。\n\n使用开发者工具，将下面的代码写到login.js的onLoad函数里面，我们\n\n- 先使用**wx.cloud.database()**获取**数据库**的引用（相当于连接数据库）;\n- 再使用**db.collection()**获取集合的引用；\n- 再通过Collection.get来获取集合里的记录.\n\n```javascript\nconst db = wx.cloud.database()\ndb.collection('zhihu_daily')\n  .get()\n  .then(res => {\n    console.log(res.data)\n  })\n  .catch(err => {\n    console.error(err)\n  })\n```\n\n> 如果没有指定 limit，则默认最多取 20 条记录\n\n**云函数调用数据库**\n\n```javascript\nconst cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV\n})\nconst db = cloud.database()\nexports.main = async (event, context) => {\n  return await db.collection('zhihu_daily')\n    .get()\n}\n```\n\n**openid与数据库**\n\n在云开发控制台的数据库标签里，打开上一节内容里的counters集合，在这个集合里我们可以看到每条记录除了有_id字段以外，还有一个**_openid字段**用来标志每条记录的创建者（也就是小程序的用户）。\n\n我们可以自定义 _id（也就是给数据添加一个_id字段并填入任意值），但不可自定义和修改 _openid 。 _openid 是在文档创建时由系统根据小程序用户默认创建的，可以用来标识和定位文档。和云存储一样，数据库的记录也和openid有着紧密的联系。\n\n![2020-03-24 12-26-54屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gd4wn77wgjj31hc0u014r.jpg)","source":"_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第六天.md","raw":"---\ntitle: 腾讯犀牛鸟云开发校园技术布道师养成计划第六天\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-03-22 12:05:42\n---\n\n# 云开发快速入门\n\n如果你想免费、快速的开发出一个完整的项目，用小程序的云开发可能是最好的选择。小程序的云开发所用到的主要是前端开发的知识。\n\n#### **技术文档：**[云开发官方文档](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html)\n\n#### 开通云开发服务\n\n#### 下载Nodejs\n\n**NodeJS**是在服务端运行JavaScript的运行环境，云开发所使用的服务端环境就是NodeJS。**npm**是Node包管理器，通过npm，我们可以非常方便的安装云开发所需要的依赖包。\n\n#### 部署并上传云函数\n\n**部署并上传云函数**\n\n**cloudfuntions文件夹**图标里有朵小云，表示这就是**云函数根目录**。展开cloudfunctions，我们可以看到里面有login、openapi、callback、echo文件夹，这些就是**云函数目录**。而**miniprogram文件夹**则放置的是小程序的页面文件。\n\n> cloudfunctions里放的是云函数，miniprogram放的是小程序的页面，这并不是一成不变的，也就是说你也可以修改这些文件夹的名称，这取决于项目配置文件project.config.json里的如下配置项：\n>\n> ```javascript\n> \"miniprogramRoot\": \"miniprogram/\",\n> \"cloudfunctionRoot\": \"cloudfunctions/\",\n> ```\n>\n> 但是你最好是让放小程序页面的文件夹以及放云函数的文件夹处于平级关系且都在项目的根目录下，便于管理。\n\n**上传所有云函数**\n\n接下来我们按照这样的流程把**其他所有云函数**（如openapi）都部署都上传，也就是要执行和上面相同的步骤，总结如下：\n\n1. 右键云函数目录，选择在终端中打开，输入 npm install命令下载依赖文件；\n2. 然后再右键云函数目录，点击“**创建并部署：所有文件**”\n3. 在云开发控制台–云函数–**云函数列表**查看云函数是否部署成功。\n\n#### npm包管理器与依赖模块\n\nnpm install会下载云函数目录下的配置文件**package.json**里的**dependencies**，它表示的是当前云函数需要依赖的模块。package.json在哪里，就在哪里执行npm install，没有package.json，没有dependencies，就没法下载.\n\n执行npm install命令下载的依赖模块会放在**node_modules**文件夹里，\n\n#### 获取openid与云函数login\n\n当我们把**云函数login**部署上传成功后，就可以在模拟器以及手机（需要重新点击**预览**图标并扫描二维码）里**点击获取openid**了。\n\n**点击获取openid**\n\nopenid是小程序用户的唯一标识，也就是每一个小程序用户都有一个唯一的openid。点击“**点击获取openid**”，在**用户管理指引**页面如果显示“用户id获取成功”以及一串字母+数字，那么表示你login云函数部署并上传成功啦。**如果获取openid失败，你则需要解决login云函数的部署上传，才能进行下面的步骤哦**。\n\n**调用云函数的解读**\n\n**技术文档：**[调用云函数wx.cloud.callFunction](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/functions/callFunction.html)\n\n调用云函数的方法很简单，只需要填写云函数的名称name（这里为login），以及需要传递的参数（这里并没有上传参数），就可以进行调用。在success回调函数里添加以下代码**打印res对象**：\n\n再点击“**点击获取openid**”按钮，就能看到完整的res对象，res对象有三个参数：\n\n- **requestID**：云函数执行 ID，可用于在**云开发控制台**查找日志，打开云开发控制台–云函数–日志，可以在这里根据云函数函数名以及requestID来筛选查看云函数的调用日志（含返回结果）；\n- **result：****云函数返回的结果**，login云函数返回的结果里包含appid、event对象，我们可以通过res.result.appid以及res.result.event访问它们；\n- errMsg：显示云函数是否调用成功\n\n事件处理函数onGetOpenid调用云函数成功之后，干了三件事情：\n\n- 使用console.log打印openid，可以在点击按钮触发云函数在控制台看到该打印结果；\n- 把获取到的appid赋值给app.js文件里的globalData全局对象；\n- 跳转到userConsole页面；\n\n保存之后，右键点击index.js文件，选择**云函数增量上传:（更新文件）**，更新login云函数，\n\n打开**云开发控制台**–**云函数**–**日志**，**按函数名筛选**，选择login云函数，可以看到云函数被调用的日志记录，我们可以在日志里发现：\n\n- **event对象**包含程序用户的 openid 和小程序的 appid，而openid就相当于用户的身份证，我们可以根据openid获取到用户的昵称、头像等信息（后面会说明）；\n- 而**context对象**则是云函数的调用信息和运行状态。\n- 在**返回结果**里我们可以看到return返回的数据\n\n> 云函数的打印日志会显示**在云开发控制台的日志里面**，这一点非常重要，要多加利用。只要是打印日志，无论是显示在开发者工具控制台还是显示在云开发控制台的就没有不重要的。\n\n**getWXContext()**\n\ngetWXContext()API是云开发服务端的工具类API，会返回小程序用户的openid、小程序appid、小程序用户的unionid等。说这么多不如直接打印，在下面添加一行打印信息：\n\n```javascript\nconst wxContext = cloud.getWXContext()\nconsole.log('getWXContext返回的结果',wxContext)\n```\n\n**技术文档：**[getWXContext()](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/utils/getWXContext.html)\n\n**eturn**\n\nreturn语句是终止函数的执行，并返回一个指定的值给**函数调用者**。\n\n#### 新建云函数\n\n#### 体验上传图片\n\n**上传图片到云存储**\n\n#### 体验云调用之服务端调用\n\n#### 体验前端操作数据库\n\n**前端操作数据库的页面逻辑**\n\n以上的函数是在小程序的前端页面来操作数据库，点击开发者工具模拟器云开发QuickStart里的前端操作数据库，\n\n- 在第1步（数据库指引有标注），我们会获取到用户的openid，也就是说你没有获取到openid是没法通过小程序的前端来操作数据库的哦\n- 第2步，需要我们在**云开发控制台**里的**数据库管理页**创建一个**counters**的集合（不需添加数据）；\n- 第3步，点击按钮页面的按钮“**新增记录**”（按钮就在这个页面的第4条与第5条之间，看起来不是那么明显），这时会调用 onAdd方法，往**counters集合**新增一个记录（之前手动添加有木有很辛苦？），我们可以去云开发控制台的**数据库管理页**查看一下counters集合是不是有了一条记录；大家可以多点击几下**新增记录**按钮，然后去云开发控制台看数据库又有什么变化。也就是小程序前端页面通过 onAdd方法，在数据库新增了记录。\n- 第4步，点击按钮**查询记录**，这时调用的是 onQuery方法就能在小程序里**获取到**第3步我们存储到数据库里的数据啦\n- 第5步，点击计数器按钮+号和-号，可以更新count的值，点击+号按钮会调用 onCounterInc方法，而点击-号 onCounterDec方法，比如我们点击加号到7，再去**数据库管理页**查看最新的一条记录（也就是最后一条），它的count由原来的1更新到了7（**先点刷新按钮**），我们再点击-号按钮到5，再来数据库管理页查看有什么变化变化（**先点刷新按钮**）\n- 第6步，点击**删除记录**按钮，会调用 onRemove方法，这时会删掉数据库里最新的记录（也就是第5步里的那一条记录）。\n\n通过实战我们了解到，databaseGuide.js文件里的 onAdd、 onQuery、 onCounterInc、 onCounterDec、 onRemove可以实现小程序的前端页面来操作数据库。\n\n> 在前面JavaScript的章节里我们了解到数据以及数据的存储是非常重要的，而有了数据库，用函数生成的数据能够比缓存存储的更加持久，而且在上面我们实现了对数据进行增(添加)、删(删除)、改(修改、更新)、查(查询并渲染到页面)，不仅如此，缓存的容量也比较有限，最多不过10M，而数据库可以存几百G以上，可见它的重要性。\n\n当新建了并配置了云函数根目录为cloudfunctions文件夹之后，云函数根目录里并没有云函数，我们可以右键点击云函数根目录cloudfunctions文件夹选择**同步云函数列表**，可以把所有云端的云函数列表都列举出来（这只是列举了列表），而要修改云函数里面的内容，我们可以右键点击其中的一个云函数目录选择**下载云函数**即可。\n\n除此之外，我们需要小程序的app.js的生命周期函数onLaunch里使用wx.cloud.init()来初始化云开发能力：\n\n```javascript\n  onLaunch: function () {\n    if (!wx.cloud) {\n      console.error('请使用 2.2.3 或以上的基础库以使用云能力')\n    } else {\n      wx.cloud.init({\n        env: '你的环境ID',\n        traceUser: true,\n      })\n    }\n  },\n```\n\n云开发能力全局只需要初始化一次即可，这里的traceUser属性设置为true，会将用户访问记录到用户管理中，在云开发控制台的**运营分析**—**用户访问**里可以看到访问记录。\n\n#### 基础库与wx.cloud\n\n```javascript\nCloudID: ƒ () //用于云调用获取开放数据\ncallFunction: ƒ () //调用云函数\ndatabase: ƒ () //获取数据库的引用\ndeleteFile: ƒ () //从云存储空间删除文件\ndownloadFile: ƒ () //从云存储空间下载文件\ngetTempFileURL: ƒ () //用云文件 ID 换取真实链接\ninit: ƒ ()  //初始化云开发能力\nuploadFile: ƒ () //上传文件至云存储空间\n```\n\n# 云开发能力\n\n通过云开发的能力进行调用云函数、上传图片、操作数据库以及使用小程序的一些开放接口，下面来进一步了解和使用云开发能力，并加强对**云端测试**、**本地调试**以及**本地Console日志打印**，**云端日志打印**的理解。\n\n#### 本地调试与云端测试\n\n**第一步：新建云函数**\n\n**第二步：本地调试云函数是否正确**\n\n**第三步：云端测试云函数是否正确**\n\n#### 小程序端与服务端\n\n**小程序端与云端的初始化**\n\n小程序默认可以创建两个环境，这两个环境都有云函数配置、数据库、云存储且独立隔离，开发上会存在两个环境切换的情况（一个用于生产环境，一个用于测试环境），而**区别这两个环境的就是它们的环境ID**，小程序端与云端的初始化时要注意。\n\n云函数中的API调用的环境也可以使用初始化来设置。\n\n```javascript\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\n```\n\n**cloud.DYNAMIC_CURRENT_ENV**设置 API 默认环境等于当前所在环境**。**建议所有的云函数都使用以上方式来初始化，也就是配置env的值为cloud.DYNAMIC_CURRENT_ENV或使用你的环境ID，不要为空**。\n\n**关于wx-server-sdk**\n\n每一个云函数都会用到wx-server-sdk这个Node包，而要使用这个包都需要有Nodejs环境，小程序端的本地需要我们自己下载Nodejs（前面已下载），而云端则自带Nodejs环境。\n\n**async与await**\n\n在wx-server-sdk中不再兼容success、fail、complete回调，只会返回Promise。在云函数中也经常会需要处理一些异步操作，在异步操作完成后再返回结果给到调用方，我们可以通过在云函数中返回一个 Promise 的方法来实现。Promise表示异步操作返回的结果。在新建的云函数里会看到下面这样的一个语句（有 async）：\n\n```javascript\nexports.main = async (event, context) => {\n}\n```\n\nasync表示函数里有异步操作，async函数的返回值是一个 Promise 对象。在后面还会遇到 await，表示紧跟在它后面的表达式需要等待结果；以及promise对象的**then()方法**（有点类似于success回调函数），和**catch()方法**（有点类似于fail回调函数）\n\n> **云函数的注意事项**\n>\n> - 在云函数部署并上传到云端之后，更新里面的文件比如index.js、config.json，建议右键点击更新好的文件（不是云函数目录）选择**云函数增量上传：更新文件**，**不建议通过上传并部署所有文件的方式**，否则在几分钟内会出现云函数调用失败的情况；\n> - 删除一个云函数之后，**不建议再新建一个同名的云函数并上传部署**，否则在十多分钟内会出现云函数调用失败的情况，建议换一个云函数名，比如login换成user，在小程序端使用 wx.cloud.callFunction({name: ''})调用云函数时把name的值换成user就可以了\n> - 调用云函数时，我们还可以在开发者工具调试面板的NetWork标签查看调用云函数的情况。\n\n#### 获取用户信息和登录\n\n> 使用open-type=”getUserInfo” 来获取用户信息的作用和 wx.getUserInfo API基本效果是一样的，区别在于wx.getUserInfo 这种方式最好是在用户允许获取公开信息（也就是res.authSetting[‘scope.userInfo’]的值为true）之后再调用，如果用户拒绝了授权就不会再有弹窗（除非用户删掉了你的小程序再使用），调用就会失败，而使用组件的方式是用户主动点击，用户即使拒绝了，再点击仍会弹出授权弹窗。所以推荐先使用组件来获取用户授权，然后再来使用wx.getUserInfo来获取用户信息。\n\n**通过button获取用户信息**\n\n**获取用户高清头像**\n\n我们发现获取到的头像不是很清晰，这是因为默认的头像大小为132*132（[UserInfo用户头像说明](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/UserInfo.html)），如果把avatarUrl链接后面的132修改为0就能获取到640*640大小的头像了：\n\n**页面加载时就显示用户信息**\n\n**openid、用户信息与登录**\n\n尽管我们已经获取到了用户的头像、昵称等信息，但是这不能称之为真正意义的登录，只有获取到了用户身份的唯一ID也就是**openid**，我们才能把用户行为比如点赞、评论、发布文章、收藏等与用户挂钩，用户这些行为都与数据库有关，而**能够确定点赞、评论、文章、收藏这些数据与用户关系的就是openid**，也就是说**只要获取到了openid就意味着用户已经登录**，而获取用户信息（如头像、昵称）不过是一个附加服务，这两个是可以完全独立的。没有openid，我们也无法把用户信息给存储到数据库，也就没法让用户自定义用户信息。无论是用户行为，还是用户的信息，openid都是一个重要的桥梁。\n\n> 通过前面的login云函数，我们就已经可以获取到用户的openid。无需维护复杂的鉴权机制，即可获取天然可信任的用户登录态（openid），是云开发的一个重要优势。无论是云存储还是云数据库，openid都扮演着一个重要的角色。\n\n#### 小程序端上传图片到云存储\n\n要把图片上传到云存储，会使用到wx.cloud.uploadFile，**这个API是小程序端的API**，它是把**本地资源也就是临时文件里的文件**上传到云存储里。在前面《**图片、缓存与文件**》章节里我们已经了解到如何把图片上传到小程序的临时文件，而要把临时文件上传到云存储，则需要调用wx.cloud.uploadFile API。\n\n**技术文档：**[wx.cloud.uploadFile](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html)\n\n在wx.cloud.uploadFile技术文档里，可以看到要调用API，需要获取图片的**filePath**，在小程序里为临时文件的路径，也就是要把上传到小程序的临时文件路径赋值给它；还有一个**cloudPath**，这个为文件的云存储路径，这个是**我们可以任意设置的**。\n\n**文件名与后缀的处理**\n\n我们知道一个文件由**文件名称**和**文件后缀**构成，比如tcb.jpg和cloudbase.png，jpeg说明图片的格式是JPG格式，而png说明图片是PNG格式，文件名称相同**且**格式相同就是出现覆盖，如果我们随意更改了**文件的后缀**，大多数文件就会打不开。所以要把**cloudPath云存储的路径**需要我们把文件名和后缀给处理好。\n\n```javascript\nconst cloudPath = `${Date.now()}-${Math.floor(Math.random(0, 1) * 1000)}` + filePath.match(/\\.[^.]+?$/)[0]\n```\n\n给文件名加上时间戳和一个随机数，时间戳是以毫秒计算，而随机数是以1000内的正整数，除非1秒钟（1秒=1000毫秒）上传几十万张照片，不然文件名是不会重复的。\n\n> **上传图片到云存储是无法直接获取到图片的下载地址的**\n\n**云存储的二级目录**\n\n**渲染云存储图片到组件**\n\n> > 在云开发控制台的存储里，我们可以看到每张图片的详细信息都有**上传者 Open ID**，无论你是使用开发者工具在模拟器的小程序里上传还是预览在手机的小程序里上传，只要你用的是同一个微信账号，这个上传者openid都是一致的，**云存储会自动记录上传者的openid**。\n>\n> > \n\n#### 云函数上传图片到云存储\n\n云开发不仅在小程序端可以上传文件到云存储，还可以通过云函数也就是云端上传图片到云存储（这里会涉及到一点Nodejs的知识）。\n\n**技术文档：**[uploadFile](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/storage/uploadFile.html)\n\n注意**云函数上传图片的API属于服务端API，与wx.cloud.uploadFile是小程序端API不同**。\n\n由于**云端测试无法获取用户登陆态信息**，所以我们不能在云端测试里把图片上传到云存储，需要在小程序端调用，使用开发者工具在login.wxml输入以下代码，也就是新建一个绑定uploadimg事件处理函数的button用于触发：\n\n> 注意，通过这种方式上传到云存储的图片，是**没有上传者 Open ID**的，在云存储里查看这张图片的详细信息，就可以了解到。\n\n#### 调用数据库\n\n**数据库的导入**\n\n打开云开发控制台，在数据库里新建一个集合**zhihu_daily**，导入该json文件，导入时会有冲突模式选择，看下面的介绍，推荐大家使用upsert：\n\n- Insert：总是插入新记录\n- Upsert：如果记录存在则更新，否则插入新记录\n\n导入后，发现数据库自动给每一条数据（记录）都加了唯一的标识**_id**。\n\n**小程序端调用数据库**\n\n在小程序端调用数据库的方式很简单，我们可以把下面的代码写到一个事件处理函数里，然后点击组件触发事件处理函数来调用；也可以直接写到页面的生命周期函数里面；还可以把它写到app.js小程序的生命周期函数里面。\n\n使用开发者工具，将下面的代码写到login.js的onLoad函数里面，我们\n\n- 先使用**wx.cloud.database()**获取**数据库**的引用（相当于连接数据库）;\n- 再使用**db.collection()**获取集合的引用；\n- 再通过Collection.get来获取集合里的记录.\n\n```javascript\nconst db = wx.cloud.database()\ndb.collection('zhihu_daily')\n  .get()\n  .then(res => {\n    console.log(res.data)\n  })\n  .catch(err => {\n    console.error(err)\n  })\n```\n\n> 如果没有指定 limit，则默认最多取 20 条记录\n\n**云函数调用数据库**\n\n```javascript\nconst cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV\n})\nconst db = cloud.database()\nexports.main = async (event, context) => {\n  return await db.collection('zhihu_daily')\n    .get()\n}\n```\n\n**openid与数据库**\n\n在云开发控制台的数据库标签里，打开上一节内容里的counters集合，在这个集合里我们可以看到每条记录除了有_id字段以外，还有一个**_openid字段**用来标志每条记录的创建者（也就是小程序的用户）。\n\n我们可以自定义 _id（也就是给数据添加一个_id字段并填入任意值），但不可自定义和修改 _openid 。 _openid 是在文档创建时由系统根据小程序用户默认创建的，可以用来标识和定位文档。和云存储一样，数据库的记录也和openid有着紧密的联系。\n\n![2020-03-24 12-26-54屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gd4wn77wgjj31hc0u014r.jpg)","slug":"腾讯犀牛鸟云开发校园技术布道师养成计划第六天","published":1,"updated":"2022-08-25T14:12:05.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39e005b12mj40kca0fy","content":"<h1 id=\"云开发快速入门\"><a href=\"#云开发快速入门\" class=\"headerlink\" title=\"云开发快速入门\"></a>云开发快速入门</h1><p>如果你想免费、快速的开发出一个完整的项目，用小程序的云开发可能是最好的选择。小程序的云开发所用到的主要是前端开发的知识。</p>\n<h4 id=\"技术文档：云开发官方文档\"><a href=\"#技术文档：云开发官方文档\" class=\"headerlink\" title=\"技术文档：云开发官方文档\"></a><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html\">云开发官方文档</a></h4><h4 id=\"开通云开发服务\"><a href=\"#开通云开发服务\" class=\"headerlink\" title=\"开通云开发服务\"></a>开通云开发服务</h4><h4 id=\"下载Nodejs\"><a href=\"#下载Nodejs\" class=\"headerlink\" title=\"下载Nodejs\"></a>下载Nodejs</h4><p><strong>NodeJS</strong>是在服务端运行JavaScript的运行环境，云开发所使用的服务端环境就是NodeJS。<strong>npm</strong>是Node包管理器，通过npm，我们可以非常方便的安装云开发所需要的依赖包。</p>\n<h4 id=\"部署并上传云函数\"><a href=\"#部署并上传云函数\" class=\"headerlink\" title=\"部署并上传云函数\"></a>部署并上传云函数</h4><p><strong>部署并上传云函数</strong></p>\n<p><strong>cloudfuntions文件夹</strong>图标里有朵小云，表示这就是<strong>云函数根目录</strong>。展开cloudfunctions，我们可以看到里面有login、openapi、callback、echo文件夹，这些就是<strong>云函数目录</strong>。而<strong>miniprogram文件夹</strong>则放置的是小程序的页面文件。</p>\n<blockquote>\n<p>cloudfunctions里放的是云函数，miniprogram放的是小程序的页面，这并不是一成不变的，也就是说你也可以修改这些文件夹的名称，这取决于项目配置文件project.config.json里的如下配置项：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"miniprogramRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"miniprogram/\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"cloudfunctionRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cloudfunctions/\"</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>但是你最好是让放小程序页面的文件夹以及放云函数的文件夹处于平级关系且都在项目的根目录下，便于管理。</p>\n</blockquote>\n<p><strong>上传所有云函数</strong></p>\n<p>接下来我们按照这样的流程把<strong>其他所有云函数</strong>（如openapi）都部署都上传，也就是要执行和上面相同的步骤，总结如下：</p>\n<ol>\n<li>右键云函数目录，选择在终端中打开，输入 npm install命令下载依赖文件；</li>\n<li>然后再右键云函数目录，点击“<strong>创建并部署：所有文件</strong>”</li>\n<li>在云开发控制台–云函数–<strong>云函数列表</strong>查看云函数是否部署成功。</li>\n</ol>\n<h4 id=\"npm包管理器与依赖模块\"><a href=\"#npm包管理器与依赖模块\" class=\"headerlink\" title=\"npm包管理器与依赖模块\"></a>npm包管理器与依赖模块</h4><p>npm install会下载云函数目录下的配置文件<strong>package.json</strong>里的<strong>dependencies</strong>，它表示的是当前云函数需要依赖的模块。package.json在哪里，就在哪里执行npm install，没有package.json，没有dependencies，就没法下载.</p>\n<p>执行npm install命令下载的依赖模块会放在<strong>node_modules</strong>文件夹里，</p>\n<h4 id=\"获取openid与云函数login\"><a href=\"#获取openid与云函数login\" class=\"headerlink\" title=\"获取openid与云函数login\"></a>获取openid与云函数login</h4><p>当我们把<strong>云函数login</strong>部署上传成功后，就可以在模拟器以及手机（需要重新点击<strong>预览</strong>图标并扫描二维码）里<strong>点击获取openid</strong>了。</p>\n<p><strong>点击获取openid</strong></p>\n<p>openid是小程序用户的唯一标识，也就是每一个小程序用户都有一个唯一的openid。点击“<strong>点击获取openid</strong>”，在<strong>用户管理指引</strong>页面如果显示“用户id获取成功”以及一串字母+数字，那么表示你login云函数部署并上传成功啦。<strong>如果获取openid失败，你则需要解决login云函数的部署上传，才能进行下面的步骤哦</strong>。</p>\n<p><strong>调用云函数的解读</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/functions/callFunction.html\">调用云函数wx.cloud.callFunction</a></p>\n<p>调用云函数的方法很简单，只需要填写云函数的名称name（这里为login），以及需要传递的参数（这里并没有上传参数），就可以进行调用。在success回调函数里添加以下代码<strong>打印res对象</strong>：</p>\n<p>再点击“<strong>点击获取openid</strong>”按钮，就能看到完整的res对象，res对象有三个参数：</p>\n<ul>\n<li><strong>requestID</strong>：云函数执行 ID，可用于在<strong>云开发控制台</strong>查找日志，打开云开发控制台–云函数–日志，可以在这里根据云函数函数名以及requestID来筛选查看云函数的调用日志（含返回结果）；</li>\n<li><strong>result：**</strong>云函数返回的结果**，login云函数返回的结果里包含appid、event对象，我们可以通过res.result.appid以及res.result.event访问它们；</li>\n<li>errMsg：显示云函数是否调用成功</li>\n</ul>\n<p>事件处理函数onGetOpenid调用云函数成功之后，干了三件事情：</p>\n<ul>\n<li>使用console.log打印openid，可以在点击按钮触发云函数在控制台看到该打印结果；</li>\n<li>把获取到的appid赋值给app.js文件里的globalData全局对象；</li>\n<li>跳转到userConsole页面；</li>\n</ul>\n<p>保存之后，右键点击index.js文件，选择<strong>云函数增量上传:（更新文件）</strong>，更新login云函数，</p>\n<p>打开<strong>云开发控制台</strong>–<strong>云函数</strong>–<strong>日志</strong>，<strong>按函数名筛选</strong>，选择login云函数，可以看到云函数被调用的日志记录，我们可以在日志里发现：</p>\n<ul>\n<li><strong>event对象</strong>包含程序用户的 openid 和小程序的 appid，而openid就相当于用户的身份证，我们可以根据openid获取到用户的昵称、头像等信息（后面会说明）；</li>\n<li>而<strong>context对象</strong>则是云函数的调用信息和运行状态。</li>\n<li>在<strong>返回结果</strong>里我们可以看到return返回的数据</li>\n</ul>\n<blockquote>\n<p>云函数的打印日志会显示<strong>在云开发控制台的日志里面</strong>，这一点非常重要，要多加利用。只要是打印日志，无论是显示在开发者工具控制台还是显示在云开发控制台的就没有不重要的。</p>\n</blockquote>\n<p><strong>getWXContext()</strong></p>\n<p>getWXContext()API是云开发服务端的工具类API，会返回小程序用户的openid、小程序appid、小程序用户的unionid等。说这么多不如直接打印，在下面添加一行打印信息：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> wxContext <span class=\"token operator\">=</span> cloud<span class=\"token punctuation\">.</span><span class=\"token function\">getWXContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getWXContext返回的结果'</span><span class=\"token punctuation\">,</span>wxContext<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/utils/getWXContext.html\">getWXContext()</a></p>\n<p><strong>eturn</strong></p>\n<p>return语句是终止函数的执行，并返回一个指定的值给<strong>函数调用者</strong>。</p>\n<h4 id=\"新建云函数\"><a href=\"#新建云函数\" class=\"headerlink\" title=\"新建云函数\"></a>新建云函数</h4><h4 id=\"体验上传图片\"><a href=\"#体验上传图片\" class=\"headerlink\" title=\"体验上传图片\"></a>体验上传图片</h4><p><strong>上传图片到云存储</strong></p>\n<h4 id=\"体验云调用之服务端调用\"><a href=\"#体验云调用之服务端调用\" class=\"headerlink\" title=\"体验云调用之服务端调用\"></a>体验云调用之服务端调用</h4><h4 id=\"体验前端操作数据库\"><a href=\"#体验前端操作数据库\" class=\"headerlink\" title=\"体验前端操作数据库\"></a>体验前端操作数据库</h4><p><strong>前端操作数据库的页面逻辑</strong></p>\n<p>以上的函数是在小程序的前端页面来操作数据库，点击开发者工具模拟器云开发QuickStart里的前端操作数据库，</p>\n<ul>\n<li>在第1步（数据库指引有标注），我们会获取到用户的openid，也就是说你没有获取到openid是没法通过小程序的前端来操作数据库的哦</li>\n<li>第2步，需要我们在<strong>云开发控制台</strong>里的<strong>数据库管理页</strong>创建一个<strong>counters</strong>的集合（不需添加数据）；</li>\n<li>第3步，点击按钮页面的按钮“<strong>新增记录</strong>”（按钮就在这个页面的第4条与第5条之间，看起来不是那么明显），这时会调用 onAdd方法，往<strong>counters集合</strong>新增一个记录（之前手动添加有木有很辛苦？），我们可以去云开发控制台的<strong>数据库管理页</strong>查看一下counters集合是不是有了一条记录；大家可以多点击几下<strong>新增记录</strong>按钮，然后去云开发控制台看数据库又有什么变化。也就是小程序前端页面通过 onAdd方法，在数据库新增了记录。</li>\n<li>第4步，点击按钮<strong>查询记录</strong>，这时调用的是 onQuery方法就能在小程序里<strong>获取到</strong>第3步我们存储到数据库里的数据啦</li>\n<li>第5步，点击计数器按钮+号和-号，可以更新count的值，点击+号按钮会调用 onCounterInc方法，而点击-号 onCounterDec方法，比如我们点击加号到7，再去<strong>数据库管理页</strong>查看最新的一条记录（也就是最后一条），它的count由原来的1更新到了7（<strong>先点刷新按钮</strong>），我们再点击-号按钮到5，再来数据库管理页查看有什么变化变化（<strong>先点刷新按钮</strong>）</li>\n<li>第6步，点击<strong>删除记录</strong>按钮，会调用 onRemove方法，这时会删掉数据库里最新的记录（也就是第5步里的那一条记录）。</li>\n</ul>\n<p>通过实战我们了解到，databaseGuide.js文件里的 onAdd、 onQuery、 onCounterInc、 onCounterDec、 onRemove可以实现小程序的前端页面来操作数据库。</p>\n<blockquote>\n<p>在前面JavaScript的章节里我们了解到数据以及数据的存储是非常重要的，而有了数据库，用函数生成的数据能够比缓存存储的更加持久，而且在上面我们实现了对数据进行增(添加)、删(删除)、改(修改、更新)、查(查询并渲染到页面)，不仅如此，缓存的容量也比较有限，最多不过10M，而数据库可以存几百G以上，可见它的重要性。</p>\n</blockquote>\n<p>当新建了并配置了云函数根目录为cloudfunctions文件夹之后，云函数根目录里并没有云函数，我们可以右键点击云函数根目录cloudfunctions文件夹选择<strong>同步云函数列表</strong>，可以把所有云端的云函数列表都列举出来（这只是列举了列表），而要修改云函数里面的内容，我们可以右键点击其中的一个云函数目录选择<strong>下载云函数</strong>即可。</p>\n<p>除此之外，我们需要小程序的app.js的生命周期函数onLaunch里使用wx.cloud.init()来初始化云开发能力：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">onLaunch</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请使用 2.2.3 或以上的基础库以使用云能力'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      env<span class=\"token operator\">:</span> <span class=\"token string\">'你的环境ID'</span><span class=\"token punctuation\">,</span>\n      traceUser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>云开发能力全局只需要初始化一次即可，这里的traceUser属性设置为true，会将用户访问记录到用户管理中，在云开发控制台的<strong>运营分析</strong>—<strong>用户访问</strong>里可以看到访问记录。</p>\n<h4 id=\"基础库与wx-cloud\"><a href=\"#基础库与wx-cloud\" class=\"headerlink\" title=\"基础库与wx.cloud\"></a>基础库与wx.cloud</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">CloudID<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//用于云调用获取开放数据</span>\ncallFunction<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//调用云函数</span>\ndatabase<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//获取数据库的引用</span>\ndeleteFile<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//从云存储空间删除文件</span>\ndownloadFile<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//从云存储空间下载文件</span>\ngetTempFileURL<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//用云文件 ID 换取真实链接</span>\ninit<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//初始化云开发能力</span>\nuploadFile<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//上传文件至云存储空间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"云开发能力\"><a href=\"#云开发能力\" class=\"headerlink\" title=\"云开发能力\"></a>云开发能力</h1><p>通过云开发的能力进行调用云函数、上传图片、操作数据库以及使用小程序的一些开放接口，下面来进一步了解和使用云开发能力，并加强对<strong>云端测试</strong>、<strong>本地调试</strong>以及<strong>本地Console日志打印</strong>，<strong>云端日志打印</strong>的理解。</p>\n<h4 id=\"本地调试与云端测试\"><a href=\"#本地调试与云端测试\" class=\"headerlink\" title=\"本地调试与云端测试\"></a>本地调试与云端测试</h4><p><strong>第一步：新建云函数</strong></p>\n<p><strong>第二步：本地调试云函数是否正确</strong></p>\n<p><strong>第三步：云端测试云函数是否正确</strong></p>\n<h4 id=\"小程序端与服务端\"><a href=\"#小程序端与服务端\" class=\"headerlink\" title=\"小程序端与服务端\"></a>小程序端与服务端</h4><p><strong>小程序端与云端的初始化</strong></p>\n<p>小程序默认可以创建两个环境，这两个环境都有云函数配置、数据库、云存储且独立隔离，开发上会存在两个环境切换的情况（一个用于生产环境，一个用于测试环境），而<strong>区别这两个环境的就是它们的环境ID</strong>，小程序端与云端的初始化时要注意。</p>\n<p>云函数中的API调用的环境也可以使用初始化来设置。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">cloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  env<span class=\"token operator\">:</span> cloud<span class=\"token punctuation\">.</span><span class=\"token constant\">DYNAMIC_CURRENT_ENV</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>cloud.DYNAMIC_CURRENT_ENV</strong>设置 API 默认环境等于当前所在环境<strong>。</strong>建议所有的云函数都使用以上方式来初始化，也就是配置env的值为cloud.DYNAMIC_CURRENT_ENV或使用你的环境ID，不要为空**。</p>\n<p><strong>关于wx-server-sdk</strong></p>\n<p>每一个云函数都会用到wx-server-sdk这个Node包，而要使用这个包都需要有Nodejs环境，小程序端的本地需要我们自己下载Nodejs（前面已下载），而云端则自带Nodejs环境。</p>\n<p><strong>async与await</strong></p>\n<p>在wx-server-sdk中不再兼容success、fail、complete回调，只会返回Promise。在云函数中也经常会需要处理一些异步操作，在异步操作完成后再返回结果给到调用方，我们可以通过在云函数中返回一个 Promise 的方法来实现。Promise表示异步操作返回的结果。在新建的云函数里会看到下面这样的一个语句（有 async）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>async表示函数里有异步操作，async函数的返回值是一个 Promise 对象。在后面还会遇到 await，表示紧跟在它后面的表达式需要等待结果；以及promise对象的<strong>then()方法</strong>（有点类似于success回调函数），和<strong>catch()方法</strong>（有点类似于fail回调函数）</p>\n<blockquote>\n<p><strong>云函数的注意事项</strong></p>\n<ul>\n<li>在云函数部署并上传到云端之后，更新里面的文件比如index.js、config.json，建议右键点击更新好的文件（不是云函数目录）选择<strong>云函数增量上传：更新文件</strong>，<strong>不建议通过上传并部署所有文件的方式</strong>，否则在几分钟内会出现云函数调用失败的情况；</li>\n<li>删除一个云函数之后，<strong>不建议再新建一个同名的云函数并上传部署</strong>，否则在十多分钟内会出现云函数调用失败的情况，建议换一个云函数名，比如login换成user，在小程序端使用 wx.cloud.callFunction({name: ‘’})调用云函数时把name的值换成user就可以了</li>\n<li>调用云函数时，我们还可以在开发者工具调试面板的NetWork标签查看调用云函数的情况。</li>\n</ul>\n</blockquote>\n<h4 id=\"获取用户信息和登录\"><a href=\"#获取用户信息和登录\" class=\"headerlink\" title=\"获取用户信息和登录\"></a>获取用户信息和登录</h4><blockquote>\n<p>使用open-type=”getUserInfo” 来获取用户信息的作用和 wx.getUserInfo API基本效果是一样的，区别在于wx.getUserInfo 这种方式最好是在用户允许获取公开信息（也就是res.authSetting[‘scope.userInfo’]的值为true）之后再调用，如果用户拒绝了授权就不会再有弹窗（除非用户删掉了你的小程序再使用），调用就会失败，而使用组件的方式是用户主动点击，用户即使拒绝了，再点击仍会弹出授权弹窗。所以推荐先使用组件来获取用户授权，然后再来使用wx.getUserInfo来获取用户信息。</p>\n</blockquote>\n<p><strong>通过button获取用户信息</strong></p>\n<p><strong>获取用户高清头像</strong></p>\n<p>我们发现获取到的头像不是很清晰，这是因为默认的头像大小为132<em>132（<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/UserInfo.html\">UserInfo用户头像说明</a>），如果把avatarUrl链接后面的132修改为0就能获取到640</em>640大小的头像了：</p>\n<p><strong>页面加载时就显示用户信息</strong></p>\n<p><strong>openid、用户信息与登录</strong></p>\n<p>尽管我们已经获取到了用户的头像、昵称等信息，但是这不能称之为真正意义的登录，只有获取到了用户身份的唯一ID也就是<strong>openid</strong>，我们才能把用户行为比如点赞、评论、发布文章、收藏等与用户挂钩，用户这些行为都与数据库有关，而<strong>能够确定点赞、评论、文章、收藏这些数据与用户关系的就是openid</strong>，也就是说<strong>只要获取到了openid就意味着用户已经登录</strong>，而获取用户信息（如头像、昵称）不过是一个附加服务，这两个是可以完全独立的。没有openid，我们也无法把用户信息给存储到数据库，也就没法让用户自定义用户信息。无论是用户行为，还是用户的信息，openid都是一个重要的桥梁。</p>\n<blockquote>\n<p>通过前面的login云函数，我们就已经可以获取到用户的openid。无需维护复杂的鉴权机制，即可获取天然可信任的用户登录态（openid），是云开发的一个重要优势。无论是云存储还是云数据库，openid都扮演着一个重要的角色。</p>\n</blockquote>\n<h4 id=\"小程序端上传图片到云存储\"><a href=\"#小程序端上传图片到云存储\" class=\"headerlink\" title=\"小程序端上传图片到云存储\"></a>小程序端上传图片到云存储</h4><p>要把图片上传到云存储，会使用到wx.cloud.uploadFile，<strong>这个API是小程序端的API</strong>，它是把<strong>本地资源也就是临时文件里的文件</strong>上传到云存储里。在前面《<strong>图片、缓存与文件</strong>》章节里我们已经了解到如何把图片上传到小程序的临时文件，而要把临时文件上传到云存储，则需要调用wx.cloud.uploadFile API。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html\">wx.cloud.uploadFile</a></p>\n<p>在wx.cloud.uploadFile技术文档里，可以看到要调用API，需要获取图片的<strong>filePath</strong>，在小程序里为临时文件的路径，也就是要把上传到小程序的临时文件路径赋值给它；还有一个<strong>cloudPath</strong>，这个为文件的云存储路径，这个是<strong>我们可以任意设置的</strong>。</p>\n<p><strong>文件名与后缀的处理</strong></p>\n<p>我们知道一个文件由<strong>文件名称</strong>和<strong>文件后缀</strong>构成，比如tcb.jpg和cloudbase.png，jpeg说明图片的格式是JPG格式，而png说明图片是PNG格式，文件名称相同<strong>且</strong>格式相同就是出现覆盖，如果我们随意更改了<strong>文件的后缀</strong>，大多数文件就会打不开。所以要把<strong>cloudPath云存储的路径</strong>需要我们把文件名和后缀给处理好。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cloudPath <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span> filePath<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.[^.]+?$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>给文件名加上时间戳和一个随机数，时间戳是以毫秒计算，而随机数是以1000内的正整数，除非1秒钟（1秒=1000毫秒）上传几十万张照片，不然文件名是不会重复的。</p>\n<blockquote>\n<p><strong>上传图片到云存储是无法直接获取到图片的下载地址的</strong></p>\n</blockquote>\n<p><strong>云存储的二级目录</strong></p>\n<p><strong>渲染云存储图片到组件</strong></p>\n<blockquote>\n<blockquote>\n<p>在云开发控制台的存储里，我们可以看到每张图片的详细信息都有<strong>上传者 Open ID</strong>，无论你是使用开发者工具在模拟器的小程序里上传还是预览在手机的小程序里上传，只要你用的是同一个微信账号，这个上传者openid都是一致的，<strong>云存储会自动记录上传者的openid</strong>。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"云函数上传图片到云存储\"><a href=\"#云函数上传图片到云存储\" class=\"headerlink\" title=\"云函数上传图片到云存储\"></a>云函数上传图片到云存储</h4><p>云开发不仅在小程序端可以上传文件到云存储，还可以通过云函数也就是云端上传图片到云存储（这里会涉及到一点Nodejs的知识）。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/storage/uploadFile.html\">uploadFile</a></p>\n<p>注意<strong>云函数上传图片的API属于服务端API，与wx.cloud.uploadFile是小程序端API不同</strong>。</p>\n<p>由于<strong>云端测试无法获取用户登陆态信息</strong>，所以我们不能在云端测试里把图片上传到云存储，需要在小程序端调用，使用开发者工具在login.wxml输入以下代码，也就是新建一个绑定uploadimg事件处理函数的button用于触发：</p>\n<blockquote>\n<p>注意，通过这种方式上传到云存储的图片，是<strong>没有上传者 Open ID</strong>的，在云存储里查看这张图片的详细信息，就可以了解到。</p>\n</blockquote>\n<h4 id=\"调用数据库\"><a href=\"#调用数据库\" class=\"headerlink\" title=\"调用数据库\"></a>调用数据库</h4><p><strong>数据库的导入</strong></p>\n<p>打开云开发控制台，在数据库里新建一个集合<strong>zhihu_daily</strong>，导入该json文件，导入时会有冲突模式选择，看下面的介绍，推荐大家使用upsert：</p>\n<ul>\n<li>Insert：总是插入新记录</li>\n<li>Upsert：如果记录存在则更新，否则插入新记录</li>\n</ul>\n<p>导入后，发现数据库自动给每一条数据（记录）都加了唯一的标识<strong>_id</strong>。</p>\n<p><strong>小程序端调用数据库</strong></p>\n<p>在小程序端调用数据库的方式很简单，我们可以把下面的代码写到一个事件处理函数里，然后点击组件触发事件处理函数来调用；也可以直接写到页面的生命周期函数里面；还可以把它写到app.js小程序的生命周期函数里面。</p>\n<p>使用开发者工具，将下面的代码写到login.js的onLoad函数里面，我们</p>\n<ul>\n<li>先使用<strong>wx.cloud.database()**获取</strong>数据库**的引用（相当于连接数据库）;</li>\n<li>再使用**db.collection()**获取集合的引用；</li>\n<li>再通过Collection.get来获取集合里的记录.</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>如果没有指定 limit，则默认最多取 20 条记录</p>\n</blockquote>\n<p><strong>云函数调用数据库</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cloud <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wx-server-sdk'</span><span class=\"token punctuation\">)</span>\ncloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  env<span class=\"token operator\">:</span> cloud<span class=\"token punctuation\">.</span><span class=\"token constant\">DYNAMIC_CURRENT_ENV</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> cloud<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>openid与数据库</strong></p>\n<p>在云开发控制台的数据库标签里，打开上一节内容里的counters集合，在这个集合里我们可以看到每条记录除了有_id字段以外，还有一个<strong>_openid字段</strong>用来标志每条记录的创建者（也就是小程序的用户）。</p>\n<p>我们可以自定义 _id（也就是给数据添加一个_id字段并填入任意值），但不可自定义和修改 _openid 。 _openid 是在文档创建时由系统根据小程序用户默认创建的，可以用来标识和定位文档。和云存储一样，数据库的记录也和openid有着紧密的联系。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gd4wn77wgjj31hc0u014r.jpg\" alt=\"2020-03-24 12-26-54屏幕截图.png\"></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"云开发快速入门\"><a href=\"#云开发快速入门\" class=\"headerlink\" title=\"云开发快速入门\"></a>云开发快速入门</h1><p>如果你想免费、快速的开发出一个完整的项目，用小程序的云开发可能是最好的选择。小程序的云开发所用到的主要是前端开发的知识。</p>\n<h4 id=\"技术文档：云开发官方文档\"><a href=\"#技术文档：云开发官方文档\" class=\"headerlink\" title=\"技术文档：云开发官方文档\"></a><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html\">云开发官方文档</a></h4><h4 id=\"开通云开发服务\"><a href=\"#开通云开发服务\" class=\"headerlink\" title=\"开通云开发服务\"></a>开通云开发服务</h4><h4 id=\"下载Nodejs\"><a href=\"#下载Nodejs\" class=\"headerlink\" title=\"下载Nodejs\"></a>下载Nodejs</h4><p><strong>NodeJS</strong>是在服务端运行JavaScript的运行环境，云开发所使用的服务端环境就是NodeJS。<strong>npm</strong>是Node包管理器，通过npm，我们可以非常方便的安装云开发所需要的依赖包。</p>\n<h4 id=\"部署并上传云函数\"><a href=\"#部署并上传云函数\" class=\"headerlink\" title=\"部署并上传云函数\"></a>部署并上传云函数</h4><p><strong>部署并上传云函数</strong></p>\n<p><strong>cloudfuntions文件夹</strong>图标里有朵小云，表示这就是<strong>云函数根目录</strong>。展开cloudfunctions，我们可以看到里面有login、openapi、callback、echo文件夹，这些就是<strong>云函数目录</strong>。而<strong>miniprogram文件夹</strong>则放置的是小程序的页面文件。</p>\n<blockquote>\n<p>cloudfunctions里放的是云函数，miniprogram放的是小程序的页面，这并不是一成不变的，也就是说你也可以修改这些文件夹的名称，这取决于项目配置文件project.config.json里的如下配置项：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"miniprogramRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"miniprogram/\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"cloudfunctionRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cloudfunctions/\"</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>但是你最好是让放小程序页面的文件夹以及放云函数的文件夹处于平级关系且都在项目的根目录下，便于管理。</p>\n</blockquote>\n<p><strong>上传所有云函数</strong></p>\n<p>接下来我们按照这样的流程把<strong>其他所有云函数</strong>（如openapi）都部署都上传，也就是要执行和上面相同的步骤，总结如下：</p>\n<ol>\n<li>右键云函数目录，选择在终端中打开，输入 npm install命令下载依赖文件；</li>\n<li>然后再右键云函数目录，点击“<strong>创建并部署：所有文件</strong>”</li>\n<li>在云开发控制台–云函数–<strong>云函数列表</strong>查看云函数是否部署成功。</li>\n</ol>\n<h4 id=\"npm包管理器与依赖模块\"><a href=\"#npm包管理器与依赖模块\" class=\"headerlink\" title=\"npm包管理器与依赖模块\"></a>npm包管理器与依赖模块</h4><p>npm install会下载云函数目录下的配置文件<strong>package.json</strong>里的<strong>dependencies</strong>，它表示的是当前云函数需要依赖的模块。package.json在哪里，就在哪里执行npm install，没有package.json，没有dependencies，就没法下载.</p>\n<p>执行npm install命令下载的依赖模块会放在<strong>node_modules</strong>文件夹里，</p>\n<h4 id=\"获取openid与云函数login\"><a href=\"#获取openid与云函数login\" class=\"headerlink\" title=\"获取openid与云函数login\"></a>获取openid与云函数login</h4><p>当我们把<strong>云函数login</strong>部署上传成功后，就可以在模拟器以及手机（需要重新点击<strong>预览</strong>图标并扫描二维码）里<strong>点击获取openid</strong>了。</p>\n<p><strong>点击获取openid</strong></p>\n<p>openid是小程序用户的唯一标识，也就是每一个小程序用户都有一个唯一的openid。点击“<strong>点击获取openid</strong>”，在<strong>用户管理指引</strong>页面如果显示“用户id获取成功”以及一串字母+数字，那么表示你login云函数部署并上传成功啦。<strong>如果获取openid失败，你则需要解决login云函数的部署上传，才能进行下面的步骤哦</strong>。</p>\n<p><strong>调用云函数的解读</strong></p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/functions/callFunction.html\">调用云函数wx.cloud.callFunction</a></p>\n<p>调用云函数的方法很简单，只需要填写云函数的名称name（这里为login），以及需要传递的参数（这里并没有上传参数），就可以进行调用。在success回调函数里添加以下代码<strong>打印res对象</strong>：</p>\n<p>再点击“<strong>点击获取openid</strong>”按钮，就能看到完整的res对象，res对象有三个参数：</p>\n<ul>\n<li><strong>requestID</strong>：云函数执行 ID，可用于在<strong>云开发控制台</strong>查找日志，打开云开发控制台–云函数–日志，可以在这里根据云函数函数名以及requestID来筛选查看云函数的调用日志（含返回结果）；</li>\n<li><strong>result：**</strong>云函数返回的结果**，login云函数返回的结果里包含appid、event对象，我们可以通过res.result.appid以及res.result.event访问它们；</li>\n<li>errMsg：显示云函数是否调用成功</li>\n</ul>\n<p>事件处理函数onGetOpenid调用云函数成功之后，干了三件事情：</p>\n<ul>\n<li>使用console.log打印openid，可以在点击按钮触发云函数在控制台看到该打印结果；</li>\n<li>把获取到的appid赋值给app.js文件里的globalData全局对象；</li>\n<li>跳转到userConsole页面；</li>\n</ul>\n<p>保存之后，右键点击index.js文件，选择<strong>云函数增量上传:（更新文件）</strong>，更新login云函数，</p>\n<p>打开<strong>云开发控制台</strong>–<strong>云函数</strong>–<strong>日志</strong>，<strong>按函数名筛选</strong>，选择login云函数，可以看到云函数被调用的日志记录，我们可以在日志里发现：</p>\n<ul>\n<li><strong>event对象</strong>包含程序用户的 openid 和小程序的 appid，而openid就相当于用户的身份证，我们可以根据openid获取到用户的昵称、头像等信息（后面会说明）；</li>\n<li>而<strong>context对象</strong>则是云函数的调用信息和运行状态。</li>\n<li>在<strong>返回结果</strong>里我们可以看到return返回的数据</li>\n</ul>\n<blockquote>\n<p>云函数的打印日志会显示<strong>在云开发控制台的日志里面</strong>，这一点非常重要，要多加利用。只要是打印日志，无论是显示在开发者工具控制台还是显示在云开发控制台的就没有不重要的。</p>\n</blockquote>\n<p><strong>getWXContext()</strong></p>\n<p>getWXContext()API是云开发服务端的工具类API，会返回小程序用户的openid、小程序appid、小程序用户的unionid等。说这么多不如直接打印，在下面添加一行打印信息：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> wxContext <span class=\"token operator\">=</span> cloud<span class=\"token punctuation\">.</span><span class=\"token function\">getWXContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getWXContext返回的结果'</span><span class=\"token punctuation\">,</span>wxContext<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/utils/getWXContext.html\">getWXContext()</a></p>\n<p><strong>eturn</strong></p>\n<p>return语句是终止函数的执行，并返回一个指定的值给<strong>函数调用者</strong>。</p>\n<h4 id=\"新建云函数\"><a href=\"#新建云函数\" class=\"headerlink\" title=\"新建云函数\"></a>新建云函数</h4><h4 id=\"体验上传图片\"><a href=\"#体验上传图片\" class=\"headerlink\" title=\"体验上传图片\"></a>体验上传图片</h4><p><strong>上传图片到云存储</strong></p>\n<h4 id=\"体验云调用之服务端调用\"><a href=\"#体验云调用之服务端调用\" class=\"headerlink\" title=\"体验云调用之服务端调用\"></a>体验云调用之服务端调用</h4><h4 id=\"体验前端操作数据库\"><a href=\"#体验前端操作数据库\" class=\"headerlink\" title=\"体验前端操作数据库\"></a>体验前端操作数据库</h4><p><strong>前端操作数据库的页面逻辑</strong></p>\n<p>以上的函数是在小程序的前端页面来操作数据库，点击开发者工具模拟器云开发QuickStart里的前端操作数据库，</p>\n<ul>\n<li>在第1步（数据库指引有标注），我们会获取到用户的openid，也就是说你没有获取到openid是没法通过小程序的前端来操作数据库的哦</li>\n<li>第2步，需要我们在<strong>云开发控制台</strong>里的<strong>数据库管理页</strong>创建一个<strong>counters</strong>的集合（不需添加数据）；</li>\n<li>第3步，点击按钮页面的按钮“<strong>新增记录</strong>”（按钮就在这个页面的第4条与第5条之间，看起来不是那么明显），这时会调用 onAdd方法，往<strong>counters集合</strong>新增一个记录（之前手动添加有木有很辛苦？），我们可以去云开发控制台的<strong>数据库管理页</strong>查看一下counters集合是不是有了一条记录；大家可以多点击几下<strong>新增记录</strong>按钮，然后去云开发控制台看数据库又有什么变化。也就是小程序前端页面通过 onAdd方法，在数据库新增了记录。</li>\n<li>第4步，点击按钮<strong>查询记录</strong>，这时调用的是 onQuery方法就能在小程序里<strong>获取到</strong>第3步我们存储到数据库里的数据啦</li>\n<li>第5步，点击计数器按钮+号和-号，可以更新count的值，点击+号按钮会调用 onCounterInc方法，而点击-号 onCounterDec方法，比如我们点击加号到7，再去<strong>数据库管理页</strong>查看最新的一条记录（也就是最后一条），它的count由原来的1更新到了7（<strong>先点刷新按钮</strong>），我们再点击-号按钮到5，再来数据库管理页查看有什么变化变化（<strong>先点刷新按钮</strong>）</li>\n<li>第6步，点击<strong>删除记录</strong>按钮，会调用 onRemove方法，这时会删掉数据库里最新的记录（也就是第5步里的那一条记录）。</li>\n</ul>\n<p>通过实战我们了解到，databaseGuide.js文件里的 onAdd、 onQuery、 onCounterInc、 onCounterDec、 onRemove可以实现小程序的前端页面来操作数据库。</p>\n<blockquote>\n<p>在前面JavaScript的章节里我们了解到数据以及数据的存储是非常重要的，而有了数据库，用函数生成的数据能够比缓存存储的更加持久，而且在上面我们实现了对数据进行增(添加)、删(删除)、改(修改、更新)、查(查询并渲染到页面)，不仅如此，缓存的容量也比较有限，最多不过10M，而数据库可以存几百G以上，可见它的重要性。</p>\n</blockquote>\n<p>当新建了并配置了云函数根目录为cloudfunctions文件夹之后，云函数根目录里并没有云函数，我们可以右键点击云函数根目录cloudfunctions文件夹选择<strong>同步云函数列表</strong>，可以把所有云端的云函数列表都列举出来（这只是列举了列表），而要修改云函数里面的内容，我们可以右键点击其中的一个云函数目录选择<strong>下载云函数</strong>即可。</p>\n<p>除此之外，我们需要小程序的app.js的生命周期函数onLaunch里使用wx.cloud.init()来初始化云开发能力：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">onLaunch</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请使用 2.2.3 或以上的基础库以使用云能力'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      env<span class=\"token operator\">:</span> <span class=\"token string\">'你的环境ID'</span><span class=\"token punctuation\">,</span>\n      traceUser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>云开发能力全局只需要初始化一次即可，这里的traceUser属性设置为true，会将用户访问记录到用户管理中，在云开发控制台的<strong>运营分析</strong>—<strong>用户访问</strong>里可以看到访问记录。</p>\n<h4 id=\"基础库与wx-cloud\"><a href=\"#基础库与wx-cloud\" class=\"headerlink\" title=\"基础库与wx.cloud\"></a>基础库与wx.cloud</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">CloudID<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//用于云调用获取开放数据</span>\ncallFunction<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//调用云函数</span>\ndatabase<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//获取数据库的引用</span>\ndeleteFile<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//从云存储空间删除文件</span>\ndownloadFile<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//从云存储空间下载文件</span>\ngetTempFileURL<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//用云文件 ID 换取真实链接</span>\ninit<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//初始化云开发能力</span>\nuploadFile<span class=\"token operator\">:</span> <span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//上传文件至云存储空间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"云开发能力\"><a href=\"#云开发能力\" class=\"headerlink\" title=\"云开发能力\"></a>云开发能力</h1><p>通过云开发的能力进行调用云函数、上传图片、操作数据库以及使用小程序的一些开放接口，下面来进一步了解和使用云开发能力，并加强对<strong>云端测试</strong>、<strong>本地调试</strong>以及<strong>本地Console日志打印</strong>，<strong>云端日志打印</strong>的理解。</p>\n<h4 id=\"本地调试与云端测试\"><a href=\"#本地调试与云端测试\" class=\"headerlink\" title=\"本地调试与云端测试\"></a>本地调试与云端测试</h4><p><strong>第一步：新建云函数</strong></p>\n<p><strong>第二步：本地调试云函数是否正确</strong></p>\n<p><strong>第三步：云端测试云函数是否正确</strong></p>\n<h4 id=\"小程序端与服务端\"><a href=\"#小程序端与服务端\" class=\"headerlink\" title=\"小程序端与服务端\"></a>小程序端与服务端</h4><p><strong>小程序端与云端的初始化</strong></p>\n<p>小程序默认可以创建两个环境，这两个环境都有云函数配置、数据库、云存储且独立隔离，开发上会存在两个环境切换的情况（一个用于生产环境，一个用于测试环境），而<strong>区别这两个环境的就是它们的环境ID</strong>，小程序端与云端的初始化时要注意。</p>\n<p>云函数中的API调用的环境也可以使用初始化来设置。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">cloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  env<span class=\"token operator\">:</span> cloud<span class=\"token punctuation\">.</span><span class=\"token constant\">DYNAMIC_CURRENT_ENV</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>cloud.DYNAMIC_CURRENT_ENV</strong>设置 API 默认环境等于当前所在环境<strong>。</strong>建议所有的云函数都使用以上方式来初始化，也就是配置env的值为cloud.DYNAMIC_CURRENT_ENV或使用你的环境ID，不要为空**。</p>\n<p><strong>关于wx-server-sdk</strong></p>\n<p>每一个云函数都会用到wx-server-sdk这个Node包，而要使用这个包都需要有Nodejs环境，小程序端的本地需要我们自己下载Nodejs（前面已下载），而云端则自带Nodejs环境。</p>\n<p><strong>async与await</strong></p>\n<p>在wx-server-sdk中不再兼容success、fail、complete回调，只会返回Promise。在云函数中也经常会需要处理一些异步操作，在异步操作完成后再返回结果给到调用方，我们可以通过在云函数中返回一个 Promise 的方法来实现。Promise表示异步操作返回的结果。在新建的云函数里会看到下面这样的一个语句（有 async）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>async表示函数里有异步操作，async函数的返回值是一个 Promise 对象。在后面还会遇到 await，表示紧跟在它后面的表达式需要等待结果；以及promise对象的<strong>then()方法</strong>（有点类似于success回调函数），和<strong>catch()方法</strong>（有点类似于fail回调函数）</p>\n<blockquote>\n<p><strong>云函数的注意事项</strong></p>\n<ul>\n<li>在云函数部署并上传到云端之后，更新里面的文件比如index.js、config.json，建议右键点击更新好的文件（不是云函数目录）选择<strong>云函数增量上传：更新文件</strong>，<strong>不建议通过上传并部署所有文件的方式</strong>，否则在几分钟内会出现云函数调用失败的情况；</li>\n<li>删除一个云函数之后，<strong>不建议再新建一个同名的云函数并上传部署</strong>，否则在十多分钟内会出现云函数调用失败的情况，建议换一个云函数名，比如login换成user，在小程序端使用 wx.cloud.callFunction({name: ‘’})调用云函数时把name的值换成user就可以了</li>\n<li>调用云函数时，我们还可以在开发者工具调试面板的NetWork标签查看调用云函数的情况。</li>\n</ul>\n</blockquote>\n<h4 id=\"获取用户信息和登录\"><a href=\"#获取用户信息和登录\" class=\"headerlink\" title=\"获取用户信息和登录\"></a>获取用户信息和登录</h4><blockquote>\n<p>使用open-type=”getUserInfo” 来获取用户信息的作用和 wx.getUserInfo API基本效果是一样的，区别在于wx.getUserInfo 这种方式最好是在用户允许获取公开信息（也就是res.authSetting[‘scope.userInfo’]的值为true）之后再调用，如果用户拒绝了授权就不会再有弹窗（除非用户删掉了你的小程序再使用），调用就会失败，而使用组件的方式是用户主动点击，用户即使拒绝了，再点击仍会弹出授权弹窗。所以推荐先使用组件来获取用户授权，然后再来使用wx.getUserInfo来获取用户信息。</p>\n</blockquote>\n<p><strong>通过button获取用户信息</strong></p>\n<p><strong>获取用户高清头像</strong></p>\n<p>我们发现获取到的头像不是很清晰，这是因为默认的头像大小为132<em>132（<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/UserInfo.html\">UserInfo用户头像说明</a>），如果把avatarUrl链接后面的132修改为0就能获取到640</em>640大小的头像了：</p>\n<p><strong>页面加载时就显示用户信息</strong></p>\n<p><strong>openid、用户信息与登录</strong></p>\n<p>尽管我们已经获取到了用户的头像、昵称等信息，但是这不能称之为真正意义的登录，只有获取到了用户身份的唯一ID也就是<strong>openid</strong>，我们才能把用户行为比如点赞、评论、发布文章、收藏等与用户挂钩，用户这些行为都与数据库有关，而<strong>能够确定点赞、评论、文章、收藏这些数据与用户关系的就是openid</strong>，也就是说<strong>只要获取到了openid就意味着用户已经登录</strong>，而获取用户信息（如头像、昵称）不过是一个附加服务，这两个是可以完全独立的。没有openid，我们也无法把用户信息给存储到数据库，也就没法让用户自定义用户信息。无论是用户行为，还是用户的信息，openid都是一个重要的桥梁。</p>\n<blockquote>\n<p>通过前面的login云函数，我们就已经可以获取到用户的openid。无需维护复杂的鉴权机制，即可获取天然可信任的用户登录态（openid），是云开发的一个重要优势。无论是云存储还是云数据库，openid都扮演着一个重要的角色。</p>\n</blockquote>\n<h4 id=\"小程序端上传图片到云存储\"><a href=\"#小程序端上传图片到云存储\" class=\"headerlink\" title=\"小程序端上传图片到云存储\"></a>小程序端上传图片到云存储</h4><p>要把图片上传到云存储，会使用到wx.cloud.uploadFile，<strong>这个API是小程序端的API</strong>，它是把<strong>本地资源也就是临时文件里的文件</strong>上传到云存储里。在前面《<strong>图片、缓存与文件</strong>》章节里我们已经了解到如何把图片上传到小程序的临时文件，而要把临时文件上传到云存储，则需要调用wx.cloud.uploadFile API。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html\">wx.cloud.uploadFile</a></p>\n<p>在wx.cloud.uploadFile技术文档里，可以看到要调用API，需要获取图片的<strong>filePath</strong>，在小程序里为临时文件的路径，也就是要把上传到小程序的临时文件路径赋值给它；还有一个<strong>cloudPath</strong>，这个为文件的云存储路径，这个是<strong>我们可以任意设置的</strong>。</p>\n<p><strong>文件名与后缀的处理</strong></p>\n<p>我们知道一个文件由<strong>文件名称</strong>和<strong>文件后缀</strong>构成，比如tcb.jpg和cloudbase.png，jpeg说明图片的格式是JPG格式，而png说明图片是PNG格式，文件名称相同<strong>且</strong>格式相同就是出现覆盖，如果我们随意更改了<strong>文件的后缀</strong>，大多数文件就会打不开。所以要把<strong>cloudPath云存储的路径</strong>需要我们把文件名和后缀给处理好。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cloudPath <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span> filePath<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.[^.]+?$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>给文件名加上时间戳和一个随机数，时间戳是以毫秒计算，而随机数是以1000内的正整数，除非1秒钟（1秒=1000毫秒）上传几十万张照片，不然文件名是不会重复的。</p>\n<blockquote>\n<p><strong>上传图片到云存储是无法直接获取到图片的下载地址的</strong></p>\n</blockquote>\n<p><strong>云存储的二级目录</strong></p>\n<p><strong>渲染云存储图片到组件</strong></p>\n<blockquote>\n<blockquote>\n<p>在云开发控制台的存储里，我们可以看到每张图片的详细信息都有<strong>上传者 Open ID</strong>，无论你是使用开发者工具在模拟器的小程序里上传还是预览在手机的小程序里上传，只要你用的是同一个微信账号，这个上传者openid都是一致的，<strong>云存储会自动记录上传者的openid</strong>。</p>\n</blockquote>\n<blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"云函数上传图片到云存储\"><a href=\"#云函数上传图片到云存储\" class=\"headerlink\" title=\"云函数上传图片到云存储\"></a>云函数上传图片到云存储</h4><p>云开发不仅在小程序端可以上传文件到云存储，还可以通过云函数也就是云端上传图片到云存储（这里会涉及到一点Nodejs的知识）。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-server-api/storage/uploadFile.html\">uploadFile</a></p>\n<p>注意<strong>云函数上传图片的API属于服务端API，与wx.cloud.uploadFile是小程序端API不同</strong>。</p>\n<p>由于<strong>云端测试无法获取用户登陆态信息</strong>，所以我们不能在云端测试里把图片上传到云存储，需要在小程序端调用，使用开发者工具在login.wxml输入以下代码，也就是新建一个绑定uploadimg事件处理函数的button用于触发：</p>\n<blockquote>\n<p>注意，通过这种方式上传到云存储的图片，是<strong>没有上传者 Open ID</strong>的，在云存储里查看这张图片的详细信息，就可以了解到。</p>\n</blockquote>\n<h4 id=\"调用数据库\"><a href=\"#调用数据库\" class=\"headerlink\" title=\"调用数据库\"></a>调用数据库</h4><p><strong>数据库的导入</strong></p>\n<p>打开云开发控制台，在数据库里新建一个集合<strong>zhihu_daily</strong>，导入该json文件，导入时会有冲突模式选择，看下面的介绍，推荐大家使用upsert：</p>\n<ul>\n<li>Insert：总是插入新记录</li>\n<li>Upsert：如果记录存在则更新，否则插入新记录</li>\n</ul>\n<p>导入后，发现数据库自动给每一条数据（记录）都加了唯一的标识<strong>_id</strong>。</p>\n<p><strong>小程序端调用数据库</strong></p>\n<p>在小程序端调用数据库的方式很简单，我们可以把下面的代码写到一个事件处理函数里，然后点击组件触发事件处理函数来调用；也可以直接写到页面的生命周期函数里面；还可以把它写到app.js小程序的生命周期函数里面。</p>\n<p>使用开发者工具，将下面的代码写到login.js的onLoad函数里面，我们</p>\n<ul>\n<li>先使用<strong>wx.cloud.database()**获取</strong>数据库**的引用（相当于连接数据库）;</li>\n<li>再使用**db.collection()**获取集合的引用；</li>\n<li>再通过Collection.get来获取集合里的记录.</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>如果没有指定 limit，则默认最多取 20 条记录</p>\n</blockquote>\n<p><strong>云函数调用数据库</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cloud <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wx-server-sdk'</span><span class=\"token punctuation\">)</span>\ncloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  env<span class=\"token operator\">:</span> cloud<span class=\"token punctuation\">.</span><span class=\"token constant\">DYNAMIC_CURRENT_ENV</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> cloud<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhihu_daily'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>openid与数据库</strong></p>\n<p>在云开发控制台的数据库标签里，打开上一节内容里的counters集合，在这个集合里我们可以看到每条记录除了有_id字段以外，还有一个<strong>_openid字段</strong>用来标志每条记录的创建者（也就是小程序的用户）。</p>\n<p>我们可以自定义 _id（也就是给数据添加一个_id字段并填入任意值），但不可自定义和修改 _openid 。 _openid 是在文档创建时由系统根据小程序用户默认创建的，可以用来标识和定位文档。和云存储一样，数据库的记录也和openid有着紧密的联系。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gd4wn77wgjj31hc0u014r.jpg\" alt=\"2020-03-24 12-26-54屏幕截图.png\"></p>\n"},{"title":"记一次小程序引入Vant组件","top":false,"date":"2020-06-06T08:11:05.000Z","_content":"# Vant组件\n> https://youzan.github.io/vant-weapp/#/intro\n## 引入vant\n1. 通过 npm 安装\n> 需要注意的是 package.json 和 node_modules 必须在 miniprogram 目录下， 若miniprogram里没有package.json,需执行`npm init`\n\n`npm i @vant/weapp -S --production`\n2. 构建 npm 包\n\n    打开微信开发者工具，点击 工具 -> 构建 npm，并勾选 使用 npm 模块 选项，构建完成后，即可引入组件\n3. 修改 app.json\n 将 app.json 中的 \"style\": \"v2\" 去除，小程序的新版基础组件强行加上了许多样式，难以去除，不关闭将造成部分组件样式混乱。\n\n # 正确引入toast\njson页面\n`\"usingComponents\": {\n  \"van-toast\": \"@vant/weapp/toast/index\"\n}`\n\njs页面\n `import Toast from '../../miniprogram_npm/@vant/weapp/toast/toast'\n`\n\nwxml页面\n`<van-toast id=\"custom-selector\" />`","source":"_posts/记一次小程序引入Vant组件.md","raw":"---\ntitle: 记一次小程序引入Vant组件\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - B站\ntop: false\ndate: 2020-06-06 16:11:05\n---\n# Vant组件\n> https://youzan.github.io/vant-weapp/#/intro\n## 引入vant\n1. 通过 npm 安装\n> 需要注意的是 package.json 和 node_modules 必须在 miniprogram 目录下， 若miniprogram里没有package.json,需执行`npm init`\n\n`npm i @vant/weapp -S --production`\n2. 构建 npm 包\n\n    打开微信开发者工具，点击 工具 -> 构建 npm，并勾选 使用 npm 模块 选项，构建完成后，即可引入组件\n3. 修改 app.json\n 将 app.json 中的 \"style\": \"v2\" 去除，小程序的新版基础组件强行加上了许多样式，难以去除，不关闭将造成部分组件样式混乱。\n\n # 正确引入toast\njson页面\n`\"usingComponents\": {\n  \"van-toast\": \"@vant/weapp/toast/index\"\n}`\n\njs页面\n `import Toast from '../../miniprogram_npm/@vant/weapp/toast/toast'\n`\n\nwxml页面\n`<van-toast id=\"custom-selector\" />`","slug":"记一次小程序引入Vant组件","published":1,"updated":"2022-08-25T14:12:05.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39e005f12mj0qdfcx69","content":"<h1 id=\"Vant组件\"><a href=\"#Vant组件\" class=\"headerlink\" title=\"Vant组件\"></a>Vant组件</h1><blockquote>\n<p><a href=\"https://youzan.github.io/vant-weapp/#/intro\">https://youzan.github.io/vant-weapp/#/intro</a></p>\n</blockquote>\n<h2 id=\"引入vant\"><a href=\"#引入vant\" class=\"headerlink\" title=\"引入vant\"></a>引入vant</h2><ol>\n<li>通过 npm 安装<blockquote>\n<p>需要注意的是 package.json 和 node_modules 必须在 miniprogram 目录下， 若miniprogram里没有package.json,需执行<code>npm init</code></p>\n</blockquote>\n</li>\n</ol>\n<p><code>npm i @vant/weapp -S --production</code><br>2. 构建 npm 包</p>\n<pre><code>打开微信开发者工具，点击 工具 -&gt; 构建 npm，并勾选 使用 npm 模块 选项，构建完成后，即可引入组件</code></pre>\n<ol start=\"3\">\n<li><p>修改 app.json<br>将 app.json 中的 “style”: “v2” 去除，小程序的新版基础组件强行加上了许多样式，难以去除，不关闭将造成部分组件样式混乱。</p>\n<h1 id=\"正确引入toast\"><a href=\"#正确引入toast\" class=\"headerlink\" title=\"正确引入toast\"></a>正确引入toast</h1><p>json页面<br><code>\"usingComponents\": { \"van-toast\": \"@vant/weapp/toast/index\" }</code></p>\n</li>\n</ol>\n<p>js页面<br> <code>import Toast from '../../miniprogram_npm/@vant/weapp/toast/toast' </code></p>\n<p>wxml页面<br><code>&lt;van-toast id=\"custom-selector\" /&gt;</code></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Vant组件\"><a href=\"#Vant组件\" class=\"headerlink\" title=\"Vant组件\"></a>Vant组件</h1><blockquote>\n<p><a href=\"https://youzan.github.io/vant-weapp/#/intro\">https://youzan.github.io/vant-weapp/#/intro</a></p>\n</blockquote>\n<h2 id=\"引入vant\"><a href=\"#引入vant\" class=\"headerlink\" title=\"引入vant\"></a>引入vant</h2><ol>\n<li>通过 npm 安装<blockquote>\n<p>需要注意的是 package.json 和 node_modules 必须在 miniprogram 目录下， 若miniprogram里没有package.json,需执行<code>npm init</code></p>\n</blockquote>\n</li>\n</ol>\n<p><code>npm i @vant/weapp -S --production</code><br>2. 构建 npm 包</p>\n<pre><code>打开微信开发者工具，点击 工具 -&gt; 构建 npm，并勾选 使用 npm 模块 选项，构建完成后，即可引入组件</code></pre>\n<ol start=\"3\">\n<li><p>修改 app.json<br>将 app.json 中的 “style”: “v2” 去除，小程序的新版基础组件强行加上了许多样式，难以去除，不关闭将造成部分组件样式混乱。</p>\n<h1 id=\"正确引入toast\"><a href=\"#正确引入toast\" class=\"headerlink\" title=\"正确引入toast\"></a>正确引入toast</h1><p>json页面<br><code>&quot;usingComponents&quot;: &#123; &quot;van-toast&quot;: &quot;@vant/weapp/toast/index&quot; &#125;</code></p>\n</li>\n</ol>\n<p>js页面<br> <code>import Toast from &#39;../../miniprogram_npm/@vant/weapp/toast/toast&#39; </code></p>\n<p>wxml页面<br><code>&lt;van-toast id=&quot;custom-selector&quot; /&gt;</code></p>\n"},{"title":"进程线程协程","top":false,"date":"2020-05-21T14:47:45.000Z","_content":"\n# 进程 线程 协程 并发与并行 **同步与异步** 阻塞与非阻塞\n\n![进程、线程与协程](https://i.loli.net/2020/05/21/hDtAFyrIbxn89VX.jpg)\n\n## 进程\n\n> 进程是系统资源分配的最小单位, 系统由一个个进程(程序)组成,**进程的出现是为了更好的利用CPU资源使到并发成为可能。**\n> \n\n* 第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。\n\n* 第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行时），它才能成为一个活动的实体，我们称其为进程。\n\n进程是抢占式的争夺CPU运行自身,而CPU单核的情况下同一时间只能执行一个进程的代码,但是多进程的实现则是通过CPU飞快的切换不同进程,因此使得看上去就像是多个进程在同时进行.\n\n  > 通信问题:   由于进程间是隔离的,各自拥有自己的内存内存资源, *因此相对于线程比较安全*, 所以不同进程之间的数据只能通过 *IPC(Inter-Process Communication)* 进行通信共享.\n\n## 线程\n\n**线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能。**\n\n> - 线程属于进程\n> - 线程共享进程的内存地址空间\n> - 线程几乎不占有系统资源\n>   通信问题:  进程相当于一个容器,而线程而是运行在容器里面的,因此对于容器内的东西,线程是共同享有的,因此线程间的通信可以直接通过全局变量进行通信,但是由此带来的例如多个线程读写同一个地址变量的时候则将带来不可预期的后果,因此这时候引入了各种锁的作用,例如互斥锁等。\n\n假设，一个文本程序，需要接受键盘输入，将内容显示在屏幕上，还需要保存信息到硬盘中。若只有一个进程，势必造成同一时间只能干一样事的尴尬（当保存时，就不能通过键盘输入内容）。若有多个进程，每个进程负责一个任务，进程A负责接收键盘输入的任务，进程B负责将内容显示在屏幕上的任务，进程C负责保存内容到硬盘中的任务。这里进程A，B，C间的协作涉及到了进程通信问题，而且有共同都需要拥有的东西-------文本内容，不停的切换造成性能上的损失。若有一种机制，可以使任务A，B，C共享资源，这样上下文切换所需要保存和恢复的内容就少了，同时又可以减少通信所带来的性能损耗，那就好了。是的，这种机制就是线程。**线程共享进程的大部分资源，并参与CPU的调度, 当然线程自己也是拥有自己的资源的，例如，栈，寄存器等等。**  此时，进程同时也是线程的容器。线程也是有着自己的缺陷的，例如健壮性差，若一个线程挂掉了，整一个进程也挂掉了，这意味着其它线程也挂掉了，进程却没有这个问题，一个进程挂掉，另外的进程还是活着。\n\n- ***进程是系统分配资源的最小单位\\***\n- ***线程是CPU调度的最小单位\\***\n- *由于默认进程内只有一个线程,所以多核CPU处理多进程就像是一个进程一个核心*\n\n## 协程\n\n**协程通过在线程中实现调度，避免了陷入内核级别的上下文切换造成的性能损失，进而突破了线程在IO上的性能瓶颈。**\n\n> - 协程是属于线程的。协程程序是在线程里面跑的，因此协程又称微线程和纤程等\n> - 协程没有线程的上下文切换消耗。协程的调度切换是用户(程序员)手动切换的,因此更加灵活,因此又叫用户空间线程.\n> - 原子操作性。由于协程是用户调度的，所以不会出现执行一半的代码片段被强制中断了，因此无需原子操作锁。\n\n## 小结\n\n> 进程和线程的关系：\n>\n> * 一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程\n>\n> * 资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源\n>\n> * cpu分配给线程，即真正在cpu上运行的是线程\n>\n> * 线程是最小的执行单元，进程是最小的资源管理单元\n\n进程，线程，协程不断突破，更高效的处理阻塞，不断地提高CPU的利用率。但是并不是说，线程就一定比进程快，而协程就不一定不线程要快。具体还是要看应用场景。可以简单粗暴的把应用分为IO密集型应用以及CPU密集型应用。\n\n**多核CPU，CPU密集型应用**\n 此时多线程的效率是最高的，多线程可以使到全部CPU核心满载，又避免了协程间切换造成性能损失。当CPU密集型任务时，CPU一直在利用着，切换反而会造成性能损失，即便协程上下文切换消耗最小，但也还是有消耗的。\n\n**多核CPU，IO密集型应用**\n 此时采用多线程多协程效率最高，多线程可以使到全部CPU核心满载，而一个线程多协程，则更好的提高了CPU的利用率。\n\n**单核CPU，CPU密集型应用**\n 单进程效率是最高，此时单个进程已经使到CPU满载了。\n\n**单核CPU，IO密集型应用**\n 多协程，效率最高。例如，看了上面应该也是知道的了\n\n## 并发与并行\n\n![并行和并发](https://i.loli.net/2020/05/21/WDaPQO6CweJU5kb.png)\n\n### 并行\n\n并行就是指同一时刻有两个或两个以上的“工作单位”在同时执行，从硬件的角度上来看就是同一时刻有两条或两条以上的指令处于执行阶段。所以，多核是并行的前提，单线程永远无法达到并行状态。可以利用多线程和多进程到达并行状态。另外的，Python的多线程由于GIL的存在，对于Python来说无法通过多线程到达并行状态。\n\n**并行的动机**：用更多的CPU核心更快的完成任务. 就像一个团队, 一个脑袋不够用了, 一个团队来一起处理一个任务。\n\n### 并发\n\n对于并发的理解，要从两方面去理解，1.并发设计 2.并发执行。先说并发设计，当说一个程序是并发的，更多的是指这个程序采取了并发设计。\n\n**并发的动机**：在计算能力恒定的情况下处理更多的任务, 就像我们的大脑, 计算能力相对恒定, 要在一天中处理更多的问题, 我们就必须具备多任务的能力. 现实工作中有很多事情可能会中断你的当前任务, 处理这种多任务的能力就是你的并发能力。\n\n并发设计的标准：**使多个操作可以在重叠的时间段内进行** ，这里的重点在于**重叠的时间内**， 重叠时间可以理解为一段时间内。例如：**在时间1s秒内**,  具有IO操作的task1和task2都完成，这就可以说是并发执行。所以呢，单线程也是可以做到并发运行的。当然啦，并行肯定是并发的。一个程序能否并发执行，**取决于设计，也取决于部署方式**。例如, 当给程序开一个线程（协程是不开的），它不可能是并发的，因为在重叠时间内根本就没有两个task在运行。当一个程序被设计成完成一个任务再去完成下一个任务的时候，即便部署是多线程多协程的也是无法达到并发运行的。\n\n**并行与并发的关系**: **并发的设计使到并发执行成为可能，而并行是并发执行的其中一种模式**。\n\n## **同步与异步**\n同步和异步关注的是**消息通信机制**(synchronous communication/ asynchronous communication)\n所谓同步，就是在发出一个*调用*时，在没有得到结果之前，该*调用*就不返回。但是一旦调用返回，就得到返回值了。\n换句话说，就是由*调用者*主动等待这个*调用*的结果。\n\n而异步则是相反，***调用\\*在发出之后，这个调用就直接返回了，所以没有返回结果**。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在*调用*发出后，*被调用者*通过状态、通知来通知调用者，或通过回调函数处理这个调用。\n\n## 阻塞与非阻塞\n阻塞和非阻塞关注的是**程序在等待调用结果（消息，返回值）时的状态.**\n\n阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。\n非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。\n\n","source":"_posts/进程线程协程.md","raw":"---\ntitle: 进程线程协程\ntags:\n  - 操作系统\ncategories:\n  - 操作系统\ntop: false\ndate: 2020-05-21 22:47:45\n---\n\n# 进程 线程 协程 并发与并行 **同步与异步** 阻塞与非阻塞\n\n![进程、线程与协程](https://i.loli.net/2020/05/21/hDtAFyrIbxn89VX.jpg)\n\n## 进程\n\n> 进程是系统资源分配的最小单位, 系统由一个个进程(程序)组成,**进程的出现是为了更好的利用CPU资源使到并发成为可能。**\n> \n\n* 第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。\n\n* 第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行时），它才能成为一个活动的实体，我们称其为进程。\n\n进程是抢占式的争夺CPU运行自身,而CPU单核的情况下同一时间只能执行一个进程的代码,但是多进程的实现则是通过CPU飞快的切换不同进程,因此使得看上去就像是多个进程在同时进行.\n\n  > 通信问题:   由于进程间是隔离的,各自拥有自己的内存内存资源, *因此相对于线程比较安全*, 所以不同进程之间的数据只能通过 *IPC(Inter-Process Communication)* 进行通信共享.\n\n## 线程\n\n**线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能。**\n\n> - 线程属于进程\n> - 线程共享进程的内存地址空间\n> - 线程几乎不占有系统资源\n>   通信问题:  进程相当于一个容器,而线程而是运行在容器里面的,因此对于容器内的东西,线程是共同享有的,因此线程间的通信可以直接通过全局变量进行通信,但是由此带来的例如多个线程读写同一个地址变量的时候则将带来不可预期的后果,因此这时候引入了各种锁的作用,例如互斥锁等。\n\n假设，一个文本程序，需要接受键盘输入，将内容显示在屏幕上，还需要保存信息到硬盘中。若只有一个进程，势必造成同一时间只能干一样事的尴尬（当保存时，就不能通过键盘输入内容）。若有多个进程，每个进程负责一个任务，进程A负责接收键盘输入的任务，进程B负责将内容显示在屏幕上的任务，进程C负责保存内容到硬盘中的任务。这里进程A，B，C间的协作涉及到了进程通信问题，而且有共同都需要拥有的东西-------文本内容，不停的切换造成性能上的损失。若有一种机制，可以使任务A，B，C共享资源，这样上下文切换所需要保存和恢复的内容就少了，同时又可以减少通信所带来的性能损耗，那就好了。是的，这种机制就是线程。**线程共享进程的大部分资源，并参与CPU的调度, 当然线程自己也是拥有自己的资源的，例如，栈，寄存器等等。**  此时，进程同时也是线程的容器。线程也是有着自己的缺陷的，例如健壮性差，若一个线程挂掉了，整一个进程也挂掉了，这意味着其它线程也挂掉了，进程却没有这个问题，一个进程挂掉，另外的进程还是活着。\n\n- ***进程是系统分配资源的最小单位\\***\n- ***线程是CPU调度的最小单位\\***\n- *由于默认进程内只有一个线程,所以多核CPU处理多进程就像是一个进程一个核心*\n\n## 协程\n\n**协程通过在线程中实现调度，避免了陷入内核级别的上下文切换造成的性能损失，进而突破了线程在IO上的性能瓶颈。**\n\n> - 协程是属于线程的。协程程序是在线程里面跑的，因此协程又称微线程和纤程等\n> - 协程没有线程的上下文切换消耗。协程的调度切换是用户(程序员)手动切换的,因此更加灵活,因此又叫用户空间线程.\n> - 原子操作性。由于协程是用户调度的，所以不会出现执行一半的代码片段被强制中断了，因此无需原子操作锁。\n\n## 小结\n\n> 进程和线程的关系：\n>\n> * 一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程\n>\n> * 资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源\n>\n> * cpu分配给线程，即真正在cpu上运行的是线程\n>\n> * 线程是最小的执行单元，进程是最小的资源管理单元\n\n进程，线程，协程不断突破，更高效的处理阻塞，不断地提高CPU的利用率。但是并不是说，线程就一定比进程快，而协程就不一定不线程要快。具体还是要看应用场景。可以简单粗暴的把应用分为IO密集型应用以及CPU密集型应用。\n\n**多核CPU，CPU密集型应用**\n 此时多线程的效率是最高的，多线程可以使到全部CPU核心满载，又避免了协程间切换造成性能损失。当CPU密集型任务时，CPU一直在利用着，切换反而会造成性能损失，即便协程上下文切换消耗最小，但也还是有消耗的。\n\n**多核CPU，IO密集型应用**\n 此时采用多线程多协程效率最高，多线程可以使到全部CPU核心满载，而一个线程多协程，则更好的提高了CPU的利用率。\n\n**单核CPU，CPU密集型应用**\n 单进程效率是最高，此时单个进程已经使到CPU满载了。\n\n**单核CPU，IO密集型应用**\n 多协程，效率最高。例如，看了上面应该也是知道的了\n\n## 并发与并行\n\n![并行和并发](https://i.loli.net/2020/05/21/WDaPQO6CweJU5kb.png)\n\n### 并行\n\n并行就是指同一时刻有两个或两个以上的“工作单位”在同时执行，从硬件的角度上来看就是同一时刻有两条或两条以上的指令处于执行阶段。所以，多核是并行的前提，单线程永远无法达到并行状态。可以利用多线程和多进程到达并行状态。另外的，Python的多线程由于GIL的存在，对于Python来说无法通过多线程到达并行状态。\n\n**并行的动机**：用更多的CPU核心更快的完成任务. 就像一个团队, 一个脑袋不够用了, 一个团队来一起处理一个任务。\n\n### 并发\n\n对于并发的理解，要从两方面去理解，1.并发设计 2.并发执行。先说并发设计，当说一个程序是并发的，更多的是指这个程序采取了并发设计。\n\n**并发的动机**：在计算能力恒定的情况下处理更多的任务, 就像我们的大脑, 计算能力相对恒定, 要在一天中处理更多的问题, 我们就必须具备多任务的能力. 现实工作中有很多事情可能会中断你的当前任务, 处理这种多任务的能力就是你的并发能力。\n\n并发设计的标准：**使多个操作可以在重叠的时间段内进行** ，这里的重点在于**重叠的时间内**， 重叠时间可以理解为一段时间内。例如：**在时间1s秒内**,  具有IO操作的task1和task2都完成，这就可以说是并发执行。所以呢，单线程也是可以做到并发运行的。当然啦，并行肯定是并发的。一个程序能否并发执行，**取决于设计，也取决于部署方式**。例如, 当给程序开一个线程（协程是不开的），它不可能是并发的，因为在重叠时间内根本就没有两个task在运行。当一个程序被设计成完成一个任务再去完成下一个任务的时候，即便部署是多线程多协程的也是无法达到并发运行的。\n\n**并行与并发的关系**: **并发的设计使到并发执行成为可能，而并行是并发执行的其中一种模式**。\n\n## **同步与异步**\n同步和异步关注的是**消息通信机制**(synchronous communication/ asynchronous communication)\n所谓同步，就是在发出一个*调用*时，在没有得到结果之前，该*调用*就不返回。但是一旦调用返回，就得到返回值了。\n换句话说，就是由*调用者*主动等待这个*调用*的结果。\n\n而异步则是相反，***调用\\*在发出之后，这个调用就直接返回了，所以没有返回结果**。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在*调用*发出后，*被调用者*通过状态、通知来通知调用者，或通过回调函数处理这个调用。\n\n## 阻塞与非阻塞\n阻塞和非阻塞关注的是**程序在等待调用结果（消息，返回值）时的状态.**\n\n阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。\n非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。\n\n","slug":"进程线程协程","published":1,"updated":"2022-08-25T14:12:05.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39f005j12mj180oe33t","content":"<h1 id=\"进程-线程-协程-并发与并行-同步与异步-阻塞与非阻塞\"><a href=\"#进程-线程-协程-并发与并行-同步与异步-阻塞与非阻塞\" class=\"headerlink\" title=\"进程 线程 协程 并发与并行 同步与异步 阻塞与非阻塞\"></a>进程 线程 协程 并发与并行 <strong>同步与异步</strong> 阻塞与非阻塞</h1><p><img src=\"https://i.loli.net/2020/05/21/hDtAFyrIbxn89VX.jpg\" alt=\"进程、线程与协程\"></p>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><blockquote>\n<p>进程是系统资源分配的最小单位, 系统由一个个进程(程序)组成,<strong>进程的出现是为了更好的利用CPU资源使到并发成为可能。</strong></p>\n</blockquote>\n<ul>\n<li><p>第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。</p>\n</li>\n<li><p>第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行时），它才能成为一个活动的实体，我们称其为进程。</p>\n</li>\n</ul>\n<p>进程是抢占式的争夺CPU运行自身,而CPU单核的情况下同一时间只能执行一个进程的代码,但是多进程的实现则是通过CPU飞快的切换不同进程,因此使得看上去就像是多个进程在同时进行.</p>\n<blockquote>\n<p>通信问题:   由于进程间是隔离的,各自拥有自己的内存内存资源, <em>因此相对于线程比较安全</em>, 所以不同进程之间的数据只能通过 <em>IPC(Inter-Process Communication)</em> 进行通信共享.</p>\n</blockquote>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p><strong>线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能。</strong></p>\n<blockquote>\n<ul>\n<li>线程属于进程</li>\n<li>线程共享进程的内存地址空间</li>\n<li>线程几乎不占有系统资源<br>通信问题:  进程相当于一个容器,而线程而是运行在容器里面的,因此对于容器内的东西,线程是共同享有的,因此线程间的通信可以直接通过全局变量进行通信,但是由此带来的例如多个线程读写同一个地址变量的时候则将带来不可预期的后果,因此这时候引入了各种锁的作用,例如互斥锁等。</li>\n</ul>\n</blockquote>\n<p>假设，一个文本程序，需要接受键盘输入，将内容显示在屏幕上，还需要保存信息到硬盘中。若只有一个进程，势必造成同一时间只能干一样事的尴尬（当保存时，就不能通过键盘输入内容）。若有多个进程，每个进程负责一个任务，进程A负责接收键盘输入的任务，进程B负责将内容显示在屏幕上的任务，进程C负责保存内容到硬盘中的任务。这里进程A，B，C间的协作涉及到了进程通信问题，而且有共同都需要拥有的东西——-文本内容，不停的切换造成性能上的损失。若有一种机制，可以使任务A，B，C共享资源，这样上下文切换所需要保存和恢复的内容就少了，同时又可以减少通信所带来的性能损耗，那就好了。是的，这种机制就是线程。<strong>线程共享进程的大部分资源，并参与CPU的调度, 当然线程自己也是拥有自己的资源的，例如，栈，寄存器等等。</strong>  此时，进程同时也是线程的容器。线程也是有着自己的缺陷的，例如健壮性差，若一个线程挂掉了，整一个进程也挂掉了，这意味着其它线程也挂掉了，进程却没有这个问题，一个进程挂掉，另外的进程还是活着。</p>\n<ul>\n<li><strong><em>进程是系统分配资源的最小单位\\</em></strong></li>\n<li><strong><em>线程是CPU调度的最小单位\\</em></strong></li>\n<li><em>由于默认进程内只有一个线程,所以多核CPU处理多进程就像是一个进程一个核心</em></li>\n</ul>\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><p><strong>协程通过在线程中实现调度，避免了陷入内核级别的上下文切换造成的性能损失，进而突破了线程在IO上的性能瓶颈。</strong></p>\n<blockquote>\n<ul>\n<li>协程是属于线程的。协程程序是在线程里面跑的，因此协程又称微线程和纤程等</li>\n<li>协程没有线程的上下文切换消耗。协程的调度切换是用户(程序员)手动切换的,因此更加灵活,因此又叫用户空间线程.</li>\n<li>原子操作性。由于协程是用户调度的，所以不会出现执行一半的代码片段被强制中断了，因此无需原子操作锁。</li>\n</ul>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><blockquote>\n<p>进程和线程的关系：</p>\n<ul>\n<li><p>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</p>\n</li>\n<li><p>资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源</p>\n</li>\n<li><p>cpu分配给线程，即真正在cpu上运行的是线程</p>\n</li>\n<li><p>线程是最小的执行单元，进程是最小的资源管理单元</p>\n</li>\n</ul>\n</blockquote>\n<p>进程，线程，协程不断突破，更高效的处理阻塞，不断地提高CPU的利用率。但是并不是说，线程就一定比进程快，而协程就不一定不线程要快。具体还是要看应用场景。可以简单粗暴的把应用分为IO密集型应用以及CPU密集型应用。</p>\n<p><strong>多核CPU，CPU密集型应用</strong><br> 此时多线程的效率是最高的，多线程可以使到全部CPU核心满载，又避免了协程间切换造成性能损失。当CPU密集型任务时，CPU一直在利用着，切换反而会造成性能损失，即便协程上下文切换消耗最小，但也还是有消耗的。</p>\n<p><strong>多核CPU，IO密集型应用</strong><br> 此时采用多线程多协程效率最高，多线程可以使到全部CPU核心满载，而一个线程多协程，则更好的提高了CPU的利用率。</p>\n<p><strong>单核CPU，CPU密集型应用</strong><br> 单进程效率是最高，此时单个进程已经使到CPU满载了。</p>\n<p><strong>单核CPU，IO密集型应用</strong><br> 多协程，效率最高。例如，看了上面应该也是知道的了</p>\n<h2 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h2><p><img src=\"https://i.loli.net/2020/05/21/WDaPQO6CweJU5kb.png\" alt=\"并行和并发\"></p>\n<h3 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h3><p>并行就是指同一时刻有两个或两个以上的“工作单位”在同时执行，从硬件的角度上来看就是同一时刻有两条或两条以上的指令处于执行阶段。所以，多核是并行的前提，单线程永远无法达到并行状态。可以利用多线程和多进程到达并行状态。另外的，Python的多线程由于GIL的存在，对于Python来说无法通过多线程到达并行状态。</p>\n<p><strong>并行的动机</strong>：用更多的CPU核心更快的完成任务. 就像一个团队, 一个脑袋不够用了, 一个团队来一起处理一个任务。</p>\n<h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p>对于并发的理解，要从两方面去理解，1.并发设计 2.并发执行。先说并发设计，当说一个程序是并发的，更多的是指这个程序采取了并发设计。</p>\n<p><strong>并发的动机</strong>：在计算能力恒定的情况下处理更多的任务, 就像我们的大脑, 计算能力相对恒定, 要在一天中处理更多的问题, 我们就必须具备多任务的能力. 现实工作中有很多事情可能会中断你的当前任务, 处理这种多任务的能力就是你的并发能力。</p>\n<p>并发设计的标准：<strong>使多个操作可以在重叠的时间段内进行</strong> ，这里的重点在于<strong>重叠的时间内</strong>， 重叠时间可以理解为一段时间内。例如：<strong>在时间1s秒内</strong>,  具有IO操作的task1和task2都完成，这就可以说是并发执行。所以呢，单线程也是可以做到并发运行的。当然啦，并行肯定是并发的。一个程序能否并发执行，<strong>取决于设计，也取决于部署方式</strong>。例如, 当给程序开一个线程（协程是不开的），它不可能是并发的，因为在重叠时间内根本就没有两个task在运行。当一个程序被设计成完成一个任务再去完成下一个任务的时候，即便部署是多线程多协程的也是无法达到并发运行的。</p>\n<p><strong>并行与并发的关系</strong>: <strong>并发的设计使到并发执行成为可能，而并行是并发执行的其中一种模式</strong>。</p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a><strong>同步与异步</strong></h2><p>同步和异步关注的是<strong>消息通信机制</strong>(synchronous communication/ asynchronous communication)<br>所谓同步，就是在发出一个<em>调用</em>时，在没有得到结果之前，该<em>调用</em>就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由<em>调用者</em>主动等待这个<em>调用</em>的结果。</p>\n<p>而异步则是相反，*<strong>调用*在发出之后，这个调用就直接返回了，所以没有返回结果</strong>。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p>\n<h2 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h2><p>阻塞和非阻塞关注的是<strong>程序在等待调用结果（消息，返回值）时的状态.</strong></p>\n<p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。<br>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"进程-线程-协程-并发与并行-同步与异步-阻塞与非阻塞\"><a href=\"#进程-线程-协程-并发与并行-同步与异步-阻塞与非阻塞\" class=\"headerlink\" title=\"进程 线程 协程 并发与并行 同步与异步 阻塞与非阻塞\"></a>进程 线程 协程 并发与并行 <strong>同步与异步</strong> 阻塞与非阻塞</h1><p><img src=\"https://i.loli.net/2020/05/21/hDtAFyrIbxn89VX.jpg\" alt=\"进程、线程与协程\"></p>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><blockquote>\n<p>进程是系统资源分配的最小单位, 系统由一个个进程(程序)组成,<strong>进程的出现是为了更好的利用CPU资源使到并发成为可能。</strong></p>\n</blockquote>\n<ul>\n<li><p>第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。</p>\n</li>\n<li><p>第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行时），它才能成为一个活动的实体，我们称其为进程。</p>\n</li>\n</ul>\n<p>进程是抢占式的争夺CPU运行自身,而CPU单核的情况下同一时间只能执行一个进程的代码,但是多进程的实现则是通过CPU飞快的切换不同进程,因此使得看上去就像是多个进程在同时进行.</p>\n<blockquote>\n<p>通信问题:   由于进程间是隔离的,各自拥有自己的内存内存资源, <em>因此相对于线程比较安全</em>, 所以不同进程之间的数据只能通过 <em>IPC(Inter-Process Communication)</em> 进行通信共享.</p>\n</blockquote>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p><strong>线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能。</strong></p>\n<blockquote>\n<ul>\n<li>线程属于进程</li>\n<li>线程共享进程的内存地址空间</li>\n<li>线程几乎不占有系统资源<br>通信问题:  进程相当于一个容器,而线程而是运行在容器里面的,因此对于容器内的东西,线程是共同享有的,因此线程间的通信可以直接通过全局变量进行通信,但是由此带来的例如多个线程读写同一个地址变量的时候则将带来不可预期的后果,因此这时候引入了各种锁的作用,例如互斥锁等。</li>\n</ul>\n</blockquote>\n<p>假设，一个文本程序，需要接受键盘输入，将内容显示在屏幕上，还需要保存信息到硬盘中。若只有一个进程，势必造成同一时间只能干一样事的尴尬（当保存时，就不能通过键盘输入内容）。若有多个进程，每个进程负责一个任务，进程A负责接收键盘输入的任务，进程B负责将内容显示在屏幕上的任务，进程C负责保存内容到硬盘中的任务。这里进程A，B，C间的协作涉及到了进程通信问题，而且有共同都需要拥有的东西——-文本内容，不停的切换造成性能上的损失。若有一种机制，可以使任务A，B，C共享资源，这样上下文切换所需要保存和恢复的内容就少了，同时又可以减少通信所带来的性能损耗，那就好了。是的，这种机制就是线程。<strong>线程共享进程的大部分资源，并参与CPU的调度, 当然线程自己也是拥有自己的资源的，例如，栈，寄存器等等。</strong>  此时，进程同时也是线程的容器。线程也是有着自己的缺陷的，例如健壮性差，若一个线程挂掉了，整一个进程也挂掉了，这意味着其它线程也挂掉了，进程却没有这个问题，一个进程挂掉，另外的进程还是活着。</p>\n<ul>\n<li><strong><em>进程是系统分配资源的最小单位\\</em></strong></li>\n<li><strong><em>线程是CPU调度的最小单位\\</em></strong></li>\n<li><em>由于默认进程内只有一个线程,所以多核CPU处理多进程就像是一个进程一个核心</em></li>\n</ul>\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><p><strong>协程通过在线程中实现调度，避免了陷入内核级别的上下文切换造成的性能损失，进而突破了线程在IO上的性能瓶颈。</strong></p>\n<blockquote>\n<ul>\n<li>协程是属于线程的。协程程序是在线程里面跑的，因此协程又称微线程和纤程等</li>\n<li>协程没有线程的上下文切换消耗。协程的调度切换是用户(程序员)手动切换的,因此更加灵活,因此又叫用户空间线程.</li>\n<li>原子操作性。由于协程是用户调度的，所以不会出现执行一半的代码片段被强制中断了，因此无需原子操作锁。</li>\n</ul>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><blockquote>\n<p>进程和线程的关系：</p>\n<ul>\n<li><p>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</p>\n</li>\n<li><p>资源分配给进程，进程是程序的主体，同一进程的所有线程共享该进程的所有资源</p>\n</li>\n<li><p>cpu分配给线程，即真正在cpu上运行的是线程</p>\n</li>\n<li><p>线程是最小的执行单元，进程是最小的资源管理单元</p>\n</li>\n</ul>\n</blockquote>\n<p>进程，线程，协程不断突破，更高效的处理阻塞，不断地提高CPU的利用率。但是并不是说，线程就一定比进程快，而协程就不一定不线程要快。具体还是要看应用场景。可以简单粗暴的把应用分为IO密集型应用以及CPU密集型应用。</p>\n<p><strong>多核CPU，CPU密集型应用</strong><br> 此时多线程的效率是最高的，多线程可以使到全部CPU核心满载，又避免了协程间切换造成性能损失。当CPU密集型任务时，CPU一直在利用着，切换反而会造成性能损失，即便协程上下文切换消耗最小，但也还是有消耗的。</p>\n<p><strong>多核CPU，IO密集型应用</strong><br> 此时采用多线程多协程效率最高，多线程可以使到全部CPU核心满载，而一个线程多协程，则更好的提高了CPU的利用率。</p>\n<p><strong>单核CPU，CPU密集型应用</strong><br> 单进程效率是最高，此时单个进程已经使到CPU满载了。</p>\n<p><strong>单核CPU，IO密集型应用</strong><br> 多协程，效率最高。例如，看了上面应该也是知道的了</p>\n<h2 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h2><p><img src=\"https://i.loli.net/2020/05/21/WDaPQO6CweJU5kb.png\" alt=\"并行和并发\"></p>\n<h3 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h3><p>并行就是指同一时刻有两个或两个以上的“工作单位”在同时执行，从硬件的角度上来看就是同一时刻有两条或两条以上的指令处于执行阶段。所以，多核是并行的前提，单线程永远无法达到并行状态。可以利用多线程和多进程到达并行状态。另外的，Python的多线程由于GIL的存在，对于Python来说无法通过多线程到达并行状态。</p>\n<p><strong>并行的动机</strong>：用更多的CPU核心更快的完成任务. 就像一个团队, 一个脑袋不够用了, 一个团队来一起处理一个任务。</p>\n<h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p>对于并发的理解，要从两方面去理解，1.并发设计 2.并发执行。先说并发设计，当说一个程序是并发的，更多的是指这个程序采取了并发设计。</p>\n<p><strong>并发的动机</strong>：在计算能力恒定的情况下处理更多的任务, 就像我们的大脑, 计算能力相对恒定, 要在一天中处理更多的问题, 我们就必须具备多任务的能力. 现实工作中有很多事情可能会中断你的当前任务, 处理这种多任务的能力就是你的并发能力。</p>\n<p>并发设计的标准：<strong>使多个操作可以在重叠的时间段内进行</strong> ，这里的重点在于<strong>重叠的时间内</strong>， 重叠时间可以理解为一段时间内。例如：<strong>在时间1s秒内</strong>,  具有IO操作的task1和task2都完成，这就可以说是并发执行。所以呢，单线程也是可以做到并发运行的。当然啦，并行肯定是并发的。一个程序能否并发执行，<strong>取决于设计，也取决于部署方式</strong>。例如, 当给程序开一个线程（协程是不开的），它不可能是并发的，因为在重叠时间内根本就没有两个task在运行。当一个程序被设计成完成一个任务再去完成下一个任务的时候，即便部署是多线程多协程的也是无法达到并发运行的。</p>\n<p><strong>并行与并发的关系</strong>: <strong>并发的设计使到并发执行成为可能，而并行是并发执行的其中一种模式</strong>。</p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a><strong>同步与异步</strong></h2><p>同步和异步关注的是<strong>消息通信机制</strong>(synchronous communication/ asynchronous communication)<br>所谓同步，就是在发出一个<em>调用</em>时，在没有得到结果之前，该<em>调用</em>就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由<em>调用者</em>主动等待这个<em>调用</em>的结果。</p>\n<p>而异步则是相反，*<strong>调用*在发出之后，这个调用就直接返回了，所以没有返回结果</strong>。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p>\n<h2 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h2><p>阻塞和非阻塞关注的是<strong>程序在等待调用结果（消息，返回值）时的状态.</strong></p>\n<p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。<br>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p>\n"},{"title":"InfluxDB不同版本调研","top":false,"date":"2022-07-28T10:33:18.000Z","_content":"# InfluxDB\n\n- InfluxDB是时序数据库中应用比较广泛的一种，在DB-Engines TSDB rank中位居首位，可见InfluxDB在互联网的受欢迎程度是非常高的\n\n![db-engine tsdbrank](https://s2.loli.net/2022/08/24/tZmWflFUirO896R.png)\n\n\n\n- 它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。\n\n- InfluxDB 2.0还与[InfluxDB Cloud紧密集成，InfluxDB Cloud](https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/)是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。\n\n\n\n- 时序数据库与我们熟悉的关系型数据库有所不同，首先需要了解一下 InfluxDB 中字段的含义\n\n  > v1.x\n\n![image-20220812143742317](https://s2.loli.net/2022/08/24/4XlzG35RENOnByi.png)\n\n\n\n>  v2.x\n\nV2具有以下几个概念：\n\ntimestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization\n\n新增的概念：\n\n**bucket**：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织\n\n**bucket schema**：具有明确的schema-type的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。\n\n**organization**：InfluxDB组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。\n\n### TICK 架构分析与各组件功能介绍\n\nTICK 架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括 Telegraf、InfluxDB、Chronograf 和 Kapacitor。TICK 架构以及各组件分工情况如图所示：\n\n\n\n\n\nV2版本主要有这么几个特性:\n1.一个可执行文件\nchronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后，监听9999她口，这个端口既是@b贪面的端商，料练袋库\n的监听端口。\n2,权限全增强，新增了token.可以使用token进行数据读写操作\n3,DSL又改了！目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tck.能执行的操作更多。\n4,接口返回数据的格式改为csv,并且可以使用uxQL来自定义返回数据的格式与字段\n5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使\n用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。\n现在influxdb v2直接可以实现这个采集的操作\n6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfil进influxdb中。\n\n并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行\n\nOSS 2.x包括1.x兼容的`/query`和`/write`端点\n\n它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/CloudNativate/InfluxDB1.x_vs_2.x.md","raw":"---\ntitle: InfluxDB不同版本调研\ntags:\n  - k8s\n  - influxdb\n  - benchmark\n  - prometheus\ncategories:\n  - tsdb\ntop: false\ndate: 2022-07-28 18:33:18\n---\n# InfluxDB\n\n- InfluxDB是时序数据库中应用比较广泛的一种，在DB-Engines TSDB rank中位居首位，可见InfluxDB在互联网的受欢迎程度是非常高的\n\n![db-engine tsdbrank](https://s2.loli.net/2022/08/24/tZmWflFUirO896R.png)\n\n\n\n- 它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。\n\n- InfluxDB 2.0还与[InfluxDB Cloud紧密集成，InfluxDB Cloud](https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/)是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。\n\n\n\n- 时序数据库与我们熟悉的关系型数据库有所不同，首先需要了解一下 InfluxDB 中字段的含义\n\n  > v1.x\n\n![image-20220812143742317](https://s2.loli.net/2022/08/24/4XlzG35RENOnByi.png)\n\n\n\n>  v2.x\n\nV2具有以下几个概念：\n\ntimestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization\n\n新增的概念：\n\n**bucket**：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织\n\n**bucket schema**：具有明确的schema-type的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。\n\n**organization**：InfluxDB组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。\n\n### TICK 架构分析与各组件功能介绍\n\nTICK 架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括 Telegraf、InfluxDB、Chronograf 和 Kapacitor。TICK 架构以及各组件分工情况如图所示：\n\n\n\n\n\nV2版本主要有这么几个特性:\n1.一个可执行文件\nchronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后，监听9999她口，这个端口既是@b贪面的端商，料练袋库\n的监听端口。\n2,权限全增强，新增了token.可以使用token进行数据读写操作\n3,DSL又改了！目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tck.能执行的操作更多。\n4,接口返回数据的格式改为csv,并且可以使用uxQL来自定义返回数据的格式与字段\n5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使\n用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。\n现在influxdb v2直接可以实现这个采集的操作\n6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfil进influxdb中。\n\n并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行\n\nOSS 2.x包括1.x兼容的`/query`和`/write`端点\n\n它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"CloudNativate/InfluxDB1.x_vs_2.x","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39f005n12mj65mx2om1","content":"<h1 id=\"InfluxDB\"><a href=\"#InfluxDB\" class=\"headerlink\" title=\"InfluxDB\"></a>InfluxDB</h1><ul>\n<li>InfluxDB是时序数据库中应用比较广泛的一种，在DB-Engines TSDB rank中位居首位，可见InfluxDB在互联网的受欢迎程度是非常高的</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/08/24/tZmWflFUirO896R.png\" alt=\"db-engine tsdbrank\"></p>\n<ul>\n<li><p>它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。</p>\n</li>\n<li><p>InfluxDB 2.0还与<a href=\"https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/\">InfluxDB Cloud紧密集成，InfluxDB Cloud</a>是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。</p>\n</li>\n</ul>\n<ul>\n<li><p>时序数据库与我们熟悉的关系型数据库有所不同，首先需要了解一下 InfluxDB 中字段的含义</p>\n<blockquote>\n<p>v1.x</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/08/24/4XlzG35RENOnByi.png\" alt=\"image-20220812143742317\"></p>\n<blockquote>\n<p> v2.x</p>\n</blockquote>\n<p>V2具有以下几个概念：</p>\n<p>timestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization</p>\n<p>新增的概念：</p>\n<p><strong>bucket</strong>：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织</p>\n<p><strong>bucket schema</strong>：具有明确的schema-type的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。</p>\n<p><strong>organization</strong>：InfluxDB组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。</p>\n<h3 id=\"TICK-架构分析与各组件功能介绍\"><a href=\"#TICK-架构分析与各组件功能介绍\" class=\"headerlink\" title=\"TICK 架构分析与各组件功能介绍\"></a>TICK 架构分析与各组件功能介绍</h3><p>TICK 架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括 Telegraf、InfluxDB、Chronograf 和 Kapacitor。TICK 架构以及各组件分工情况如图所示：</p>\n<p>V2版本主要有这么几个特性:<br>1.一个可执行文件<br>chronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后，监听9999她口，这个端口既是@b贪面的端商，料练袋库<br>的监听端口。<br>2,权限全增强，新增了token.可以使用token进行数据读写操作<br>3,DSL又改了！目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tck.能执行的操作更多。<br>4,接口返回数据的格式改为csv,并且可以使用uxQL来自定义返回数据的格式与字段<br>5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使<br>用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。<br>现在influxdb v2直接可以实现这个采集的操作<br>6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfil进influxdb中。</p>\n<p>并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行</p>\n<p>OSS 2.x包括1.x兼容的<code>/query</code>和<code>/write</code>端点</p>\n<p>它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"InfluxDB\"><a href=\"#InfluxDB\" class=\"headerlink\" title=\"InfluxDB\"></a>InfluxDB</h1><ul>\n<li>InfluxDB是时序数据库中应用比较广泛的一种，在DB-Engines TSDB rank中位居首位，可见InfluxDB在互联网的受欢迎程度是非常高的</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/08/24/tZmWflFUirO896R.png\" alt=\"db-engine tsdbrank\"></p>\n<ul>\n<li><p>它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。</p>\n</li>\n<li><p>InfluxDB 2.0还与<a href=\"https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/\">InfluxDB Cloud紧密集成，InfluxDB Cloud</a>是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。</p>\n</li>\n</ul>\n<ul>\n<li><p>时序数据库与我们熟悉的关系型数据库有所不同，首先需要了解一下 InfluxDB 中字段的含义</p>\n<blockquote>\n<p>v1.x</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/08/24/4XlzG35RENOnByi.png\" alt=\"image-20220812143742317\"></p>\n<blockquote>\n<p> v2.x</p>\n</blockquote>\n<p>V2具有以下几个概念：</p>\n<p>timestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization</p>\n<p>新增的概念：</p>\n<p><strong>bucket</strong>：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织</p>\n<p><strong>bucket schema</strong>：具有明确的schema-type的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。</p>\n<p><strong>organization</strong>：InfluxDB组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。</p>\n<h3 id=\"TICK-架构分析与各组件功能介绍\"><a href=\"#TICK-架构分析与各组件功能介绍\" class=\"headerlink\" title=\"TICK 架构分析与各组件功能介绍\"></a>TICK 架构分析与各组件功能介绍</h3><p>TICK 架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括 Telegraf、InfluxDB、Chronograf 和 Kapacitor。TICK 架构以及各组件分工情况如图所示：</p>\n<p>V2版本主要有这么几个特性:<br>1.一个可执行文件<br>chronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后，监听9999她口，这个端口既是@b贪面的端商，料练袋库<br>的监听端口。<br>2,权限全增强，新增了token.可以使用token进行数据读写操作<br>3,DSL又改了！目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tck.能执行的操作更多。<br>4,接口返回数据的格式改为csv,并且可以使用uxQL来自定义返回数据的格式与字段<br>5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使<br>用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。<br>现在influxdb v2直接可以实现这个采集的操作<br>6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfil进influxdb中。</p>\n<p>并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行</p>\n<p>OSS 2.x包括1.x兼容的<code>/query</code>和<code>/write</code>端点</p>\n<p>它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台</p>\n"},{"title":"腾讯犀牛鸟云开发校园技术布道师养成计划第四天","top":false,"date":"2020-03-20T02:34:08.000Z","_content":"\n# 生命周期\n\n函数可以操作（增删改查）数据（包括字符串、数组、对象、Boolean等所有数据类型），组件拥有了属性数据，也就拥有了被编程的能力，可见携带数据的重要性（id、class、style甚至点击事件都是组件携带的数据，都可以用来编程）。\n\n#### 链接携带数据\n\n**URL链接的特殊字符**\n\n```html\nhttps://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=云开发&rsv_pq=81ee270400007011&rsv_t=ed834wm24xdJRGRsfv7bxPKX%2FXGlLt6fqh%2BiB9x5g0EUQjyxdCDbTXHbSFE&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=20&rsv_sug1=19&rsv_sug7=100&rsv_sug2=0&inputT=5035&rsv_sug4=6227\n```\n\n这些链接通常包括以下特殊字符，以及都有着基本相同的含义，通过这些特殊字符，链接就被塞进了很多数据信息，其中?、&、=是我们接下来关注的重点。\n\n- / 分隔目录和子目录\n- ? 分隔实际的URL和参数\n- & URL中指定的参数间的分隔符\n- = URL中指定的参数的值\n- \\# 同一个页面的位置标识符，类似于页面的书签；\n\n**获取URL链接的数据**\n\n**获取url参数的生命周期函数onload**\n\nonload是Page页面的生命周期函数，当页面加载时触发。一个页面只会调用一次，可以在 onLoad 函数的参数中获取打开当前页面路径中的参数。\n\n```json\n {id: \"lesson\", uid: \"tcb\", key: \"tap\", ENV: \"weapp\", frompage: \"lifecycle\"}\n```\n\n相信大家会这样的数据类型非常熟悉，它就是一个对象Object，我们可以通过点表示法，获取到对象里具体的属性，比如options.id就能显示我们在lifecycle点击的组件的id。\n\n**数据跨页面**\n\n**跨页面数据渲染**\n\n当然我们也可以继续把数据使用setData渲染到detail页面，为方便我们仅渲染图片信息\n\n> 不过使用链接url传递参数有字节限制以及只能在跨页面中使用，但是可以用来传递比如页面链接来源，可以追踪用户来自于什么设备、什么App、通过什么方式以及来自哪个朋友的邀请链接；还可以用于一些网页链接的API必备的id、key等。跨多个页面以及传递更多参数、数据等，可以使用公共数据存储app.globalData（本节会介绍）、数据缓存（后面章节会介绍）、数据库（云开发部分会介绍）以及新增的页面间通信接口[getOpenerEventChannel](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html)（这里不多介绍）\n\n#### 组件携带数据dataset\n\n组件有公有属性和私有属性，这些属性都是数据，事件处理函数可以修改这些属性，从而让组件有丰富的表现形式。不仅如此，在组件节点中还可以**附加一些自定义数据**。在事件中可以获取这些自定义的节点数据，用于事件的逻辑处理，从而让组件变成相当复杂且强大的编程对象。\n\n**使用JavaScript代替Navigator组件**\n\n当我们点击lifecycle页面的图片时，clickImage会收到一个事件对象，打印出来的结果里包含着target和currentTarget两个属性，currentTarget指向事件所绑定的元素，而target始终指向事件发生时的元素。由于这个案例事件绑定的元素和事件发生时的元素都是imageclick，所以它们的值相同，它们里面都包含了**当前组件**的id，以及dataset\n\n> 值得强调的是很多童鞋以为只有点击Navigator组件、button组件才能进行链接跳转，这是思维定势的误区，通过bindtap，组件被赋予了一定的编程能力，尽管没有url属性，使用wx.navigateTo也能具备这种能力。\n\n> 我们点击的是图片image组件，却分别触发了绑定在image组件以及image的父级（上一级）组件view的事件处理函数，我们称这为**事件冒泡**。\n\n**点击组件显示当前组件其他数据** \n\n通过事件对象我们不仅可以明确知道点击了什么组件，而且还可以获取当前组件的自定义数据。\n\n#### 小程序和页面的生命周期\n\n**小程序构造器：**[App(Object object)](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html)\n\n**页面构造器：**[Page(Object object)](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html)\n\n**打印日志了解生命周期**\n\n对小程序和页面的生命周期，我们可以通过打印日志的方式来了解生命周期函数具体的执行顺序和情况，使用开发者工具在app.js里给onLaunch、onShow、onHide添加一些打印日志。\n\n```javascript\nonLaunch(opts) {\n    console.log('onLaunch监听小程序初始化。',opts)\n  },\n  onShow(opts) {\n    console.log('onShow监听小程序启动或切前台',opts)\n  },\n  onHide() {\n    console.log('onHide监听小程序切后台')\n  },\n```\n\n> 有的参数写的options，有的写的却是opts；前面事件对象有的写的是event，有的则用的是e，这个参数都是可以自定义的\n\n**小程序打开场景值**\n\n在 App 的 onLaunch 和 onShow打印的对象里有一个scene为1001，这个是场景值。场景值用来描述用户进入小程序的路径方式。用户进入你的小程序的方式有很多，比如有的是扫描二维码、有的是长按图片识别二维码，有的是通过微信群进入的小程序，有的是朋友单聊进入的小程序，有的是通过公众号进入的小程序等等，这些就是场景值，而具体的场景值，可以看技术文档，场景值对产品、运营来说非常重要。\n\n**技术文档：**[场景值列表](https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html)\n\n**onLaunch与onShow**\n\nonLaunch是监听小程序的初始化，初始化完成时触发，**全局只会触发一次**，所以在这里我们可以用来执行获取用户登录信息的函数等一些非常核心的数据，如果onLaunch的函数过多，会影响小程序的启动速度。\n\nonShow是在小程序启动，或从后台进入前台显示时触发，也就是**它会触发很多次**，在这里就不大适合放获取用户登录信息的函数啦。这两者的区别要注意。\n\n#### 用户登录与信息获取\n\n小程序用户登录和获取用户信息相对来说比较复杂\n\n**了解wx.login、wx.getSetting**\n\n从控制台可以看到wx.login会得到errMsg和code，这个code是用户的登录凭证。而wx.getSetting则会得到errMsg和用户当前的[权限设置authSetting](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/AuthSetting.html)，包含是否允许获取用户信息，是否允许获取用户位置，是否允许使用手机相册等权限。我们可以根据打印的结果结合技术文档来深入理解。\n\n**技术文档：**[获取用户登录凭证wx.login](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html)、[获取用户当前权限设置wx.getSetting](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html)\n\n**获取用户信息wx.getUserInfo**\n\n我们要获取用户信息，首先需要判断用户是否允许，可以从authSetting对象里看scope.userInfo属性是否为true，如果为true，那我们可以调用wx.getUserInfo()接口来获取用户信息。\n\n**globalData**\n\nglobalData对象通常用来存放整个小程序都会使用到的数据，比如我们可以把用户信息赋值给globalData的任意自定义属性。\n\n**that与this**\n\nthis的指向情况非常复杂，尽管**哪个对象调用函数，函数里面的this就指向哪个对象**，说起来非常简单，但是场景太多，大家在开发时不必强行理解，死记硬背，把this打印出来即可。\n\n**getApp()**\n\n那我们如何在页面的js里调用globalData呢，这个时候就需要用到getApp()函数啦。\n\n**技术文档：**[getApp()](https://developers.weixin.qq.com/miniprogram/dev/reference/api/getApp.html)\n\n#### 通过button来获取用户信息\n\n**将用户信息写进app.js**\n\n这种方式只能在user页面才能获取到用户信息，限制非常大，那我们应该怎么做呢？我们要把获取到的用户信息写到app.js成为页面的公共信息，以后可以跨页面只需在user页面点击一次按钮即可。\n\n在getUserInfomation将获取到的用户信息传给globalData的userInfo属性：\n\n> 获取用户信息还有一种方式，就是通过组件[open-data](https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html)来展示，比较简单\n\n# 数据表单\n\n所用到的数据大多都是我们在js的data里写好的,无论是计算器、用户注册、表单收集、发表文章、评论等等，这些都是对用户提交数据的获取。\n\n#### 设置导航栏标题\n\n动态设置导航栏标题是一个非常简单的API，在技术文档里面可以了解到，只要给wx.setNavigationBarTitle()的title对象赋值，就能改变小程序页面的标题。\n\n**技术文档：**[wx.setNavigationBarTitle()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html)\n\n**onLoad调用API**\n\n**button调用API**\n\n**使用表单修改标题**\n\n小程序一个**完整的数据表单**收集通常包含**一个form组件**，**一个输入框或选择器组件**（比如input组件），**一个button组件**。\n\n数据表单涉及到的组件多（至少三个），参数以及参数的类型也比较多，上面有几个非常重要的点，大家可以结合上面的代码来理解：\n\n- 表单最核心的在于表单组件form，输入框组件input和button组件要在<form></form>内，form也会收集内部组件提交的数据；\n- 绑定事件处理函数的不再是button，而是form，form的bindsubmit与button的 formType=\"submit\"是一对，点击button，就会执行bindsubmit的事件处理函数；\n- input是输入框，用户可以在里面添加信息；name是input组件的名称，与表单数据一起提交。\n\n> 对数据表单来说，使用console.log打印事件对象可以让我们对表单提交的数据有一个非常清晰的了解；而使用赋值以及setData可以有效的把表单收集到的数据渲染到页面。\n\n#### 文本输入框input\n\n小程序的输入框input主要用来处理**文本和数字**的输入，下面我们就来结合实战与技术文档，来了解一下文本输入框input的type、name、placeholder等属性。\n\n**技术文档：**[input技术文档](https://developers.weixin.qq.com/miniprogram/dev/component/input.html)\n\n使用开发者工具在form.wxml里输入以下代码，一个form组件里面可以包含多个选择器或文本输入框组件，提交数据时，会提交form里面填写的所有数据：\n\ninput输入框会因为属性的类型的不同，**手机键盘外观会有比较大的差异**，所以需要点击预览，用微信扫描二维码在手机上体验（也可以启用真机调试）。\n\n- input输入框支持的type值有文本输入text、数字输入number、身份证输入idcard、小数点输入digit，当type不同时，**注意手机键盘外观的不同**；\n- placeholder:输入框为空时的占位符（也就是默认值）；maxlength：最大输入长度；password和disabled都是boolean值，使用方法和之前的video组件里面的boolean属性一样。\n\n在开发者工具的控制台我们可以看到打印的事件对象里的value对象，属性名即为input的name名，值即为我们输入的数据。如果没有name。\n\n#### 表单组件组合\n\n一个完整的数据收集表单，除了可以提交input文本框里面的数据，还可以提交开关选择器按钮switch、滑动选择器按钮slider、单选按钮radio、多选按钮checkbox等组件里面的数据。\n\n**技术文档：**[switch开关选择](https://developers.weixin.qq.com/miniprogram/dev/component/switch.html)、[Slider滑动选择](https://developers.weixin.qq.com/miniprogram/dev/component/slider.html)、[Radio单选](https://developers.weixin.qq.com/miniprogram/dev/component/radio.html)、[checkbox多选](https://developers.weixin.qq.com/miniprogram/dev/component/checkbox.html)、[form表单](https://developers.weixin.qq.com/miniprogram/dev/component/form.html)\n\n表单组件提交的数据都存储在事件对象e的detail属性下的value里.\n\n- **switch属性：**记录switch开关选择的值，这是一个boolean值，ture为开，false为关；\n\n- **sex属性：**记录name名为sex的单选按钮的值，它只记录单选选择的那一项的值；\n\n- process属性：\n\n   记录name名为process的滑动选择器的值，\n\n  show-value为boolean值，显示当前value值，数据类型为number；\n\n- **textinput属性：**记录name名为textinput的input文本输入框的值；\n\n- **gamecheck属性：**记录name名为gamecheck的多选组件的值，**数据类型为数组Array**。\n\n点击**重置按钮**，即会重置表单，并不需要formReset事件处理函数做额外的处理。\n\n> 我们发现上面button属性，有时用的是form-type，有时用的是formType(注意两者的大小写)，这两种写法都可以。我们也可以删掉重置的事件处理函数formReset，以及form组件的 bindreset=\"formReset\"，只需要将button的form-type设置为reset，也就是\n>\n> ```html\n> <button form-type=\"reset\">重置</button>\n> ```\n>\n> 就可以达到重置的效果，绑定事件处理函数bindreset\n\n**数组的扩展运算符**\n\n在这里我们先来介绍一下**扩展运算符**的概念，它的写法很简单，就是三个点 `...`。\n\n从控制台可以看到直接打印gamecheck，它是一个数组Array，中括号[ ]就可以看出来，展开也有index值；而使用扩展运算符打印gamecheck，是**将数组里的值都遍历了出来**。这就是扩展运算符…的作用\n\n#### 添加手机联系人\n\n尽管我们提交了数据，但是当小程序重新编译之后，所有的数据都会被重置，也就是提交的数据并没有保存起来。小程序存储数据有三种方式，一是保存在本地手机上；二是存储到缓存里；三是存储到数据库。\n\n**添加手机通讯录联系人：**[wx.addPhoneContact()](https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.addPhoneContact.html)\n\n**对象的扩展运算符**\n\n对象的扩展运算符 ...也有类型的作用，它可以取出对象里所有可遍历的属性，拷贝到新的对象中。\n\n#### input绑定事件处理函数\n\n在form表单里，尽管表单里也有input组件，但是绑定事件处理函数的是form组件，input组件只提供value值，而input文本输入组件本身也是可以绑定事件处理函数的。从技术文档里我们了解到input可以绑定事件处理函数的属性有：bindinput，键盘输入时触发；bindfocus，输入框聚焦时触发；bindblur，输入框失焦时触发等等\n\n**bindinput响应式数据渲染**\n\n**剪贴板**\n\n本节前面的添加手机联系人是把收集到的数据存储到**本地手机**的通讯录里，而剪切板则是把数据存储到**本地手机**的剪切板里。\n\n技术文档：[设置剪切板内容wx.setClipboardData()](https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.setClipboardData.html)、[获取剪切板内容wx.getClipboardData()](https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.getClipboardData.html)\n\n#### slider响应设置颜色\n\nslider滑动选择器也可以绑定事件处理函数，有：bindchange完成一次拖动后触发的事件以及bindchanging拖动过程中触发的事件。\n\n**技术文档：**[滑动选择器slider](https://developers.weixin.qq.com/miniprogram/dev/component/slider.html)\n\n我们要先回顾一下事件对象里**data-\\*携带的数据**和**表单组件携带的数据：**首先组件data-*属性的数据会存储在事件对象里的currentTarget下的dataset里的属性名里，也就是data-color的值会存储在 e.currentTarget.dataset.color里；而表单组件的数据则是存储在事件对象的detail里，也就是e.detail.value里。\n\n#### picker组件\n\npicker滚动选择器看起来样式非常复杂，不过小程序已经帮我们封装好了，我们只需要用几行简单的代码就可以做一个非常复杂而且类别多样的滚动选择器。\n\n**技术文档：**[滚动选择器picker](https://developers.weixin.qq.com/miniprogram/dev/component/picker.html)\n\n使用开发者工具在form.wxm里输入以下代码，只需要下面几行代码，就能从底部弹起一个日期的滚动选择器。而里面的文字可以任意填写，类似于button、navigator组件里的字，点击即可执行相应的事件。\n\n```html\n<picker mode=\"date\" value=\"{{pickerdate}}\" start=\"2017-09-01\" end=\"2022-09-01\" bindchange=\"bindDateChange\">\n选择的日期为：{{pickerdate}}\n</picker>\n```\n\n- mode属性：滚动选择器有几种模式，不同的模式可以弹出不同类型的滚动选择器，这里的是date日期选择，其他模式大体相似；\n- start和end属性：这是日期选择器特有的属性，为有效日期的开始和结束，我们可以滚动试下，超出这个范围就没法滚动了;\n- ![2020-03-20 21-31-30 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gd0s88um3rj31hc0u0ak3.jpg)\n\n# 图片、缓存与文件\n\n获取手机相册里的图片和手机相机拍照的照片、手机的定位以及获取手机里的缓存、文件，并使用JavaScript操作图片、操作缓存和操作文件等。\n\n#### 获取手机相册或拍照的图片\n\n用小程序来获取手机相册里的图片和拍照的照片听起来好像挺复杂的，不过因为有了API，我们只需要结合前面的点击事件、事件处理函数以及调用API、传入指定的参数就能很容易做到。\n\n**技术文档：**[wx.chooseImage()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html)\n\n**上传一张照片**\n\n- **count**：可以选择的照片数量，默认为9张（由于imgurl声明的是字符串，多张照片需为数组Array，后面有上传多张图片的案例）\n- **sourceType**：选择图片的来源，album就是图片可以来自手机相册；而camera是可以来自手机拍照，两个都写就是来自相册或拍照都可以；\n- **sizeType：**所选的图片的尺寸，original为原图，compressed为压缩图，为了减轻服务器压力，建议为压缩图；\n- **tempFilePaths**为临时文件的**路径列表**，**tempFiles**为临时**文件列表**，注意这两个值都为数组。\n\n**空值的处理**\n\n我们可以看到由于imgurl为空值，image组件有默认宽度300px、高度225px（会随css而改变大小），所以显示**上传的图片**会与**选择图片**的button有一段空白，处理的方法有三种：\n\n**方法一：**我们可以给imgurl弄一张初始图片的链接，为了让界面更加美观、交互性更好，通常都会设置一个默认的图片，比如默认的头像，当用户上传时，setData就会取代初始图片；\n\n**方法二：**判断imgurl是否有内容，比如我们可以加一层逻辑判断，当Page()里的data下的imgurl属性非空时，组件才会显示；空时就不显示。\n\n**方法三：**这个方法和方法二类似，设置一个逻辑判断\n\n**上传多张照片**\n\n如果上传的是多张照片，那么imgurl的初始值就不能是字符串了，而是一个数组Array，\n\n#### 操作图片\n\n使用小程序图片API不仅可以上传图片，还可以对上传的图片进行一定的操作，比如获取图片信息、预览图片、保存图片、压缩图片等等。\n\n**获取图片信息**\n\n无论是存储在小程序本地，还是存储在临时文件、缓存、网络上的图片，使用wx.getImageInfo() 都可以获取到该图片的宽度、高度、路径、格式以及拍照方向。\n\n**技术文档：**[wx.getImageInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html)\n\n> **回调函数**\n>\n> 经过之前的学习，相信大家对回调函数success、fail有了一定的认识，那什么是回调函数呢？简单一点说就是：**回调Callback是指在另一个函数执行完成之后被调用的函数**。success、fail就都是在小程序的API函数执行完成之后，才会被调用，而success和fail它们本身也是函数，也能返回数据。而复杂一点说，就是回调函数本身就是函数，但是它们却被其他函数给调用，而调用函数的函数被称为**高阶函数**。这些大家只需要粗略了解就可以了。\n>\n> **异步与同步**\n>\n> 我们前面也提及过异步，那什么会有异步呢？因为JavaScript是单线程的编程语言，就是从上到下、一行一行去执行代码，类似于排队一样一个个处理，第一个不处理完，就不会处理后面的。但是遇到网络请求、I/O操作（比如上面的读取图片信息）以及定时函数（后面会涉及）以及类似于成功反馈的情况，等这些不可预知时间的任务都执行完再处理后面的任务，肯定不行，于是就有了**异步处理**。\n>\n> 把要等待其他函数执行完之后，才能执行的函数（比如读取图片信息）放到回调函数里，先不处理，等图片上传成功之后再来处理，这就是异步。比如wx.showToast()消息提示框，可以放到回调函数里，当API调用成功之后再来显示提示消息。回调函数相当于是异步的一个解决方案。\n\n**预览所有上传的图片**\n\n预览图片就是在新页面里全屏打开图片，预览的过程中用户可以进行保存图片、发送给朋友等操作。可以预览一张照片或者多张照片。\n\n**技术文档：**[wx.previewImage()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html)\n\n> 这个场景主要用于让用户可以**预览、保存或分享图片**，毕竟image组件是不支持图片的放大预览、保存到本地、转发给好友，现在微信还支持预览小程序码，长按就可以打开小程序，这个API主要是为了增强用户的交互体验的。\n\n**保存图片到相册**\n\n小程序**不支持直接将网络图片**保存到本地手机的系统相册，支持临时文件路径和小程序本地路径。\n\n**技术文档：**[wx.saveImageToPhotosAlbum()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html)\n\n> 当然永久链接实际开发用得不会太多，使用最多的场景是把**网络图片下载到临时链接（因为不能直接保存网络图片），再将临时链接的图片保存到相册**，只需把上面的永久链接换成临时链接就可以了.\n\n**压缩图片**\n\n小程序是有压缩图片的API的[wx.compressImage()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.compressImage.html)，尤其是在上传图片时，为了减轻存储服务器的压力，不能让用户上传分辨率过高的照片。\n\n- 可以先让用户上传图片；\n- 图片上传成功之后（也就是在上传图片的**success回调函数**里）再来获取图片的信息；\n- 获取信息成功后（也就是在获取图片信息的**success回调函数**里）判断宽度或高度是否过大，如果图片过大，就压缩图片，\n- 压缩图片成功后（也就是在压缩图片的**success回调函数**里），再把压缩好的图片上传到服务器\n\n上传图片、获取图片信息、压缩图片、上传图片到服务器，每一步都依赖上一步，所以会不断在success回调函数里写函数，实际开发涉及的业务会更复杂，就会不断回调，这被称之为**回调地狱**。\n\n> 由于压缩图片使用到的场景不算太多，毕竟我们在上传照片时可以不支持上传原图original，只支持压缩compressed就能保证上传图片的大小了\n\n#### 上传文件\n\n小程序不仅支持上传图片image，还支持上传视频、Excel、PDF、音频等等其他文件格式，但是我们只能从**客户端会话**里（也就是微信单聊、群聊的聊天记录里）选择其他格式的文件。\n\n**技术文档：**[wx.chooseMessageFile()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html)\n\n#### 上传地理位置\n\n除了可以上传图片、音视频以及各种文件格式以外，小程序还支持上传地理位置。\n\n**技术文档：**[wx.chooseLocation()](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html)\n\n#### 模块化与格式化\n\n在新建模板小程序里（不使用云开发服务），有一个日志logs页面，这个日志logs虽然简单，但是包含着非常复杂的JavaScript知识，是一个非常好的学习参考案例，这里我们来对它进行一一解读。\n\n**模块化与引入模块**\n\n在实际开发中，日期、时间的处理经常会使用到，但是使用[Date对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date)所获取到的时间格式与我们想要展现的形式是有非常大的差异的。这时我们可以把时间的处理抽离成为一个单独的 js 文件比如**util.js**（util是utility的缩写，表示程序集，通用程序等意思），作为一个模块。\n\n> 把通用的模块放在util.js或者common.js，把util.js放在utils文件夹里等就跟把css放在style文件夹，把页面放在pages文件夹，把图片放在images文件夹里是一样的道理，尽管文件夹或文件的名称你可以任意修改，但是为了代码的可读性，文件结构的清晰，推荐大家采用这种一看就懂的方式。\n\n#### 数据缓存Storage\n\nlogs页面还涉及到数据缓存Storage方面的知识。通过前面的学习，我们了解到**点击事件生成的事件对象**也好，使用**数据表单提交的数据**也好，还是**上传的图片、文件**也好，只要我们重新编译小程序，这些数据都会消失。前面我们也提到存储数据、文件的方式有三种，一是保存到本地手机、二就是缓存，三是上传到服务器\n\n**技术文档：**[wx.setStorageSync()](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html)、[wx.getStorageSync()](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html)\n\n**保存文件**\n\n> **注意：**尽管上传图片和上传文件都是把图片或文件先上传到临时文件里，但是**保存图片wx.saveImageToPhotosAlbum()**和**保存文件wx.saveFile()**是完全不同的概念，保存图片是把图片保存到手机本地相册；而保存文件则是把图片由临时文件移动到本地存储里，而本地存储每个小程序用户只有10M的空间。\n\n**保存文件技术文档：**[wx.saveFile()](https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFile.html)","source":"_posts/腾讯犀牛鸟云开发校园技术布道师养成计划第四天.md","raw":"---\ntitle: 腾讯犀牛鸟云开发校园技术布道师养成计划第四天\ntags:\n  - 微信小程序\n  - 云开发\ncategories:\n  - 微信小程序\ntop: false\ndate: 2020-03-20 10:34:08\n---\n\n# 生命周期\n\n函数可以操作（增删改查）数据（包括字符串、数组、对象、Boolean等所有数据类型），组件拥有了属性数据，也就拥有了被编程的能力，可见携带数据的重要性（id、class、style甚至点击事件都是组件携带的数据，都可以用来编程）。\n\n#### 链接携带数据\n\n**URL链接的特殊字符**\n\n```html\nhttps://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=云开发&rsv_pq=81ee270400007011&rsv_t=ed834wm24xdJRGRsfv7bxPKX%2FXGlLt6fqh%2BiB9x5g0EUQjyxdCDbTXHbSFE&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=20&rsv_sug1=19&rsv_sug7=100&rsv_sug2=0&inputT=5035&rsv_sug4=6227\n```\n\n这些链接通常包括以下特殊字符，以及都有着基本相同的含义，通过这些特殊字符，链接就被塞进了很多数据信息，其中?、&、=是我们接下来关注的重点。\n\n- / 分隔目录和子目录\n- ? 分隔实际的URL和参数\n- & URL中指定的参数间的分隔符\n- = URL中指定的参数的值\n- \\# 同一个页面的位置标识符，类似于页面的书签；\n\n**获取URL链接的数据**\n\n**获取url参数的生命周期函数onload**\n\nonload是Page页面的生命周期函数，当页面加载时触发。一个页面只会调用一次，可以在 onLoad 函数的参数中获取打开当前页面路径中的参数。\n\n```json\n {id: \"lesson\", uid: \"tcb\", key: \"tap\", ENV: \"weapp\", frompage: \"lifecycle\"}\n```\n\n相信大家会这样的数据类型非常熟悉，它就是一个对象Object，我们可以通过点表示法，获取到对象里具体的属性，比如options.id就能显示我们在lifecycle点击的组件的id。\n\n**数据跨页面**\n\n**跨页面数据渲染**\n\n当然我们也可以继续把数据使用setData渲染到detail页面，为方便我们仅渲染图片信息\n\n> 不过使用链接url传递参数有字节限制以及只能在跨页面中使用，但是可以用来传递比如页面链接来源，可以追踪用户来自于什么设备、什么App、通过什么方式以及来自哪个朋友的邀请链接；还可以用于一些网页链接的API必备的id、key等。跨多个页面以及传递更多参数、数据等，可以使用公共数据存储app.globalData（本节会介绍）、数据缓存（后面章节会介绍）、数据库（云开发部分会介绍）以及新增的页面间通信接口[getOpenerEventChannel](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html)（这里不多介绍）\n\n#### 组件携带数据dataset\n\n组件有公有属性和私有属性，这些属性都是数据，事件处理函数可以修改这些属性，从而让组件有丰富的表现形式。不仅如此，在组件节点中还可以**附加一些自定义数据**。在事件中可以获取这些自定义的节点数据，用于事件的逻辑处理，从而让组件变成相当复杂且强大的编程对象。\n\n**使用JavaScript代替Navigator组件**\n\n当我们点击lifecycle页面的图片时，clickImage会收到一个事件对象，打印出来的结果里包含着target和currentTarget两个属性，currentTarget指向事件所绑定的元素，而target始终指向事件发生时的元素。由于这个案例事件绑定的元素和事件发生时的元素都是imageclick，所以它们的值相同，它们里面都包含了**当前组件**的id，以及dataset\n\n> 值得强调的是很多童鞋以为只有点击Navigator组件、button组件才能进行链接跳转，这是思维定势的误区，通过bindtap，组件被赋予了一定的编程能力，尽管没有url属性，使用wx.navigateTo也能具备这种能力。\n\n> 我们点击的是图片image组件，却分别触发了绑定在image组件以及image的父级（上一级）组件view的事件处理函数，我们称这为**事件冒泡**。\n\n**点击组件显示当前组件其他数据** \n\n通过事件对象我们不仅可以明确知道点击了什么组件，而且还可以获取当前组件的自定义数据。\n\n#### 小程序和页面的生命周期\n\n**小程序构造器：**[App(Object object)](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html)\n\n**页面构造器：**[Page(Object object)](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html)\n\n**打印日志了解生命周期**\n\n对小程序和页面的生命周期，我们可以通过打印日志的方式来了解生命周期函数具体的执行顺序和情况，使用开发者工具在app.js里给onLaunch、onShow、onHide添加一些打印日志。\n\n```javascript\nonLaunch(opts) {\n    console.log('onLaunch监听小程序初始化。',opts)\n  },\n  onShow(opts) {\n    console.log('onShow监听小程序启动或切前台',opts)\n  },\n  onHide() {\n    console.log('onHide监听小程序切后台')\n  },\n```\n\n> 有的参数写的options，有的写的却是opts；前面事件对象有的写的是event，有的则用的是e，这个参数都是可以自定义的\n\n**小程序打开场景值**\n\n在 App 的 onLaunch 和 onShow打印的对象里有一个scene为1001，这个是场景值。场景值用来描述用户进入小程序的路径方式。用户进入你的小程序的方式有很多，比如有的是扫描二维码、有的是长按图片识别二维码，有的是通过微信群进入的小程序，有的是朋友单聊进入的小程序，有的是通过公众号进入的小程序等等，这些就是场景值，而具体的场景值，可以看技术文档，场景值对产品、运营来说非常重要。\n\n**技术文档：**[场景值列表](https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html)\n\n**onLaunch与onShow**\n\nonLaunch是监听小程序的初始化，初始化完成时触发，**全局只会触发一次**，所以在这里我们可以用来执行获取用户登录信息的函数等一些非常核心的数据，如果onLaunch的函数过多，会影响小程序的启动速度。\n\nonShow是在小程序启动，或从后台进入前台显示时触发，也就是**它会触发很多次**，在这里就不大适合放获取用户登录信息的函数啦。这两者的区别要注意。\n\n#### 用户登录与信息获取\n\n小程序用户登录和获取用户信息相对来说比较复杂\n\n**了解wx.login、wx.getSetting**\n\n从控制台可以看到wx.login会得到errMsg和code，这个code是用户的登录凭证。而wx.getSetting则会得到errMsg和用户当前的[权限设置authSetting](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/AuthSetting.html)，包含是否允许获取用户信息，是否允许获取用户位置，是否允许使用手机相册等权限。我们可以根据打印的结果结合技术文档来深入理解。\n\n**技术文档：**[获取用户登录凭证wx.login](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html)、[获取用户当前权限设置wx.getSetting](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html)\n\n**获取用户信息wx.getUserInfo**\n\n我们要获取用户信息，首先需要判断用户是否允许，可以从authSetting对象里看scope.userInfo属性是否为true，如果为true，那我们可以调用wx.getUserInfo()接口来获取用户信息。\n\n**globalData**\n\nglobalData对象通常用来存放整个小程序都会使用到的数据，比如我们可以把用户信息赋值给globalData的任意自定义属性。\n\n**that与this**\n\nthis的指向情况非常复杂，尽管**哪个对象调用函数，函数里面的this就指向哪个对象**，说起来非常简单，但是场景太多，大家在开发时不必强行理解，死记硬背，把this打印出来即可。\n\n**getApp()**\n\n那我们如何在页面的js里调用globalData呢，这个时候就需要用到getApp()函数啦。\n\n**技术文档：**[getApp()](https://developers.weixin.qq.com/miniprogram/dev/reference/api/getApp.html)\n\n#### 通过button来获取用户信息\n\n**将用户信息写进app.js**\n\n这种方式只能在user页面才能获取到用户信息，限制非常大，那我们应该怎么做呢？我们要把获取到的用户信息写到app.js成为页面的公共信息，以后可以跨页面只需在user页面点击一次按钮即可。\n\n在getUserInfomation将获取到的用户信息传给globalData的userInfo属性：\n\n> 获取用户信息还有一种方式，就是通过组件[open-data](https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html)来展示，比较简单\n\n# 数据表单\n\n所用到的数据大多都是我们在js的data里写好的,无论是计算器、用户注册、表单收集、发表文章、评论等等，这些都是对用户提交数据的获取。\n\n#### 设置导航栏标题\n\n动态设置导航栏标题是一个非常简单的API，在技术文档里面可以了解到，只要给wx.setNavigationBarTitle()的title对象赋值，就能改变小程序页面的标题。\n\n**技术文档：**[wx.setNavigationBarTitle()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html)\n\n**onLoad调用API**\n\n**button调用API**\n\n**使用表单修改标题**\n\n小程序一个**完整的数据表单**收集通常包含**一个form组件**，**一个输入框或选择器组件**（比如input组件），**一个button组件**。\n\n数据表单涉及到的组件多（至少三个），参数以及参数的类型也比较多，上面有几个非常重要的点，大家可以结合上面的代码来理解：\n\n- 表单最核心的在于表单组件form，输入框组件input和button组件要在<form></form>内，form也会收集内部组件提交的数据；\n- 绑定事件处理函数的不再是button，而是form，form的bindsubmit与button的 formType=\"submit\"是一对，点击button，就会执行bindsubmit的事件处理函数；\n- input是输入框，用户可以在里面添加信息；name是input组件的名称，与表单数据一起提交。\n\n> 对数据表单来说，使用console.log打印事件对象可以让我们对表单提交的数据有一个非常清晰的了解；而使用赋值以及setData可以有效的把表单收集到的数据渲染到页面。\n\n#### 文本输入框input\n\n小程序的输入框input主要用来处理**文本和数字**的输入，下面我们就来结合实战与技术文档，来了解一下文本输入框input的type、name、placeholder等属性。\n\n**技术文档：**[input技术文档](https://developers.weixin.qq.com/miniprogram/dev/component/input.html)\n\n使用开发者工具在form.wxml里输入以下代码，一个form组件里面可以包含多个选择器或文本输入框组件，提交数据时，会提交form里面填写的所有数据：\n\ninput输入框会因为属性的类型的不同，**手机键盘外观会有比较大的差异**，所以需要点击预览，用微信扫描二维码在手机上体验（也可以启用真机调试）。\n\n- input输入框支持的type值有文本输入text、数字输入number、身份证输入idcard、小数点输入digit，当type不同时，**注意手机键盘外观的不同**；\n- placeholder:输入框为空时的占位符（也就是默认值）；maxlength：最大输入长度；password和disabled都是boolean值，使用方法和之前的video组件里面的boolean属性一样。\n\n在开发者工具的控制台我们可以看到打印的事件对象里的value对象，属性名即为input的name名，值即为我们输入的数据。如果没有name。\n\n#### 表单组件组合\n\n一个完整的数据收集表单，除了可以提交input文本框里面的数据，还可以提交开关选择器按钮switch、滑动选择器按钮slider、单选按钮radio、多选按钮checkbox等组件里面的数据。\n\n**技术文档：**[switch开关选择](https://developers.weixin.qq.com/miniprogram/dev/component/switch.html)、[Slider滑动选择](https://developers.weixin.qq.com/miniprogram/dev/component/slider.html)、[Radio单选](https://developers.weixin.qq.com/miniprogram/dev/component/radio.html)、[checkbox多选](https://developers.weixin.qq.com/miniprogram/dev/component/checkbox.html)、[form表单](https://developers.weixin.qq.com/miniprogram/dev/component/form.html)\n\n表单组件提交的数据都存储在事件对象e的detail属性下的value里.\n\n- **switch属性：**记录switch开关选择的值，这是一个boolean值，ture为开，false为关；\n\n- **sex属性：**记录name名为sex的单选按钮的值，它只记录单选选择的那一项的值；\n\n- process属性：\n\n   记录name名为process的滑动选择器的值，\n\n  show-value为boolean值，显示当前value值，数据类型为number；\n\n- **textinput属性：**记录name名为textinput的input文本输入框的值；\n\n- **gamecheck属性：**记录name名为gamecheck的多选组件的值，**数据类型为数组Array**。\n\n点击**重置按钮**，即会重置表单，并不需要formReset事件处理函数做额外的处理。\n\n> 我们发现上面button属性，有时用的是form-type，有时用的是formType(注意两者的大小写)，这两种写法都可以。我们也可以删掉重置的事件处理函数formReset，以及form组件的 bindreset=\"formReset\"，只需要将button的form-type设置为reset，也就是\n>\n> ```html\n> <button form-type=\"reset\">重置</button>\n> ```\n>\n> 就可以达到重置的效果，绑定事件处理函数bindreset\n\n**数组的扩展运算符**\n\n在这里我们先来介绍一下**扩展运算符**的概念，它的写法很简单，就是三个点 `...`。\n\n从控制台可以看到直接打印gamecheck，它是一个数组Array，中括号[ ]就可以看出来，展开也有index值；而使用扩展运算符打印gamecheck，是**将数组里的值都遍历了出来**。这就是扩展运算符…的作用\n\n#### 添加手机联系人\n\n尽管我们提交了数据，但是当小程序重新编译之后，所有的数据都会被重置，也就是提交的数据并没有保存起来。小程序存储数据有三种方式，一是保存在本地手机上；二是存储到缓存里；三是存储到数据库。\n\n**添加手机通讯录联系人：**[wx.addPhoneContact()](https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.addPhoneContact.html)\n\n**对象的扩展运算符**\n\n对象的扩展运算符 ...也有类型的作用，它可以取出对象里所有可遍历的属性，拷贝到新的对象中。\n\n#### input绑定事件处理函数\n\n在form表单里，尽管表单里也有input组件，但是绑定事件处理函数的是form组件，input组件只提供value值，而input文本输入组件本身也是可以绑定事件处理函数的。从技术文档里我们了解到input可以绑定事件处理函数的属性有：bindinput，键盘输入时触发；bindfocus，输入框聚焦时触发；bindblur，输入框失焦时触发等等\n\n**bindinput响应式数据渲染**\n\n**剪贴板**\n\n本节前面的添加手机联系人是把收集到的数据存储到**本地手机**的通讯录里，而剪切板则是把数据存储到**本地手机**的剪切板里。\n\n技术文档：[设置剪切板内容wx.setClipboardData()](https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.setClipboardData.html)、[获取剪切板内容wx.getClipboardData()](https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.getClipboardData.html)\n\n#### slider响应设置颜色\n\nslider滑动选择器也可以绑定事件处理函数，有：bindchange完成一次拖动后触发的事件以及bindchanging拖动过程中触发的事件。\n\n**技术文档：**[滑动选择器slider](https://developers.weixin.qq.com/miniprogram/dev/component/slider.html)\n\n我们要先回顾一下事件对象里**data-\\*携带的数据**和**表单组件携带的数据：**首先组件data-*属性的数据会存储在事件对象里的currentTarget下的dataset里的属性名里，也就是data-color的值会存储在 e.currentTarget.dataset.color里；而表单组件的数据则是存储在事件对象的detail里，也就是e.detail.value里。\n\n#### picker组件\n\npicker滚动选择器看起来样式非常复杂，不过小程序已经帮我们封装好了，我们只需要用几行简单的代码就可以做一个非常复杂而且类别多样的滚动选择器。\n\n**技术文档：**[滚动选择器picker](https://developers.weixin.qq.com/miniprogram/dev/component/picker.html)\n\n使用开发者工具在form.wxm里输入以下代码，只需要下面几行代码，就能从底部弹起一个日期的滚动选择器。而里面的文字可以任意填写，类似于button、navigator组件里的字，点击即可执行相应的事件。\n\n```html\n<picker mode=\"date\" value=\"{{pickerdate}}\" start=\"2017-09-01\" end=\"2022-09-01\" bindchange=\"bindDateChange\">\n选择的日期为：{{pickerdate}}\n</picker>\n```\n\n- mode属性：滚动选择器有几种模式，不同的模式可以弹出不同类型的滚动选择器，这里的是date日期选择，其他模式大体相似；\n- start和end属性：这是日期选择器特有的属性，为有效日期的开始和结束，我们可以滚动试下，超出这个范围就没法滚动了;\n- ![2020-03-20 21-31-30 的屏幕截图.png](http://ww1.sinaimg.cn/large/005W6BOngy1gd0s88um3rj31hc0u0ak3.jpg)\n\n# 图片、缓存与文件\n\n获取手机相册里的图片和手机相机拍照的照片、手机的定位以及获取手机里的缓存、文件，并使用JavaScript操作图片、操作缓存和操作文件等。\n\n#### 获取手机相册或拍照的图片\n\n用小程序来获取手机相册里的图片和拍照的照片听起来好像挺复杂的，不过因为有了API，我们只需要结合前面的点击事件、事件处理函数以及调用API、传入指定的参数就能很容易做到。\n\n**技术文档：**[wx.chooseImage()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html)\n\n**上传一张照片**\n\n- **count**：可以选择的照片数量，默认为9张（由于imgurl声明的是字符串，多张照片需为数组Array，后面有上传多张图片的案例）\n- **sourceType**：选择图片的来源，album就是图片可以来自手机相册；而camera是可以来自手机拍照，两个都写就是来自相册或拍照都可以；\n- **sizeType：**所选的图片的尺寸，original为原图，compressed为压缩图，为了减轻服务器压力，建议为压缩图；\n- **tempFilePaths**为临时文件的**路径列表**，**tempFiles**为临时**文件列表**，注意这两个值都为数组。\n\n**空值的处理**\n\n我们可以看到由于imgurl为空值，image组件有默认宽度300px、高度225px（会随css而改变大小），所以显示**上传的图片**会与**选择图片**的button有一段空白，处理的方法有三种：\n\n**方法一：**我们可以给imgurl弄一张初始图片的链接，为了让界面更加美观、交互性更好，通常都会设置一个默认的图片，比如默认的头像，当用户上传时，setData就会取代初始图片；\n\n**方法二：**判断imgurl是否有内容，比如我们可以加一层逻辑判断，当Page()里的data下的imgurl属性非空时，组件才会显示；空时就不显示。\n\n**方法三：**这个方法和方法二类似，设置一个逻辑判断\n\n**上传多张照片**\n\n如果上传的是多张照片，那么imgurl的初始值就不能是字符串了，而是一个数组Array，\n\n#### 操作图片\n\n使用小程序图片API不仅可以上传图片，还可以对上传的图片进行一定的操作，比如获取图片信息、预览图片、保存图片、压缩图片等等。\n\n**获取图片信息**\n\n无论是存储在小程序本地，还是存储在临时文件、缓存、网络上的图片，使用wx.getImageInfo() 都可以获取到该图片的宽度、高度、路径、格式以及拍照方向。\n\n**技术文档：**[wx.getImageInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html)\n\n> **回调函数**\n>\n> 经过之前的学习，相信大家对回调函数success、fail有了一定的认识，那什么是回调函数呢？简单一点说就是：**回调Callback是指在另一个函数执行完成之后被调用的函数**。success、fail就都是在小程序的API函数执行完成之后，才会被调用，而success和fail它们本身也是函数，也能返回数据。而复杂一点说，就是回调函数本身就是函数，但是它们却被其他函数给调用，而调用函数的函数被称为**高阶函数**。这些大家只需要粗略了解就可以了。\n>\n> **异步与同步**\n>\n> 我们前面也提及过异步，那什么会有异步呢？因为JavaScript是单线程的编程语言，就是从上到下、一行一行去执行代码，类似于排队一样一个个处理，第一个不处理完，就不会处理后面的。但是遇到网络请求、I/O操作（比如上面的读取图片信息）以及定时函数（后面会涉及）以及类似于成功反馈的情况，等这些不可预知时间的任务都执行完再处理后面的任务，肯定不行，于是就有了**异步处理**。\n>\n> 把要等待其他函数执行完之后，才能执行的函数（比如读取图片信息）放到回调函数里，先不处理，等图片上传成功之后再来处理，这就是异步。比如wx.showToast()消息提示框，可以放到回调函数里，当API调用成功之后再来显示提示消息。回调函数相当于是异步的一个解决方案。\n\n**预览所有上传的图片**\n\n预览图片就是在新页面里全屏打开图片，预览的过程中用户可以进行保存图片、发送给朋友等操作。可以预览一张照片或者多张照片。\n\n**技术文档：**[wx.previewImage()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html)\n\n> 这个场景主要用于让用户可以**预览、保存或分享图片**，毕竟image组件是不支持图片的放大预览、保存到本地、转发给好友，现在微信还支持预览小程序码，长按就可以打开小程序，这个API主要是为了增强用户的交互体验的。\n\n**保存图片到相册**\n\n小程序**不支持直接将网络图片**保存到本地手机的系统相册，支持临时文件路径和小程序本地路径。\n\n**技术文档：**[wx.saveImageToPhotosAlbum()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html)\n\n> 当然永久链接实际开发用得不会太多，使用最多的场景是把**网络图片下载到临时链接（因为不能直接保存网络图片），再将临时链接的图片保存到相册**，只需把上面的永久链接换成临时链接就可以了.\n\n**压缩图片**\n\n小程序是有压缩图片的API的[wx.compressImage()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.compressImage.html)，尤其是在上传图片时，为了减轻存储服务器的压力，不能让用户上传分辨率过高的照片。\n\n- 可以先让用户上传图片；\n- 图片上传成功之后（也就是在上传图片的**success回调函数**里）再来获取图片的信息；\n- 获取信息成功后（也就是在获取图片信息的**success回调函数**里）判断宽度或高度是否过大，如果图片过大，就压缩图片，\n- 压缩图片成功后（也就是在压缩图片的**success回调函数**里），再把压缩好的图片上传到服务器\n\n上传图片、获取图片信息、压缩图片、上传图片到服务器，每一步都依赖上一步，所以会不断在success回调函数里写函数，实际开发涉及的业务会更复杂，就会不断回调，这被称之为**回调地狱**。\n\n> 由于压缩图片使用到的场景不算太多，毕竟我们在上传照片时可以不支持上传原图original，只支持压缩compressed就能保证上传图片的大小了\n\n#### 上传文件\n\n小程序不仅支持上传图片image，还支持上传视频、Excel、PDF、音频等等其他文件格式，但是我们只能从**客户端会话**里（也就是微信单聊、群聊的聊天记录里）选择其他格式的文件。\n\n**技术文档：**[wx.chooseMessageFile()](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html)\n\n#### 上传地理位置\n\n除了可以上传图片、音视频以及各种文件格式以外，小程序还支持上传地理位置。\n\n**技术文档：**[wx.chooseLocation()](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html)\n\n#### 模块化与格式化\n\n在新建模板小程序里（不使用云开发服务），有一个日志logs页面，这个日志logs虽然简单，但是包含着非常复杂的JavaScript知识，是一个非常好的学习参考案例，这里我们来对它进行一一解读。\n\n**模块化与引入模块**\n\n在实际开发中，日期、时间的处理经常会使用到，但是使用[Date对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date)所获取到的时间格式与我们想要展现的形式是有非常大的差异的。这时我们可以把时间的处理抽离成为一个单独的 js 文件比如**util.js**（util是utility的缩写，表示程序集，通用程序等意思），作为一个模块。\n\n> 把通用的模块放在util.js或者common.js，把util.js放在utils文件夹里等就跟把css放在style文件夹，把页面放在pages文件夹，把图片放在images文件夹里是一样的道理，尽管文件夹或文件的名称你可以任意修改，但是为了代码的可读性，文件结构的清晰，推荐大家采用这种一看就懂的方式。\n\n#### 数据缓存Storage\n\nlogs页面还涉及到数据缓存Storage方面的知识。通过前面的学习，我们了解到**点击事件生成的事件对象**也好，使用**数据表单提交的数据**也好，还是**上传的图片、文件**也好，只要我们重新编译小程序，这些数据都会消失。前面我们也提到存储数据、文件的方式有三种，一是保存到本地手机、二就是缓存，三是上传到服务器\n\n**技术文档：**[wx.setStorageSync()](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html)、[wx.getStorageSync()](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html)\n\n**保存文件**\n\n> **注意：**尽管上传图片和上传文件都是把图片或文件先上传到临时文件里，但是**保存图片wx.saveImageToPhotosAlbum()**和**保存文件wx.saveFile()**是完全不同的概念，保存图片是把图片保存到手机本地相册；而保存文件则是把图片由临时文件移动到本地存储里，而本地存储每个小程序用户只有10M的空间。\n\n**保存文件技术文档：**[wx.saveFile()](https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFile.html)","slug":"腾讯犀牛鸟云开发校园技术布道师养成计划第四天","published":1,"updated":"2022-08-25T14:12:05.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39f005r12mja4xq4w9c","content":"<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><p>函数可以操作（增删改查）数据（包括字符串、数组、对象、Boolean等所有数据类型），组件拥有了属性数据，也就拥有了被编程的能力，可见携带数据的重要性（id、class、style甚至点击事件都是组件携带的数据，都可以用来编程）。</p>\n<h4 id=\"链接携带数据\"><a href=\"#链接携带数据\" class=\"headerlink\" title=\"链接携带数据\"></a>链接携带数据</h4><p><strong>URL链接的特殊字符</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=云开发&amp;rsv_pq=81ee270400007011&amp;rsv_t=ed834wm24xdJRGRsfv7bxPKX%2FXGlLt6fqh%2BiB9x5g0EUQjyxdCDbTXHbSFE&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=20&amp;rsv_sug1=19&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;inputT=5035&amp;rsv_sug4=6227<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这些链接通常包括以下特殊字符，以及都有着基本相同的含义，通过这些特殊字符，链接就被塞进了很多数据信息，其中?、&amp;、=是我们接下来关注的重点。</p>\n<ul>\n<li>/ 分隔目录和子目录</li>\n<li>? 分隔实际的URL和参数</li>\n<li>&amp; URL中指定的参数间的分隔符</li>\n<li>= URL中指定的参数的值</li>\n<li># 同一个页面的位置标识符，类似于页面的书签；</li>\n</ul>\n<p><strong>获取URL链接的数据</strong></p>\n<p><strong>获取url参数的生命周期函数onload</strong></p>\n<p>onload是Page页面的生命周期函数，当页面加载时触发。一个页面只会调用一次，可以在 onLoad 函数的参数中获取打开当前页面路径中的参数。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">\"lesson\"</span><span class=\"token punctuation\">,</span> uid<span class=\"token operator\">:</span> <span class=\"token string\">\"tcb\"</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">\"tap\"</span><span class=\"token punctuation\">,</span> ENV<span class=\"token operator\">:</span> <span class=\"token string\">\"weapp\"</span><span class=\"token punctuation\">,</span> frompage<span class=\"token operator\">:</span> <span class=\"token string\">\"lifecycle\"</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>相信大家会这样的数据类型非常熟悉，它就是一个对象Object，我们可以通过点表示法，获取到对象里具体的属性，比如options.id就能显示我们在lifecycle点击的组件的id。</p>\n<p><strong>数据跨页面</strong></p>\n<p><strong>跨页面数据渲染</strong></p>\n<p>当然我们也可以继续把数据使用setData渲染到detail页面，为方便我们仅渲染图片信息</p>\n<blockquote>\n<p>不过使用链接url传递参数有字节限制以及只能在跨页面中使用，但是可以用来传递比如页面链接来源，可以追踪用户来自于什么设备、什么App、通过什么方式以及来自哪个朋友的邀请链接；还可以用于一些网页链接的API必备的id、key等。跨多个页面以及传递更多参数、数据等，可以使用公共数据存储app.globalData（本节会介绍）、数据缓存（后面章节会介绍）、数据库（云开发部分会介绍）以及新增的页面间通信接口<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html\">getOpenerEventChannel</a>（这里不多介绍）</p>\n</blockquote>\n<h4 id=\"组件携带数据dataset\"><a href=\"#组件携带数据dataset\" class=\"headerlink\" title=\"组件携带数据dataset\"></a>组件携带数据dataset</h4><p>组件有公有属性和私有属性，这些属性都是数据，事件处理函数可以修改这些属性，从而让组件有丰富的表现形式。不仅如此，在组件节点中还可以<strong>附加一些自定义数据</strong>。在事件中可以获取这些自定义的节点数据，用于事件的逻辑处理，从而让组件变成相当复杂且强大的编程对象。</p>\n<p><strong>使用JavaScript代替Navigator组件</strong></p>\n<p>当我们点击lifecycle页面的图片时，clickImage会收到一个事件对象，打印出来的结果里包含着target和currentTarget两个属性，currentTarget指向事件所绑定的元素，而target始终指向事件发生时的元素。由于这个案例事件绑定的元素和事件发生时的元素都是imageclick，所以它们的值相同，它们里面都包含了<strong>当前组件</strong>的id，以及dataset</p>\n<blockquote>\n<p>值得强调的是很多童鞋以为只有点击Navigator组件、button组件才能进行链接跳转，这是思维定势的误区，通过bindtap，组件被赋予了一定的编程能力，尽管没有url属性，使用wx.navigateTo也能具备这种能力。</p>\n</blockquote>\n<blockquote>\n<p>我们点击的是图片image组件，却分别触发了绑定在image组件以及image的父级（上一级）组件view的事件处理函数，我们称这为<strong>事件冒泡</strong>。</p>\n</blockquote>\n<p><strong>点击组件显示当前组件其他数据</strong> </p>\n<p>通过事件对象我们不仅可以明确知道点击了什么组件，而且还可以获取当前组件的自定义数据。</p>\n<h4 id=\"小程序和页面的生命周期\"><a href=\"#小程序和页面的生命周期\" class=\"headerlink\" title=\"小程序和页面的生命周期\"></a>小程序和页面的生命周期</h4><p><strong>小程序构造器：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html\">App(Object object)</a></p>\n<p><strong>页面构造器：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html\">Page(Object object)</a></p>\n<p><strong>打印日志了解生命周期</strong></p>\n<p>对小程序和页面的生命周期，我们可以通过打印日志的方式来了解生命周期函数具体的执行顺序和情况，使用开发者工具在app.js里给onLaunch、onShow、onHide添加一些打印日志。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">onLaunch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onLaunch监听小程序初始化。'</span><span class=\"token punctuation\">,</span>opts<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onShow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onShow监听小程序启动或切前台'</span><span class=\"token punctuation\">,</span>opts<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onHide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onHide监听小程序切后台'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>有的参数写的options，有的写的却是opts；前面事件对象有的写的是event，有的则用的是e，这个参数都是可以自定义的</p>\n</blockquote>\n<p><strong>小程序打开场景值</strong></p>\n<p>在 App 的 onLaunch 和 onShow打印的对象里有一个scene为1001，这个是场景值。场景值用来描述用户进入小程序的路径方式。用户进入你的小程序的方式有很多，比如有的是扫描二维码、有的是长按图片识别二维码，有的是通过微信群进入的小程序，有的是朋友单聊进入的小程序，有的是通过公众号进入的小程序等等，这些就是场景值，而具体的场景值，可以看技术文档，场景值对产品、运营来说非常重要。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html\">场景值列表</a></p>\n<p><strong>onLaunch与onShow</strong></p>\n<p>onLaunch是监听小程序的初始化，初始化完成时触发，<strong>全局只会触发一次</strong>，所以在这里我们可以用来执行获取用户登录信息的函数等一些非常核心的数据，如果onLaunch的函数过多，会影响小程序的启动速度。</p>\n<p>onShow是在小程序启动，或从后台进入前台显示时触发，也就是<strong>它会触发很多次</strong>，在这里就不大适合放获取用户登录信息的函数啦。这两者的区别要注意。</p>\n<h4 id=\"用户登录与信息获取\"><a href=\"#用户登录与信息获取\" class=\"headerlink\" title=\"用户登录与信息获取\"></a>用户登录与信息获取</h4><p>小程序用户登录和获取用户信息相对来说比较复杂</p>\n<p><strong>了解wx.login、wx.getSetting</strong></p>\n<p>从控制台可以看到wx.login会得到errMsg和code，这个code是用户的登录凭证。而wx.getSetting则会得到errMsg和用户当前的<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/AuthSetting.html\">权限设置authSetting</a>，包含是否允许获取用户信息，是否允许获取用户位置，是否允许使用手机相册等权限。我们可以根据打印的结果结合技术文档来深入理解。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html\">获取用户登录凭证wx.login</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html\">获取用户当前权限设置wx.getSetting</a></p>\n<p><strong>获取用户信息wx.getUserInfo</strong></p>\n<p>我们要获取用户信息，首先需要判断用户是否允许，可以从authSetting对象里看scope.userInfo属性是否为true，如果为true，那我们可以调用wx.getUserInfo()接口来获取用户信息。</p>\n<p><strong>globalData</strong></p>\n<p>globalData对象通常用来存放整个小程序都会使用到的数据，比如我们可以把用户信息赋值给globalData的任意自定义属性。</p>\n<p><strong>that与this</strong></p>\n<p>this的指向情况非常复杂，尽管<strong>哪个对象调用函数，函数里面的this就指向哪个对象</strong>，说起来非常简单，但是场景太多，大家在开发时不必强行理解，死记硬背，把this打印出来即可。</p>\n<p><strong>getApp()</strong></p>\n<p>那我们如何在页面的js里调用globalData呢，这个时候就需要用到getApp()函数啦。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/getApp.html\">getApp()</a></p>\n<h4 id=\"通过button来获取用户信息\"><a href=\"#通过button来获取用户信息\" class=\"headerlink\" title=\"通过button来获取用户信息\"></a>通过button来获取用户信息</h4><p><strong>将用户信息写进app.js</strong></p>\n<p>这种方式只能在user页面才能获取到用户信息，限制非常大，那我们应该怎么做呢？我们要把获取到的用户信息写到app.js成为页面的公共信息，以后可以跨页面只需在user页面点击一次按钮即可。</p>\n<p>在getUserInfomation将获取到的用户信息传给globalData的userInfo属性：</p>\n<blockquote>\n<p>获取用户信息还有一种方式，就是通过组件<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html\">open-data</a>来展示，比较简单</p>\n</blockquote>\n<h1 id=\"数据表单\"><a href=\"#数据表单\" class=\"headerlink\" title=\"数据表单\"></a>数据表单</h1><p>所用到的数据大多都是我们在js的data里写好的,无论是计算器、用户注册、表单收集、发表文章、评论等等，这些都是对用户提交数据的获取。</p>\n<h4 id=\"设置导航栏标题\"><a href=\"#设置导航栏标题\" class=\"headerlink\" title=\"设置导航栏标题\"></a>设置导航栏标题</h4><p>动态设置导航栏标题是一个非常简单的API，在技术文档里面可以了解到，只要给wx.setNavigationBarTitle()的title对象赋值，就能改变小程序页面的标题。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html\">wx.setNavigationBarTitle()</a></p>\n<p><strong>onLoad调用API</strong></p>\n<p><strong>button调用API</strong></p>\n<p><strong>使用表单修改标题</strong></p>\n<p>小程序一个<strong>完整的数据表单</strong>收集通常包含<strong>一个form组件</strong>，<strong>一个输入框或选择器组件</strong>（比如input组件），<strong>一个button组件</strong>。</p>\n<p>数据表单涉及到的组件多（至少三个），参数以及参数的类型也比较多，上面有几个非常重要的点，大家可以结合上面的代码来理解：</p>\n<ul>\n<li>表单最核心的在于表单组件form，输入框组件input和button组件要在<form></form>内，form也会收集内部组件提交的数据；</li>\n<li>绑定事件处理函数的不再是button，而是form，form的bindsubmit与button的 formType=”submit”是一对，点击button，就会执行bindsubmit的事件处理函数；</li>\n<li>input是输入框，用户可以在里面添加信息；name是input组件的名称，与表单数据一起提交。</li>\n</ul>\n<blockquote>\n<p>对数据表单来说，使用console.log打印事件对象可以让我们对表单提交的数据有一个非常清晰的了解；而使用赋值以及setData可以有效的把表单收集到的数据渲染到页面。</p>\n</blockquote>\n<h4 id=\"文本输入框input\"><a href=\"#文本输入框input\" class=\"headerlink\" title=\"文本输入框input\"></a>文本输入框input</h4><p>小程序的输入框input主要用来处理<strong>文本和数字</strong>的输入，下面我们就来结合实战与技术文档，来了解一下文本输入框input的type、name、placeholder等属性。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/input.html\">input技术文档</a></p>\n<p>使用开发者工具在form.wxml里输入以下代码，一个form组件里面可以包含多个选择器或文本输入框组件，提交数据时，会提交form里面填写的所有数据：</p>\n<p>input输入框会因为属性的类型的不同，<strong>手机键盘外观会有比较大的差异</strong>，所以需要点击预览，用微信扫描二维码在手机上体验（也可以启用真机调试）。</p>\n<ul>\n<li>input输入框支持的type值有文本输入text、数字输入number、身份证输入idcard、小数点输入digit，当type不同时，<strong>注意手机键盘外观的不同</strong>；</li>\n<li>placeholder:输入框为空时的占位符（也就是默认值）；maxlength：最大输入长度；password和disabled都是boolean值，使用方法和之前的video组件里面的boolean属性一样。</li>\n</ul>\n<p>在开发者工具的控制台我们可以看到打印的事件对象里的value对象，属性名即为input的name名，值即为我们输入的数据。如果没有name。</p>\n<h4 id=\"表单组件组合\"><a href=\"#表单组件组合\" class=\"headerlink\" title=\"表单组件组合\"></a>表单组件组合</h4><p>一个完整的数据收集表单，除了可以提交input文本框里面的数据，还可以提交开关选择器按钮switch、滑动选择器按钮slider、单选按钮radio、多选按钮checkbox等组件里面的数据。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/switch.html\">switch开关选择</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/slider.html\">Slider滑动选择</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/radio.html\">Radio单选</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/checkbox.html\">checkbox多选</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/form.html\">form表单</a></p>\n<p>表单组件提交的数据都存储在事件对象e的detail属性下的value里.</p>\n<ul>\n<li><p><strong>switch属性：</strong>记录switch开关选择的值，这是一个boolean值，ture为开，false为关；</p>\n</li>\n<li><p><strong>sex属性：</strong>记录name名为sex的单选按钮的值，它只记录单选选择的那一项的值；</p>\n</li>\n<li><p>process属性：</p>\n<p> 记录name名为process的滑动选择器的值，</p>\n<p>show-value为boolean值，显示当前value值，数据类型为number；</p>\n</li>\n<li><p><strong>textinput属性：</strong>记录name名为textinput的input文本输入框的值；</p>\n</li>\n<li><p><strong>gamecheck属性：</strong>记录name名为gamecheck的多选组件的值，<strong>数据类型为数组Array</strong>。</p>\n</li>\n</ul>\n<p>点击<strong>重置按钮</strong>，即会重置表单，并不需要formReset事件处理函数做额外的处理。</p>\n<blockquote>\n<p>我们发现上面button属性，有时用的是form-type，有时用的是formType(注意两者的大小写)，这两种写法都可以。我们也可以删掉重置的事件处理函数formReset，以及form组件的 bindreset=”formReset”，只需要将button的form-type设置为reset，也就是</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">form-type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reset<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>重置<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>就可以达到重置的效果，绑定事件处理函数bindreset</p>\n</blockquote>\n<p><strong>数组的扩展运算符</strong></p>\n<p>在这里我们先来介绍一下<strong>扩展运算符</strong>的概念，它的写法很简单，就是三个点 <code>...</code>。</p>\n<p>从控制台可以看到直接打印gamecheck，它是一个数组Array，中括号[ ]就可以看出来，展开也有index值；而使用扩展运算符打印gamecheck，是<strong>将数组里的值都遍历了出来</strong>。这就是扩展运算符…的作用</p>\n<h4 id=\"添加手机联系人\"><a href=\"#添加手机联系人\" class=\"headerlink\" title=\"添加手机联系人\"></a>添加手机联系人</h4><p>尽管我们提交了数据，但是当小程序重新编译之后，所有的数据都会被重置，也就是提交的数据并没有保存起来。小程序存储数据有三种方式，一是保存在本地手机上；二是存储到缓存里；三是存储到数据库。</p>\n<p><strong>添加手机通讯录联系人：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.addPhoneContact.html\">wx.addPhoneContact()</a></p>\n<p><strong>对象的扩展运算符</strong></p>\n<p>对象的扩展运算符 …也有类型的作用，它可以取出对象里所有可遍历的属性，拷贝到新的对象中。</p>\n<h4 id=\"input绑定事件处理函数\"><a href=\"#input绑定事件处理函数\" class=\"headerlink\" title=\"input绑定事件处理函数\"></a>input绑定事件处理函数</h4><p>在form表单里，尽管表单里也有input组件，但是绑定事件处理函数的是form组件，input组件只提供value值，而input文本输入组件本身也是可以绑定事件处理函数的。从技术文档里我们了解到input可以绑定事件处理函数的属性有：bindinput，键盘输入时触发；bindfocus，输入框聚焦时触发；bindblur，输入框失焦时触发等等</p>\n<p><strong>bindinput响应式数据渲染</strong></p>\n<p><strong>剪贴板</strong></p>\n<p>本节前面的添加手机联系人是把收集到的数据存储到<strong>本地手机</strong>的通讯录里，而剪切板则是把数据存储到<strong>本地手机</strong>的剪切板里。</p>\n<p>技术文档：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.setClipboardData.html\">设置剪切板内容wx.setClipboardData()</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.getClipboardData.html\">获取剪切板内容wx.getClipboardData()</a></p>\n<h4 id=\"slider响应设置颜色\"><a href=\"#slider响应设置颜色\" class=\"headerlink\" title=\"slider响应设置颜色\"></a>slider响应设置颜色</h4><p>slider滑动选择器也可以绑定事件处理函数，有：bindchange完成一次拖动后触发的事件以及bindchanging拖动过程中触发的事件。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/slider.html\">滑动选择器slider</a></p>\n<p>我们要先回顾一下事件对象里<strong>data-*携带的数据</strong>和<strong>表单组件携带的数据：</strong>首先组件data-*属性的数据会存储在事件对象里的currentTarget下的dataset里的属性名里，也就是data-color的值会存储在 e.currentTarget.dataset.color里；而表单组件的数据则是存储在事件对象的detail里，也就是e.detail.value里。</p>\n<h4 id=\"picker组件\"><a href=\"#picker组件\" class=\"headerlink\" title=\"picker组件\"></a>picker组件</h4><p>picker滚动选择器看起来样式非常复杂，不过小程序已经帮我们封装好了，我们只需要用几行简单的代码就可以做一个非常复杂而且类别多样的滚动选择器。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/picker.html\">滚动选择器picker</a></p>\n<p>使用开发者工具在form.wxm里输入以下代码，只需要下面几行代码，就能从底部弹起一个日期的滚动选择器。而里面的文字可以任意填写，类似于button、navigator组件里的字，点击即可执行相应的事件。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picker</span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{pickerdate}}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">start</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2017-09-01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">end</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2022-09-01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bindchange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bindDateChange<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n选择的日期为：{{pickerdate}}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picker</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>mode属性：滚动选择器有几种模式，不同的模式可以弹出不同类型的滚动选择器，这里的是date日期选择，其他模式大体相似；</li>\n<li>start和end属性：这是日期选择器特有的属性，为有效日期的开始和结束，我们可以滚动试下，超出这个范围就没法滚动了;</li>\n<li><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gd0s88um3rj31hc0u0ak3.jpg\" alt=\"2020-03-20 21-31-30 的屏幕截图.png\"></li>\n</ul>\n<h1 id=\"图片、缓存与文件\"><a href=\"#图片、缓存与文件\" class=\"headerlink\" title=\"图片、缓存与文件\"></a>图片、缓存与文件</h1><p>获取手机相册里的图片和手机相机拍照的照片、手机的定位以及获取手机里的缓存、文件，并使用JavaScript操作图片、操作缓存和操作文件等。</p>\n<h4 id=\"获取手机相册或拍照的图片\"><a href=\"#获取手机相册或拍照的图片\" class=\"headerlink\" title=\"获取手机相册或拍照的图片\"></a>获取手机相册或拍照的图片</h4><p>用小程序来获取手机相册里的图片和拍照的照片听起来好像挺复杂的，不过因为有了API，我们只需要结合前面的点击事件、事件处理函数以及调用API、传入指定的参数就能很容易做到。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html\">wx.chooseImage()</a></p>\n<p><strong>上传一张照片</strong></p>\n<ul>\n<li><strong>count</strong>：可以选择的照片数量，默认为9张（由于imgurl声明的是字符串，多张照片需为数组Array，后面有上传多张图片的案例）</li>\n<li><strong>sourceType</strong>：选择图片的来源，album就是图片可以来自手机相册；而camera是可以来自手机拍照，两个都写就是来自相册或拍照都可以；</li>\n<li><strong>sizeType：</strong>所选的图片的尺寸，original为原图，compressed为压缩图，为了减轻服务器压力，建议为压缩图；</li>\n<li><strong>tempFilePaths</strong>为临时文件的<strong>路径列表</strong>，<strong>tempFiles</strong>为临时<strong>文件列表</strong>，注意这两个值都为数组。</li>\n</ul>\n<p><strong>空值的处理</strong></p>\n<p>我们可以看到由于imgurl为空值，image组件有默认宽度300px、高度225px（会随css而改变大小），所以显示<strong>上传的图片</strong>会与<strong>选择图片</strong>的button有一段空白，处理的方法有三种：</p>\n<p><strong>方法一：</strong>我们可以给imgurl弄一张初始图片的链接，为了让界面更加美观、交互性更好，通常都会设置一个默认的图片，比如默认的头像，当用户上传时，setData就会取代初始图片；</p>\n<p><strong>方法二：</strong>判断imgurl是否有内容，比如我们可以加一层逻辑判断，当Page()里的data下的imgurl属性非空时，组件才会显示；空时就不显示。</p>\n<p><strong>方法三：</strong>这个方法和方法二类似，设置一个逻辑判断</p>\n<p><strong>上传多张照片</strong></p>\n<p>如果上传的是多张照片，那么imgurl的初始值就不能是字符串了，而是一个数组Array，</p>\n<h4 id=\"操作图片\"><a href=\"#操作图片\" class=\"headerlink\" title=\"操作图片\"></a>操作图片</h4><p>使用小程序图片API不仅可以上传图片，还可以对上传的图片进行一定的操作，比如获取图片信息、预览图片、保存图片、压缩图片等等。</p>\n<p><strong>获取图片信息</strong></p>\n<p>无论是存储在小程序本地，还是存储在临时文件、缓存、网络上的图片，使用wx.getImageInfo() 都可以获取到该图片的宽度、高度、路径、格式以及拍照方向。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html\">wx.getImageInfo()</a></p>\n<blockquote>\n<p><strong>回调函数</strong></p>\n<p>经过之前的学习，相信大家对回调函数success、fail有了一定的认识，那什么是回调函数呢？简单一点说就是：<strong>回调Callback是指在另一个函数执行完成之后被调用的函数</strong>。success、fail就都是在小程序的API函数执行完成之后，才会被调用，而success和fail它们本身也是函数，也能返回数据。而复杂一点说，就是回调函数本身就是函数，但是它们却被其他函数给调用，而调用函数的函数被称为<strong>高阶函数</strong>。这些大家只需要粗略了解就可以了。</p>\n<p><strong>异步与同步</strong></p>\n<p>我们前面也提及过异步，那什么会有异步呢？因为JavaScript是单线程的编程语言，就是从上到下、一行一行去执行代码，类似于排队一样一个个处理，第一个不处理完，就不会处理后面的。但是遇到网络请求、I/O操作（比如上面的读取图片信息）以及定时函数（后面会涉及）以及类似于成功反馈的情况，等这些不可预知时间的任务都执行完再处理后面的任务，肯定不行，于是就有了<strong>异步处理</strong>。</p>\n<p>把要等待其他函数执行完之后，才能执行的函数（比如读取图片信息）放到回调函数里，先不处理，等图片上传成功之后再来处理，这就是异步。比如wx.showToast()消息提示框，可以放到回调函数里，当API调用成功之后再来显示提示消息。回调函数相当于是异步的一个解决方案。</p>\n</blockquote>\n<p><strong>预览所有上传的图片</strong></p>\n<p>预览图片就是在新页面里全屏打开图片，预览的过程中用户可以进行保存图片、发送给朋友等操作。可以预览一张照片或者多张照片。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html\">wx.previewImage()</a></p>\n<blockquote>\n<p>这个场景主要用于让用户可以<strong>预览、保存或分享图片</strong>，毕竟image组件是不支持图片的放大预览、保存到本地、转发给好友，现在微信还支持预览小程序码，长按就可以打开小程序，这个API主要是为了增强用户的交互体验的。</p>\n</blockquote>\n<p><strong>保存图片到相册</strong></p>\n<p>小程序<strong>不支持直接将网络图片</strong>保存到本地手机的系统相册，支持临时文件路径和小程序本地路径。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html\">wx.saveImageToPhotosAlbum()</a></p>\n<blockquote>\n<p>当然永久链接实际开发用得不会太多，使用最多的场景是把<strong>网络图片下载到临时链接（因为不能直接保存网络图片），再将临时链接的图片保存到相册</strong>，只需把上面的永久链接换成临时链接就可以了.</p>\n</blockquote>\n<p><strong>压缩图片</strong></p>\n<p>小程序是有压缩图片的API的<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.compressImage.html\">wx.compressImage()</a>，尤其是在上传图片时，为了减轻存储服务器的压力，不能让用户上传分辨率过高的照片。</p>\n<ul>\n<li>可以先让用户上传图片；</li>\n<li>图片上传成功之后（也就是在上传图片的<strong>success回调函数</strong>里）再来获取图片的信息；</li>\n<li>获取信息成功后（也就是在获取图片信息的<strong>success回调函数</strong>里）判断宽度或高度是否过大，如果图片过大，就压缩图片，</li>\n<li>压缩图片成功后（也就是在压缩图片的<strong>success回调函数</strong>里），再把压缩好的图片上传到服务器</li>\n</ul>\n<p>上传图片、获取图片信息、压缩图片、上传图片到服务器，每一步都依赖上一步，所以会不断在success回调函数里写函数，实际开发涉及的业务会更复杂，就会不断回调，这被称之为<strong>回调地狱</strong>。</p>\n<blockquote>\n<p>由于压缩图片使用到的场景不算太多，毕竟我们在上传照片时可以不支持上传原图original，只支持压缩compressed就能保证上传图片的大小了</p>\n</blockquote>\n<h4 id=\"上传文件\"><a href=\"#上传文件\" class=\"headerlink\" title=\"上传文件\"></a>上传文件</h4><p>小程序不仅支持上传图片image，还支持上传视频、Excel、PDF、音频等等其他文件格式，但是我们只能从<strong>客户端会话</strong>里（也就是微信单聊、群聊的聊天记录里）选择其他格式的文件。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html\">wx.chooseMessageFile()</a></p>\n<h4 id=\"上传地理位置\"><a href=\"#上传地理位置\" class=\"headerlink\" title=\"上传地理位置\"></a>上传地理位置</h4><p>除了可以上传图片、音视频以及各种文件格式以外，小程序还支持上传地理位置。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html\">wx.chooseLocation()</a></p>\n<h4 id=\"模块化与格式化\"><a href=\"#模块化与格式化\" class=\"headerlink\" title=\"模块化与格式化\"></a>模块化与格式化</h4><p>在新建模板小程序里（不使用云开发服务），有一个日志logs页面，这个日志logs虽然简单，但是包含着非常复杂的JavaScript知识，是一个非常好的学习参考案例，这里我们来对它进行一一解读。</p>\n<p><strong>模块化与引入模块</strong></p>\n<p>在实际开发中，日期、时间的处理经常会使用到，但是使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date对象</a>所获取到的时间格式与我们想要展现的形式是有非常大的差异的。这时我们可以把时间的处理抽离成为一个单独的 js 文件比如<strong>util.js</strong>（util是utility的缩写，表示程序集，通用程序等意思），作为一个模块。</p>\n<blockquote>\n<p>把通用的模块放在util.js或者common.js，把util.js放在utils文件夹里等就跟把css放在style文件夹，把页面放在pages文件夹，把图片放在images文件夹里是一样的道理，尽管文件夹或文件的名称你可以任意修改，但是为了代码的可读性，文件结构的清晰，推荐大家采用这种一看就懂的方式。</p>\n</blockquote>\n<h4 id=\"数据缓存Storage\"><a href=\"#数据缓存Storage\" class=\"headerlink\" title=\"数据缓存Storage\"></a>数据缓存Storage</h4><p>logs页面还涉及到数据缓存Storage方面的知识。通过前面的学习，我们了解到<strong>点击事件生成的事件对象</strong>也好，使用<strong>数据表单提交的数据</strong>也好，还是<strong>上传的图片、文件</strong>也好，只要我们重新编译小程序，这些数据都会消失。前面我们也提到存储数据、文件的方式有三种，一是保存到本地手机、二就是缓存，三是上传到服务器</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html\">wx.setStorageSync()</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html\">wx.getStorageSync()</a></p>\n<p><strong>保存文件</strong></p>\n<blockquote>\n<p><strong>注意：</strong>尽管上传图片和上传文件都是把图片或文件先上传到临时文件里，但是<strong>保存图片wx.saveImageToPhotosAlbum()**和</strong>保存文件wx.saveFile()**是完全不同的概念，保存图片是把图片保存到手机本地相册；而保存文件则是把图片由临时文件移动到本地存储里，而本地存储每个小程序用户只有10M的空间。</p>\n</blockquote>\n<p><strong>保存文件技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFile.html\">wx.saveFile()</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><p>函数可以操作（增删改查）数据（包括字符串、数组、对象、Boolean等所有数据类型），组件拥有了属性数据，也就拥有了被编程的能力，可见携带数据的重要性（id、class、style甚至点击事件都是组件携带的数据，都可以用来编程）。</p>\n<h4 id=\"链接携带数据\"><a href=\"#链接携带数据\" class=\"headerlink\" title=\"链接携带数据\"></a>链接携带数据</h4><p><strong>URL链接的特殊字符</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=云开发&amp;rsv_pq=81ee270400007011&amp;rsv_t=ed834wm24xdJRGRsfv7bxPKX%2FXGlLt6fqh%2BiB9x5g0EUQjyxdCDbTXHbSFE&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=20&amp;rsv_sug1=19&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;inputT=5035&amp;rsv_sug4=6227<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这些链接通常包括以下特殊字符，以及都有着基本相同的含义，通过这些特殊字符，链接就被塞进了很多数据信息，其中?、&amp;、=是我们接下来关注的重点。</p>\n<ul>\n<li>/ 分隔目录和子目录</li>\n<li>? 分隔实际的URL和参数</li>\n<li>&amp; URL中指定的参数间的分隔符</li>\n<li>= URL中指定的参数的值</li>\n<li># 同一个页面的位置标识符，类似于页面的书签；</li>\n</ul>\n<p><strong>获取URL链接的数据</strong></p>\n<p><strong>获取url参数的生命周期函数onload</strong></p>\n<p>onload是Page页面的生命周期函数，当页面加载时触发。一个页面只会调用一次，可以在 onLoad 函数的参数中获取打开当前页面路径中的参数。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">:</span> <span class=\"token string\">\"lesson\"</span><span class=\"token punctuation\">,</span> uid<span class=\"token operator\">:</span> <span class=\"token string\">\"tcb\"</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">\"tap\"</span><span class=\"token punctuation\">,</span> ENV<span class=\"token operator\">:</span> <span class=\"token string\">\"weapp\"</span><span class=\"token punctuation\">,</span> frompage<span class=\"token operator\">:</span> <span class=\"token string\">\"lifecycle\"</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>相信大家会这样的数据类型非常熟悉，它就是一个对象Object，我们可以通过点表示法，获取到对象里具体的属性，比如options.id就能显示我们在lifecycle点击的组件的id。</p>\n<p><strong>数据跨页面</strong></p>\n<p><strong>跨页面数据渲染</strong></p>\n<p>当然我们也可以继续把数据使用setData渲染到detail页面，为方便我们仅渲染图片信息</p>\n<blockquote>\n<p>不过使用链接url传递参数有字节限制以及只能在跨页面中使用，但是可以用来传递比如页面链接来源，可以追踪用户来自于什么设备、什么App、通过什么方式以及来自哪个朋友的邀请链接；还可以用于一些网页链接的API必备的id、key等。跨多个页面以及传递更多参数、数据等，可以使用公共数据存储app.globalData（本节会介绍）、数据缓存（后面章节会介绍）、数据库（云开发部分会介绍）以及新增的页面间通信接口<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html\">getOpenerEventChannel</a>（这里不多介绍）</p>\n</blockquote>\n<h4 id=\"组件携带数据dataset\"><a href=\"#组件携带数据dataset\" class=\"headerlink\" title=\"组件携带数据dataset\"></a>组件携带数据dataset</h4><p>组件有公有属性和私有属性，这些属性都是数据，事件处理函数可以修改这些属性，从而让组件有丰富的表现形式。不仅如此，在组件节点中还可以<strong>附加一些自定义数据</strong>。在事件中可以获取这些自定义的节点数据，用于事件的逻辑处理，从而让组件变成相当复杂且强大的编程对象。</p>\n<p><strong>使用JavaScript代替Navigator组件</strong></p>\n<p>当我们点击lifecycle页面的图片时，clickImage会收到一个事件对象，打印出来的结果里包含着target和currentTarget两个属性，currentTarget指向事件所绑定的元素，而target始终指向事件发生时的元素。由于这个案例事件绑定的元素和事件发生时的元素都是imageclick，所以它们的值相同，它们里面都包含了<strong>当前组件</strong>的id，以及dataset</p>\n<blockquote>\n<p>值得强调的是很多童鞋以为只有点击Navigator组件、button组件才能进行链接跳转，这是思维定势的误区，通过bindtap，组件被赋予了一定的编程能力，尽管没有url属性，使用wx.navigateTo也能具备这种能力。</p>\n</blockquote>\n<blockquote>\n<p>我们点击的是图片image组件，却分别触发了绑定在image组件以及image的父级（上一级）组件view的事件处理函数，我们称这为<strong>事件冒泡</strong>。</p>\n</blockquote>\n<p><strong>点击组件显示当前组件其他数据</strong> </p>\n<p>通过事件对象我们不仅可以明确知道点击了什么组件，而且还可以获取当前组件的自定义数据。</p>\n<h4 id=\"小程序和页面的生命周期\"><a href=\"#小程序和页面的生命周期\" class=\"headerlink\" title=\"小程序和页面的生命周期\"></a>小程序和页面的生命周期</h4><p><strong>小程序构造器：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html\">App(Object object)</a></p>\n<p><strong>页面构造器：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html\">Page(Object object)</a></p>\n<p><strong>打印日志了解生命周期</strong></p>\n<p>对小程序和页面的生命周期，我们可以通过打印日志的方式来了解生命周期函数具体的执行顺序和情况，使用开发者工具在app.js里给onLaunch、onShow、onHide添加一些打印日志。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">onLaunch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onLaunch监听小程序初始化。'</span><span class=\"token punctuation\">,</span>opts<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onShow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onShow监听小程序启动或切前台'</span><span class=\"token punctuation\">,</span>opts<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onHide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onHide监听小程序切后台'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>有的参数写的options，有的写的却是opts；前面事件对象有的写的是event，有的则用的是e，这个参数都是可以自定义的</p>\n</blockquote>\n<p><strong>小程序打开场景值</strong></p>\n<p>在 App 的 onLaunch 和 onShow打印的对象里有一个scene为1001，这个是场景值。场景值用来描述用户进入小程序的路径方式。用户进入你的小程序的方式有很多，比如有的是扫描二维码、有的是长按图片识别二维码，有的是通过微信群进入的小程序，有的是朋友单聊进入的小程序，有的是通过公众号进入的小程序等等，这些就是场景值，而具体的场景值，可以看技术文档，场景值对产品、运营来说非常重要。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html\">场景值列表</a></p>\n<p><strong>onLaunch与onShow</strong></p>\n<p>onLaunch是监听小程序的初始化，初始化完成时触发，<strong>全局只会触发一次</strong>，所以在这里我们可以用来执行获取用户登录信息的函数等一些非常核心的数据，如果onLaunch的函数过多，会影响小程序的启动速度。</p>\n<p>onShow是在小程序启动，或从后台进入前台显示时触发，也就是<strong>它会触发很多次</strong>，在这里就不大适合放获取用户登录信息的函数啦。这两者的区别要注意。</p>\n<h4 id=\"用户登录与信息获取\"><a href=\"#用户登录与信息获取\" class=\"headerlink\" title=\"用户登录与信息获取\"></a>用户登录与信息获取</h4><p>小程序用户登录和获取用户信息相对来说比较复杂</p>\n<p><strong>了解wx.login、wx.getSetting</strong></p>\n<p>从控制台可以看到wx.login会得到errMsg和code，这个code是用户的登录凭证。而wx.getSetting则会得到errMsg和用户当前的<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/AuthSetting.html\">权限设置authSetting</a>，包含是否允许获取用户信息，是否允许获取用户位置，是否允许使用手机相册等权限。我们可以根据打印的结果结合技术文档来深入理解。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html\">获取用户登录凭证wx.login</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html\">获取用户当前权限设置wx.getSetting</a></p>\n<p><strong>获取用户信息wx.getUserInfo</strong></p>\n<p>我们要获取用户信息，首先需要判断用户是否允许，可以从authSetting对象里看scope.userInfo属性是否为true，如果为true，那我们可以调用wx.getUserInfo()接口来获取用户信息。</p>\n<p><strong>globalData</strong></p>\n<p>globalData对象通常用来存放整个小程序都会使用到的数据，比如我们可以把用户信息赋值给globalData的任意自定义属性。</p>\n<p><strong>that与this</strong></p>\n<p>this的指向情况非常复杂，尽管<strong>哪个对象调用函数，函数里面的this就指向哪个对象</strong>，说起来非常简单，但是场景太多，大家在开发时不必强行理解，死记硬背，把this打印出来即可。</p>\n<p><strong>getApp()</strong></p>\n<p>那我们如何在页面的js里调用globalData呢，这个时候就需要用到getApp()函数啦。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/getApp.html\">getApp()</a></p>\n<h4 id=\"通过button来获取用户信息\"><a href=\"#通过button来获取用户信息\" class=\"headerlink\" title=\"通过button来获取用户信息\"></a>通过button来获取用户信息</h4><p><strong>将用户信息写进app.js</strong></p>\n<p>这种方式只能在user页面才能获取到用户信息，限制非常大，那我们应该怎么做呢？我们要把获取到的用户信息写到app.js成为页面的公共信息，以后可以跨页面只需在user页面点击一次按钮即可。</p>\n<p>在getUserInfomation将获取到的用户信息传给globalData的userInfo属性：</p>\n<blockquote>\n<p>获取用户信息还有一种方式，就是通过组件<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html\">open-data</a>来展示，比较简单</p>\n</blockquote>\n<h1 id=\"数据表单\"><a href=\"#数据表单\" class=\"headerlink\" title=\"数据表单\"></a>数据表单</h1><p>所用到的数据大多都是我们在js的data里写好的,无论是计算器、用户注册、表单收集、发表文章、评论等等，这些都是对用户提交数据的获取。</p>\n<h4 id=\"设置导航栏标题\"><a href=\"#设置导航栏标题\" class=\"headerlink\" title=\"设置导航栏标题\"></a>设置导航栏标题</h4><p>动态设置导航栏标题是一个非常简单的API，在技术文档里面可以了解到，只要给wx.setNavigationBarTitle()的title对象赋值，就能改变小程序页面的标题。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html\">wx.setNavigationBarTitle()</a></p>\n<p><strong>onLoad调用API</strong></p>\n<p><strong>button调用API</strong></p>\n<p><strong>使用表单修改标题</strong></p>\n<p>小程序一个<strong>完整的数据表单</strong>收集通常包含<strong>一个form组件</strong>，<strong>一个输入框或选择器组件</strong>（比如input组件），<strong>一个button组件</strong>。</p>\n<p>数据表单涉及到的组件多（至少三个），参数以及参数的类型也比较多，上面有几个非常重要的点，大家可以结合上面的代码来理解：</p>\n<ul>\n<li>表单最核心的在于表单组件form，输入框组件input和button组件要在<form></form>内，form也会收集内部组件提交的数据；</li>\n<li>绑定事件处理函数的不再是button，而是form，form的bindsubmit与button的 formType=”submit”是一对，点击button，就会执行bindsubmit的事件处理函数；</li>\n<li>input是输入框，用户可以在里面添加信息；name是input组件的名称，与表单数据一起提交。</li>\n</ul>\n<blockquote>\n<p>对数据表单来说，使用console.log打印事件对象可以让我们对表单提交的数据有一个非常清晰的了解；而使用赋值以及setData可以有效的把表单收集到的数据渲染到页面。</p>\n</blockquote>\n<h4 id=\"文本输入框input\"><a href=\"#文本输入框input\" class=\"headerlink\" title=\"文本输入框input\"></a>文本输入框input</h4><p>小程序的输入框input主要用来处理<strong>文本和数字</strong>的输入，下面我们就来结合实战与技术文档，来了解一下文本输入框input的type、name、placeholder等属性。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/input.html\">input技术文档</a></p>\n<p>使用开发者工具在form.wxml里输入以下代码，一个form组件里面可以包含多个选择器或文本输入框组件，提交数据时，会提交form里面填写的所有数据：</p>\n<p>input输入框会因为属性的类型的不同，<strong>手机键盘外观会有比较大的差异</strong>，所以需要点击预览，用微信扫描二维码在手机上体验（也可以启用真机调试）。</p>\n<ul>\n<li>input输入框支持的type值有文本输入text、数字输入number、身份证输入idcard、小数点输入digit，当type不同时，<strong>注意手机键盘外观的不同</strong>；</li>\n<li>placeholder:输入框为空时的占位符（也就是默认值）；maxlength：最大输入长度；password和disabled都是boolean值，使用方法和之前的video组件里面的boolean属性一样。</li>\n</ul>\n<p>在开发者工具的控制台我们可以看到打印的事件对象里的value对象，属性名即为input的name名，值即为我们输入的数据。如果没有name。</p>\n<h4 id=\"表单组件组合\"><a href=\"#表单组件组合\" class=\"headerlink\" title=\"表单组件组合\"></a>表单组件组合</h4><p>一个完整的数据收集表单，除了可以提交input文本框里面的数据，还可以提交开关选择器按钮switch、滑动选择器按钮slider、单选按钮radio、多选按钮checkbox等组件里面的数据。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/switch.html\">switch开关选择</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/slider.html\">Slider滑动选择</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/radio.html\">Radio单选</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/checkbox.html\">checkbox多选</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/form.html\">form表单</a></p>\n<p>表单组件提交的数据都存储在事件对象e的detail属性下的value里.</p>\n<ul>\n<li><p><strong>switch属性：</strong>记录switch开关选择的值，这是一个boolean值，ture为开，false为关；</p>\n</li>\n<li><p><strong>sex属性：</strong>记录name名为sex的单选按钮的值，它只记录单选选择的那一项的值；</p>\n</li>\n<li><p>process属性：</p>\n<p> 记录name名为process的滑动选择器的值，</p>\n<p>show-value为boolean值，显示当前value值，数据类型为number；</p>\n</li>\n<li><p><strong>textinput属性：</strong>记录name名为textinput的input文本输入框的值；</p>\n</li>\n<li><p><strong>gamecheck属性：</strong>记录name名为gamecheck的多选组件的值，<strong>数据类型为数组Array</strong>。</p>\n</li>\n</ul>\n<p>点击<strong>重置按钮</strong>，即会重置表单，并不需要formReset事件处理函数做额外的处理。</p>\n<blockquote>\n<p>我们发现上面button属性，有时用的是form-type，有时用的是formType(注意两者的大小写)，这两种写法都可以。我们也可以删掉重置的事件处理函数formReset，以及form组件的 bindreset=”formReset”，只需要将button的form-type设置为reset，也就是</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">form-type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reset<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>重置<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>就可以达到重置的效果，绑定事件处理函数bindreset</p>\n</blockquote>\n<p><strong>数组的扩展运算符</strong></p>\n<p>在这里我们先来介绍一下<strong>扩展运算符</strong>的概念，它的写法很简单，就是三个点 <code>...</code>。</p>\n<p>从控制台可以看到直接打印gamecheck，它是一个数组Array，中括号[ ]就可以看出来，展开也有index值；而使用扩展运算符打印gamecheck，是<strong>将数组里的值都遍历了出来</strong>。这就是扩展运算符…的作用</p>\n<h4 id=\"添加手机联系人\"><a href=\"#添加手机联系人\" class=\"headerlink\" title=\"添加手机联系人\"></a>添加手机联系人</h4><p>尽管我们提交了数据，但是当小程序重新编译之后，所有的数据都会被重置，也就是提交的数据并没有保存起来。小程序存储数据有三种方式，一是保存在本地手机上；二是存储到缓存里；三是存储到数据库。</p>\n<p><strong>添加手机通讯录联系人：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.addPhoneContact.html\">wx.addPhoneContact()</a></p>\n<p><strong>对象的扩展运算符</strong></p>\n<p>对象的扩展运算符 …也有类型的作用，它可以取出对象里所有可遍历的属性，拷贝到新的对象中。</p>\n<h4 id=\"input绑定事件处理函数\"><a href=\"#input绑定事件处理函数\" class=\"headerlink\" title=\"input绑定事件处理函数\"></a>input绑定事件处理函数</h4><p>在form表单里，尽管表单里也有input组件，但是绑定事件处理函数的是form组件，input组件只提供value值，而input文本输入组件本身也是可以绑定事件处理函数的。从技术文档里我们了解到input可以绑定事件处理函数的属性有：bindinput，键盘输入时触发；bindfocus，输入框聚焦时触发；bindblur，输入框失焦时触发等等</p>\n<p><strong>bindinput响应式数据渲染</strong></p>\n<p><strong>剪贴板</strong></p>\n<p>本节前面的添加手机联系人是把收集到的数据存储到<strong>本地手机</strong>的通讯录里，而剪切板则是把数据存储到<strong>本地手机</strong>的剪切板里。</p>\n<p>技术文档：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.setClipboardData.html\">设置剪切板内容wx.setClipboardData()</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.getClipboardData.html\">获取剪切板内容wx.getClipboardData()</a></p>\n<h4 id=\"slider响应设置颜色\"><a href=\"#slider响应设置颜色\" class=\"headerlink\" title=\"slider响应设置颜色\"></a>slider响应设置颜色</h4><p>slider滑动选择器也可以绑定事件处理函数，有：bindchange完成一次拖动后触发的事件以及bindchanging拖动过程中触发的事件。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/slider.html\">滑动选择器slider</a></p>\n<p>我们要先回顾一下事件对象里<strong>data-*携带的数据</strong>和<strong>表单组件携带的数据：</strong>首先组件data-*属性的数据会存储在事件对象里的currentTarget下的dataset里的属性名里，也就是data-color的值会存储在 e.currentTarget.dataset.color里；而表单组件的数据则是存储在事件对象的detail里，也就是e.detail.value里。</p>\n<h4 id=\"picker组件\"><a href=\"#picker组件\" class=\"headerlink\" title=\"picker组件\"></a>picker组件</h4><p>picker滚动选择器看起来样式非常复杂，不过小程序已经帮我们封装好了，我们只需要用几行简单的代码就可以做一个非常复杂而且类别多样的滚动选择器。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/picker.html\">滚动选择器picker</a></p>\n<p>使用开发者工具在form.wxm里输入以下代码，只需要下面几行代码，就能从底部弹起一个日期的滚动选择器。而里面的文字可以任意填写，类似于button、navigator组件里的字，点击即可执行相应的事件。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picker</span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123;pickerdate&#125;&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">start</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2017-09-01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">end</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2022-09-01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bindchange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bindDateChange<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n选择的日期为：&#123;&#123;pickerdate&#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picker</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>mode属性：滚动选择器有几种模式，不同的模式可以弹出不同类型的滚动选择器，这里的是date日期选择，其他模式大体相似；</li>\n<li>start和end属性：这是日期选择器特有的属性，为有效日期的开始和结束，我们可以滚动试下，超出这个范围就没法滚动了;</li>\n<li><img src=\"http://ww1.sinaimg.cn/large/005W6BOngy1gd0s88um3rj31hc0u0ak3.jpg\" alt=\"2020-03-20 21-31-30 的屏幕截图.png\"></li>\n</ul>\n<h1 id=\"图片、缓存与文件\"><a href=\"#图片、缓存与文件\" class=\"headerlink\" title=\"图片、缓存与文件\"></a>图片、缓存与文件</h1><p>获取手机相册里的图片和手机相机拍照的照片、手机的定位以及获取手机里的缓存、文件，并使用JavaScript操作图片、操作缓存和操作文件等。</p>\n<h4 id=\"获取手机相册或拍照的图片\"><a href=\"#获取手机相册或拍照的图片\" class=\"headerlink\" title=\"获取手机相册或拍照的图片\"></a>获取手机相册或拍照的图片</h4><p>用小程序来获取手机相册里的图片和拍照的照片听起来好像挺复杂的，不过因为有了API，我们只需要结合前面的点击事件、事件处理函数以及调用API、传入指定的参数就能很容易做到。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html\">wx.chooseImage()</a></p>\n<p><strong>上传一张照片</strong></p>\n<ul>\n<li><strong>count</strong>：可以选择的照片数量，默认为9张（由于imgurl声明的是字符串，多张照片需为数组Array，后面有上传多张图片的案例）</li>\n<li><strong>sourceType</strong>：选择图片的来源，album就是图片可以来自手机相册；而camera是可以来自手机拍照，两个都写就是来自相册或拍照都可以；</li>\n<li><strong>sizeType：</strong>所选的图片的尺寸，original为原图，compressed为压缩图，为了减轻服务器压力，建议为压缩图；</li>\n<li><strong>tempFilePaths</strong>为临时文件的<strong>路径列表</strong>，<strong>tempFiles</strong>为临时<strong>文件列表</strong>，注意这两个值都为数组。</li>\n</ul>\n<p><strong>空值的处理</strong></p>\n<p>我们可以看到由于imgurl为空值，image组件有默认宽度300px、高度225px（会随css而改变大小），所以显示<strong>上传的图片</strong>会与<strong>选择图片</strong>的button有一段空白，处理的方法有三种：</p>\n<p><strong>方法一：</strong>我们可以给imgurl弄一张初始图片的链接，为了让界面更加美观、交互性更好，通常都会设置一个默认的图片，比如默认的头像，当用户上传时，setData就会取代初始图片；</p>\n<p><strong>方法二：</strong>判断imgurl是否有内容，比如我们可以加一层逻辑判断，当Page()里的data下的imgurl属性非空时，组件才会显示；空时就不显示。</p>\n<p><strong>方法三：</strong>这个方法和方法二类似，设置一个逻辑判断</p>\n<p><strong>上传多张照片</strong></p>\n<p>如果上传的是多张照片，那么imgurl的初始值就不能是字符串了，而是一个数组Array，</p>\n<h4 id=\"操作图片\"><a href=\"#操作图片\" class=\"headerlink\" title=\"操作图片\"></a>操作图片</h4><p>使用小程序图片API不仅可以上传图片，还可以对上传的图片进行一定的操作，比如获取图片信息、预览图片、保存图片、压缩图片等等。</p>\n<p><strong>获取图片信息</strong></p>\n<p>无论是存储在小程序本地，还是存储在临时文件、缓存、网络上的图片，使用wx.getImageInfo() 都可以获取到该图片的宽度、高度、路径、格式以及拍照方向。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html\">wx.getImageInfo()</a></p>\n<blockquote>\n<p><strong>回调函数</strong></p>\n<p>经过之前的学习，相信大家对回调函数success、fail有了一定的认识，那什么是回调函数呢？简单一点说就是：<strong>回调Callback是指在另一个函数执行完成之后被调用的函数</strong>。success、fail就都是在小程序的API函数执行完成之后，才会被调用，而success和fail它们本身也是函数，也能返回数据。而复杂一点说，就是回调函数本身就是函数，但是它们却被其他函数给调用，而调用函数的函数被称为<strong>高阶函数</strong>。这些大家只需要粗略了解就可以了。</p>\n<p><strong>异步与同步</strong></p>\n<p>我们前面也提及过异步，那什么会有异步呢？因为JavaScript是单线程的编程语言，就是从上到下、一行一行去执行代码，类似于排队一样一个个处理，第一个不处理完，就不会处理后面的。但是遇到网络请求、I/O操作（比如上面的读取图片信息）以及定时函数（后面会涉及）以及类似于成功反馈的情况，等这些不可预知时间的任务都执行完再处理后面的任务，肯定不行，于是就有了<strong>异步处理</strong>。</p>\n<p>把要等待其他函数执行完之后，才能执行的函数（比如读取图片信息）放到回调函数里，先不处理，等图片上传成功之后再来处理，这就是异步。比如wx.showToast()消息提示框，可以放到回调函数里，当API调用成功之后再来显示提示消息。回调函数相当于是异步的一个解决方案。</p>\n</blockquote>\n<p><strong>预览所有上传的图片</strong></p>\n<p>预览图片就是在新页面里全屏打开图片，预览的过程中用户可以进行保存图片、发送给朋友等操作。可以预览一张照片或者多张照片。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html\">wx.previewImage()</a></p>\n<blockquote>\n<p>这个场景主要用于让用户可以<strong>预览、保存或分享图片</strong>，毕竟image组件是不支持图片的放大预览、保存到本地、转发给好友，现在微信还支持预览小程序码，长按就可以打开小程序，这个API主要是为了增强用户的交互体验的。</p>\n</blockquote>\n<p><strong>保存图片到相册</strong></p>\n<p>小程序<strong>不支持直接将网络图片</strong>保存到本地手机的系统相册，支持临时文件路径和小程序本地路径。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html\">wx.saveImageToPhotosAlbum()</a></p>\n<blockquote>\n<p>当然永久链接实际开发用得不会太多，使用最多的场景是把<strong>网络图片下载到临时链接（因为不能直接保存网络图片），再将临时链接的图片保存到相册</strong>，只需把上面的永久链接换成临时链接就可以了.</p>\n</blockquote>\n<p><strong>压缩图片</strong></p>\n<p>小程序是有压缩图片的API的<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.compressImage.html\">wx.compressImage()</a>，尤其是在上传图片时，为了减轻存储服务器的压力，不能让用户上传分辨率过高的照片。</p>\n<ul>\n<li>可以先让用户上传图片；</li>\n<li>图片上传成功之后（也就是在上传图片的<strong>success回调函数</strong>里）再来获取图片的信息；</li>\n<li>获取信息成功后（也就是在获取图片信息的<strong>success回调函数</strong>里）判断宽度或高度是否过大，如果图片过大，就压缩图片，</li>\n<li>压缩图片成功后（也就是在压缩图片的<strong>success回调函数</strong>里），再把压缩好的图片上传到服务器</li>\n</ul>\n<p>上传图片、获取图片信息、压缩图片、上传图片到服务器，每一步都依赖上一步，所以会不断在success回调函数里写函数，实际开发涉及的业务会更复杂，就会不断回调，这被称之为<strong>回调地狱</strong>。</p>\n<blockquote>\n<p>由于压缩图片使用到的场景不算太多，毕竟我们在上传照片时可以不支持上传原图original，只支持压缩compressed就能保证上传图片的大小了</p>\n</blockquote>\n<h4 id=\"上传文件\"><a href=\"#上传文件\" class=\"headerlink\" title=\"上传文件\"></a>上传文件</h4><p>小程序不仅支持上传图片image，还支持上传视频、Excel、PDF、音频等等其他文件格式，但是我们只能从<strong>客户端会话</strong>里（也就是微信单聊、群聊的聊天记录里）选择其他格式的文件。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html\">wx.chooseMessageFile()</a></p>\n<h4 id=\"上传地理位置\"><a href=\"#上传地理位置\" class=\"headerlink\" title=\"上传地理位置\"></a>上传地理位置</h4><p>除了可以上传图片、音视频以及各种文件格式以外，小程序还支持上传地理位置。</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html\">wx.chooseLocation()</a></p>\n<h4 id=\"模块化与格式化\"><a href=\"#模块化与格式化\" class=\"headerlink\" title=\"模块化与格式化\"></a>模块化与格式化</h4><p>在新建模板小程序里（不使用云开发服务），有一个日志logs页面，这个日志logs虽然简单，但是包含着非常复杂的JavaScript知识，是一个非常好的学习参考案例，这里我们来对它进行一一解读。</p>\n<p><strong>模块化与引入模块</strong></p>\n<p>在实际开发中，日期、时间的处理经常会使用到，但是使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date对象</a>所获取到的时间格式与我们想要展现的形式是有非常大的差异的。这时我们可以把时间的处理抽离成为一个单独的 js 文件比如<strong>util.js</strong>（util是utility的缩写，表示程序集，通用程序等意思），作为一个模块。</p>\n<blockquote>\n<p>把通用的模块放在util.js或者common.js，把util.js放在utils文件夹里等就跟把css放在style文件夹，把页面放在pages文件夹，把图片放在images文件夹里是一样的道理，尽管文件夹或文件的名称你可以任意修改，但是为了代码的可读性，文件结构的清晰，推荐大家采用这种一看就懂的方式。</p>\n</blockquote>\n<h4 id=\"数据缓存Storage\"><a href=\"#数据缓存Storage\" class=\"headerlink\" title=\"数据缓存Storage\"></a>数据缓存Storage</h4><p>logs页面还涉及到数据缓存Storage方面的知识。通过前面的学习，我们了解到<strong>点击事件生成的事件对象</strong>也好，使用<strong>数据表单提交的数据</strong>也好，还是<strong>上传的图片、文件</strong>也好，只要我们重新编译小程序，这些数据都会消失。前面我们也提到存储数据、文件的方式有三种，一是保存到本地手机、二就是缓存，三是上传到服务器</p>\n<p><strong>技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html\">wx.setStorageSync()</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html\">wx.getStorageSync()</a></p>\n<p><strong>保存文件</strong></p>\n<blockquote>\n<p><strong>注意：</strong>尽管上传图片和上传文件都是把图片或文件先上传到临时文件里，但是<strong>保存图片wx.saveImageToPhotosAlbum()**和</strong>保存文件wx.saveFile()**是完全不同的概念，保存图片是把图片保存到手机本地相册；而保存文件则是把图片由临时文件移动到本地存储里，而本地存储每个小程序用户只有10M的空间。</p>\n</blockquote>\n<p><strong>保存文件技术文档：</strong><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFile.html\">wx.saveFile()</a></p>\n"},{"title":"influx_vs_victoriametrics_single_test_report","top":false,"date":"2022-07-25T10:33:18.000Z","_content":"# influx_vs_victoriametrics_single_test_report\n\n## 环境\n\n- **Prometheus**: 178.104.163.111 2c4g\n\n- **k8s集群**：178.104.163.88\n\n- **Node**： 178.104.163.175\t 2c6g\n\n\n  > influxdb, victoriametrics 均安装最新版本作为本次测试\n\n\n**架构图**\n\n![image-20220725164911617](https://s2.loli.net/2022/08/24/RItj6TpcVk9Nv5a.png)\n\n## 部署方式\n\n[各组件部署方式](./single_version.md)\n\n## 测试结果\n\n> 运行时间两天\n\n```sh\n# 磁盘本地存储\n[root@vm-3 ~]# du -sh vm\n221M    vm\n[root@vm-3 ~]# du -sh /var/lib/influxdb2/\n1.6G    /var/lib/influxdb2/\n```\n\n![image-20220725132539769](https://s2.loli.net/2022/08/24/M2XBdumLibYhTcG.png)\n\n\n\n- CPU\n\n  ![image-20220725133149273](https://s2.loli.net/2022/08/24/6DfW4goZSQG5umz.png)\n\n- Memory\n\n  ![image-20220725133709846](https://s2.loli.net/2022/08/24/yP6rOb7GVTMx9uc.png)\n\n- Rss\n\n  ![image-20220725134536786](https://s2.loli.net/2022/08/24/KHmRQ1g3Yk6nIp9.png)\n\n- Disk\n\n  ![image-20220725134809572](https://s2.loli.net/2022/08/24/fQgeyaFsDcujwtZ.png)\n  \n  ![image-20220725135017922](https://s2.loli.net/2022/08/24/eLEKWbwJatPlCok.png)\n","source":"_posts/CloudNativate/influx_vs_vm_single_version.md","raw":"---\ntitle: influx_vs_victoriametrics_single_test_report \ntags:\n  - k8s\n  - influxdb\n  - victoriametrics\n  - benchmark\n  - prometheus\ncategories:\n  - tsdb\ntop: false\ndate: 2022-07-25 18:33:18\n---\n# influx_vs_victoriametrics_single_test_report\n\n## 环境\n\n- **Prometheus**: 178.104.163.111 2c4g\n\n- **k8s集群**：178.104.163.88\n\n- **Node**： 178.104.163.175\t 2c6g\n\n\n  > influxdb, victoriametrics 均安装最新版本作为本次测试\n\n\n**架构图**\n\n![image-20220725164911617](https://s2.loli.net/2022/08/24/RItj6TpcVk9Nv5a.png)\n\n## 部署方式\n\n[各组件部署方式](./single_version.md)\n\n## 测试结果\n\n> 运行时间两天\n\n```sh\n# 磁盘本地存储\n[root@vm-3 ~]# du -sh vm\n221M    vm\n[root@vm-3 ~]# du -sh /var/lib/influxdb2/\n1.6G    /var/lib/influxdb2/\n```\n\n![image-20220725132539769](https://s2.loli.net/2022/08/24/M2XBdumLibYhTcG.png)\n\n\n\n- CPU\n\n  ![image-20220725133149273](https://s2.loli.net/2022/08/24/6DfW4goZSQG5umz.png)\n\n- Memory\n\n  ![image-20220725133709846](https://s2.loli.net/2022/08/24/yP6rOb7GVTMx9uc.png)\n\n- Rss\n\n  ![image-20220725134536786](https://s2.loli.net/2022/08/24/KHmRQ1g3Yk6nIp9.png)\n\n- Disk\n\n  ![image-20220725134809572](https://s2.loli.net/2022/08/24/fQgeyaFsDcujwtZ.png)\n  \n  ![image-20220725135017922](https://s2.loli.net/2022/08/24/eLEKWbwJatPlCok.png)\n","slug":"CloudNativate/influx_vs_vm_single_version","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39f005v12mj277dbw22","content":"<h1 id=\"influx-vs-victoriametrics-single-test-report\"><a href=\"#influx-vs-victoriametrics-single-test-report\" class=\"headerlink\" title=\"influx_vs_victoriametrics_single_test_report\"></a>influx_vs_victoriametrics_single_test_report</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p><strong>Prometheus</strong>: 178.104.163.111 2c4g</p>\n</li>\n<li><p><strong>k8s集群</strong>：178.104.163.88</p>\n</li>\n<li><p><strong>Node</strong>： 178.104.163.175     2c6g</p>\n</li>\n</ul>\n<blockquote>\n<p>influxdb, victoriametrics 均安装最新版本作为本次测试</p>\n</blockquote>\n<p><strong>架构图</strong></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/RItj6TpcVk9Nv5a.png\" alt=\"image-20220725164911617\"></p>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p><a href=\"./single_version.md\">各组件部署方式</a></p>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><blockquote>\n<p>运行时间两天</p>\n</blockquote>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># 磁盘本地存储\n[root@vm-3 ~]# du -sh vm\n221M    vm\n[root@vm-3 ~]# du -sh /var/lib/influxdb2/\n1.6G    /var/lib/influxdb2/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://s2.loli.net/2022/08/24/M2XBdumLibYhTcG.png\" alt=\"image-20220725132539769\"></p>\n<ul>\n<li><p>CPU</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/6DfW4goZSQG5umz.png\" alt=\"image-20220725133149273\"></p>\n</li>\n<li><p>Memory</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/yP6rOb7GVTMx9uc.png\" alt=\"image-20220725133709846\"></p>\n</li>\n<li><p>Rss</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/KHmRQ1g3Yk6nIp9.png\" alt=\"image-20220725134536786\"></p>\n</li>\n<li><p>Disk</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/fQgeyaFsDcujwtZ.png\" alt=\"image-20220725134809572\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/eLEKWbwJatPlCok.png\" alt=\"image-20220725135017922\"></p>\n</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"influx-vs-victoriametrics-single-test-report\"><a href=\"#influx-vs-victoriametrics-single-test-report\" class=\"headerlink\" title=\"influx_vs_victoriametrics_single_test_report\"></a>influx_vs_victoriametrics_single_test_report</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p><strong>Prometheus</strong>: 178.104.163.111 2c4g</p>\n</li>\n<li><p><strong>k8s集群</strong>：178.104.163.88</p>\n</li>\n<li><p><strong>Node</strong>： 178.104.163.175     2c6g</p>\n</li>\n</ul>\n<blockquote>\n<p>influxdb, victoriametrics 均安装最新版本作为本次测试</p>\n</blockquote>\n<p><strong>架构图</strong></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/RItj6TpcVk9Nv5a.png\" alt=\"image-20220725164911617\"></p>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p><a href=\"./single_version.md\">各组件部署方式</a></p>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><blockquote>\n<p>运行时间两天</p>\n</blockquote>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># 磁盘本地存储\n[root@vm-3 ~]# du -sh vm\n221M    vm\n[root@vm-3 ~]# du -sh &#x2F;var&#x2F;lib&#x2F;influxdb2&#x2F;\n1.6G    &#x2F;var&#x2F;lib&#x2F;influxdb2&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://s2.loli.net/2022/08/24/M2XBdumLibYhTcG.png\" alt=\"image-20220725132539769\"></p>\n<ul>\n<li><p>CPU</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/6DfW4goZSQG5umz.png\" alt=\"image-20220725133149273\"></p>\n</li>\n<li><p>Memory</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/yP6rOb7GVTMx9uc.png\" alt=\"image-20220725133709846\"></p>\n</li>\n<li><p>Rss</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/KHmRQ1g3Yk6nIp9.png\" alt=\"image-20220725134536786\"></p>\n</li>\n<li><p>Disk</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/fQgeyaFsDcujwtZ.png\" alt=\"image-20220725134809572\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/eLEKWbwJatPlCok.png\" alt=\"image-20220725135017922\"></p>\n</li>\n</ul>\n"},{"title":"influx_vs_victoriametrics_cluster_test_report","top":false,"date":"2022-07-24T10:33:18.000Z","_content":"# influx_vs_victoriametrics_cluster_test_report\n\n## 环境\n\n- **Prometheus**: 178.104.163.111\t\t 2c4g\n\n- **k8s集群**：178.104.163.88\n\n  > docker version:20.10.16  k8s version: 1.20.6\n\n- **influxdb-cluster**\n\n178.104.163.151 influx-1 \t\t2c4g\n178.104.163.26  influx-2 \t\t 4c8g\n178.104.163.53  influx-3  \t\t4c8g\n\n> 内核版本：3.10.0-862.el7.x86_64\n>\n> docker version：20.10.17\n\n**架构图**\n\n![image-20220725111041635](https://s2.loli.net/2022/08/24/7um1iE8blcAx3wa.png)\n\n\n\n- **victoriametrics-cluster**\n\n178.104.163.177  tsdb1 \t  2c4g\n178.104.163.76   tsdb2\t\t4c8g\n178.104.163.113  tsdb3\t\t4c8g\n\n**架构图**\n\n![image-20220725112020055](https://s2.loli.net/2022/08/24/xCREeMzPVBLowSH.png)\n\n## 部署方式\n\n- [influxdb_cluster 部署方式](influx_1.6_cluster/README.md)\n- [victoriametrics_cluster 部署方式](vmcluster/README.md)\n\n## 测试结果\n\n>  运行时间三天\n\n```sh\n# 磁盘本地存储\n[root@influx-1 ~]# du -sh /var/lib/influxdb/\n1.5G    /var/lib/influxdb/\n[root@influx-2 ~]# du -sh /var/lib/influxdb/\n707M    /var/lib/influxdb/\n[root@influx-3 ~]# du -sh /var/lib/influxdb/\n1.7G    /var/lib/influxdb/\n--------------------------------\n[root@tsdb-cluster-3 ~]# du -sh /var/lib/vm\n122M    /var/lib/vm\n[root@tsdb-cluster-2 ~]# du -sh /var/lib/vm\n174M    /var/lib/vm\n[root@tsdb-cluster-1 ~]#  du -sh /var/lib/vm\n199M    /var/lib/vm\n```\n\n![image-20220725131101361](https://s2.loli.net/2022/08/24/WehX5Ec9sLwRFaT.png)\n\n![image-20220725131036156](https://s2.loli.net/2022/08/24/d9ozSZiHkgY7p3X.png)\n\n![image-20220725130959873](https://s2.loli.net/2022/08/24/t4VsSWCoiYv9FjG.png)\n\n---\n![image-20220725121904474](https://s2.loli.net/2022/08/24/26WEjInm7RZACgJ.png )\n\n![image-20220725122029764](https://s2.loli.net/2022/08/24/D7JRMtyXradYlNG.png)\n\n![image-20220725122201004](https://s2.loli.net/2022/08/24/iclMDKn7Z1gR456.png)\n\n\n\n\n\n- CPU\n\n  ![image-20220725123958988](https://s2.loli.net/2022/08/24/nON9DL3blZJCBvx.png)\n  \n  ![image-20220725123408776](https://s2.loli.net/2022/08/24/YWiFNJUI2K4cjG8.png)\n\n- Memory\n\n  ![image-20220725124140828](https://s2.loli.net/2022/08/24/D1huadKbHsYOJ6X.png)\n\n  ![image-20220725124516583](https://s2.loli.net/2022/08/24/kHojpOWU9i6cMPR.png)\n\n- Rss\n\n  ![image-20220725124653629](https://s2.loli.net/2022/08/24/6LBkVFfMKrn84G3.png)\n\n  ![image-20220725124743895](https://s2.loli.net/2022/08/24/UW8tzhe2PiwdgBO.png)\n\n- Disk\n\n  ![image-20220725125916072](https://s2.loli.net/2022/08/24/HIWJ4yBUDVCRdn7.png)\n\n  ![image-20220725125151780](https://s2.loli.net/2022/08/24/EL3aCsSfhRyWmvN.png)\n\n  ---\n\n  ![image-20220725130429272](https://s2.loli.net/2022/08/24/TvAQVGtrPN2LFXw.png)\n\n  ![image-20220725153305772](https://s2.loli.net/2022/08/24/1w7fSOWIeLGEMrP.png)\n","source":"_posts/CloudNativate/influx_vs_vm_cluster_version.md","raw":"---\ntitle: influx_vs_victoriametrics_cluster_test_report \ntags:\n  - k8s\n  - influxdb\n  - victoriametrics\n  - benchmark\n  - prometheus\ncategories:\n  - tsdb\ntop: false\ndate: 2022-07-24 18:33:18\n---\n# influx_vs_victoriametrics_cluster_test_report\n\n## 环境\n\n- **Prometheus**: 178.104.163.111\t\t 2c4g\n\n- **k8s集群**：178.104.163.88\n\n  > docker version:20.10.16  k8s version: 1.20.6\n\n- **influxdb-cluster**\n\n178.104.163.151 influx-1 \t\t2c4g\n178.104.163.26  influx-2 \t\t 4c8g\n178.104.163.53  influx-3  \t\t4c8g\n\n> 内核版本：3.10.0-862.el7.x86_64\n>\n> docker version：20.10.17\n\n**架构图**\n\n![image-20220725111041635](https://s2.loli.net/2022/08/24/7um1iE8blcAx3wa.png)\n\n\n\n- **victoriametrics-cluster**\n\n178.104.163.177  tsdb1 \t  2c4g\n178.104.163.76   tsdb2\t\t4c8g\n178.104.163.113  tsdb3\t\t4c8g\n\n**架构图**\n\n![image-20220725112020055](https://s2.loli.net/2022/08/24/xCREeMzPVBLowSH.png)\n\n## 部署方式\n\n- [influxdb_cluster 部署方式](influx_1.6_cluster/README.md)\n- [victoriametrics_cluster 部署方式](vmcluster/README.md)\n\n## 测试结果\n\n>  运行时间三天\n\n```sh\n# 磁盘本地存储\n[root@influx-1 ~]# du -sh /var/lib/influxdb/\n1.5G    /var/lib/influxdb/\n[root@influx-2 ~]# du -sh /var/lib/influxdb/\n707M    /var/lib/influxdb/\n[root@influx-3 ~]# du -sh /var/lib/influxdb/\n1.7G    /var/lib/influxdb/\n--------------------------------\n[root@tsdb-cluster-3 ~]# du -sh /var/lib/vm\n122M    /var/lib/vm\n[root@tsdb-cluster-2 ~]# du -sh /var/lib/vm\n174M    /var/lib/vm\n[root@tsdb-cluster-1 ~]#  du -sh /var/lib/vm\n199M    /var/lib/vm\n```\n\n![image-20220725131101361](https://s2.loli.net/2022/08/24/WehX5Ec9sLwRFaT.png)\n\n![image-20220725131036156](https://s2.loli.net/2022/08/24/d9ozSZiHkgY7p3X.png)\n\n![image-20220725130959873](https://s2.loli.net/2022/08/24/t4VsSWCoiYv9FjG.png)\n\n---\n![image-20220725121904474](https://s2.loli.net/2022/08/24/26WEjInm7RZACgJ.png )\n\n![image-20220725122029764](https://s2.loli.net/2022/08/24/D7JRMtyXradYlNG.png)\n\n![image-20220725122201004](https://s2.loli.net/2022/08/24/iclMDKn7Z1gR456.png)\n\n\n\n\n\n- CPU\n\n  ![image-20220725123958988](https://s2.loli.net/2022/08/24/nON9DL3blZJCBvx.png)\n  \n  ![image-20220725123408776](https://s2.loli.net/2022/08/24/YWiFNJUI2K4cjG8.png)\n\n- Memory\n\n  ![image-20220725124140828](https://s2.loli.net/2022/08/24/D1huadKbHsYOJ6X.png)\n\n  ![image-20220725124516583](https://s2.loli.net/2022/08/24/kHojpOWU9i6cMPR.png)\n\n- Rss\n\n  ![image-20220725124653629](https://s2.loli.net/2022/08/24/6LBkVFfMKrn84G3.png)\n\n  ![image-20220725124743895](https://s2.loli.net/2022/08/24/UW8tzhe2PiwdgBO.png)\n\n- Disk\n\n  ![image-20220725125916072](https://s2.loli.net/2022/08/24/HIWJ4yBUDVCRdn7.png)\n\n  ![image-20220725125151780](https://s2.loli.net/2022/08/24/EL3aCsSfhRyWmvN.png)\n\n  ---\n\n  ![image-20220725130429272](https://s2.loli.net/2022/08/24/TvAQVGtrPN2LFXw.png)\n\n  ![image-20220725153305772](https://s2.loli.net/2022/08/24/1w7fSOWIeLGEMrP.png)\n","slug":"CloudNativate/influx_vs_vm_cluster_version","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39g005z12mjhs5p7n4r","content":"<h1 id=\"influx-vs-victoriametrics-cluster-test-report\"><a href=\"#influx-vs-victoriametrics-cluster-test-report\" class=\"headerlink\" title=\"influx_vs_victoriametrics_cluster_test_report\"></a>influx_vs_victoriametrics_cluster_test_report</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p><strong>Prometheus</strong>: 178.104.163.111         2c4g</p>\n</li>\n<li><p><strong>k8s集群</strong>：178.104.163.88</p>\n<blockquote>\n<p>docker version:20.10.16  k8s version: 1.20.6</p>\n</blockquote>\n</li>\n<li><p><strong>influxdb-cluster</strong></p>\n</li>\n</ul>\n<p>178.104.163.151 influx-1         2c4g<br>178.104.163.26  influx-2          4c8g<br>178.104.163.53  influx-3          4c8g</p>\n<blockquote>\n<p>内核版本：3.10.0-862.el7.x86_64</p>\n<p>docker version：20.10.17</p>\n</blockquote>\n<p><strong>架构图</strong></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/7um1iE8blcAx3wa.png\" alt=\"image-20220725111041635\"></p>\n<ul>\n<li><strong>victoriametrics-cluster</strong></li>\n</ul>\n<p>178.104.163.177  tsdb1       2c4g<br>178.104.163.76   tsdb2        4c8g<br>178.104.163.113  tsdb3        4c8g</p>\n<p><strong>架构图</strong></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/xCREeMzPVBLowSH.png\" alt=\"image-20220725112020055\"></p>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><ul>\n<li><a href=\"influx_1.6_cluster/README.md\">influxdb_cluster 部署方式</a></li>\n<li><a href=\"vmcluster/README.md\">victoriametrics_cluster 部署方式</a></li>\n</ul>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><blockquote>\n<p> 运行时间三天</p>\n</blockquote>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># 磁盘本地存储\n[root@influx-1 ~]# du -sh /var/lib/influxdb/\n1.5G    /var/lib/influxdb/\n[root@influx-2 ~]# du -sh /var/lib/influxdb/\n707M    /var/lib/influxdb/\n[root@influx-3 ~]# du -sh /var/lib/influxdb/\n1.7G    /var/lib/influxdb/\n--------------------------------\n[root@tsdb-cluster-3 ~]# du -sh /var/lib/vm\n122M    /var/lib/vm\n[root@tsdb-cluster-2 ~]# du -sh /var/lib/vm\n174M    /var/lib/vm\n[root@tsdb-cluster-1 ~]#  du -sh /var/lib/vm\n199M    /var/lib/vm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://s2.loli.net/2022/08/24/WehX5Ec9sLwRFaT.png\" alt=\"image-20220725131101361\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/d9ozSZiHkgY7p3X.png\" alt=\"image-20220725131036156\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/t4VsSWCoiYv9FjG.png\" alt=\"image-20220725130959873\"></p>\n<hr>\n<p><img src=\"https://s2.loli.net/2022/08/24/26WEjInm7RZACgJ.png\" alt=\"image-20220725121904474\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/D7JRMtyXradYlNG.png\" alt=\"image-20220725122029764\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/iclMDKn7Z1gR456.png\" alt=\"image-20220725122201004\"></p>\n<ul>\n<li><p>CPU</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/nON9DL3blZJCBvx.png\" alt=\"image-20220725123958988\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/YWiFNJUI2K4cjG8.png\" alt=\"image-20220725123408776\"></p>\n</li>\n<li><p>Memory</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/D1huadKbHsYOJ6X.png\" alt=\"image-20220725124140828\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/kHojpOWU9i6cMPR.png\" alt=\"image-20220725124516583\"></p>\n</li>\n<li><p>Rss</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/6LBkVFfMKrn84G3.png\" alt=\"image-20220725124653629\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/UW8tzhe2PiwdgBO.png\" alt=\"image-20220725124743895\"></p>\n</li>\n<li><p>Disk</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/HIWJ4yBUDVCRdn7.png\" alt=\"image-20220725125916072\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/EL3aCsSfhRyWmvN.png\" alt=\"image-20220725125151780\"></p>\n<hr>\n<p><img src=\"https://s2.loli.net/2022/08/24/TvAQVGtrPN2LFXw.png\" alt=\"image-20220725130429272\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/1w7fSOWIeLGEMrP.png\" alt=\"image-20220725153305772\"></p>\n</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"influx-vs-victoriametrics-cluster-test-report\"><a href=\"#influx-vs-victoriametrics-cluster-test-report\" class=\"headerlink\" title=\"influx_vs_victoriametrics_cluster_test_report\"></a>influx_vs_victoriametrics_cluster_test_report</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p><strong>Prometheus</strong>: 178.104.163.111         2c4g</p>\n</li>\n<li><p><strong>k8s集群</strong>：178.104.163.88</p>\n<blockquote>\n<p>docker version:20.10.16  k8s version: 1.20.6</p>\n</blockquote>\n</li>\n<li><p><strong>influxdb-cluster</strong></p>\n</li>\n</ul>\n<p>178.104.163.151 influx-1         2c4g<br>178.104.163.26  influx-2          4c8g<br>178.104.163.53  influx-3          4c8g</p>\n<blockquote>\n<p>内核版本：3.10.0-862.el7.x86_64</p>\n<p>docker version：20.10.17</p>\n</blockquote>\n<p><strong>架构图</strong></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/7um1iE8blcAx3wa.png\" alt=\"image-20220725111041635\"></p>\n<ul>\n<li><strong>victoriametrics-cluster</strong></li>\n</ul>\n<p>178.104.163.177  tsdb1       2c4g<br>178.104.163.76   tsdb2        4c8g<br>178.104.163.113  tsdb3        4c8g</p>\n<p><strong>架构图</strong></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/xCREeMzPVBLowSH.png\" alt=\"image-20220725112020055\"></p>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><ul>\n<li><a href=\"influx_1.6_cluster/README.md\">influxdb_cluster 部署方式</a></li>\n<li><a href=\"vmcluster/README.md\">victoriametrics_cluster 部署方式</a></li>\n</ul>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><blockquote>\n<p> 运行时间三天</p>\n</blockquote>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># 磁盘本地存储\n[root@influx-1 ~]# du -sh &#x2F;var&#x2F;lib&#x2F;influxdb&#x2F;\n1.5G    &#x2F;var&#x2F;lib&#x2F;influxdb&#x2F;\n[root@influx-2 ~]# du -sh &#x2F;var&#x2F;lib&#x2F;influxdb&#x2F;\n707M    &#x2F;var&#x2F;lib&#x2F;influxdb&#x2F;\n[root@influx-3 ~]# du -sh &#x2F;var&#x2F;lib&#x2F;influxdb&#x2F;\n1.7G    &#x2F;var&#x2F;lib&#x2F;influxdb&#x2F;\n--------------------------------\n[root@tsdb-cluster-3 ~]# du -sh &#x2F;var&#x2F;lib&#x2F;vm\n122M    &#x2F;var&#x2F;lib&#x2F;vm\n[root@tsdb-cluster-2 ~]# du -sh &#x2F;var&#x2F;lib&#x2F;vm\n174M    &#x2F;var&#x2F;lib&#x2F;vm\n[root@tsdb-cluster-1 ~]#  du -sh &#x2F;var&#x2F;lib&#x2F;vm\n199M    &#x2F;var&#x2F;lib&#x2F;vm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://s2.loli.net/2022/08/24/WehX5Ec9sLwRFaT.png\" alt=\"image-20220725131101361\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/d9ozSZiHkgY7p3X.png\" alt=\"image-20220725131036156\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/t4VsSWCoiYv9FjG.png\" alt=\"image-20220725130959873\"></p>\n<hr>\n<p><img src=\"https://s2.loli.net/2022/08/24/26WEjInm7RZACgJ.png\" alt=\"image-20220725121904474\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/D7JRMtyXradYlNG.png\" alt=\"image-20220725122029764\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/iclMDKn7Z1gR456.png\" alt=\"image-20220725122201004\"></p>\n<ul>\n<li><p>CPU</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/nON9DL3blZJCBvx.png\" alt=\"image-20220725123958988\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/YWiFNJUI2K4cjG8.png\" alt=\"image-20220725123408776\"></p>\n</li>\n<li><p>Memory</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/D1huadKbHsYOJ6X.png\" alt=\"image-20220725124140828\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/kHojpOWU9i6cMPR.png\" alt=\"image-20220725124516583\"></p>\n</li>\n<li><p>Rss</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/6LBkVFfMKrn84G3.png\" alt=\"image-20220725124653629\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/UW8tzhe2PiwdgBO.png\" alt=\"image-20220725124743895\"></p>\n</li>\n<li><p>Disk</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/HIWJ4yBUDVCRdn7.png\" alt=\"image-20220725125916072\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/EL3aCsSfhRyWmvN.png\" alt=\"image-20220725125151780\"></p>\n<hr>\n<p><img src=\"https://s2.loli.net/2022/08/24/TvAQVGtrPN2LFXw.png\" alt=\"image-20220725130429272\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/1w7fSOWIeLGEMrP.png\" alt=\"image-20220725153305772\"></p>\n</li>\n</ul>\n"},{"title":"InfluxDB不同版本调研2","top":false,"date":"2022-07-28T10:33:18.000Z","_content":"\n\n# InfluxDB不同版本调研\n一、关键概念\n======\n\n相比 V1 移除了 database 和 RP，增加了 bucket。\n\n- 背景\n  - 它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。\n\n  - InfluxDB 2.0还与[InfluxDB Cloud紧密集成，InfluxDB Cloud](https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/)是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。\n\n- V2 具有以下几个概念：\n\ntimestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization\n\n新增的概念：\n\nbucket：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织\n\nbucket schema：具有明确的 schema-type 的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。\n\norganization：InfluxDB 组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。\n\n- v2 特性\n\n  ```txt\n  \n  1,telegraf chronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后\n  2,权限全增强，新增了token.可以使用token进行数据读写操作\n  3,DSL改了,FluxQL的目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tick.能执行的操作更多。\n  4,接口返回数据的格式改为csv,并且可以使用 FluxQL 来自定义返回数据的格式与字段\n  5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使\n  用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。现在influxdb v2直接可以实现这个采集的操作\n  6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfill进influxdb中。并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行\n  7,OSS 2.x包括1.x兼容的`/query`和`/write`端点\n  8,它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台\n  \n  ```\n  \n  \n\n二、系统结构\n======\n\n\n\n**TICK架构分析与各组件功能介绍**\n\nTICK架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括Telegraf、InfluxDB、Chronograf和 Kapacitor。TICK架构以及各组件分工情况如图所示：\n\n![tick](https://s2.loli.net/2022/08/24/j8tpD4FCQhUuqMB.png)\n\n\n\n**数据模式**：InfluxDB 数据元素存储在时间结构合并树 (TSM) 和时间序列索引 (TSI) 文件中，以有效压缩存储的数据。\n\n除了上图可视化管理工具Chronograf外，还有一种可视化工具Grafana，它也是用于大规模指标数据的可视化展示，提供包括折线图，饼图，仪表盘等多种监控数据可视化UI，若应用过程中考虑到扩展性问题，也会使用Grafana代替Chronograf。\n\n\n\n**文件系统布局**\n\n> InfluxDB Dockerhub镜像使用/var/lib/influxdb2而不是/var/lib/influxdb，因此在升级过程中，你可以很容易地为InfluxDB 1.x和2.x的数据装载不同的卷。\n\n**默认路径：**\n\n| Path                                                         | Default                             |\n| :----------------------------------------------------------- | :---------------------------------- |\n| [Engine path](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#engine-path) | `/var/lib/influxdb2/engine/`        |\n| [Bolt path](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#bolt-path) | `/var/lib/influxdb2/influxd.bolt`   |\n| [SQLite path](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#sqlite-path) | `/var/lib/influxdb2/influxd.sqlite` |\n| [Configs path](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#configs-path) | `/etc/influxdb2/configs`            |\n\n**[文件目录结构](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#)：**\n\n- /var/lib/influxdb2/\n  - engine/\n    - data/\n      - *TSM directories and files*\n    - wal/\n      - *WAL directories and files*\n  - influxd.bolt\n  - influxd.sqlite\n- /etc/influxdb2/\n  - configs\n\n**Influxdb 分片和分片组**\n\nInfluxDB 在将数据存储到磁盘时将时间序列数据组织成分片。分片被分组到分片组中\n\n表示具有 4d 保留期 和 1d 分片组持续时间的存储桶：\n\n![](https://s2.loli.net/2022/08/24/laJFv6ofSKBuCwT.png)\n\n分片删除：InfluxDB 保留强制执行服务会例行检查早于其存储桶保留期的分片组。一旦分片组的开始时间超过存储桶的保留期，InfluxDB 将删除该分片组以及关联的分片和 TSM 文件 (在具有无限保留期的存储桶中，分片无限期地保留在磁盘上)。\n\n**系统存储桶**\n\n**_monitoring system bucket :** 该_monitoring 系统桶存储 InfluxDB 数据用于 监控数据并发送警报。数据保留：7 天\n\n**_tasks system bucket:** 该_tasks 系统桶存储与数据 InfluxDB 任务的执行。数据保留：1 天\n\n标签和字段描述详见：[https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/](https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/)\n\n三、配置文件\n======\n\n当 influxd 启动时，它会在当前工作目录检查一个名为 config.* 的文件。\n\n支持以下语法：\n\n*   YAML (.yaml, .yml)\n*   TOML (.toml)\n*   JSON (.json)\n\n配置选项 (日志、并发压缩...)：[https://docs.influxdata.com/influxdb/v2.3/reference/config-options/](https://docs.influxdata.com/influxdb/v2.3/reference/config-options/)\n\n四、Flux 查询语句\n===========\n\nFlux 是 InfluxData 的功能性数据脚本语言，设计用于查询、分析和处理数据，它是 InfluxQL 和其他类似 SQL 的查询语言的替代品。\n\n设计原则：受 Javascript 启发，旨在设计出可用、可读、灵活、可组合、可测试、可贡献和可共享的语言。\n\n示例查询：近一小时存储的数据，按`cpu`度量和`cpu=cpu-total`标签过滤，以 1 分钟为间隔对数据进行窗口化，并计算每个窗口的平均值\n\n```javascript\nfrom(bucket:\"example-bucket\")\n  |> range(start:-1h)\n  |> filter(fn:(r) =>\n    r._measurement == \"cpu\" and\n    r.cpu == \"cpu-total\"\n  )\n  |> aggregateWindow(every: 1m, fn: mean)\n```\n\n**1 > 关键概念**\n\n**Pipe-forward operator**（管道转发操作符 \"|>\"）：Flux 广泛使用管道转发运算符 \"|>\" 将操作链接在一起。在每个函数或操作之后，Flux 返回一个包含数据的表或表的集合。管道转发运算符将这些表通过管道输送到下一个函数或操作中，在那里它们将被进一步处理或操作。\n\n**Tables**：Flux 构造表格中的所有数据。当数据从数据源流式传输时，Flux 将其格式化为带注释的逗号分隔值 (CSV)，表示表格。然后函数操作或处理它们并输出新表。\n\n**Group keys**：每个表都有一个组键 (Group keys)，用于描述表的内容。它是一个列列表，表中的每一行都具有相同的值。每行中具有唯一值的列不是组键的一部分。\n\n示例 group key\n\n```\n \nGroup key: [_start, _stop, _field]\n                   _start:time                      _stop:time           _field:string                      _time:time                  _value:float\n------------------------------  ------------------------------  ----------------------  ------------------------------  ----------------------------\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:33:56.000000000Z             65.55318832397461\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:06.000000000Z             65.52391052246094\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:36.000000000Z              65.536737442016\n```\n\n注意：_time 和_value 被排除在示例组键之外，它们对于每一行都是唯一的。\n\n**2 > 查询语法**\n\n[https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/](https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/)\n\n指定数据源：`from(bucket:\"example-bucket\")`\n\n指定时间范围：\n\n使用管道转发运算符 (|>) 将数据从数据源通过管道传输到 range() 函数，该函数指定查询的时间范围。它接受两个参数：start 和 stop。范围可以是使用相对负持续时间 或使用绝对时间\n\n```javascript\n// Relative time range with start only. Stop defaults to now.\nfrom(bucket:\"example-bucket\")\n    |> range(start: -1h)\n\n// Relative time range with start and stop\nfrom(bucket:\"example-bucket\")\n    |> range(start: -1h, stop: -10m)\n \n//使用绝对时间\nfrom(bucket:\"example-bucket\")\n    |> range(start: 2021-01-01T00:00:00Z, stop: 2021-01-01T12:00:00Z)\n \n//过去十五分钟的数据\nfrom(bucket:\"example-bucket\")\n    |> range(start: -15m)\n```\n\n**3 > 数据过滤：**\n\n将范围数据传递到 filter() 函数中，以根据数据属性或列缩小结果范围。该 filter() 函数有一个参数 ，fn 它需要一个匿名函数，该函数具有基于列或属性过滤数据的逻\n\n```javascript\n// Pattern\n(r) => (r.recordProperty comparisonOperator comparisonExpression)\n\n// Example with single filter\n(r) => (r._measurement == \"cpu\")\n\n// Example with multiple filters\n(r) => r._measurement == \"cpu\" and r._field != \"usage_system\")\n \n//按cpu度量、usage_system字段和cpu-total标记值过滤\nfrom(bucket: \"example-bucket\")\n    |> range(start: -15m)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n```\n\n**4 > 生成指定查询数据**\n\nFlux 的 yield() 函数将过滤后的表作为查询结果输出。\n\nFlux 会 yield() 在每个脚本的末尾自动假设一个函数，以便输出和可视化数据。yield() 只有在同一个 Flux 查询中包含多个查询时，才需要显式调用。每组返回的数据都需要使用该 yield() 函数命\n\n```js\nfrom(bucket: \"example-bucket\")\n    |> range(start: -15m)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n    |> yield()\n```\n\n**5 > 数据转换**\n\n使用函数，将数据聚合为平均值、下采样数据等\n\n```javascript\n \n//更新范围从最后一小时拉取数据\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n \n//以五分钟为间隔的窗口化数据\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n \n//聚合窗口数据\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n    |> window(every: 5m)\n    |> mean()\n \n//添加时间列到聚合函数\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n    |> window(every: 5m)\n    |> mean()\n    |> duplicate(column: \"_stop\", as: \"_time\")\n \n//取消窗口聚合表，将所有点收集到一个无限的窗口中\nfrom(bucket:\"example-bucket\")\n  |> range(start: -1h)\n  |> filter(fn: (r) =>\n    r._measurement == \"cpu\" and\n    r._field == \"usage_system\" and\n    r.cpu == \"cpu-total\"\n  )\n  |> window(every: 5m)\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> window(every: inf)\n \n//辅助函数(将聚合或选择器函数应用于固定的时间窗口,通过every指定窗口的持续时间)\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n    |> window(every: 5m)\n    |> mean()\n    |> duplicate(column: \"_stop\", as: \"_time\")\n```\n\n**6 > 语法基础与通量函数**\n\n语法基础：[https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/](https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/)\n\n通量函数包：[https://docs.influxdata.com/flux/v0.x/stdlib/](https://docs.influxdata.com/flux/v0.x/stdlib/)\n\n比如: filter() 函数 筛选数据 ([https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/](https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/)\n\n五、可视化数据\n=======\n\n[https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/](https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/)\n\n**支持的可视化类型：**\n\nBand （乐队）：显示随时间变化的数据组的上限和下限\n\n![](https://s2.loli.net/2022/08/24/wl3GkiUWRCapEDn.png)\n\nguage（仪表盘）：仪表视图中显示时间序列的单个值最新值\n\n![](https://s2.loli.net/2022/08/24/Js5RNkhtiAD1jcS.png)\n\ngraph（图形）：折线图\n\n![](https://s2.loli.net/2022/08/24/jHdI7zC5JbpNA1q.png)\n\nGraph + Single Stat（图表 + 单一统计）：以折线图显示指定的时间序列，并将最近的单个值叠加为一个大数值\n\n![](https://s2.loli.net/2022/08/24/pxkolJKtwRAn1jh.png)\n\nheatmap（热图）：显示 x 和 y 轴上的数据分布，其中颜色代表不同的数据点浓度\n\n![](https://s2.loli.net/2022/08/24/aOkSMDyiz2bwfRI.png)\n\nhistogram（直方图）：一种查看数据分布的方法。y 轴专用于计数，x 轴分为 bin\n\n![](https://s2.loli.net/2022/08/24/ivagJkyHX1zqeE9.png)\n\nmosaic（马赛克）：化显示时间序列数据中的状态变化\n\n![](https://s2.loli.net/2022/08/24/n6G4NXkImWyUpda.png)\n\nscatter（散点图）：视图使用散点图来显示时间序列数据\n\n![](https://s2.loli.net/2022/08/24/iHmI2W6Ct39VwLu.png)\n\nsingle stat（单项统计）： 将指定时间序列的最新值显示为数值\n\n![](https://s2.loli.net/2022/08/24/VfpXCTugheW5H1Q.png)\n\ntable（表格视图）：表格视图中显示查询结果  \n![](https://s2.loli.net/2022/08/24/N3Y5RnkUZOCgTlF.png)\n\n**本地制造数据，通过图表数据展示案例：**\n\n![](https://s2.loli.net/2022/08/24/9gwDhEf1JNdmG3z.png)\n\n\n\n遗留问题\n====\n\n**问：V1 版本的 RP+CQ 在 V2 版本应该怎样使用？**\n\n答：\n\nRP 存储周期，完全由 bucket 决定，在创建 bucket 时需要指定 bucket 的数据保留时间。\n\n需要注意的是：bucket 的数据存储时间并不能随意更换，可以将永久存储的数据改成 Retention 存储，但是也存在限制；无法将有 Retention 的数据改成永久存储。\n\n![](https://s2.loli.net/2022/08/24/tlMXa2DyxPYv51j.png)\n\nCQ 需要使用 task 代替，InfluxQL 需要使用 Flux 代替。 \n\ntask 示例：每小时执行一次，收集一个小时内的数据，输出到另一个 bucket 中 (可使用内置函数，本案例为了验证功能使用直接输出)\n\n```\noption task = {name: \"tast2\", every: 1h}\n \nfrom(bucket: \"bucket1\")\n\t|> range(start: -task.every)\n\t|> filter(fn: (r) =>\n\t\t(r._measurement == \"mem2\"))\n\t|> filter(fn: (r) =>\n\t\t(r._field == \"used_percent\"))\n\t|> set(key: \"_measurement\", value: \"average3-mem2\")\n\t|> to(org: \"test\", bucket: \"bucket1/mem2-rp\")\n```\n\n![](https://s2.loli.net/2022/08/24/a87tnCN9JzjpxZi.png)\n\n![](https://s2.loli.net/2022/08/24/qsEHiImy1X3xWwn.png)\n\nCQ 转 Task 官方描述：[https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/](https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/)\n\nTask 使用介绍：[https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/](https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/)\n\n**问：V2 版本数据如何备份？文件拷贝是否可行？**\n\n答：\n\n官方提供的备份方式：\n\n```\n//将所有数据备份到一个目录\ninflux backup /path/to/backup/dir/\n \n//将特定存储桶备份到目录\ninflux backup --bucket example-bucket /path/to/backup/dir/\n```\n\n文件拷贝方式（/var/lib/influxdb）：与 V1 一致，服务重启时生效。\n\n相比 V1 :  (1) 它在文件层次使用 ID 区分具体存储桶  (2) 它无法在插入过程中更换数据文件，即使更换了也会失效，不过成功启动之后删了它的数据文件，它也不会报错\n\n结论：(1) 可以使用官方提供的命令进行冷备份，服务器上备份前需要进行 token 配置  (2) 文件拷贝是可行的，但是必须要重启服务，否则数据将会不准确。\n\n官方描述：[https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/](https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/)\n\n","source":"_posts/CloudNativate/Influxdb2.md","raw":"---\ntitle: InfluxDB不同版本调研2\ntags:\n  - k8s\n  - influxdb\n  - benchmark\n  - prometheus\ncategories:\n  - tsdb\ntop: false\ndate: 2022-07-28 18:33:18\n---\n\n\n# InfluxDB不同版本调研\n一、关键概念\n======\n\n相比 V1 移除了 database 和 RP，增加了 bucket。\n\n- 背景\n  - 它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。\n\n  - InfluxDB 2.0还与[InfluxDB Cloud紧密集成，InfluxDB Cloud](https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/)是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。\n\n- V2 具有以下几个概念：\n\ntimestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization\n\n新增的概念：\n\nbucket：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织\n\nbucket schema：具有明确的 schema-type 的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。\n\norganization：InfluxDB 组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。\n\n- v2 特性\n\n  ```txt\n  \n  1,telegraf chronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后\n  2,权限全增强，新增了token.可以使用token进行数据读写操作\n  3,DSL改了,FluxQL的目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tick.能执行的操作更多。\n  4,接口返回数据的格式改为csv,并且可以使用 FluxQL 来自定义返回数据的格式与字段\n  5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使\n  用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。现在influxdb v2直接可以实现这个采集的操作\n  6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfill进influxdb中。并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行\n  7,OSS 2.x包括1.x兼容的`/query`和`/write`端点\n  8,它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台\n  \n  ```\n  \n  \n\n二、系统结构\n======\n\n\n\n**TICK架构分析与各组件功能介绍**\n\nTICK架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括Telegraf、InfluxDB、Chronograf和 Kapacitor。TICK架构以及各组件分工情况如图所示：\n\n![tick](https://s2.loli.net/2022/08/24/j8tpD4FCQhUuqMB.png)\n\n\n\n**数据模式**：InfluxDB 数据元素存储在时间结构合并树 (TSM) 和时间序列索引 (TSI) 文件中，以有效压缩存储的数据。\n\n除了上图可视化管理工具Chronograf外，还有一种可视化工具Grafana，它也是用于大规模指标数据的可视化展示，提供包括折线图，饼图，仪表盘等多种监控数据可视化UI，若应用过程中考虑到扩展性问题，也会使用Grafana代替Chronograf。\n\n\n\n**文件系统布局**\n\n> InfluxDB Dockerhub镜像使用/var/lib/influxdb2而不是/var/lib/influxdb，因此在升级过程中，你可以很容易地为InfluxDB 1.x和2.x的数据装载不同的卷。\n\n**默认路径：**\n\n| Path                                                         | Default                             |\n| :----------------------------------------------------------- | :---------------------------------- |\n| [Engine path](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#engine-path) | `/var/lib/influxdb2/engine/`        |\n| [Bolt path](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#bolt-path) | `/var/lib/influxdb2/influxd.bolt`   |\n| [SQLite path](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#sqlite-path) | `/var/lib/influxdb2/influxd.sqlite` |\n| [Configs path](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#configs-path) | `/etc/influxdb2/configs`            |\n\n**[文件目录结构](https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#)：**\n\n- /var/lib/influxdb2/\n  - engine/\n    - data/\n      - *TSM directories and files*\n    - wal/\n      - *WAL directories and files*\n  - influxd.bolt\n  - influxd.sqlite\n- /etc/influxdb2/\n  - configs\n\n**Influxdb 分片和分片组**\n\nInfluxDB 在将数据存储到磁盘时将时间序列数据组织成分片。分片被分组到分片组中\n\n表示具有 4d 保留期 和 1d 分片组持续时间的存储桶：\n\n![](https://s2.loli.net/2022/08/24/laJFv6ofSKBuCwT.png)\n\n分片删除：InfluxDB 保留强制执行服务会例行检查早于其存储桶保留期的分片组。一旦分片组的开始时间超过存储桶的保留期，InfluxDB 将删除该分片组以及关联的分片和 TSM 文件 (在具有无限保留期的存储桶中，分片无限期地保留在磁盘上)。\n\n**系统存储桶**\n\n**_monitoring system bucket :** 该_monitoring 系统桶存储 InfluxDB 数据用于 监控数据并发送警报。数据保留：7 天\n\n**_tasks system bucket:** 该_tasks 系统桶存储与数据 InfluxDB 任务的执行。数据保留：1 天\n\n标签和字段描述详见：[https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/](https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/)\n\n三、配置文件\n======\n\n当 influxd 启动时，它会在当前工作目录检查一个名为 config.* 的文件。\n\n支持以下语法：\n\n*   YAML (.yaml, .yml)\n*   TOML (.toml)\n*   JSON (.json)\n\n配置选项 (日志、并发压缩...)：[https://docs.influxdata.com/influxdb/v2.3/reference/config-options/](https://docs.influxdata.com/influxdb/v2.3/reference/config-options/)\n\n四、Flux 查询语句\n===========\n\nFlux 是 InfluxData 的功能性数据脚本语言，设计用于查询、分析和处理数据，它是 InfluxQL 和其他类似 SQL 的查询语言的替代品。\n\n设计原则：受 Javascript 启发，旨在设计出可用、可读、灵活、可组合、可测试、可贡献和可共享的语言。\n\n示例查询：近一小时存储的数据，按`cpu`度量和`cpu=cpu-total`标签过滤，以 1 分钟为间隔对数据进行窗口化，并计算每个窗口的平均值\n\n```javascript\nfrom(bucket:\"example-bucket\")\n  |> range(start:-1h)\n  |> filter(fn:(r) =>\n    r._measurement == \"cpu\" and\n    r.cpu == \"cpu-total\"\n  )\n  |> aggregateWindow(every: 1m, fn: mean)\n```\n\n**1 > 关键概念**\n\n**Pipe-forward operator**（管道转发操作符 \"|>\"）：Flux 广泛使用管道转发运算符 \"|>\" 将操作链接在一起。在每个函数或操作之后，Flux 返回一个包含数据的表或表的集合。管道转发运算符将这些表通过管道输送到下一个函数或操作中，在那里它们将被进一步处理或操作。\n\n**Tables**：Flux 构造表格中的所有数据。当数据从数据源流式传输时，Flux 将其格式化为带注释的逗号分隔值 (CSV)，表示表格。然后函数操作或处理它们并输出新表。\n\n**Group keys**：每个表都有一个组键 (Group keys)，用于描述表的内容。它是一个列列表，表中的每一行都具有相同的值。每行中具有唯一值的列不是组键的一部分。\n\n示例 group key\n\n```\n \nGroup key: [_start, _stop, _field]\n                   _start:time                      _stop:time           _field:string                      _time:time                  _value:float\n------------------------------  ------------------------------  ----------------------  ------------------------------  ----------------------------\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:33:56.000000000Z             65.55318832397461\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:06.000000000Z             65.52391052246094\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:36.000000000Z              65.536737442016\n```\n\n注意：_time 和_value 被排除在示例组键之外，它们对于每一行都是唯一的。\n\n**2 > 查询语法**\n\n[https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/](https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/)\n\n指定数据源：`from(bucket:\"example-bucket\")`\n\n指定时间范围：\n\n使用管道转发运算符 (|>) 将数据从数据源通过管道传输到 range() 函数，该函数指定查询的时间范围。它接受两个参数：start 和 stop。范围可以是使用相对负持续时间 或使用绝对时间\n\n```javascript\n// Relative time range with start only. Stop defaults to now.\nfrom(bucket:\"example-bucket\")\n    |> range(start: -1h)\n\n// Relative time range with start and stop\nfrom(bucket:\"example-bucket\")\n    |> range(start: -1h, stop: -10m)\n \n//使用绝对时间\nfrom(bucket:\"example-bucket\")\n    |> range(start: 2021-01-01T00:00:00Z, stop: 2021-01-01T12:00:00Z)\n \n//过去十五分钟的数据\nfrom(bucket:\"example-bucket\")\n    |> range(start: -15m)\n```\n\n**3 > 数据过滤：**\n\n将范围数据传递到 filter() 函数中，以根据数据属性或列缩小结果范围。该 filter() 函数有一个参数 ，fn 它需要一个匿名函数，该函数具有基于列或属性过滤数据的逻\n\n```javascript\n// Pattern\n(r) => (r.recordProperty comparisonOperator comparisonExpression)\n\n// Example with single filter\n(r) => (r._measurement == \"cpu\")\n\n// Example with multiple filters\n(r) => r._measurement == \"cpu\" and r._field != \"usage_system\")\n \n//按cpu度量、usage_system字段和cpu-total标记值过滤\nfrom(bucket: \"example-bucket\")\n    |> range(start: -15m)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n```\n\n**4 > 生成指定查询数据**\n\nFlux 的 yield() 函数将过滤后的表作为查询结果输出。\n\nFlux 会 yield() 在每个脚本的末尾自动假设一个函数，以便输出和可视化数据。yield() 只有在同一个 Flux 查询中包含多个查询时，才需要显式调用。每组返回的数据都需要使用该 yield() 函数命\n\n```js\nfrom(bucket: \"example-bucket\")\n    |> range(start: -15m)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n    |> yield()\n```\n\n**5 > 数据转换**\n\n使用函数，将数据聚合为平均值、下采样数据等\n\n```javascript\n \n//更新范围从最后一小时拉取数据\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n \n//以五分钟为间隔的窗口化数据\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n \n//聚合窗口数据\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n    |> window(every: 5m)\n    |> mean()\n \n//添加时间列到聚合函数\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n    |> window(every: 5m)\n    |> mean()\n    |> duplicate(column: \"_stop\", as: \"_time\")\n \n//取消窗口聚合表，将所有点收集到一个无限的窗口中\nfrom(bucket:\"example-bucket\")\n  |> range(start: -1h)\n  |> filter(fn: (r) =>\n    r._measurement == \"cpu\" and\n    r._field == \"usage_system\" and\n    r.cpu == \"cpu-total\"\n  )\n  |> window(every: 5m)\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> window(every: inf)\n \n//辅助函数(将聚合或选择器函数应用于固定的时间窗口,通过every指定窗口的持续时间)\nfrom(bucket: \"example-bucket\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._measurement == \"cpu\" and r._field == \"usage_system\" and r.cpu == \"cpu-total\")\n    |> window(every: 5m)\n    |> mean()\n    |> duplicate(column: \"_stop\", as: \"_time\")\n```\n\n**6 > 语法基础与通量函数**\n\n语法基础：[https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/](https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/)\n\n通量函数包：[https://docs.influxdata.com/flux/v0.x/stdlib/](https://docs.influxdata.com/flux/v0.x/stdlib/)\n\n比如: filter() 函数 筛选数据 ([https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/](https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/)\n\n五、可视化数据\n=======\n\n[https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/](https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/)\n\n**支持的可视化类型：**\n\nBand （乐队）：显示随时间变化的数据组的上限和下限\n\n![](https://s2.loli.net/2022/08/24/wl3GkiUWRCapEDn.png)\n\nguage（仪表盘）：仪表视图中显示时间序列的单个值最新值\n\n![](https://s2.loli.net/2022/08/24/Js5RNkhtiAD1jcS.png)\n\ngraph（图形）：折线图\n\n![](https://s2.loli.net/2022/08/24/jHdI7zC5JbpNA1q.png)\n\nGraph + Single Stat（图表 + 单一统计）：以折线图显示指定的时间序列，并将最近的单个值叠加为一个大数值\n\n![](https://s2.loli.net/2022/08/24/pxkolJKtwRAn1jh.png)\n\nheatmap（热图）：显示 x 和 y 轴上的数据分布，其中颜色代表不同的数据点浓度\n\n![](https://s2.loli.net/2022/08/24/aOkSMDyiz2bwfRI.png)\n\nhistogram（直方图）：一种查看数据分布的方法。y 轴专用于计数，x 轴分为 bin\n\n![](https://s2.loli.net/2022/08/24/ivagJkyHX1zqeE9.png)\n\nmosaic（马赛克）：化显示时间序列数据中的状态变化\n\n![](https://s2.loli.net/2022/08/24/n6G4NXkImWyUpda.png)\n\nscatter（散点图）：视图使用散点图来显示时间序列数据\n\n![](https://s2.loli.net/2022/08/24/iHmI2W6Ct39VwLu.png)\n\nsingle stat（单项统计）： 将指定时间序列的最新值显示为数值\n\n![](https://s2.loli.net/2022/08/24/VfpXCTugheW5H1Q.png)\n\ntable（表格视图）：表格视图中显示查询结果  \n![](https://s2.loli.net/2022/08/24/N3Y5RnkUZOCgTlF.png)\n\n**本地制造数据，通过图表数据展示案例：**\n\n![](https://s2.loli.net/2022/08/24/9gwDhEf1JNdmG3z.png)\n\n\n\n遗留问题\n====\n\n**问：V1 版本的 RP+CQ 在 V2 版本应该怎样使用？**\n\n答：\n\nRP 存储周期，完全由 bucket 决定，在创建 bucket 时需要指定 bucket 的数据保留时间。\n\n需要注意的是：bucket 的数据存储时间并不能随意更换，可以将永久存储的数据改成 Retention 存储，但是也存在限制；无法将有 Retention 的数据改成永久存储。\n\n![](https://s2.loli.net/2022/08/24/tlMXa2DyxPYv51j.png)\n\nCQ 需要使用 task 代替，InfluxQL 需要使用 Flux 代替。 \n\ntask 示例：每小时执行一次，收集一个小时内的数据，输出到另一个 bucket 中 (可使用内置函数，本案例为了验证功能使用直接输出)\n\n```\noption task = {name: \"tast2\", every: 1h}\n \nfrom(bucket: \"bucket1\")\n\t|> range(start: -task.every)\n\t|> filter(fn: (r) =>\n\t\t(r._measurement == \"mem2\"))\n\t|> filter(fn: (r) =>\n\t\t(r._field == \"used_percent\"))\n\t|> set(key: \"_measurement\", value: \"average3-mem2\")\n\t|> to(org: \"test\", bucket: \"bucket1/mem2-rp\")\n```\n\n![](https://s2.loli.net/2022/08/24/a87tnCN9JzjpxZi.png)\n\n![](https://s2.loli.net/2022/08/24/qsEHiImy1X3xWwn.png)\n\nCQ 转 Task 官方描述：[https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/](https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/)\n\nTask 使用介绍：[https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/](https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/)\n\n**问：V2 版本数据如何备份？文件拷贝是否可行？**\n\n答：\n\n官方提供的备份方式：\n\n```\n//将所有数据备份到一个目录\ninflux backup /path/to/backup/dir/\n \n//将特定存储桶备份到目录\ninflux backup --bucket example-bucket /path/to/backup/dir/\n```\n\n文件拷贝方式（/var/lib/influxdb）：与 V1 一致，服务重启时生效。\n\n相比 V1 :  (1) 它在文件层次使用 ID 区分具体存储桶  (2) 它无法在插入过程中更换数据文件，即使更换了也会失效，不过成功启动之后删了它的数据文件，它也不会报错\n\n结论：(1) 可以使用官方提供的命令进行冷备份，服务器上备份前需要进行 token 配置  (2) 文件拷贝是可行的，但是必须要重启服务，否则数据将会不准确。\n\n官方描述：[https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/](https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/)\n\n","slug":"CloudNativate/Influxdb2","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39g006312mj3ch3gv9z","content":"<h1 id=\"InfluxDB不同版本调研\"><a href=\"#InfluxDB不同版本调研\" class=\"headerlink\" title=\"InfluxDB不同版本调研\"></a>InfluxDB不同版本调研</h1><h1 id=\"一、关键概念\"><a href=\"#一、关键概念\" class=\"headerlink\" title=\"一、关键概念\"></a>一、关键概念</h1><p>相比 V1 移除了 database 和 RP，增加了 bucket。</p>\n<ul>\n<li><p>背景</p>\n<ul>\n<li><p>它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。</p>\n</li>\n<li><p>InfluxDB 2.0还与<a href=\"https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/\">InfluxDB Cloud紧密集成，InfluxDB Cloud</a>是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。</p>\n</li>\n</ul>\n</li>\n<li><p>V2 具有以下几个概念：</p>\n</li>\n</ul>\n<p>timestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization</p>\n<p>新增的概念：</p>\n<p>bucket：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织</p>\n<p>bucket schema：具有明确的 schema-type 的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。</p>\n<p>organization：InfluxDB 组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。</p>\n<ul>\n<li><p>v2 特性</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">\n1,telegraf chronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后\n2,权限全增强，新增了token.可以使用token进行数据读写操作\n3,DSL改了,FluxQL的目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tick.能执行的操作更多。\n4,接口返回数据的格式改为csv,并且可以使用 FluxQL 来自定义返回数据的格式与字段\n5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使\n用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。现在influxdb v2直接可以实现这个采集的操作\n6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfill进influxdb中。并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行\n7,OSS 2.x包括1.x兼容的`/query`和`/write`端点\n8,它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ul>\n<h1 id=\"二、系统结构\"><a href=\"#二、系统结构\" class=\"headerlink\" title=\"二、系统结构\"></a>二、系统结构</h1><p><strong>TICK架构分析与各组件功能介绍</strong></p>\n<p>TICK架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括Telegraf、InfluxDB、Chronograf和 Kapacitor。TICK架构以及各组件分工情况如图所示：</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/j8tpD4FCQhUuqMB.png\" alt=\"tick\"></p>\n<p><strong>数据模式</strong>：InfluxDB 数据元素存储在时间结构合并树 (TSM) 和时间序列索引 (TSI) 文件中，以有效压缩存储的数据。</p>\n<p>除了上图可视化管理工具Chronograf外，还有一种可视化工具Grafana，它也是用于大规模指标数据的可视化展示，提供包括折线图，饼图，仪表盘等多种监控数据可视化UI，若应用过程中考虑到扩展性问题，也会使用Grafana代替Chronograf。</p>\n<p><strong>文件系统布局</strong></p>\n<blockquote>\n<p>InfluxDB Dockerhub镜像使用/var/lib/influxdb2而不是/var/lib/influxdb，因此在升级过程中，你可以很容易地为InfluxDB 1.x和2.x的数据装载不同的卷。</p>\n</blockquote>\n<p><strong>默认路径：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Path</th>\n<th align=\"left\">Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#engine-path\">Engine path</a></td>\n<td align=\"left\"><code>/var/lib/influxdb2/engine/</code></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#bolt-path\">Bolt path</a></td>\n<td align=\"left\"><code>/var/lib/influxdb2/influxd.bolt</code></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#sqlite-path\">SQLite path</a></td>\n<td align=\"left\"><code>/var/lib/influxdb2/influxd.sqlite</code></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#configs-path\">Configs path</a></td>\n<td align=\"left\"><code>/etc/influxdb2/configs</code></td>\n</tr>\n</tbody></table>\n<p><strong><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#\">文件目录结构</a>：</strong></p>\n<ul>\n<li>/var/lib/influxdb2/<ul>\n<li>engine/<ul>\n<li>data/<ul>\n<li><em>TSM directories and files</em></li>\n</ul>\n</li>\n<li>wal/<ul>\n<li><em>WAL directories and files</em></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>influxd.bolt</li>\n<li>influxd.sqlite</li>\n</ul>\n</li>\n<li>/etc/influxdb2/<ul>\n<li>configs</li>\n</ul>\n</li>\n</ul>\n<p><strong>Influxdb 分片和分片组</strong></p>\n<p>InfluxDB 在将数据存储到磁盘时将时间序列数据组织成分片。分片被分组到分片组中</p>\n<p>表示具有 4d 保留期&nbsp;和 1d 分片组持续时间的存储桶：</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/laJFv6ofSKBuCwT.png\"></p>\n<p>分片删除：InfluxDB 保留强制执行服务会例行检查早于其存储桶保留期的分片组。一旦分片组的开始时间超过存储桶的保留期，InfluxDB 将删除该分片组以及关联的分片和 TSM 文件 (在具有无限保留期的存储桶中，分片无限期地保留在磁盘上)。</p>\n<p><strong>系统存储桶</strong></p>\n<p><strong>_monitoring system bucket :</strong> 该_monitoring 系统桶存储 InfluxDB 数据用于 监控数据并发送警报。数据保留：7 天</p>\n<p><strong>_tasks system bucket:</strong> 该_tasks 系统桶存储与数据 InfluxDB 任务的执行。数据保留：1 天</p>\n<p>标签和字段描述详见：<a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/\">https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/</a></p>\n<h1 id=\"三、配置文件\"><a href=\"#三、配置文件\" class=\"headerlink\" title=\"三、配置文件\"></a>三、配置文件</h1><p>当 influxd 启动时，它会在当前工作目录检查一个名为 config.* 的文件。</p>\n<p>支持以下语法：</p>\n<ul>\n<li>  YAML (.yaml, .yml)</li>\n<li>  TOML (.toml)</li>\n<li>  JSON (.json)</li>\n</ul>\n<p>配置选项 (日志、并发压缩…)：<a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/config-options/\">https://docs.influxdata.com/influxdb/v2.3/reference/config-options/</a></p>\n<h1 id=\"四、Flux-查询语句\"><a href=\"#四、Flux-查询语句\" class=\"headerlink\" title=\"四、Flux 查询语句\"></a>四、Flux 查询语句</h1><p>Flux 是 InfluxData 的功能性数据脚本语言，设计用于查询、分析和处理数据，它是 InfluxQL 和其他类似 SQL 的查询语言的替代品。</p>\n<p>设计原则：受 Javascript&nbsp;启发，旨在设计出可用、可读、灵活、可组合、可测试、可贡献和可共享的语言。</p>\n<p>示例查询：近一小时存储的数据，按<code>cpu</code>度量和<code>cpu=cpu-total</code>标签过滤，以 1 分钟为间隔对数据进行窗口化，并计算每个窗口的平均值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and\n    r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">aggregateWindow</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">1</span>m<span class=\"token punctuation\">,</span> fn<span class=\"token operator\">:</span> mean<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1 &gt; 关键概念</strong></p>\n<p><strong>Pipe-forward operator</strong>（管道转发操作符 “|&gt;”）：Flux 广泛使用管道转发运算符 “|&gt;” 将操作链接在一起。在每个函数或操作之后，Flux 返回一个包含数据的表或表的集合。管道转发运算符将这些表通过管道输送到下一个函数或操作中，在那里它们将被进一步处理或操作。</p>\n<p><strong>Tables</strong>：Flux 构造表格中的所有数据。当数据从数据源流式传输时，Flux 将其格式化为带注释的逗号分隔值 (CSV)，表示表格。然后函数操作或处理它们并输出新表。</p>\n<p><strong>Group keys</strong>：每个表都有一个组键 (Group keys)，用于描述表的内容。它是一个列列表，表中的每一行都具有相同的值。每行中具有唯一值的列不是组键的一部分。</p>\n<p>示例 group key</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> \nGroup key: [_start, _stop, _field]\n                   _start:time                      _stop:time           _field:string                      _time:time                  _value:float\n------------------------------  ------------------------------  ----------------------  ------------------------------  ----------------------------\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:33:56.000000000Z             65.55318832397461\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:06.000000000Z             65.52391052246094\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:36.000000000Z              65.536737442016<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：_time 和_value 被排除在示例组键之外，它们对于每一行都是唯一的。</p>\n<p><strong>2 &gt; 查询语法</strong></p>\n<p><a href=\"https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/\">https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/</a></p>\n<p>指定数据源：<code>from(bucket:\"example-bucket\")</code></p>\n<p>指定时间范围：</p>\n<p>使用管道转发运算符 (|&gt;) 将数据从数据源通过管道传输到 range() 函数，该函数指定查询的时间范围。它接受两个参数：start 和 stop。范围可以是使用相对负持续时间 或使用绝对时间</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Relative time range with start only. Stop defaults to now.</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Relative time range with start and stop</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">,</span> stop<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span>m<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//使用绝对时间</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">01</span>T00<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span>Z<span class=\"token punctuation\">,</span> stop<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">01</span>T12<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span>Z<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//过去十五分钟的数据</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">15</span>m<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3 &gt; 数据过滤：</strong></p>\n<p>将范围数据传递到 filter() 函数中，以根据数据属性或列缩小结果范围。该 filter() 函数有一个参数 ，fn 它需要一个匿名函数，该函数具有基于列或属性过滤数据的逻</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Pattern</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>recordProperty comparisonOperator comparisonExpression<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Example with single filter</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Example with multiple filters</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">!=</span> <span class=\"token string\">\"usage_system\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//按cpu度量、usage_system字段和cpu-total标记值过滤</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">15</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4 &gt; 生成指定查询数据</strong></p>\n<p>Flux 的 yield() 函数将过滤后的表作为查询结果输出。</p>\n<p>Flux 会 yield() 在每个脚本的末尾自动假设一个函数，以便输出和可视化数据。yield() 只有在同一个 Flux 查询中包含多个查询时，才需要显式调用。每组返回的数据都需要使用该 yield() 函数命</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">15</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5 &gt; 数据转换</strong></p>\n<p>使用函数，将数据聚合为平均值、下采样数据等</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> \n<span class=\"token comment\">//更新范围从最后一小时拉取数据</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//以五分钟为间隔的窗口化数据</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//聚合窗口数据</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">5</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//添加时间列到聚合函数</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">5</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> <span class=\"token string\">\"_stop\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> <span class=\"token string\">\"_time\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//取消窗口聚合表，将所有点收集到一个无限的窗口中</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and\n    r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and\n    r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">5</span>m<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> <span class=\"token string\">\"_stop\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> <span class=\"token string\">\"_time\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> inf<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//辅助函数(将聚合或选择器函数应用于固定的时间窗口,通过every指定窗口的持续时间)</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">5</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> <span class=\"token string\">\"_stop\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> <span class=\"token string\">\"_time\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>6 &gt; 语法基础与通量函数</strong></p>\n<p>语法基础：<a href=\"https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/\">https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/</a></p>\n<p>通量函数包：<a href=\"https://docs.influxdata.com/flux/v0.x/stdlib/\">https://docs.influxdata.com/flux/v0.x/stdlib/</a></p>\n<p>比如: filter() 函数 筛选数据 (<a href=\"https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/\">https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/</a></p>\n<h1 id=\"五、可视化数据\"><a href=\"#五、可视化数据\" class=\"headerlink\" title=\"五、可视化数据\"></a>五、可视化数据</h1><p><a href=\"https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/\">https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/</a></p>\n<p><strong>支持的可视化类型：</strong></p>\n<p>Band&nbsp;（乐队）：显示随时间变化的数据组的上限和下限</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/wl3GkiUWRCapEDn.png\"></p>\n<p>guage（仪表盘）：仪表视图中显示时间序列的单个值最新值</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/Js5RNkhtiAD1jcS.png\"></p>\n<p>graph（图形）：折线图</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/jHdI7zC5JbpNA1q.png\"></p>\n<p>Graph + Single Stat（图表 + 单一统计）：以折线图显示指定的时间序列，并将最近的单个值叠加为一个大数值</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/pxkolJKtwRAn1jh.png\"></p>\n<p>heatmap（热图）：显示 x 和 y 轴上的数据分布，其中颜色代表不同的数据点浓度</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/aOkSMDyiz2bwfRI.png\"></p>\n<p>histogram（直方图）：一种查看数据分布的方法。y 轴专用于计数，x 轴分为 bin</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/ivagJkyHX1zqeE9.png\"></p>\n<p>mosaic（马赛克）：化显示时间序列数据中的状态变化</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/n6G4NXkImWyUpda.png\"></p>\n<p>scatter（散点图）：视图使用散点图来显示时间序列数据</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/iHmI2W6Ct39VwLu.png\"></p>\n<p>single stat（单项统计）： 将指定时间序列的最新值显示为数值</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/VfpXCTugheW5H1Q.png\"></p>\n<p>table（表格视图）：表格视图中显示查询结果<br><img src=\"https://s2.loli.net/2022/08/24/N3Y5RnkUZOCgTlF.png\"></p>\n<p><strong>本地制造数据，通过图表数据展示案例：</strong></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/9gwDhEf1JNdmG3z.png\"></p>\n<h1 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h1><p><strong>问：V1 版本的 RP+CQ 在 V2 版本应该怎样使用？</strong></p>\n<p>答：</p>\n<p>RP 存储周期，完全由 bucket 决定，在创建 bucket 时需要指定 bucket 的数据保留时间。</p>\n<p>需要注意的是：bucket 的数据存储时间并不能随意更换，可以将永久存储的数据改成 Retention 存储，但是也存在限制；无法将有 Retention 的数据改成永久存储。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/tlMXa2DyxPYv51j.png\"></p>\n<p>CQ 需要使用 task 代替，InfluxQL 需要使用 Flux 代替。&nbsp;</p>\n<p>task 示例：每小时执行一次，收集一个小时内的数据，输出到另一个 bucket 中 (可使用内置函数，本案例为了验证功能使用直接输出)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">option task = {name: \"tast2\", every: 1h}\n \nfrom(bucket: \"bucket1\")\n\t|&gt; range(start: -task.every)\n\t|&gt; filter(fn: (r) =&gt;\n\t\t(r._measurement == \"mem2\"))\n\t|&gt; filter(fn: (r) =&gt;\n\t\t(r._field == \"used_percent\"))\n\t|&gt; set(key: \"_measurement\", value: \"average3-mem2\")\n\t|&gt; to(org: \"test\", bucket: \"bucket1/mem2-rp\")<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://s2.loli.net/2022/08/24/a87tnCN9JzjpxZi.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/qsEHiImy1X3xWwn.png\"></p>\n<p>CQ 转 Task 官方描述：<a href=\"https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/\">https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/</a></p>\n<p>Task 使用介绍：<a href=\"https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/\">https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/</a></p>\n<p><strong>问：V2 版本数据如何备份？文件拷贝是否可行？</strong></p>\n<p>答：</p>\n<p>官方提供的备份方式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//将所有数据备份到一个目录\ninflux backup /path/to/backup/dir/\n \n//将特定存储桶备份到目录\ninflux backup --bucket example-bucket /path/to/backup/dir/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>文件拷贝方式（/var/lib/influxdb）：与 V1 一致，服务重启时生效。</p>\n<p>相比 V1 :&nbsp; (1) 它在文件层次使用 ID 区分具体存储桶&nbsp; (2) 它无法在插入过程中更换数据文件，即使更换了也会失效，不过成功启动之后删了它的数据文件，它也不会报错</p>\n<p>结论：(1) 可以使用官方提供的命令进行冷备份，服务器上备份前需要进行 token 配置&nbsp; (2) 文件拷贝是可行的，但是必须要重启服务，否则数据将会不准确。</p>\n<p>官方描述：<a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/\">https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/</a></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"InfluxDB不同版本调研\"><a href=\"#InfluxDB不同版本调研\" class=\"headerlink\" title=\"InfluxDB不同版本调研\"></a>InfluxDB不同版本调研</h1><h1 id=\"一、关键概念\"><a href=\"#一、关键概念\" class=\"headerlink\" title=\"一、关键概念\"></a>一、关键概念</h1><p>相比 V1 移除了 database 和 RP，增加了 bucket。</p>\n<ul>\n<li><p>背景</p>\n<ul>\n<li><p>它是go语言开发的数据库，InfluxDB自发布至今，已经有两个版本，InfluxDB1.x系列提供一种类似SQL的查询语言InfluxQL，用于数据交互。2019年1月新推出的influxDB2.0 alpha版本，主推全新的查询语言Flux，支持TICK架构， TICK 整合成一个整体，将时序数据库、UI、仪表盘工具以及后台处理和监控代理置于一组 API 后面。在 2020 年底推出了InfluxDB 2.0 正式版本，该版本又分为InfluxDB Cloud 和 InfluxDB OSS两个系列。</p>\n</li>\n<li><p>InfluxDB 2.0还与<a href=\"https://www.influxdata.com/blog/influxdb-cloud-2-0-launches-as-a-serverless-platform-for-time-series-data/\">InfluxDB Cloud紧密集成，InfluxDB Cloud</a>是无服务器，弹性可扩展，完全托管的时间序列数据库平台。借助共享 API，您可以轻松地在 InfluxDB 2.0 和 InfluxDB Cloud 之间移动数据和工作负载，并且可以将它们作为单个时间序列平台的组件一起使用，从而为开发人员提供灵活性和工具，以满足不断变化的业务和应用程序需求。</p>\n</li>\n</ul>\n</li>\n<li><p>V2 具有以下几个概念：</p>\n</li>\n</ul>\n<p>timestamp、field key、field value、field set、tag key、tag value、tag set、measurement、series、point、bucket、bucket schema、organization</p>\n<p>新增的概念：</p>\n<p>bucket：所有 InfluxDB 数据都存储在一个存储桶中。一个桶结合了数据库的概念和存储周期（时间每个数据点仍然存在持续时间）。一个桶属于一个组织</p>\n<p>bucket schema：具有明确的 schema-type 的存储桶需要为每个度量指定显式架构。测量包含标签、字段和时间戳。显式模式限制了可以写入该度量的数据的形状。</p>\n<p>organization：InfluxDB 组织是一组用户的工作区。所有仪表板、任务、存储桶和用户都属于一个组织。</p>\n<ul>\n<li><p>v2 特性</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">\n1,telegraf chronograf kapacitor influxdb都整合到一起了，一个二进制可执行文件执行后\n2,权限全增强，新增了token.可以使用token进行数据读写操作\n3,DSL改了,FluxQL的目的是为了通过这一个DSL来解决定时、流任务，数据查询等多种操作，并且相比tick.能执行的操作更多。\n4,接口返回数据的格式改为csv,并且可以使用 FluxQL 来自定义返回数据的格式与字段\n5,增加了类似prometheus的scrape功能，不过似乎默认是1O秒的采集间隔，这样可以直接采集prometheus exporter.上的数据，如果你使\n用1.7或更低版本，可能需要在prometheus中采集数据时使用remote write的功能，将致据点写入influxdb。现在influxdb v2直接可以实现这个采集的操作\n6,流任务更加直观。现在你可以查询数据时，把查询操作直接保存成定时任务，然后将生成的数据backfill进influxdb中。并且这个定时任务的管理器功能更加强大，你不仅可以设置定时执行，还能立刻执行\n7,OSS 2.x包括1.x兼容的&#96;&#x2F;query&#96;和&#96;&#x2F;write&#96;端点\n8,它自带有一个包含 Settings、Dashboards、Tasks、Alerts 等功能的 web 后台\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ul>\n<h1 id=\"二、系统结构\"><a href=\"#二、系统结构\" class=\"headerlink\" title=\"二、系统结构\"></a>二、系统结构</h1><p><strong>TICK架构分析与各组件功能介绍</strong></p>\n<p>TICK架构 是 InfluxData 平台的组件的集合首字母缩写，该集合包括Telegraf、InfluxDB、Chronograf和 Kapacitor。TICK架构以及各组件分工情况如图所示：</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/j8tpD4FCQhUuqMB.png\" alt=\"tick\"></p>\n<p><strong>数据模式</strong>：InfluxDB 数据元素存储在时间结构合并树 (TSM) 和时间序列索引 (TSI) 文件中，以有效压缩存储的数据。</p>\n<p>除了上图可视化管理工具Chronograf外，还有一种可视化工具Grafana，它也是用于大规模指标数据的可视化展示，提供包括折线图，饼图，仪表盘等多种监控数据可视化UI，若应用过程中考虑到扩展性问题，也会使用Grafana代替Chronograf。</p>\n<p><strong>文件系统布局</strong></p>\n<blockquote>\n<p>InfluxDB Dockerhub镜像使用/var/lib/influxdb2而不是/var/lib/influxdb，因此在升级过程中，你可以很容易地为InfluxDB 1.x和2.x的数据装载不同的卷。</p>\n</blockquote>\n<p><strong>默认路径：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Path</th>\n<th align=\"left\">Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#engine-path\">Engine path</a></td>\n<td align=\"left\"><code>/var/lib/influxdb2/engine/</code></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#bolt-path\">Bolt path</a></td>\n<td align=\"left\"><code>/var/lib/influxdb2/influxd.bolt</code></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#sqlite-path\">SQLite path</a></td>\n<td align=\"left\"><code>/var/lib/influxdb2/influxd.sqlite</code></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#configs-path\">Configs path</a></td>\n<td align=\"left\"><code>/etc/influxdb2/configs</code></td>\n</tr>\n</tbody></table>\n<p><strong><a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/file-system-layout/?t=Docker#\">文件目录结构</a>：</strong></p>\n<ul>\n<li>/var/lib/influxdb2/<ul>\n<li>engine/<ul>\n<li>data/<ul>\n<li><em>TSM directories and files</em></li>\n</ul>\n</li>\n<li>wal/<ul>\n<li><em>WAL directories and files</em></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>influxd.bolt</li>\n<li>influxd.sqlite</li>\n</ul>\n</li>\n<li>/etc/influxdb2/<ul>\n<li>configs</li>\n</ul>\n</li>\n</ul>\n<p><strong>Influxdb 分片和分片组</strong></p>\n<p>InfluxDB 在将数据存储到磁盘时将时间序列数据组织成分片。分片被分组到分片组中</p>\n<p>表示具有 4d 保留期 和 1d 分片组持续时间的存储桶：</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/laJFv6ofSKBuCwT.png\"></p>\n<p>分片删除：InfluxDB 保留强制执行服务会例行检查早于其存储桶保留期的分片组。一旦分片组的开始时间超过存储桶的保留期，InfluxDB 将删除该分片组以及关联的分片和 TSM 文件 (在具有无限保留期的存储桶中，分片无限期地保留在磁盘上)。</p>\n<p><strong>系统存储桶</strong></p>\n<p><strong>_monitoring system bucket :</strong> 该_monitoring 系统桶存储 InfluxDB 数据用于 监控数据并发送警报。数据保留：7 天</p>\n<p><strong>_tasks system bucket:</strong> 该_tasks 系统桶存储与数据 InfluxDB 任务的执行。数据保留：1 天</p>\n<p>标签和字段描述详见：<a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/\">https://docs.influxdata.com/influxdb/v2.3/reference/internals/system-buckets/</a></p>\n<h1 id=\"三、配置文件\"><a href=\"#三、配置文件\" class=\"headerlink\" title=\"三、配置文件\"></a>三、配置文件</h1><p>当 influxd 启动时，它会在当前工作目录检查一个名为 config.* 的文件。</p>\n<p>支持以下语法：</p>\n<ul>\n<li>  YAML (.yaml, .yml)</li>\n<li>  TOML (.toml)</li>\n<li>  JSON (.json)</li>\n</ul>\n<p>配置选项 (日志、并发压缩…)：<a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/config-options/\">https://docs.influxdata.com/influxdb/v2.3/reference/config-options/</a></p>\n<h1 id=\"四、Flux-查询语句\"><a href=\"#四、Flux-查询语句\" class=\"headerlink\" title=\"四、Flux 查询语句\"></a>四、Flux 查询语句</h1><p>Flux 是 InfluxData 的功能性数据脚本语言，设计用于查询、分析和处理数据，它是 InfluxQL 和其他类似 SQL 的查询语言的替代品。</p>\n<p>设计原则：受 Javascript 启发，旨在设计出可用、可读、灵活、可组合、可测试、可贡献和可共享的语言。</p>\n<p>示例查询：近一小时存储的数据，按<code>cpu</code>度量和<code>cpu=cpu-total</code>标签过滤，以 1 分钟为间隔对数据进行窗口化，并计算每个窗口的平均值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and\n    r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">aggregateWindow</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">1</span>m<span class=\"token punctuation\">,</span> fn<span class=\"token operator\">:</span> mean<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1 &gt; 关键概念</strong></p>\n<p><strong>Pipe-forward operator</strong>（管道转发操作符 “|&gt;”）：Flux 广泛使用管道转发运算符 “|&gt;” 将操作链接在一起。在每个函数或操作之后，Flux 返回一个包含数据的表或表的集合。管道转发运算符将这些表通过管道输送到下一个函数或操作中，在那里它们将被进一步处理或操作。</p>\n<p><strong>Tables</strong>：Flux 构造表格中的所有数据。当数据从数据源流式传输时，Flux 将其格式化为带注释的逗号分隔值 (CSV)，表示表格。然后函数操作或处理它们并输出新表。</p>\n<p><strong>Group keys</strong>：每个表都有一个组键 (Group keys)，用于描述表的内容。它是一个列列表，表中的每一行都具有相同的值。每行中具有唯一值的列不是组键的一部分。</p>\n<p>示例 group key</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> \nGroup key: [_start, _stop, _field]\n                   _start:time                      _stop:time           _field:string                      _time:time                  _value:float\n------------------------------  ------------------------------  ----------------------  ------------------------------  ----------------------------\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:33:56.000000000Z             65.55318832397461\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:06.000000000Z             65.52391052246094\n2019-04-25T17:33:55.196959000Z  2019-04-25T17:34:55.196959000Z            used_percent  2019-04-25T17:34:36.000000000Z              65.536737442016<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：_time 和_value 被排除在示例组键之外，它们对于每一行都是唯一的。</p>\n<p><strong>2 &gt; 查询语法</strong></p>\n<p><a href=\"https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/\">https://docs.influxdata.com/influxdb/v2.3/query-data/get-started/query-influxdb/</a></p>\n<p>指定数据源：<code>from(bucket:&quot;example-bucket&quot;)</code></p>\n<p>指定时间范围：</p>\n<p>使用管道转发运算符 (|&gt;) 将数据从数据源通过管道传输到 range() 函数，该函数指定查询的时间范围。它接受两个参数：start 和 stop。范围可以是使用相对负持续时间 或使用绝对时间</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Relative time range with start only. Stop defaults to now.</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Relative time range with start and stop</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">,</span> stop<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span>m<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//使用绝对时间</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">01</span>T00<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span>Z<span class=\"token punctuation\">,</span> stop<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">01</span>T12<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span>Z<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//过去十五分钟的数据</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">15</span>m<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3 &gt; 数据过滤：</strong></p>\n<p>将范围数据传递到 filter() 函数中，以根据数据属性或列缩小结果范围。该 filter() 函数有一个参数 ，fn 它需要一个匿名函数，该函数具有基于列或属性过滤数据的逻</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Pattern</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>recordProperty comparisonOperator comparisonExpression<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Example with single filter</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Example with multiple filters</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">!=</span> <span class=\"token string\">\"usage_system\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//按cpu度量、usage_system字段和cpu-total标记值过滤</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">15</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4 &gt; 生成指定查询数据</strong></p>\n<p>Flux 的 yield() 函数将过滤后的表作为查询结果输出。</p>\n<p>Flux 会 yield() 在每个脚本的末尾自动假设一个函数，以便输出和可视化数据。yield() 只有在同一个 Flux 查询中包含多个查询时，才需要显式调用。每组返回的数据都需要使用该 yield() 函数命</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">15</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5 &gt; 数据转换</strong></p>\n<p>使用函数，将数据聚合为平均值、下采样数据等</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> \n<span class=\"token comment\">//更新范围从最后一小时拉取数据</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//以五分钟为间隔的窗口化数据</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//聚合窗口数据</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">5</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//添加时间列到聚合函数</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">5</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> <span class=\"token string\">\"_stop\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> <span class=\"token string\">\"_time\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//取消窗口聚合表，将所有点收集到一个无限的窗口中</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span><span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and\n    r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and\n    r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">5</span>m<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> <span class=\"token string\">\"_stop\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> <span class=\"token string\">\"_time\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> inf<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//辅助函数(将聚合或选择器函数应用于固定的时间窗口,通过every指定窗口的持续时间)</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">:</span> <span class=\"token string\">\"example-bucket\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>h<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>_measurement <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu\"</span> and r<span class=\"token punctuation\">.</span>_field <span class=\"token operator\">==</span> <span class=\"token string\">\"usage_system\"</span> and r<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">==</span> <span class=\"token string\">\"cpu-total\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>every<span class=\"token operator\">:</span> <span class=\"token number\">5</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> <span class=\"token string\">\"_stop\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> <span class=\"token string\">\"_time\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>6 &gt; 语法基础与通量函数</strong></p>\n<p>语法基础：<a href=\"https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/\">https://docs.influxdata.com/flux/v0.x/get-started/syntax-basics/</a></p>\n<p>通量函数包：<a href=\"https://docs.influxdata.com/flux/v0.x/stdlib/\">https://docs.influxdata.com/flux/v0.x/stdlib/</a></p>\n<p>比如: filter() 函数 筛选数据 (<a href=\"https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/\">https://docs.influxdata.com/flux/v0.x/stdlib/universe/filter/</a></p>\n<h1 id=\"五、可视化数据\"><a href=\"#五、可视化数据\" class=\"headerlink\" title=\"五、可视化数据\"></a>五、可视化数据</h1><p><a href=\"https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/\">https://docs.influxdata.com/influxdb/v2.3/visualize-data/visualization-types/</a></p>\n<p><strong>支持的可视化类型：</strong></p>\n<p>Band （乐队）：显示随时间变化的数据组的上限和下限</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/wl3GkiUWRCapEDn.png\"></p>\n<p>guage（仪表盘）：仪表视图中显示时间序列的单个值最新值</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/Js5RNkhtiAD1jcS.png\"></p>\n<p>graph（图形）：折线图</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/jHdI7zC5JbpNA1q.png\"></p>\n<p>Graph + Single Stat（图表 + 单一统计）：以折线图显示指定的时间序列，并将最近的单个值叠加为一个大数值</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/pxkolJKtwRAn1jh.png\"></p>\n<p>heatmap（热图）：显示 x 和 y 轴上的数据分布，其中颜色代表不同的数据点浓度</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/aOkSMDyiz2bwfRI.png\"></p>\n<p>histogram（直方图）：一种查看数据分布的方法。y 轴专用于计数，x 轴分为 bin</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/ivagJkyHX1zqeE9.png\"></p>\n<p>mosaic（马赛克）：化显示时间序列数据中的状态变化</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/n6G4NXkImWyUpda.png\"></p>\n<p>scatter（散点图）：视图使用散点图来显示时间序列数据</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/iHmI2W6Ct39VwLu.png\"></p>\n<p>single stat（单项统计）： 将指定时间序列的最新值显示为数值</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/VfpXCTugheW5H1Q.png\"></p>\n<p>table（表格视图）：表格视图中显示查询结果<br><img src=\"https://s2.loli.net/2022/08/24/N3Y5RnkUZOCgTlF.png\"></p>\n<p><strong>本地制造数据，通过图表数据展示案例：</strong></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/9gwDhEf1JNdmG3z.png\"></p>\n<h1 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h1><p><strong>问：V1 版本的 RP+CQ 在 V2 版本应该怎样使用？</strong></p>\n<p>答：</p>\n<p>RP 存储周期，完全由 bucket 决定，在创建 bucket 时需要指定 bucket 的数据保留时间。</p>\n<p>需要注意的是：bucket 的数据存储时间并不能随意更换，可以将永久存储的数据改成 Retention 存储，但是也存在限制；无法将有 Retention 的数据改成永久存储。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/tlMXa2DyxPYv51j.png\"></p>\n<p>CQ 需要使用 task 代替，InfluxQL 需要使用 Flux 代替。 </p>\n<p>task 示例：每小时执行一次，收集一个小时内的数据，输出到另一个 bucket 中 (可使用内置函数，本案例为了验证功能使用直接输出)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">option task &#x3D; &#123;name: &quot;tast2&quot;, every: 1h&#125;\n \nfrom(bucket: &quot;bucket1&quot;)\n\t|&gt; range(start: -task.every)\n\t|&gt; filter(fn: (r) &#x3D;&gt;\n\t\t(r._measurement &#x3D;&#x3D; &quot;mem2&quot;))\n\t|&gt; filter(fn: (r) &#x3D;&gt;\n\t\t(r._field &#x3D;&#x3D; &quot;used_percent&quot;))\n\t|&gt; set(key: &quot;_measurement&quot;, value: &quot;average3-mem2&quot;)\n\t|&gt; to(org: &quot;test&quot;, bucket: &quot;bucket1&#x2F;mem2-rp&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://s2.loli.net/2022/08/24/a87tnCN9JzjpxZi.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/qsEHiImy1X3xWwn.png\"></p>\n<p>CQ 转 Task 官方描述：<a href=\"https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/\">https://docs.influxdata.com/influxdb/v2.3/upgrade/v1-to-v2/migrate-cqs/</a></p>\n<p>Task 使用介绍：<a href=\"https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/\">https://docs.influxdata.com/influxdb/v2.3/process-data/get-started/</a></p>\n<p><strong>问：V2 版本数据如何备份？文件拷贝是否可行？</strong></p>\n<p>答：</p>\n<p>官方提供的备份方式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;将所有数据备份到一个目录\ninflux backup &#x2F;path&#x2F;to&#x2F;backup&#x2F;dir&#x2F;\n \n&#x2F;&#x2F;将特定存储桶备份到目录\ninflux backup --bucket example-bucket &#x2F;path&#x2F;to&#x2F;backup&#x2F;dir&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>文件拷贝方式（/var/lib/influxdb）：与 V1 一致，服务重启时生效。</p>\n<p>相比 V1 :  (1) 它在文件层次使用 ID 区分具体存储桶  (2) 它无法在插入过程中更换数据文件，即使更换了也会失效，不过成功启动之后删了它的数据文件，它也不会报错</p>\n<p>结论：(1) 可以使用官方提供的命令进行冷备份，服务器上备份前需要进行 token 配置  (2) 文件拷贝是可行的，但是必须要重启服务，否则数据将会不准确。</p>\n<p>官方描述：<a href=\"https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/\">https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/backup/</a></p>\n"},{"title":"InfluxDB存储原理","top":false,"date":"2022-07-27T10:33:18.000Z","_content":"\n# **InfluxDB存储原理**\n\nInfluxDB的存储结构树是时间结构合并树（Time-Structured Merge Tree，TSM），它是由日志结构化合并树（Log-Structured Merge Tree，LSM），根据实际需求变化而来的。\n\n**LSM树 **\n\nLSM树包含三部分：Memtable，Immutable和SSTable。MemTable是内存中的数据结构，用于保存最近产生的数据，并按照Key有序地组织数据。内存并不是可靠存储，若断电就会丢失数据，因此通常会使用预写式日志(Write-ahead logging，WAL)的方式来保证数据的可靠性。\n\n![lsm tree](https://s2.loli.net/2022/08/24/6R4mKYCgjaIE5AB.png)\n\n **TSM存储引擎**\n\nTSM存储引擎主要包括四部分:Cache，WAL，TSM File，Compactor。下图中shard与TSM引擎主要部分放在一起，但其实shard在是TSM存储引擎之上的一个概念。在 InfluxDB 中按照数据产生的时间范围，会创建不同的shard分组，每个 shard 都有本身的 cache、wal、tsm file 以及 compactor。\n![tsm engine](https://s2.loli.net/2022/08/24/ATmW1QMznoFqUdj.png)\n\n整个数据的写入流程简化为 3 个步骤：\n\n1. 先写入 WAL\n\n2. 然后写入 Cache\n\n3. 最终持久化为 TSM File\n\n   ![shard](https://s2.loli.net/2022/08/24/7Zbqemzhxyf1aO4.jpg)\n\n WAL\n\n　预写日志`Write-Ahead-Log`是一种常见的提高数据库优化手段，能够在保证数据安全的同时，提升系统的写入性能。\n　InfluxDB WAL 由一组定长的 segement 文件构成，每个文件大小约为 10MB。这些 segment 文件只允许追加，不允许修改。\n\n Cache\n\n　Cache 是 WAL 的一个内存快照，保证 WAL 中的数据对用户实时可见。\n　当 Cache 空闲或者过满时，对应的 WAL 将被压缩并转换为 TSM，最终释放内存空间。\n　每次重启时会根据 WAL 重新构造 Cache。\n\n TSM File\n\n　TSM 是一组存储在磁盘上的外存索引文件，细节将在后续进行介绍。\n\n　它们之间的关系可以简单描述为：\n\n- Cache = WAL\n- Cache + TSM = 完整的数据","source":"_posts/CloudNativate/influx原理.md","raw":"---\ntitle: InfluxDB存储原理\ntags:\n  - k8s\n  - influxdb\n  - benchmark\n  - prometheus\ncategories:\n  - tsdb\ntop: false\ndate: 2022-07-27 18:33:18\n---\n\n# **InfluxDB存储原理**\n\nInfluxDB的存储结构树是时间结构合并树（Time-Structured Merge Tree，TSM），它是由日志结构化合并树（Log-Structured Merge Tree，LSM），根据实际需求变化而来的。\n\n**LSM树 **\n\nLSM树包含三部分：Memtable，Immutable和SSTable。MemTable是内存中的数据结构，用于保存最近产生的数据，并按照Key有序地组织数据。内存并不是可靠存储，若断电就会丢失数据，因此通常会使用预写式日志(Write-ahead logging，WAL)的方式来保证数据的可靠性。\n\n![lsm tree](https://s2.loli.net/2022/08/24/6R4mKYCgjaIE5AB.png)\n\n **TSM存储引擎**\n\nTSM存储引擎主要包括四部分:Cache，WAL，TSM File，Compactor。下图中shard与TSM引擎主要部分放在一起，但其实shard在是TSM存储引擎之上的一个概念。在 InfluxDB 中按照数据产生的时间范围，会创建不同的shard分组，每个 shard 都有本身的 cache、wal、tsm file 以及 compactor。\n![tsm engine](https://s2.loli.net/2022/08/24/ATmW1QMznoFqUdj.png)\n\n整个数据的写入流程简化为 3 个步骤：\n\n1. 先写入 WAL\n\n2. 然后写入 Cache\n\n3. 最终持久化为 TSM File\n\n   ![shard](https://s2.loli.net/2022/08/24/7Zbqemzhxyf1aO4.jpg)\n\n WAL\n\n　预写日志`Write-Ahead-Log`是一种常见的提高数据库优化手段，能够在保证数据安全的同时，提升系统的写入性能。\n　InfluxDB WAL 由一组定长的 segement 文件构成，每个文件大小约为 10MB。这些 segment 文件只允许追加，不允许修改。\n\n Cache\n\n　Cache 是 WAL 的一个内存快照，保证 WAL 中的数据对用户实时可见。\n　当 Cache 空闲或者过满时，对应的 WAL 将被压缩并转换为 TSM，最终释放内存空间。\n　每次重启时会根据 WAL 重新构造 Cache。\n\n TSM File\n\n　TSM 是一组存储在磁盘上的外存索引文件，细节将在后续进行介绍。\n\n　它们之间的关系可以简单描述为：\n\n- Cache = WAL\n- Cache + TSM = 完整的数据","slug":"CloudNativate/influx原理","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39g006712mj7nzgfc3r","content":"<h1 id=\"InfluxDB存储原理\"><a href=\"#InfluxDB存储原理\" class=\"headerlink\" title=\"InfluxDB存储原理\"></a><strong>InfluxDB存储原理</strong></h1><p>InfluxDB的存储结构树是时间结构合并树（Time-Structured Merge Tree，TSM），它是由日志结构化合并树（Log-Structured Merge Tree，LSM），根据实际需求变化而来的。</p>\n<p>**LSM树 **</p>\n<p>LSM树包含三部分：Memtable，Immutable和SSTable。MemTable是内存中的数据结构，用于保存最近产生的数据，并按照Key有序地组织数据。内存并不是可靠存储，若断电就会丢失数据，因此通常会使用预写式日志(Write-ahead logging，WAL)的方式来保证数据的可靠性。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/6R4mKYCgjaIE5AB.png\" alt=\"lsm tree\"></p>\n<p> <strong>TSM存储引擎</strong></p>\n<p>TSM存储引擎主要包括四部分:Cache，WAL，TSM File，Compactor。下图中shard与TSM引擎主要部分放在一起，但其实shard在是TSM存储引擎之上的一个概念。在 InfluxDB 中按照数据产生的时间范围，会创建不同的shard分组，每个 shard 都有本身的 cache、wal、tsm file 以及 compactor。<br><img src=\"https://s2.loli.net/2022/08/24/ATmW1QMznoFqUdj.png\" alt=\"tsm engine\"></p>\n<p>整个数据的写入流程简化为 3 个步骤：</p>\n<ol>\n<li><p>先写入 WAL</p>\n</li>\n<li><p>然后写入 Cache</p>\n</li>\n<li><p>最终持久化为 TSM File</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/7Zbqemzhxyf1aO4.jpg\" alt=\"shard\"></p>\n<p>WAL</p>\n</li>\n</ol>\n<p>　预写日志<code>Write-Ahead-Log</code>是一种常见的提高数据库优化手段，能够在保证数据安全的同时，提升系统的写入性能。<br>　InfluxDB WAL 由一组定长的 segement 文件构成，每个文件大小约为 10MB。这些 segment 文件只允许追加，不允许修改。</p>\n<p> Cache</p>\n<p>　Cache 是 WAL 的一个内存快照，保证 WAL 中的数据对用户实时可见。<br>　当 Cache 空闲或者过满时，对应的 WAL 将被压缩并转换为 TSM，最终释放内存空间。<br>　每次重启时会根据 WAL 重新构造 Cache。</p>\n<p> TSM File</p>\n<p>　TSM 是一组存储在磁盘上的外存索引文件，细节将在后续进行介绍。</p>\n<p>　它们之间的关系可以简单描述为：</p>\n<ul>\n<li>Cache = WAL</li>\n<li>Cache + TSM = 完整的数据</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"InfluxDB存储原理\"><a href=\"#InfluxDB存储原理\" class=\"headerlink\" title=\"InfluxDB存储原理\"></a><strong>InfluxDB存储原理</strong></h1><p>InfluxDB的存储结构树是时间结构合并树（Time-Structured Merge Tree，TSM），它是由日志结构化合并树（Log-Structured Merge Tree，LSM），根据实际需求变化而来的。</p>\n<p>**LSM树 **</p>\n<p>LSM树包含三部分：Memtable，Immutable和SSTable。MemTable是内存中的数据结构，用于保存最近产生的数据，并按照Key有序地组织数据。内存并不是可靠存储，若断电就会丢失数据，因此通常会使用预写式日志(Write-ahead logging，WAL)的方式来保证数据的可靠性。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/6R4mKYCgjaIE5AB.png\" alt=\"lsm tree\"></p>\n<p> <strong>TSM存储引擎</strong></p>\n<p>TSM存储引擎主要包括四部分:Cache，WAL，TSM File，Compactor。下图中shard与TSM引擎主要部分放在一起，但其实shard在是TSM存储引擎之上的一个概念。在 InfluxDB 中按照数据产生的时间范围，会创建不同的shard分组，每个 shard 都有本身的 cache、wal、tsm file 以及 compactor。<br><img src=\"https://s2.loli.net/2022/08/24/ATmW1QMznoFqUdj.png\" alt=\"tsm engine\"></p>\n<p>整个数据的写入流程简化为 3 个步骤：</p>\n<ol>\n<li><p>先写入 WAL</p>\n</li>\n<li><p>然后写入 Cache</p>\n</li>\n<li><p>最终持久化为 TSM File</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/7Zbqemzhxyf1aO4.jpg\" alt=\"shard\"></p>\n<p>WAL</p>\n</li>\n</ol>\n<p>　预写日志<code>Write-Ahead-Log</code>是一种常见的提高数据库优化手段，能够在保证数据安全的同时，提升系统的写入性能。<br>　InfluxDB WAL 由一组定长的 segement 文件构成，每个文件大小约为 10MB。这些 segment 文件只允许追加，不允许修改。</p>\n<p> Cache</p>\n<p>　Cache 是 WAL 的一个内存快照，保证 WAL 中的数据对用户实时可见。<br>　当 Cache 空闲或者过满时，对应的 WAL 将被压缩并转换为 TSM，最终释放内存空间。<br>　每次重启时会根据 WAL 重新构造 Cache。</p>\n<p> TSM File</p>\n<p>　TSM 是一组存储在磁盘上的外存索引文件，细节将在后续进行介绍。</p>\n<p>　它们之间的关系可以简单描述为：</p>\n<ul>\n<li>Cache = WAL</li>\n<li>Cache + TSM = 完整的数据</li>\n</ul>\n"},{"title":"iInfluxDB 2.0 开源正式发布","top":false,"date":"2022-07-26T10:33:18.000Z","_content":"# InfluxDB 2.0 开源正式发布\n===================\n\n### By [Russ Savage](/blog/author/russ) / Nov 10， 2020 / [InfluxDB](/blog/category/tech/influxdb)， [Community](/blog/category/community)， [Developer](/blog/category/tech)， [Flux](/blog/category/tech/flux)， [InfluxDB Templates](/blog/category/tech/influxdb-templates)\n\n今天，我们很自豪地宣布，InfluxDB开源2.0现已正式向所有人开放。这是一条漫长的道路，如果没有我们社区的惊人支持和贡献，我们就无法做到这一点。这标志着InfluxDB平台的新时代，但它确实只是一个开始。\n\n![Getting started with InfluxDB 2.0](https://s2.loli.net/2022/08/24/7T1KkiJE8HSdDav.png)\n\n在我们谈论未来之前，让我们来看看我们的团队一直在研究的一些惊人的新功能。\n\n默认情况下易于部署和安全\n------------\n\n对于任何熟悉我们现有的开源产品（亲切地称为[Telegraf](https://www.influxdata.com/time-series-platform/telegraf/)，[InfluxDB](https://www.influxdata.com/products/influxdb-overview/)，[Chronograf](https://www.influxdata.com/time-series-platform/chronograf/)和[Kapacitor](https://www.influxdata.com/time-series-platform/kapacitor/)的TICK Stack缩写）的人来说，您可能会注意到的第一件事是只有一个二进制文件需要下载和安装。\n\n新的 InfluxDB 现在在单个二进制文件中包含时间序列数据平台中所需的一切。这简化了部署和设置体验，同时保持了各个组件的强大功能和灵活性。\n\n单个二进制文件意味着它也更容易保护，因此我们默认使InfluxDB安全。对InfluxDB的每个请求都伴随着一个可以撤销的身份验证令牌，并且内置用户界面使用用户名和密码进行保护。\n\n通过这些更改，您再也不必担心意外地将存储在 InfluxDB 中的数据暴露给公共互联网。\n\n易于部署，易于管理，默认情况下是安全的。开发人员期望从现代开发平台获得这些东西，InfluxDB也不例外。\n\n下一代数据探索和分析\n----------\n\n我们知道开发人员尽快掌握数据的重要性。我们从社区中不断听到的一件事是，Chronograf（TICK Stack的“C”）使得快速查看进入系统的时间序列数据的形状变得非常容易，并简化了许多常见的管理任务。\n\n![Next-generation data exploration analytics are available in InfluxDB 2.0](https://s2.loli.net/2022/08/24/ZrxmPI3vWgRiojC.png)\n\nInfluxDB 开源 2.0 通过全新的[数据资源管理器](https://docs.influxdata.com/influxdb/v2.0/visualize-data/explore-metrics/)、[其他可视化类型](https://docs.influxdata.com/influxdb/v2.0/visualize-data/visualization-types/)以及专为时序数据构建的强大新查询语言 [Flux](https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/) 延续了这一体验。您可以快速浏览所有测量值、字段和标签，并将常见转换应用于该数据，而无需使用键盘。\n\n以下是我们新的数据资源管理器的外观：\n\n![InfluxDB 的新数据资源管理器](https://s2.loli.net/2022/08/24/MXw4KmFahHNLJrY.png)\n\n当然，对于那些希望释放其数据全部潜力的人来说，我们提供了一个脚本编辑器，其中包括自动完成，实时语法检查以及大量示例和文档，以帮助您入门。此编辑器在 InfluxDB Data Explorer、[Dashboards](https://docs.influxdata.com/influxdb/v2.0/visualize-data/dashboards/) 和 [Tasks](https://docs.influxdata.com/influxdb/v2.0/process-data/) 中使用，并使用 [Monaco](https://microsoft.github.io/monaco-editor/)，与 Visual Studio Code 中的编辑器相同。\n\n![摩纳哥 InfluxDB 编辑](https://s2.loli.net/2022/08/24/pAtwLXliT7CByzF.png)\n\n等等，但是您已经拥有大量基于[InfluxQL](https://docs.influxdata.com/influxdb/v1.8/query_language/)构建的应用程序和集成？没问题。InfluxDB 2.0 旨在替代[您现有的 InfluxDB](https://docs.influxdata.com/influxdb/v2.0/reference/api/influxdb-1x/) 实例。这意味着，如果您使用外部可视化工具进行仪表板操作或将数据写入数据库，则在升级后，该工具仍可正常工作。当然，我们建议将这些连接迁移到最新的 v2 API，但它们将继续按原样正常工作。向后兼容的 API 可帮助您根据需要快速移动。\n\nFlux：下一代数据处理语言，可在数据所在的位置处理数据\n----------------------------\n\n许多用户喜欢通过InfluxQL（我们类似SQL的查询语言）访问数据的简单性。作为通往平台的简单入口，这是体验InfluxDB强大功能的好地方。但是，随着时间的推移，随着用例的复杂性越来越超出简单的选择语句，因此也带来了挑战。因此，开发人员最终编写了自定义应用程序逻辑，以执行现代应用程序通常需要的许多复杂转换。\n\n这有一些缺点。首先，我们希望构建一个平台，使开发人员的工作效率更高，而花费在编写通用数据转换逻辑上的任何时间都是从为他们自己的用户和客户建立价值中花费的时间。第二个缺点是性能。数据从存储层获取的距离越远，转换往往会变得越慢。\n\n[Flux](https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/query-influxdb/)的核心就是解决这些问题。Flux不是一种类似SQL的语言;它是一种类似于JavaScript或Python[的函数式编程语言](https://en.wikipedia.org/wiki/Functional_programming)。这意味着您可以像编程应用程序一样自定义和构建查询，将通用逻辑分离到可重用的函数和库中，从而减少需要编写的代码总量。该代码也尽可能靠近存储层执行，直接向下推送许多操作，从而为您提供最快的系统性能。\n\n数据更好地结合在一起\n----------\n\nFlux 还构建为处理不仅仅是时间序列数据（尽管这是它的主要工作）。它可以直接从SQL数据存储中提取数据，例如Postgres，Microsoft SQL Server，SQLite和SAP Hana以及基于云的数据存储，如Google Bigtable，Amazon Athena和Snowflake。这使您可以丰富时序数据以提供额外的上下文。以下是一些示例：\n\n*   对于 **IoT** 用户，Flux 允许您将来自传感器的时间序列数据与来自制造商、型号、设备使用年限或里程等关系表的信息相结合。\n*   对于**真实用户监控** （RUM），您可以使用 Flux 查找客户 ID 并连接客户名称、定价计划以及公司名称和位置等公司数据。\n*   在**IT基础设施监控中**，Flux可以将服务器ID解析为软件版本和配置参数。\n\n![InfluxDB 和 Flux 允许您使用关系数据库丰富时间序列数据](https://s2.loli.net/2022/08/24/kWlvSq3IZ7Kbt6X.png)\n\n\n\n\n\n> InfluxDB 和 Flux 可让您使用关系数据库来丰富时间序列数据\n\n时间与空间相遇：使用通量的地理时态查询\n-------------------\n\nFlux 还允许您[执行地理时态查询](https://www.influxdata.com/blog/exploring-geo-temporal-flux/)，因此您可以[按时间和位置进行过滤](https://docs.influxdata.com/influxdb/v2.0/query-data/flux/geo/)。这对于许多需要跟踪移动设备或[车辆](https://www.influxdata.com/customer/waykonect/)的物联网用例至关重要。例如，下面的简单 Flux 查询允许您查询以三角形为界的所有点，三个坐标处的点。\n\n```\n`from(bucket: \"example-bucket\")\n  |> range(start: -1h)\n  |> filter(fn: (r) => r._measurement == \"example-measurement\")\n  |> geo.filterRows(\n    region: {\n      points: [\n        {lat: 40.671659, lon: -73.936631},\n        {lat: 40.706543, lon: -73.749177},\n        {lat: 40.791333, lon: -73.880327}\n      ]\n    }\n  )`Copy\n```\n\n使用上面的查询，您将获得以下可视化效果的数据：\n\n![Flux 的地理时态库可让您按位置和时间进行查询](https://s2.loli.net/2022/08/24/G5UEOeVqJbsIS4t.png)\n\n\n\n> Flux 的地理时态库允许您按位置和时间进行查询\n\n开发人员寻找的不仅仅是查询其数据的能力。他们想用它来建造。Flux 为我们的社区提供了使用数据分析和构建应用程序的最快、最强大的方法，我们迫不及待地想让您尝试一下。\n\n计算指标、缩减采样等的后台处理\n---------------\n\n以交互方式处理数据可以提供强大的见解，但在现代系统中，这些交互式查询仅占整体处理的一小部分。流入应用程序的大多数数据在与其他信息结合使用以生成有关正在发生的事情的知识时会更加强大。该处理需要在后台持续可靠地进行，同时专注于利用见解。\n\nInfluxDB 2.0包含一[个名为Messions的强大新后台处理系统](https://docs.influxdata.com/influxdb/v2.0/process-data/get-started/)，该系统是使用与访问平台中存储的数据相同的Flux语言构建和执行的。这些任务可以执行许多强大的操作，包括聚合经常访问的指标以提高仪表板的性能，根据存储在完全不同系统中的数据计算自定义指标，或对数据进行缩减采样以节省长期存储费用。\n\n还可以利用任务自动将数据推送到其他系统，从而对数据进行通知或警报。因为它们基于 Flux 语言，所以当我们添加新的库、功能或工具时，可以在任务中自动利用这些库、功能或工具。\n\nInfluxDB任务在概念上类似于Kapacitor（TICK中的“K”）。但与Kapacitor不同的是，Kapacitor使用一种名为TICKscript的语言，该语言与Chronograf中使用的InfluxQL分开，Tasks使用Flux。这简化了开发人员的工作，因为他们可以对数据资源管理器和仪表板中的查询以及任务中的数据处理使用一种语言。\n\n任务是平台的处理支柱，我们认为您将找到一些惊人的方法来使用它们。\n\n实时警报和通知\n-------\n\n我们公司的座右铭是，我们的团队永远不必查看仪表板即可知道出了什么问题。监控和警报对任何应用程序平台都至关重要，我们也不例外。\n\nInfluxDB 2.0包括一个强大的监控和警报系统，该系统基于与任务和Flux相同的技术。我们的原生用户界面提供了一种快速定义数据阈值和死人警报的方法，但如果您需要更高的灵活性，您可以使用底层任务系统构建您自己的自定义警报。\n\n![使用 InfluxDB 2.0 构建自定义警报](https://s2.loli.net/2022/08/24/guIDq5AFXHMQb2i.png)\n\n> InfluxDB 和 Flux 可让您向各种端点发送警报\n\n来自这些警报的通知可以发送到任意数量的外部系统，包括 PagerDuty、Slack、Microsoft Teams、电子邮件、MQTT 或你控制的自定义 HTTP 终结点（webhook）。我们提供直观的用户界面来定义和管理这些警报，但通过 UI 提供的每一点功能都通过我们的 API 公开，因此您可以构建适合您的自动化。\n\n具有异常良好工具的通用 API\n---------------\n\n时间是最终的稀缺资源，开发人员经常在易用性与未来的功能和灵活性之间取得平衡，这是很常见的。在 InfluxDB 2.0 中，我们希望让它变得非常简单，同时也让我们的社区相信，随着他们的用例的发展和使用的增长，我们已经为您做好了准备。\n\n我们的下一代平台是围绕单个通用 API 构建的。无论您是在笔记本电脑上本地构建应用程序，还是扩展到全球数百万用户，构建应用程序的 API 都是相同的。\n\n这也使我们能够提供一套功能强大的[命令行工具和](https://docs.influxdata.com/influxdb/v2.0/reference/cli/)[跨10种语言的特定于语言的客户端库](https://docs.influxdata.com/influxdb/v2.0/tools/client-libraries/)，以及适用于所有产品的SDK。如果您正在构建应用程序，那么使用 InfluxDB 启动和运行的最快方法是通过我们的一个客户端库。\n\n![InfluxDB 客户端库提供多种语言版本](https://s2.loli.net/2022/08/24/xYE72sW1wcOJl6P.png)\n\n> InfluxDB 客户端库提供多种语言版本\n\n无论您现在正在构建什么，或者将来需要什么样的规模，您都可以放心，您不需要重写应用程序来利用InfluxDB的强大功能。\n\n通过 InfluxDB 堆栈和模板实现现代 GitOps 工作流\n--------------------------------\n\nKubernetes已经接管了世界，它带来了[GitOps](https://www.weave.works/technologies/gitops/)工作流的兴起，使管理和部署应用程序就像签入代码一样简单。InfluxDB 2.0 旨在利用 [InfluxDB 堆栈](https://docs.influxdata.com/influxdb/v2.0/influxdb-templates/stacks/)和[模板](https://www.influxdata.com/products/influxdb-templates/)无缝集成到您的 GitOps 部署策略中。\n\n使用命令行工具，您可以通过声明性配置和基于 git 的更改管理来快速管理平台中所有资源的状态。这还允许您构建功能强大的持续集成和部署管道，使部署（更重要的是回滚）更改变得轻松。\n\n该技术为InfluxDB模板功能提供支持，该功能为各种流行技术提供开箱即用的全栈监控。InfluxDB模板是免费使用的，[模板库](https://www.influxdata.com/products/influxdb-templates/gallery/)继续增长，因为专家希望与他人分享他们的专业知识。您可以利用InfluxDB社区的集体知识，同时保持扩展和自定义模板的自由，以满足您的确切需求。认为你有正确的东西吗？您也可以[贡献自己的专业知识](https://github.com/influxdata/community-templates)！\n\n![InfluxDB 模板库](https://s2.loli.net/2022/08/24/PeK3dI5fEAyWr6i.png)\n\n> InfluxDB Template Gallery\n\nInfluxDB 2.0 允许您自信地部署更改，站在专家的肩膀上，让您专注于构建应用程序。\n\n我们从这里走向何方\n---------\n\n正如我在本文开头所说，此版本代表了我们的工程团队在近两年的参与和倾听我们社区方面的大量辛勤工作，但这仅仅是个开始。展望未来，您可以期待一些事情。我们计划标准化我们的发布节奏，以便社区知道何时需要新功能和错误修复。\n\n我们的InfluxDB开源路线图将开始专注于解锁需要本地部署软件的用例，但继续与InfluxDB平台的其他部分（包括[InfluxDB Cloud](https://www.influxdata.com/products/influxdb-cloud/)）结合使用。寻找简单的方法来解锁数据复制和聚合到云，以及更多在边缘引入和分析数据的方法。\n\n我们对开源软件的未来感到非常兴奋，并为我们令人惊叹的社区感到谦卑，这些社区帮助我们构建了出色的软件。我们希望您加入我们的旅程，并在[GitHub](https://github.com/influxdata/influxdb)或我们的[社区论坛](https://community.influxdata.com/)和[Slack](https://influxdata.com/slack)上打招呼。","source":"_posts/CloudNativate/influx2.x.md","raw":"---\ntitle: iInfluxDB 2.0 开源正式发布\ntags:\n  - k8s\n  - influxdb\n  - benchmark\n  - prometheus\ncategories:\n  - tsdb\ntop: false\ndate: 2022-07-26 18:33:18\n---\n# InfluxDB 2.0 开源正式发布\n===================\n\n### By [Russ Savage](/blog/author/russ) / Nov 10， 2020 / [InfluxDB](/blog/category/tech/influxdb)， [Community](/blog/category/community)， [Developer](/blog/category/tech)， [Flux](/blog/category/tech/flux)， [InfluxDB Templates](/blog/category/tech/influxdb-templates)\n\n今天，我们很自豪地宣布，InfluxDB开源2.0现已正式向所有人开放。这是一条漫长的道路，如果没有我们社区的惊人支持和贡献，我们就无法做到这一点。这标志着InfluxDB平台的新时代，但它确实只是一个开始。\n\n![Getting started with InfluxDB 2.0](https://s2.loli.net/2022/08/24/7T1KkiJE8HSdDav.png)\n\n在我们谈论未来之前，让我们来看看我们的团队一直在研究的一些惊人的新功能。\n\n默认情况下易于部署和安全\n------------\n\n对于任何熟悉我们现有的开源产品（亲切地称为[Telegraf](https://www.influxdata.com/time-series-platform/telegraf/)，[InfluxDB](https://www.influxdata.com/products/influxdb-overview/)，[Chronograf](https://www.influxdata.com/time-series-platform/chronograf/)和[Kapacitor](https://www.influxdata.com/time-series-platform/kapacitor/)的TICK Stack缩写）的人来说，您可能会注意到的第一件事是只有一个二进制文件需要下载和安装。\n\n新的 InfluxDB 现在在单个二进制文件中包含时间序列数据平台中所需的一切。这简化了部署和设置体验，同时保持了各个组件的强大功能和灵活性。\n\n单个二进制文件意味着它也更容易保护，因此我们默认使InfluxDB安全。对InfluxDB的每个请求都伴随着一个可以撤销的身份验证令牌，并且内置用户界面使用用户名和密码进行保护。\n\n通过这些更改，您再也不必担心意外地将存储在 InfluxDB 中的数据暴露给公共互联网。\n\n易于部署，易于管理，默认情况下是安全的。开发人员期望从现代开发平台获得这些东西，InfluxDB也不例外。\n\n下一代数据探索和分析\n----------\n\n我们知道开发人员尽快掌握数据的重要性。我们从社区中不断听到的一件事是，Chronograf（TICK Stack的“C”）使得快速查看进入系统的时间序列数据的形状变得非常容易，并简化了许多常见的管理任务。\n\n![Next-generation data exploration analytics are available in InfluxDB 2.0](https://s2.loli.net/2022/08/24/ZrxmPI3vWgRiojC.png)\n\nInfluxDB 开源 2.0 通过全新的[数据资源管理器](https://docs.influxdata.com/influxdb/v2.0/visualize-data/explore-metrics/)、[其他可视化类型](https://docs.influxdata.com/influxdb/v2.0/visualize-data/visualization-types/)以及专为时序数据构建的强大新查询语言 [Flux](https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/) 延续了这一体验。您可以快速浏览所有测量值、字段和标签，并将常见转换应用于该数据，而无需使用键盘。\n\n以下是我们新的数据资源管理器的外观：\n\n![InfluxDB 的新数据资源管理器](https://s2.loli.net/2022/08/24/MXw4KmFahHNLJrY.png)\n\n当然，对于那些希望释放其数据全部潜力的人来说，我们提供了一个脚本编辑器，其中包括自动完成，实时语法检查以及大量示例和文档，以帮助您入门。此编辑器在 InfluxDB Data Explorer、[Dashboards](https://docs.influxdata.com/influxdb/v2.0/visualize-data/dashboards/) 和 [Tasks](https://docs.influxdata.com/influxdb/v2.0/process-data/) 中使用，并使用 [Monaco](https://microsoft.github.io/monaco-editor/)，与 Visual Studio Code 中的编辑器相同。\n\n![摩纳哥 InfluxDB 编辑](https://s2.loli.net/2022/08/24/pAtwLXliT7CByzF.png)\n\n等等，但是您已经拥有大量基于[InfluxQL](https://docs.influxdata.com/influxdb/v1.8/query_language/)构建的应用程序和集成？没问题。InfluxDB 2.0 旨在替代[您现有的 InfluxDB](https://docs.influxdata.com/influxdb/v2.0/reference/api/influxdb-1x/) 实例。这意味着，如果您使用外部可视化工具进行仪表板操作或将数据写入数据库，则在升级后，该工具仍可正常工作。当然，我们建议将这些连接迁移到最新的 v2 API，但它们将继续按原样正常工作。向后兼容的 API 可帮助您根据需要快速移动。\n\nFlux：下一代数据处理语言，可在数据所在的位置处理数据\n----------------------------\n\n许多用户喜欢通过InfluxQL（我们类似SQL的查询语言）访问数据的简单性。作为通往平台的简单入口，这是体验InfluxDB强大功能的好地方。但是，随着时间的推移，随着用例的复杂性越来越超出简单的选择语句，因此也带来了挑战。因此，开发人员最终编写了自定义应用程序逻辑，以执行现代应用程序通常需要的许多复杂转换。\n\n这有一些缺点。首先，我们希望构建一个平台，使开发人员的工作效率更高，而花费在编写通用数据转换逻辑上的任何时间都是从为他们自己的用户和客户建立价值中花费的时间。第二个缺点是性能。数据从存储层获取的距离越远，转换往往会变得越慢。\n\n[Flux](https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/query-influxdb/)的核心就是解决这些问题。Flux不是一种类似SQL的语言;它是一种类似于JavaScript或Python[的函数式编程语言](https://en.wikipedia.org/wiki/Functional_programming)。这意味着您可以像编程应用程序一样自定义和构建查询，将通用逻辑分离到可重用的函数和库中，从而减少需要编写的代码总量。该代码也尽可能靠近存储层执行，直接向下推送许多操作，从而为您提供最快的系统性能。\n\n数据更好地结合在一起\n----------\n\nFlux 还构建为处理不仅仅是时间序列数据（尽管这是它的主要工作）。它可以直接从SQL数据存储中提取数据，例如Postgres，Microsoft SQL Server，SQLite和SAP Hana以及基于云的数据存储，如Google Bigtable，Amazon Athena和Snowflake。这使您可以丰富时序数据以提供额外的上下文。以下是一些示例：\n\n*   对于 **IoT** 用户，Flux 允许您将来自传感器的时间序列数据与来自制造商、型号、设备使用年限或里程等关系表的信息相结合。\n*   对于**真实用户监控** （RUM），您可以使用 Flux 查找客户 ID 并连接客户名称、定价计划以及公司名称和位置等公司数据。\n*   在**IT基础设施监控中**，Flux可以将服务器ID解析为软件版本和配置参数。\n\n![InfluxDB 和 Flux 允许您使用关系数据库丰富时间序列数据](https://s2.loli.net/2022/08/24/kWlvSq3IZ7Kbt6X.png)\n\n\n\n\n\n> InfluxDB 和 Flux 可让您使用关系数据库来丰富时间序列数据\n\n时间与空间相遇：使用通量的地理时态查询\n-------------------\n\nFlux 还允许您[执行地理时态查询](https://www.influxdata.com/blog/exploring-geo-temporal-flux/)，因此您可以[按时间和位置进行过滤](https://docs.influxdata.com/influxdb/v2.0/query-data/flux/geo/)。这对于许多需要跟踪移动设备或[车辆](https://www.influxdata.com/customer/waykonect/)的物联网用例至关重要。例如，下面的简单 Flux 查询允许您查询以三角形为界的所有点，三个坐标处的点。\n\n```\n`from(bucket: \"example-bucket\")\n  |> range(start: -1h)\n  |> filter(fn: (r) => r._measurement == \"example-measurement\")\n  |> geo.filterRows(\n    region: {\n      points: [\n        {lat: 40.671659, lon: -73.936631},\n        {lat: 40.706543, lon: -73.749177},\n        {lat: 40.791333, lon: -73.880327}\n      ]\n    }\n  )`Copy\n```\n\n使用上面的查询，您将获得以下可视化效果的数据：\n\n![Flux 的地理时态库可让您按位置和时间进行查询](https://s2.loli.net/2022/08/24/G5UEOeVqJbsIS4t.png)\n\n\n\n> Flux 的地理时态库允许您按位置和时间进行查询\n\n开发人员寻找的不仅仅是查询其数据的能力。他们想用它来建造。Flux 为我们的社区提供了使用数据分析和构建应用程序的最快、最强大的方法，我们迫不及待地想让您尝试一下。\n\n计算指标、缩减采样等的后台处理\n---------------\n\n以交互方式处理数据可以提供强大的见解，但在现代系统中，这些交互式查询仅占整体处理的一小部分。流入应用程序的大多数数据在与其他信息结合使用以生成有关正在发生的事情的知识时会更加强大。该处理需要在后台持续可靠地进行，同时专注于利用见解。\n\nInfluxDB 2.0包含一[个名为Messions的强大新后台处理系统](https://docs.influxdata.com/influxdb/v2.0/process-data/get-started/)，该系统是使用与访问平台中存储的数据相同的Flux语言构建和执行的。这些任务可以执行许多强大的操作，包括聚合经常访问的指标以提高仪表板的性能，根据存储在完全不同系统中的数据计算自定义指标，或对数据进行缩减采样以节省长期存储费用。\n\n还可以利用任务自动将数据推送到其他系统，从而对数据进行通知或警报。因为它们基于 Flux 语言，所以当我们添加新的库、功能或工具时，可以在任务中自动利用这些库、功能或工具。\n\nInfluxDB任务在概念上类似于Kapacitor（TICK中的“K”）。但与Kapacitor不同的是，Kapacitor使用一种名为TICKscript的语言，该语言与Chronograf中使用的InfluxQL分开，Tasks使用Flux。这简化了开发人员的工作，因为他们可以对数据资源管理器和仪表板中的查询以及任务中的数据处理使用一种语言。\n\n任务是平台的处理支柱，我们认为您将找到一些惊人的方法来使用它们。\n\n实时警报和通知\n-------\n\n我们公司的座右铭是，我们的团队永远不必查看仪表板即可知道出了什么问题。监控和警报对任何应用程序平台都至关重要，我们也不例外。\n\nInfluxDB 2.0包括一个强大的监控和警报系统，该系统基于与任务和Flux相同的技术。我们的原生用户界面提供了一种快速定义数据阈值和死人警报的方法，但如果您需要更高的灵活性，您可以使用底层任务系统构建您自己的自定义警报。\n\n![使用 InfluxDB 2.0 构建自定义警报](https://s2.loli.net/2022/08/24/guIDq5AFXHMQb2i.png)\n\n> InfluxDB 和 Flux 可让您向各种端点发送警报\n\n来自这些警报的通知可以发送到任意数量的外部系统，包括 PagerDuty、Slack、Microsoft Teams、电子邮件、MQTT 或你控制的自定义 HTTP 终结点（webhook）。我们提供直观的用户界面来定义和管理这些警报，但通过 UI 提供的每一点功能都通过我们的 API 公开，因此您可以构建适合您的自动化。\n\n具有异常良好工具的通用 API\n---------------\n\n时间是最终的稀缺资源，开发人员经常在易用性与未来的功能和灵活性之间取得平衡，这是很常见的。在 InfluxDB 2.0 中，我们希望让它变得非常简单，同时也让我们的社区相信，随着他们的用例的发展和使用的增长，我们已经为您做好了准备。\n\n我们的下一代平台是围绕单个通用 API 构建的。无论您是在笔记本电脑上本地构建应用程序，还是扩展到全球数百万用户，构建应用程序的 API 都是相同的。\n\n这也使我们能够提供一套功能强大的[命令行工具和](https://docs.influxdata.com/influxdb/v2.0/reference/cli/)[跨10种语言的特定于语言的客户端库](https://docs.influxdata.com/influxdb/v2.0/tools/client-libraries/)，以及适用于所有产品的SDK。如果您正在构建应用程序，那么使用 InfluxDB 启动和运行的最快方法是通过我们的一个客户端库。\n\n![InfluxDB 客户端库提供多种语言版本](https://s2.loli.net/2022/08/24/xYE72sW1wcOJl6P.png)\n\n> InfluxDB 客户端库提供多种语言版本\n\n无论您现在正在构建什么，或者将来需要什么样的规模，您都可以放心，您不需要重写应用程序来利用InfluxDB的强大功能。\n\n通过 InfluxDB 堆栈和模板实现现代 GitOps 工作流\n--------------------------------\n\nKubernetes已经接管了世界，它带来了[GitOps](https://www.weave.works/technologies/gitops/)工作流的兴起，使管理和部署应用程序就像签入代码一样简单。InfluxDB 2.0 旨在利用 [InfluxDB 堆栈](https://docs.influxdata.com/influxdb/v2.0/influxdb-templates/stacks/)和[模板](https://www.influxdata.com/products/influxdb-templates/)无缝集成到您的 GitOps 部署策略中。\n\n使用命令行工具，您可以通过声明性配置和基于 git 的更改管理来快速管理平台中所有资源的状态。这还允许您构建功能强大的持续集成和部署管道，使部署（更重要的是回滚）更改变得轻松。\n\n该技术为InfluxDB模板功能提供支持，该功能为各种流行技术提供开箱即用的全栈监控。InfluxDB模板是免费使用的，[模板库](https://www.influxdata.com/products/influxdb-templates/gallery/)继续增长，因为专家希望与他人分享他们的专业知识。您可以利用InfluxDB社区的集体知识，同时保持扩展和自定义模板的自由，以满足您的确切需求。认为你有正确的东西吗？您也可以[贡献自己的专业知识](https://github.com/influxdata/community-templates)！\n\n![InfluxDB 模板库](https://s2.loli.net/2022/08/24/PeK3dI5fEAyWr6i.png)\n\n> InfluxDB Template Gallery\n\nInfluxDB 2.0 允许您自信地部署更改，站在专家的肩膀上，让您专注于构建应用程序。\n\n我们从这里走向何方\n---------\n\n正如我在本文开头所说，此版本代表了我们的工程团队在近两年的参与和倾听我们社区方面的大量辛勤工作，但这仅仅是个开始。展望未来，您可以期待一些事情。我们计划标准化我们的发布节奏，以便社区知道何时需要新功能和错误修复。\n\n我们的InfluxDB开源路线图将开始专注于解锁需要本地部署软件的用例，但继续与InfluxDB平台的其他部分（包括[InfluxDB Cloud](https://www.influxdata.com/products/influxdb-cloud/)）结合使用。寻找简单的方法来解锁数据复制和聚合到云，以及更多在边缘引入和分析数据的方法。\n\n我们对开源软件的未来感到非常兴奋，并为我们令人惊叹的社区感到谦卑，这些社区帮助我们构建了出色的软件。我们希望您加入我们的旅程，并在[GitHub](https://github.com/influxdata/influxdb)或我们的[社区论坛](https://community.influxdata.com/)和[Slack](https://influxdata.com/slack)上打招呼。","slug":"CloudNativate/influx2.x","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39h006a12mj1cq256y4","content":"<h1 id=\"InfluxDB-2-0-开源正式发布\"><a href=\"#InfluxDB-2-0-开源正式发布\" class=\"headerlink\" title=\"InfluxDB 2.0 开源正式发布\"></a>InfluxDB 2.0 开源正式发布</h1><p>===================</p>\n<h3 id=\"By-Russ-Savage-Nov-10，-2020-InfluxDB，-Community，-Developer，-Flux，-InfluxDB-Templates\"><a href=\"#By-Russ-Savage-Nov-10，-2020-InfluxDB，-Community，-Developer，-Flux，-InfluxDB-Templates\" class=\"headerlink\" title=\"By Russ Savage / Nov 10， 2020 / InfluxDB， Community， Developer， Flux， InfluxDB Templates\"></a>By <a href=\"/blog/author/russ\">Russ Savage</a> / Nov 10， 2020 / <a href=\"/blog/category/tech/influxdb\">InfluxDB</a>， <a href=\"/blog/category/community\">Community</a>， <a href=\"/blog/category/tech\">Developer</a>， <a href=\"/blog/category/tech/flux\">Flux</a>， <a href=\"/blog/category/tech/influxdb-templates\">InfluxDB Templates</a></h3><p>今天，我们很自豪地宣布，InfluxDB开源2.0现已正式向所有人开放。这是一条漫长的道路，如果没有我们社区的惊人支持和贡献，我们就无法做到这一点。这标志着InfluxDB平台的新时代，但它确实只是一个开始。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/7T1KkiJE8HSdDav.png\" alt=\"Getting started with InfluxDB 2.0\"></p>\n<p>在我们谈论未来之前，让我们来看看我们的团队一直在研究的一些惊人的新功能。</p>\n<h2 id=\"默认情况下易于部署和安全\"><a href=\"#默认情况下易于部署和安全\" class=\"headerlink\" title=\"默认情况下易于部署和安全\"></a>默认情况下易于部署和安全</h2><p>对于任何熟悉我们现有的开源产品（亲切地称为<a href=\"https://www.influxdata.com/time-series-platform/telegraf/\">Telegraf</a>，<a href=\"https://www.influxdata.com/products/influxdb-overview/\">InfluxDB</a>，<a href=\"https://www.influxdata.com/time-series-platform/chronograf/\">Chronograf</a>和<a href=\"https://www.influxdata.com/time-series-platform/kapacitor/\">Kapacitor</a>的TICK Stack缩写）的人来说，您可能会注意到的第一件事是只有一个二进制文件需要下载和安装。</p>\n<p>新的 InfluxDB 现在在单个二进制文件中包含时间序列数据平台中所需的一切。这简化了部署和设置体验，同时保持了各个组件的强大功能和灵活性。</p>\n<p>单个二进制文件意味着它也更容易保护，因此我们默认使InfluxDB安全。对InfluxDB的每个请求都伴随着一个可以撤销的身份验证令牌，并且内置用户界面使用用户名和密码进行保护。</p>\n<p>通过这些更改，您再也不必担心意外地将存储在 InfluxDB 中的数据暴露给公共互联网。</p>\n<p>易于部署，易于管理，默认情况下是安全的。开发人员期望从现代开发平台获得这些东西，InfluxDB也不例外。</p>\n<h2 id=\"下一代数据探索和分析\"><a href=\"#下一代数据探索和分析\" class=\"headerlink\" title=\"下一代数据探索和分析\"></a>下一代数据探索和分析</h2><p>我们知道开发人员尽快掌握数据的重要性。我们从社区中不断听到的一件事是，Chronograf（TICK Stack的“C”）使得快速查看进入系统的时间序列数据的形状变得非常容易，并简化了许多常见的管理任务。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/ZrxmPI3vWgRiojC.png\" alt=\"Next-generation data exploration analytics are available in InfluxDB 2.0\"></p>\n<p>InfluxDB 开源 2.0 通过全新的<a href=\"https://docs.influxdata.com/influxdb/v2.0/visualize-data/explore-metrics/\">数据资源管理器</a>、<a href=\"https://docs.influxdata.com/influxdb/v2.0/visualize-data/visualization-types/\">其他可视化类型</a>以及专为时序数据构建的强大新查询语言 <a href=\"https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/\">Flux</a> 延续了这一体验。您可以快速浏览所有测量值、字段和标签，并将常见转换应用于该数据，而无需使用键盘。</p>\n<p>以下是我们新的数据资源管理器的外观：</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/MXw4KmFahHNLJrY.png\" alt=\"InfluxDB 的新数据资源管理器\"></p>\n<p>当然，对于那些希望释放其数据全部潜力的人来说，我们提供了一个脚本编辑器，其中包括自动完成，实时语法检查以及大量示例和文档，以帮助您入门。此编辑器在 InfluxDB Data Explorer、<a href=\"https://docs.influxdata.com/influxdb/v2.0/visualize-data/dashboards/\">Dashboards</a> 和 <a href=\"https://docs.influxdata.com/influxdb/v2.0/process-data/\">Tasks</a> 中使用，并使用 <a href=\"https://microsoft.github.io/monaco-editor/\">Monaco</a>，与 Visual Studio Code 中的编辑器相同。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/pAtwLXliT7CByzF.png\" alt=\"摩纳哥 InfluxDB 编辑\"></p>\n<p>等等，但是您已经拥有大量基于<a href=\"https://docs.influxdata.com/influxdb/v1.8/query_language/\">InfluxQL</a>构建的应用程序和集成？没问题。InfluxDB 2.0 旨在替代<a href=\"https://docs.influxdata.com/influxdb/v2.0/reference/api/influxdb-1x/\">您现有的 InfluxDB</a> 实例。这意味着，如果您使用外部可视化工具进行仪表板操作或将数据写入数据库，则在升级后，该工具仍可正常工作。当然，我们建议将这些连接迁移到最新的 v2 API，但它们将继续按原样正常工作。向后兼容的 API 可帮助您根据需要快速移动。</p>\n<h2 id=\"Flux：下一代数据处理语言，可在数据所在的位置处理数据\"><a href=\"#Flux：下一代数据处理语言，可在数据所在的位置处理数据\" class=\"headerlink\" title=\"Flux：下一代数据处理语言，可在数据所在的位置处理数据\"></a>Flux：下一代数据处理语言，可在数据所在的位置处理数据</h2><p>许多用户喜欢通过InfluxQL（我们类似SQL的查询语言）访问数据的简单性。作为通往平台的简单入口，这是体验InfluxDB强大功能的好地方。但是，随着时间的推移，随着用例的复杂性越来越超出简单的选择语句，因此也带来了挑战。因此，开发人员最终编写了自定义应用程序逻辑，以执行现代应用程序通常需要的许多复杂转换。</p>\n<p>这有一些缺点。首先，我们希望构建一个平台，使开发人员的工作效率更高，而花费在编写通用数据转换逻辑上的任何时间都是从为他们自己的用户和客户建立价值中花费的时间。第二个缺点是性能。数据从存储层获取的距离越远，转换往往会变得越慢。</p>\n<p><a href=\"https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/query-influxdb/\">Flux</a>的核心就是解决这些问题。Flux不是一种类似SQL的语言;它是一种类似于JavaScript或Python<a href=\"https://en.wikipedia.org/wiki/Functional_programming\">的函数式编程语言</a>。这意味着您可以像编程应用程序一样自定义和构建查询，将通用逻辑分离到可重用的函数和库中，从而减少需要编写的代码总量。该代码也尽可能靠近存储层执行，直接向下推送许多操作，从而为您提供最快的系统性能。</p>\n<h2 id=\"数据更好地结合在一起\"><a href=\"#数据更好地结合在一起\" class=\"headerlink\" title=\"数据更好地结合在一起\"></a>数据更好地结合在一起</h2><p>Flux 还构建为处理不仅仅是时间序列数据（尽管这是它的主要工作）。它可以直接从SQL数据存储中提取数据，例如Postgres，Microsoft SQL Server，SQLite和SAP Hana以及基于云的数据存储，如Google Bigtable，Amazon Athena和Snowflake。这使您可以丰富时序数据以提供额外的上下文。以下是一些示例：</p>\n<ul>\n<li>  对于 <strong>IoT</strong> 用户，Flux 允许您将来自传感器的时间序列数据与来自制造商、型号、设备使用年限或里程等关系表的信息相结合。</li>\n<li>  对于<strong>真实用户监控</strong> （RUM），您可以使用 Flux 查找客户 ID 并连接客户名称、定价计划以及公司名称和位置等公司数据。</li>\n<li>  在<strong>IT基础设施监控中</strong>，Flux可以将服务器ID解析为软件版本和配置参数。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/08/24/kWlvSq3IZ7Kbt6X.png\" alt=\"InfluxDB 和 Flux 允许您使用关系数据库丰富时间序列数据\"></p>\n<blockquote>\n<p>InfluxDB 和 Flux 可让您使用关系数据库来丰富时间序列数据</p>\n</blockquote>\n<h2 id=\"时间与空间相遇：使用通量的地理时态查询\"><a href=\"#时间与空间相遇：使用通量的地理时态查询\" class=\"headerlink\" title=\"时间与空间相遇：使用通量的地理时态查询\"></a>时间与空间相遇：使用通量的地理时态查询</h2><p>Flux 还允许您<a href=\"https://www.influxdata.com/blog/exploring-geo-temporal-flux/\">执行地理时态查询</a>，因此您可以<a href=\"https://docs.influxdata.com/influxdb/v2.0/query-data/flux/geo/\">按时间和位置进行过滤</a>。这对于许多需要跟踪移动设备或<a href=\"https://www.influxdata.com/customer/waykonect/\">车辆</a>的物联网用例至关重要。例如，下面的简单 Flux 查询允许您查询以三角形为界的所有点，三个坐标处的点。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">`from(bucket: \"example-bucket\")\n  |&gt; range(start: -1h)\n  |&gt; filter(fn: (r) =&gt; r._measurement == \"example-measurement\")\n  |&gt; geo.filterRows(\n    region: {\n      points: [\n        {lat: 40.671659, lon: -73.936631},\n        {lat: 40.706543, lon: -73.749177},\n        {lat: 40.791333, lon: -73.880327}\n      ]\n    }\n  )`Copy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用上面的查询，您将获得以下可视化效果的数据：</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/G5UEOeVqJbsIS4t.png\" alt=\"Flux 的地理时态库可让您按位置和时间进行查询\"></p>\n<blockquote>\n<p>Flux 的地理时态库允许您按位置和时间进行查询</p>\n</blockquote>\n<p>开发人员寻找的不仅仅是查询其数据的能力。他们想用它来建造。Flux 为我们的社区提供了使用数据分析和构建应用程序的最快、最强大的方法，我们迫不及待地想让您尝试一下。</p>\n<h2 id=\"计算指标、缩减采样等的后台处理\"><a href=\"#计算指标、缩减采样等的后台处理\" class=\"headerlink\" title=\"计算指标、缩减采样等的后台处理\"></a>计算指标、缩减采样等的后台处理</h2><p>以交互方式处理数据可以提供强大的见解，但在现代系统中，这些交互式查询仅占整体处理的一小部分。流入应用程序的大多数数据在与其他信息结合使用以生成有关正在发生的事情的知识时会更加强大。该处理需要在后台持续可靠地进行，同时专注于利用见解。</p>\n<p>InfluxDB 2.0包含一<a href=\"https://docs.influxdata.com/influxdb/v2.0/process-data/get-started/\">个名为Messions的强大新后台处理系统</a>，该系统是使用与访问平台中存储的数据相同的Flux语言构建和执行的。这些任务可以执行许多强大的操作，包括聚合经常访问的指标以提高仪表板的性能，根据存储在完全不同系统中的数据计算自定义指标，或对数据进行缩减采样以节省长期存储费用。</p>\n<p>还可以利用任务自动将数据推送到其他系统，从而对数据进行通知或警报。因为它们基于 Flux 语言，所以当我们添加新的库、功能或工具时，可以在任务中自动利用这些库、功能或工具。</p>\n<p>InfluxDB任务在概念上类似于Kapacitor（TICK中的“K”）。但与Kapacitor不同的是，Kapacitor使用一种名为TICKscript的语言，该语言与Chronograf中使用的InfluxQL分开，Tasks使用Flux。这简化了开发人员的工作，因为他们可以对数据资源管理器和仪表板中的查询以及任务中的数据处理使用一种语言。</p>\n<p>任务是平台的处理支柱，我们认为您将找到一些惊人的方法来使用它们。</p>\n<h2 id=\"实时警报和通知\"><a href=\"#实时警报和通知\" class=\"headerlink\" title=\"实时警报和通知\"></a>实时警报和通知</h2><p>我们公司的座右铭是，我们的团队永远不必查看仪表板即可知道出了什么问题。监控和警报对任何应用程序平台都至关重要，我们也不例外。</p>\n<p>InfluxDB 2.0包括一个强大的监控和警报系统，该系统基于与任务和Flux相同的技术。我们的原生用户界面提供了一种快速定义数据阈值和死人警报的方法，但如果您需要更高的灵活性，您可以使用底层任务系统构建您自己的自定义警报。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/guIDq5AFXHMQb2i.png\" alt=\"使用 InfluxDB 2.0 构建自定义警报\"></p>\n<blockquote>\n<p>InfluxDB 和 Flux 可让您向各种端点发送警报</p>\n</blockquote>\n<p>来自这些警报的通知可以发送到任意数量的外部系统，包括 PagerDuty、Slack、Microsoft Teams、电子邮件、MQTT 或你控制的自定义 HTTP 终结点（webhook）。我们提供直观的用户界面来定义和管理这些警报，但通过 UI 提供的每一点功能都通过我们的 API 公开，因此您可以构建适合您的自动化。</p>\n<h2 id=\"具有异常良好工具的通用-API\"><a href=\"#具有异常良好工具的通用-API\" class=\"headerlink\" title=\"具有异常良好工具的通用 API\"></a>具有异常良好工具的通用 API</h2><p>时间是最终的稀缺资源，开发人员经常在易用性与未来的功能和灵活性之间取得平衡，这是很常见的。在 InfluxDB 2.0 中，我们希望让它变得非常简单，同时也让我们的社区相信，随着他们的用例的发展和使用的增长，我们已经为您做好了准备。</p>\n<p>我们的下一代平台是围绕单个通用 API 构建的。无论您是在笔记本电脑上本地构建应用程序，还是扩展到全球数百万用户，构建应用程序的 API 都是相同的。</p>\n<p>这也使我们能够提供一套功能强大的<a href=\"https://docs.influxdata.com/influxdb/v2.0/reference/cli/\">命令行工具和</a><a href=\"https://docs.influxdata.com/influxdb/v2.0/tools/client-libraries/\">跨10种语言的特定于语言的客户端库</a>，以及适用于所有产品的SDK。如果您正在构建应用程序，那么使用 InfluxDB 启动和运行的最快方法是通过我们的一个客户端库。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/xYE72sW1wcOJl6P.png\" alt=\"InfluxDB 客户端库提供多种语言版本\"></p>\n<blockquote>\n<p>InfluxDB 客户端库提供多种语言版本</p>\n</blockquote>\n<p>无论您现在正在构建什么，或者将来需要什么样的规模，您都可以放心，您不需要重写应用程序来利用InfluxDB的强大功能。</p>\n<h2 id=\"通过-InfluxDB-堆栈和模板实现现代-GitOps-工作流\"><a href=\"#通过-InfluxDB-堆栈和模板实现现代-GitOps-工作流\" class=\"headerlink\" title=\"通过 InfluxDB 堆栈和模板实现现代 GitOps 工作流\"></a>通过 InfluxDB 堆栈和模板实现现代 GitOps 工作流</h2><p>Kubernetes已经接管了世界，它带来了<a href=\"https://www.weave.works/technologies/gitops/\">GitOps</a>工作流的兴起，使管理和部署应用程序就像签入代码一样简单。InfluxDB 2.0 旨在利用 <a href=\"https://docs.influxdata.com/influxdb/v2.0/influxdb-templates/stacks/\">InfluxDB 堆栈</a>和<a href=\"https://www.influxdata.com/products/influxdb-templates/\">模板</a>无缝集成到您的 GitOps 部署策略中。</p>\n<p>使用命令行工具，您可以通过声明性配置和基于 git 的更改管理来快速管理平台中所有资源的状态。这还允许您构建功能强大的持续集成和部署管道，使部署（更重要的是回滚）更改变得轻松。</p>\n<p>该技术为InfluxDB模板功能提供支持，该功能为各种流行技术提供开箱即用的全栈监控。InfluxDB模板是免费使用的，<a href=\"https://www.influxdata.com/products/influxdb-templates/gallery/\">模板库</a>继续增长，因为专家希望与他人分享他们的专业知识。您可以利用InfluxDB社区的集体知识，同时保持扩展和自定义模板的自由，以满足您的确切需求。认为你有正确的东西吗？您也可以<a href=\"https://github.com/influxdata/community-templates\">贡献自己的专业知识</a>！</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/PeK3dI5fEAyWr6i.png\" alt=\"InfluxDB 模板库\"></p>\n<blockquote>\n<p>InfluxDB Template Gallery</p>\n</blockquote>\n<p>InfluxDB 2.0 允许您自信地部署更改，站在专家的肩膀上，让您专注于构建应用程序。</p>\n<h2 id=\"我们从这里走向何方\"><a href=\"#我们从这里走向何方\" class=\"headerlink\" title=\"我们从这里走向何方\"></a>我们从这里走向何方</h2><p>正如我在本文开头所说，此版本代表了我们的工程团队在近两年的参与和倾听我们社区方面的大量辛勤工作，但这仅仅是个开始。展望未来，您可以期待一些事情。我们计划标准化我们的发布节奏，以便社区知道何时需要新功能和错误修复。</p>\n<p>我们的InfluxDB开源路线图将开始专注于解锁需要本地部署软件的用例，但继续与InfluxDB平台的其他部分（包括<a href=\"https://www.influxdata.com/products/influxdb-cloud/\">InfluxDB Cloud</a>）结合使用。寻找简单的方法来解锁数据复制和聚合到云，以及更多在边缘引入和分析数据的方法。</p>\n<p>我们对开源软件的未来感到非常兴奋，并为我们令人惊叹的社区感到谦卑，这些社区帮助我们构建了出色的软件。我们希望您加入我们的旅程，并在<a href=\"https://github.com/influxdata/influxdb\">GitHub</a>或我们的<a href=\"https://community.influxdata.com/\">社区论坛</a>和<a href=\"https://influxdata.com/slack\">Slack</a>上打招呼。</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"InfluxDB-2-0-开源正式发布\"><a href=\"#InfluxDB-2-0-开源正式发布\" class=\"headerlink\" title=\"InfluxDB 2.0 开源正式发布\"></a>InfluxDB 2.0 开源正式发布</h1><p>===================</p>\n<h3 id=\"By-Russ-Savage-Nov-10，-2020-InfluxDB，-Community，-Developer，-Flux，-InfluxDB-Templates\"><a href=\"#By-Russ-Savage-Nov-10，-2020-InfluxDB，-Community，-Developer，-Flux，-InfluxDB-Templates\" class=\"headerlink\" title=\"By Russ Savage / Nov 10， 2020 / InfluxDB， Community， Developer， Flux， InfluxDB Templates\"></a>By <a href=\"/blog/author/russ\">Russ Savage</a> / Nov 10， 2020 / <a href=\"/blog/category/tech/influxdb\">InfluxDB</a>， <a href=\"/blog/category/community\">Community</a>， <a href=\"/blog/category/tech\">Developer</a>， <a href=\"/blog/category/tech/flux\">Flux</a>， <a href=\"/blog/category/tech/influxdb-templates\">InfluxDB Templates</a></h3><p>今天，我们很自豪地宣布，InfluxDB开源2.0现已正式向所有人开放。这是一条漫长的道路，如果没有我们社区的惊人支持和贡献，我们就无法做到这一点。这标志着InfluxDB平台的新时代，但它确实只是一个开始。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/7T1KkiJE8HSdDav.png\" alt=\"Getting started with InfluxDB 2.0\"></p>\n<p>在我们谈论未来之前，让我们来看看我们的团队一直在研究的一些惊人的新功能。</p>\n<h2 id=\"默认情况下易于部署和安全\"><a href=\"#默认情况下易于部署和安全\" class=\"headerlink\" title=\"默认情况下易于部署和安全\"></a>默认情况下易于部署和安全</h2><p>对于任何熟悉我们现有的开源产品（亲切地称为<a href=\"https://www.influxdata.com/time-series-platform/telegraf/\">Telegraf</a>，<a href=\"https://www.influxdata.com/products/influxdb-overview/\">InfluxDB</a>，<a href=\"https://www.influxdata.com/time-series-platform/chronograf/\">Chronograf</a>和<a href=\"https://www.influxdata.com/time-series-platform/kapacitor/\">Kapacitor</a>的TICK Stack缩写）的人来说，您可能会注意到的第一件事是只有一个二进制文件需要下载和安装。</p>\n<p>新的 InfluxDB 现在在单个二进制文件中包含时间序列数据平台中所需的一切。这简化了部署和设置体验，同时保持了各个组件的强大功能和灵活性。</p>\n<p>单个二进制文件意味着它也更容易保护，因此我们默认使InfluxDB安全。对InfluxDB的每个请求都伴随着一个可以撤销的身份验证令牌，并且内置用户界面使用用户名和密码进行保护。</p>\n<p>通过这些更改，您再也不必担心意外地将存储在 InfluxDB 中的数据暴露给公共互联网。</p>\n<p>易于部署，易于管理，默认情况下是安全的。开发人员期望从现代开发平台获得这些东西，InfluxDB也不例外。</p>\n<h2 id=\"下一代数据探索和分析\"><a href=\"#下一代数据探索和分析\" class=\"headerlink\" title=\"下一代数据探索和分析\"></a>下一代数据探索和分析</h2><p>我们知道开发人员尽快掌握数据的重要性。我们从社区中不断听到的一件事是，Chronograf（TICK Stack的“C”）使得快速查看进入系统的时间序列数据的形状变得非常容易，并简化了许多常见的管理任务。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/ZrxmPI3vWgRiojC.png\" alt=\"Next-generation data exploration analytics are available in InfluxDB 2.0\"></p>\n<p>InfluxDB 开源 2.0 通过全新的<a href=\"https://docs.influxdata.com/influxdb/v2.0/visualize-data/explore-metrics/\">数据资源管理器</a>、<a href=\"https://docs.influxdata.com/influxdb/v2.0/visualize-data/visualization-types/\">其他可视化类型</a>以及专为时序数据构建的强大新查询语言 <a href=\"https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/\">Flux</a> 延续了这一体验。您可以快速浏览所有测量值、字段和标签，并将常见转换应用于该数据，而无需使用键盘。</p>\n<p>以下是我们新的数据资源管理器的外观：</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/MXw4KmFahHNLJrY.png\" alt=\"InfluxDB 的新数据资源管理器\"></p>\n<p>当然，对于那些希望释放其数据全部潜力的人来说，我们提供了一个脚本编辑器，其中包括自动完成，实时语法检查以及大量示例和文档，以帮助您入门。此编辑器在 InfluxDB Data Explorer、<a href=\"https://docs.influxdata.com/influxdb/v2.0/visualize-data/dashboards/\">Dashboards</a> 和 <a href=\"https://docs.influxdata.com/influxdb/v2.0/process-data/\">Tasks</a> 中使用，并使用 <a href=\"https://microsoft.github.io/monaco-editor/\">Monaco</a>，与 Visual Studio Code 中的编辑器相同。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/pAtwLXliT7CByzF.png\" alt=\"摩纳哥 InfluxDB 编辑\"></p>\n<p>等等，但是您已经拥有大量基于<a href=\"https://docs.influxdata.com/influxdb/v1.8/query_language/\">InfluxQL</a>构建的应用程序和集成？没问题。InfluxDB 2.0 旨在替代<a href=\"https://docs.influxdata.com/influxdb/v2.0/reference/api/influxdb-1x/\">您现有的 InfluxDB</a> 实例。这意味着，如果您使用外部可视化工具进行仪表板操作或将数据写入数据库，则在升级后，该工具仍可正常工作。当然，我们建议将这些连接迁移到最新的 v2 API，但它们将继续按原样正常工作。向后兼容的 API 可帮助您根据需要快速移动。</p>\n<h2 id=\"Flux：下一代数据处理语言，可在数据所在的位置处理数据\"><a href=\"#Flux：下一代数据处理语言，可在数据所在的位置处理数据\" class=\"headerlink\" title=\"Flux：下一代数据处理语言，可在数据所在的位置处理数据\"></a>Flux：下一代数据处理语言，可在数据所在的位置处理数据</h2><p>许多用户喜欢通过InfluxQL（我们类似SQL的查询语言）访问数据的简单性。作为通往平台的简单入口，这是体验InfluxDB强大功能的好地方。但是，随着时间的推移，随着用例的复杂性越来越超出简单的选择语句，因此也带来了挑战。因此，开发人员最终编写了自定义应用程序逻辑，以执行现代应用程序通常需要的许多复杂转换。</p>\n<p>这有一些缺点。首先，我们希望构建一个平台，使开发人员的工作效率更高，而花费在编写通用数据转换逻辑上的任何时间都是从为他们自己的用户和客户建立价值中花费的时间。第二个缺点是性能。数据从存储层获取的距离越远，转换往往会变得越慢。</p>\n<p><a href=\"https://docs.influxdata.com/influxdb/v2.0/query-data/get-started/query-influxdb/\">Flux</a>的核心就是解决这些问题。Flux不是一种类似SQL的语言;它是一种类似于JavaScript或Python<a href=\"https://en.wikipedia.org/wiki/Functional_programming\">的函数式编程语言</a>。这意味着您可以像编程应用程序一样自定义和构建查询，将通用逻辑分离到可重用的函数和库中，从而减少需要编写的代码总量。该代码也尽可能靠近存储层执行，直接向下推送许多操作，从而为您提供最快的系统性能。</p>\n<h2 id=\"数据更好地结合在一起\"><a href=\"#数据更好地结合在一起\" class=\"headerlink\" title=\"数据更好地结合在一起\"></a>数据更好地结合在一起</h2><p>Flux 还构建为处理不仅仅是时间序列数据（尽管这是它的主要工作）。它可以直接从SQL数据存储中提取数据，例如Postgres，Microsoft SQL Server，SQLite和SAP Hana以及基于云的数据存储，如Google Bigtable，Amazon Athena和Snowflake。这使您可以丰富时序数据以提供额外的上下文。以下是一些示例：</p>\n<ul>\n<li>  对于 <strong>IoT</strong> 用户，Flux 允许您将来自传感器的时间序列数据与来自制造商、型号、设备使用年限或里程等关系表的信息相结合。</li>\n<li>  对于<strong>真实用户监控</strong> （RUM），您可以使用 Flux 查找客户 ID 并连接客户名称、定价计划以及公司名称和位置等公司数据。</li>\n<li>  在<strong>IT基础设施监控中</strong>，Flux可以将服务器ID解析为软件版本和配置参数。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/08/24/kWlvSq3IZ7Kbt6X.png\" alt=\"InfluxDB 和 Flux 允许您使用关系数据库丰富时间序列数据\"></p>\n<blockquote>\n<p>InfluxDB 和 Flux 可让您使用关系数据库来丰富时间序列数据</p>\n</blockquote>\n<h2 id=\"时间与空间相遇：使用通量的地理时态查询\"><a href=\"#时间与空间相遇：使用通量的地理时态查询\" class=\"headerlink\" title=\"时间与空间相遇：使用通量的地理时态查询\"></a>时间与空间相遇：使用通量的地理时态查询</h2><p>Flux 还允许您<a href=\"https://www.influxdata.com/blog/exploring-geo-temporal-flux/\">执行地理时态查询</a>，因此您可以<a href=\"https://docs.influxdata.com/influxdb/v2.0/query-data/flux/geo/\">按时间和位置进行过滤</a>。这对于许多需要跟踪移动设备或<a href=\"https://www.influxdata.com/customer/waykonect/\">车辆</a>的物联网用例至关重要。例如，下面的简单 Flux 查询允许您查询以三角形为界的所有点，三个坐标处的点。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#96;from(bucket: &quot;example-bucket&quot;)\n  |&gt; range(start: -1h)\n  |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; &quot;example-measurement&quot;)\n  |&gt; geo.filterRows(\n    region: &#123;\n      points: [\n        &#123;lat: 40.671659, lon: -73.936631&#125;,\n        &#123;lat: 40.706543, lon: -73.749177&#125;,\n        &#123;lat: 40.791333, lon: -73.880327&#125;\n      ]\n    &#125;\n  )&#96;Copy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用上面的查询，您将获得以下可视化效果的数据：</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/G5UEOeVqJbsIS4t.png\" alt=\"Flux 的地理时态库可让您按位置和时间进行查询\"></p>\n<blockquote>\n<p>Flux 的地理时态库允许您按位置和时间进行查询</p>\n</blockquote>\n<p>开发人员寻找的不仅仅是查询其数据的能力。他们想用它来建造。Flux 为我们的社区提供了使用数据分析和构建应用程序的最快、最强大的方法，我们迫不及待地想让您尝试一下。</p>\n<h2 id=\"计算指标、缩减采样等的后台处理\"><a href=\"#计算指标、缩减采样等的后台处理\" class=\"headerlink\" title=\"计算指标、缩减采样等的后台处理\"></a>计算指标、缩减采样等的后台处理</h2><p>以交互方式处理数据可以提供强大的见解，但在现代系统中，这些交互式查询仅占整体处理的一小部分。流入应用程序的大多数数据在与其他信息结合使用以生成有关正在发生的事情的知识时会更加强大。该处理需要在后台持续可靠地进行，同时专注于利用见解。</p>\n<p>InfluxDB 2.0包含一<a href=\"https://docs.influxdata.com/influxdb/v2.0/process-data/get-started/\">个名为Messions的强大新后台处理系统</a>，该系统是使用与访问平台中存储的数据相同的Flux语言构建和执行的。这些任务可以执行许多强大的操作，包括聚合经常访问的指标以提高仪表板的性能，根据存储在完全不同系统中的数据计算自定义指标，或对数据进行缩减采样以节省长期存储费用。</p>\n<p>还可以利用任务自动将数据推送到其他系统，从而对数据进行通知或警报。因为它们基于 Flux 语言，所以当我们添加新的库、功能或工具时，可以在任务中自动利用这些库、功能或工具。</p>\n<p>InfluxDB任务在概念上类似于Kapacitor（TICK中的“K”）。但与Kapacitor不同的是，Kapacitor使用一种名为TICKscript的语言，该语言与Chronograf中使用的InfluxQL分开，Tasks使用Flux。这简化了开发人员的工作，因为他们可以对数据资源管理器和仪表板中的查询以及任务中的数据处理使用一种语言。</p>\n<p>任务是平台的处理支柱，我们认为您将找到一些惊人的方法来使用它们。</p>\n<h2 id=\"实时警报和通知\"><a href=\"#实时警报和通知\" class=\"headerlink\" title=\"实时警报和通知\"></a>实时警报和通知</h2><p>我们公司的座右铭是，我们的团队永远不必查看仪表板即可知道出了什么问题。监控和警报对任何应用程序平台都至关重要，我们也不例外。</p>\n<p>InfluxDB 2.0包括一个强大的监控和警报系统，该系统基于与任务和Flux相同的技术。我们的原生用户界面提供了一种快速定义数据阈值和死人警报的方法，但如果您需要更高的灵活性，您可以使用底层任务系统构建您自己的自定义警报。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/guIDq5AFXHMQb2i.png\" alt=\"使用 InfluxDB 2.0 构建自定义警报\"></p>\n<blockquote>\n<p>InfluxDB 和 Flux 可让您向各种端点发送警报</p>\n</blockquote>\n<p>来自这些警报的通知可以发送到任意数量的外部系统，包括 PagerDuty、Slack、Microsoft Teams、电子邮件、MQTT 或你控制的自定义 HTTP 终结点（webhook）。我们提供直观的用户界面来定义和管理这些警报，但通过 UI 提供的每一点功能都通过我们的 API 公开，因此您可以构建适合您的自动化。</p>\n<h2 id=\"具有异常良好工具的通用-API\"><a href=\"#具有异常良好工具的通用-API\" class=\"headerlink\" title=\"具有异常良好工具的通用 API\"></a>具有异常良好工具的通用 API</h2><p>时间是最终的稀缺资源，开发人员经常在易用性与未来的功能和灵活性之间取得平衡，这是很常见的。在 InfluxDB 2.0 中，我们希望让它变得非常简单，同时也让我们的社区相信，随着他们的用例的发展和使用的增长，我们已经为您做好了准备。</p>\n<p>我们的下一代平台是围绕单个通用 API 构建的。无论您是在笔记本电脑上本地构建应用程序，还是扩展到全球数百万用户，构建应用程序的 API 都是相同的。</p>\n<p>这也使我们能够提供一套功能强大的<a href=\"https://docs.influxdata.com/influxdb/v2.0/reference/cli/\">命令行工具和</a><a href=\"https://docs.influxdata.com/influxdb/v2.0/tools/client-libraries/\">跨10种语言的特定于语言的客户端库</a>，以及适用于所有产品的SDK。如果您正在构建应用程序，那么使用 InfluxDB 启动和运行的最快方法是通过我们的一个客户端库。</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/xYE72sW1wcOJl6P.png\" alt=\"InfluxDB 客户端库提供多种语言版本\"></p>\n<blockquote>\n<p>InfluxDB 客户端库提供多种语言版本</p>\n</blockquote>\n<p>无论您现在正在构建什么，或者将来需要什么样的规模，您都可以放心，您不需要重写应用程序来利用InfluxDB的强大功能。</p>\n<h2 id=\"通过-InfluxDB-堆栈和模板实现现代-GitOps-工作流\"><a href=\"#通过-InfluxDB-堆栈和模板实现现代-GitOps-工作流\" class=\"headerlink\" title=\"通过 InfluxDB 堆栈和模板实现现代 GitOps 工作流\"></a>通过 InfluxDB 堆栈和模板实现现代 GitOps 工作流</h2><p>Kubernetes已经接管了世界，它带来了<a href=\"https://www.weave.works/technologies/gitops/\">GitOps</a>工作流的兴起，使管理和部署应用程序就像签入代码一样简单。InfluxDB 2.0 旨在利用 <a href=\"https://docs.influxdata.com/influxdb/v2.0/influxdb-templates/stacks/\">InfluxDB 堆栈</a>和<a href=\"https://www.influxdata.com/products/influxdb-templates/\">模板</a>无缝集成到您的 GitOps 部署策略中。</p>\n<p>使用命令行工具，您可以通过声明性配置和基于 git 的更改管理来快速管理平台中所有资源的状态。这还允许您构建功能强大的持续集成和部署管道，使部署（更重要的是回滚）更改变得轻松。</p>\n<p>该技术为InfluxDB模板功能提供支持，该功能为各种流行技术提供开箱即用的全栈监控。InfluxDB模板是免费使用的，<a href=\"https://www.influxdata.com/products/influxdb-templates/gallery/\">模板库</a>继续增长，因为专家希望与他人分享他们的专业知识。您可以利用InfluxDB社区的集体知识，同时保持扩展和自定义模板的自由，以满足您的确切需求。认为你有正确的东西吗？您也可以<a href=\"https://github.com/influxdata/community-templates\">贡献自己的专业知识</a>！</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/PeK3dI5fEAyWr6i.png\" alt=\"InfluxDB 模板库\"></p>\n<blockquote>\n<p>InfluxDB Template Gallery</p>\n</blockquote>\n<p>InfluxDB 2.0 允许您自信地部署更改，站在专家的肩膀上，让您专注于构建应用程序。</p>\n<h2 id=\"我们从这里走向何方\"><a href=\"#我们从这里走向何方\" class=\"headerlink\" title=\"我们从这里走向何方\"></a>我们从这里走向何方</h2><p>正如我在本文开头所说，此版本代表了我们的工程团队在近两年的参与和倾听我们社区方面的大量辛勤工作，但这仅仅是个开始。展望未来，您可以期待一些事情。我们计划标准化我们的发布节奏，以便社区知道何时需要新功能和错误修复。</p>\n<p>我们的InfluxDB开源路线图将开始专注于解锁需要本地部署软件的用例，但继续与InfluxDB平台的其他部分（包括<a href=\"https://www.influxdata.com/products/influxdb-cloud/\">InfluxDB Cloud</a>）结合使用。寻找简单的方法来解锁数据复制和聚合到云，以及更多在边缘引入和分析数据的方法。</p>\n<p>我们对开源软件的未来感到非常兴奋，并为我们令人惊叹的社区感到谦卑，这些社区帮助我们构建了出色的软件。我们希望您加入我们的旅程，并在<a href=\"https://github.com/influxdata/influxdb\">GitHub</a>或我们的<a href=\"https://community.influxdata.com/\">社区论坛</a>和<a href=\"https://influxdata.com/slack\">Slack</a>上打招呼。</p>\n"},{"title":"CentOS7 安装 Prometheus，并配置后台启动","top":false,"date":"2022-07-01T10:33:18.000Z","_content":"\n# CentOS7 安装 Prometheus，并配置后台启动\n\n> 官网获取下载链接地址：[https://prometheus.io/download/](https://prometheus.io/download/)\n\n##### 1、获取安装包\n\n切换目录\n\n```\n[root@Prom ~]# cd /opt/\n\n```\n\n```\n[root@Prom opt]#  wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-amd64.tar.gz\n\n\n```\n\n如果下载慢，可以用下载工具，下载后上传至服务器。\n\n##### 2、解压\n\n```\n[root@Prom opt]# tar -zxvf prometheus-2.19.0.linux-amd64.tar.gz\n[root@Prom opt]# mv prometheus-2.19.0.linux-amd64 prometheus\n\n```\n\n##### 3、运行\n\n切换目录\n\n```\n[root@Prom opt]# cd prometheus\n\n\n```\n\n默认的端口号是 9090，因此要开放 9090 端口号\n\n```\n[root@Prom prometheus]# sudo firewall-cmd --add-port=9090/tcp --permanent\n\n\n```\n\n重新加载防火墙\n\n```\n[root@Prom prometheus]# sudo firewall-cmd --reload\n\n\n```\n\n运行，指定配置文件\n\n```\n[root@Prom prometheus]# ./prometheus --config.file=prometheus.yml\n\n\n```\n\n在网页输入地址：  \n**服务器 ip:9090**  \n![](https://img-blog.csdnimg.cn/20200418215943525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70)  \n出现以下网页，可以输入以下指令：\n\n```\nrate(promhttp_metric_handler_requests_total{code=\"200\"}[1m])\n\n\n```\n\n![](https://img-blog.csdnimg.cn/20200418220123216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70)\n\n5、后台启动方式\n--------\n\n创建日志文件\n\n```\n[root@Prom prometheus]#  mkdir -p /applog/prometheus && touch  /applog/prometheus/prometheus.log\n\n\n```\n\n方式 一\n\n```\n[root@Prom prometheus]# nohup ./prometheus --config.file=prometheus.yml --web.enable-lifecycle > /applog/prometheus/prometheus.log 2>&1 &\n\n\n```\n\n方式二 （systemctl 启动方式）\n\n启动脚本\n\n```\n[root@Prom prometheus]# vi /opt/prometheus/prometheus.sh\n\n\n```\n\n添加以下内容：\n\n```\n#!/bin/bash\n/opt/prometheus/prometheus --web.enable-lifecycle --config.file=/opt/prometheus/prometheus.yml &>> /applog/prometheus/prometheus.log\n\n\n```\n\n授权脚本\n\n```\n[root@Prom prometheus]# chmod +x prometheus.sh\n\n\n```\n\n新增 **prometheus.service**\n\n```\n[root@Prom prometheus]# vi /usr/lib/systemd/system/prometheus.service\n\n\n```\n\n添加以下内容：\n\n```\n[Unit]\nDescription=Prometheus\nDocumentation=https://prometheus.io/docs/introduction/overview/\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=root\nGroup=root\nType=simple\n# 启动脚本\nExecStart=/opt/prometheus/prometheus.sh\n\n[Install]\nWantedBy=multi-user.target\n\n\n\n```\n\n验证启动\n\n```\n[root@Prom prometheus]# systemctl daemon-reload\n\n\n```\n\n配置开机加载\n\n```\n[root@Prom prometheus]# systemctl enable prometheus.service\n\n\n```\n\n启动 Prometheus\n\n```\n[root@Prom prometheus]# systemctl start prometheus.service\n\n\n```\n\n查看是启动状态\n\n```\n[root@Prom prometheus]# systemctl status prometheus\n\n\n```\n\n6、启动端口号修改\n---------\n\n启动参数新增，如果配置了脚本，在脚本中添加–web.listen-address=:8091 （你要修改成的端口号）改参数即可\n\n```\n[root@Prom prometheus]# prometheus --config.file=prometheus.yml --web.listen-address=:8091\n\n\n```\n\n7、重载配置模式\n--------\n\n需配置参数 **–web.enable-lifecycle** ，上面后台脚本已经添加\n\n```\n[root@Prom prometheus]# curl -X POST http://127.0.0.1:9090/-/reload\n\n```\n\n8、prometheus页面警告\n--------\n解决方法：在服务器输入命令：ntpdate ntp.aliyun.com 同步时间即可正常~","source":"_posts/CloudNativate/install_Prometheus.md","raw":"---\ntitle: CentOS7 安装 Prometheus，并配置后台启动\ntags:\n  - prometheus\ncategories:\n  - tsdb\ntop: false\ndate: 2022-07-1 18:33:18\n---\n\n# CentOS7 安装 Prometheus，并配置后台启动\n\n> 官网获取下载链接地址：[https://prometheus.io/download/](https://prometheus.io/download/)\n\n##### 1、获取安装包\n\n切换目录\n\n```\n[root@Prom ~]# cd /opt/\n\n```\n\n```\n[root@Prom opt]#  wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-amd64.tar.gz\n\n\n```\n\n如果下载慢，可以用下载工具，下载后上传至服务器。\n\n##### 2、解压\n\n```\n[root@Prom opt]# tar -zxvf prometheus-2.19.0.linux-amd64.tar.gz\n[root@Prom opt]# mv prometheus-2.19.0.linux-amd64 prometheus\n\n```\n\n##### 3、运行\n\n切换目录\n\n```\n[root@Prom opt]# cd prometheus\n\n\n```\n\n默认的端口号是 9090，因此要开放 9090 端口号\n\n```\n[root@Prom prometheus]# sudo firewall-cmd --add-port=9090/tcp --permanent\n\n\n```\n\n重新加载防火墙\n\n```\n[root@Prom prometheus]# sudo firewall-cmd --reload\n\n\n```\n\n运行，指定配置文件\n\n```\n[root@Prom prometheus]# ./prometheus --config.file=prometheus.yml\n\n\n```\n\n在网页输入地址：  \n**服务器 ip:9090**  \n![](https://img-blog.csdnimg.cn/20200418215943525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70)  \n出现以下网页，可以输入以下指令：\n\n```\nrate(promhttp_metric_handler_requests_total{code=\"200\"}[1m])\n\n\n```\n\n![](https://img-blog.csdnimg.cn/20200418220123216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70)\n\n5、后台启动方式\n--------\n\n创建日志文件\n\n```\n[root@Prom prometheus]#  mkdir -p /applog/prometheus && touch  /applog/prometheus/prometheus.log\n\n\n```\n\n方式 一\n\n```\n[root@Prom prometheus]# nohup ./prometheus --config.file=prometheus.yml --web.enable-lifecycle > /applog/prometheus/prometheus.log 2>&1 &\n\n\n```\n\n方式二 （systemctl 启动方式）\n\n启动脚本\n\n```\n[root@Prom prometheus]# vi /opt/prometheus/prometheus.sh\n\n\n```\n\n添加以下内容：\n\n```\n#!/bin/bash\n/opt/prometheus/prometheus --web.enable-lifecycle --config.file=/opt/prometheus/prometheus.yml &>> /applog/prometheus/prometheus.log\n\n\n```\n\n授权脚本\n\n```\n[root@Prom prometheus]# chmod +x prometheus.sh\n\n\n```\n\n新增 **prometheus.service**\n\n```\n[root@Prom prometheus]# vi /usr/lib/systemd/system/prometheus.service\n\n\n```\n\n添加以下内容：\n\n```\n[Unit]\nDescription=Prometheus\nDocumentation=https://prometheus.io/docs/introduction/overview/\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=root\nGroup=root\nType=simple\n# 启动脚本\nExecStart=/opt/prometheus/prometheus.sh\n\n[Install]\nWantedBy=multi-user.target\n\n\n\n```\n\n验证启动\n\n```\n[root@Prom prometheus]# systemctl daemon-reload\n\n\n```\n\n配置开机加载\n\n```\n[root@Prom prometheus]# systemctl enable prometheus.service\n\n\n```\n\n启动 Prometheus\n\n```\n[root@Prom prometheus]# systemctl start prometheus.service\n\n\n```\n\n查看是启动状态\n\n```\n[root@Prom prometheus]# systemctl status prometheus\n\n\n```\n\n6、启动端口号修改\n---------\n\n启动参数新增，如果配置了脚本，在脚本中添加–web.listen-address=:8091 （你要修改成的端口号）改参数即可\n\n```\n[root@Prom prometheus]# prometheus --config.file=prometheus.yml --web.listen-address=:8091\n\n\n```\n\n7、重载配置模式\n--------\n\n需配置参数 **–web.enable-lifecycle** ，上面后台脚本已经添加\n\n```\n[root@Prom prometheus]# curl -X POST http://127.0.0.1:9090/-/reload\n\n```\n\n8、prometheus页面警告\n--------\n解决方法：在服务器输入命令：ntpdate ntp.aliyun.com 同步时间即可正常~","slug":"CloudNativate/install_Prometheus","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39h006f12mj11iy9esm","content":"<h1 id=\"CentOS7-安装-Prometheus，并配置后台启动\"><a href=\"#CentOS7-安装-Prometheus，并配置后台启动\" class=\"headerlink\" title=\"CentOS7 安装 Prometheus，并配置后台启动\"></a>CentOS7 安装 Prometheus，并配置后台启动</h1><blockquote>\n<p>官网获取下载链接地址：<a href=\"https://prometheus.io/download/\">https://prometheus.io/download/</a></p>\n</blockquote>\n<h5 id=\"1、获取安装包\"><a href=\"#1、获取安装包\" class=\"headerlink\" title=\"1、获取安装包\"></a>1、获取安装包</h5><p>切换目录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom ~]# cd /opt/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom opt]#  wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-amd64.tar.gz\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果下载慢，可以用下载工具，下载后上传至服务器。</p>\n<h5 id=\"2、解压\"><a href=\"#2、解压\" class=\"headerlink\" title=\"2、解压\"></a>2、解压</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom opt]# tar -zxvf prometheus-2.19.0.linux-amd64.tar.gz\n[root@Prom opt]# mv prometheus-2.19.0.linux-amd64 prometheus\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"3、运行\"><a href=\"#3、运行\" class=\"headerlink\" title=\"3、运行\"></a>3、运行</h5><p>切换目录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom opt]# cd prometheus\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>默认的端口号是 9090，因此要开放 9090 端口号</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# sudo firewall-cmd --add-port=9090/tcp --permanent\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>重新加载防火墙</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# sudo firewall-cmd --reload\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>运行，指定配置文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# ./prometheus --config.file=prometheus.yml\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在网页输入地址：<br><strong>服务器 ip:9090</strong><br><img src=\"https://img-blog.csdnimg.cn/20200418215943525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70\"><br>出现以下网页，可以输入以下指令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rate(promhttp_metric_handler_requests_total{code=\"200\"}[1m])\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200418220123216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70\"></p>\n<h2 id=\"5、后台启动方式\"><a href=\"#5、后台启动方式\" class=\"headerlink\" title=\"5、后台启动方式\"></a>5、后台启动方式</h2><p>创建日志文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]#  mkdir -p /applog/prometheus &amp;&amp; touch  /applog/prometheus/prometheus.log\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>方式 一</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# nohup ./prometheus --config.file=prometheus.yml --web.enable-lifecycle &gt; /applog/prometheus/prometheus.log 2&gt;&amp;1 &amp;\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>方式二 （systemctl 启动方式）</p>\n<p>启动脚本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# vi /opt/prometheus/prometheus.sh\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>添加以下内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#!/bin/bash\n/opt/prometheus/prometheus --web.enable-lifecycle --config.file=/opt/prometheus/prometheus.yml &amp;&gt;&gt; /applog/prometheus/prometheus.log\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>授权脚本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# chmod +x prometheus.sh\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>新增 <strong>prometheus.service</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# vi /usr/lib/systemd/system/prometheus.service\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>添加以下内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[Unit]\nDescription=Prometheus\nDocumentation=https://prometheus.io/docs/introduction/overview/\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=root\nGroup=root\nType=simple\n# 启动脚本\nExecStart=/opt/prometheus/prometheus.sh\n\n[Install]\nWantedBy=multi-user.target\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>验证启动</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# systemctl daemon-reload\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>配置开机加载</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# systemctl enable prometheus.service\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>启动 Prometheus</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# systemctl start prometheus.service\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>查看是启动状态</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# systemctl status prometheus\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"6、启动端口号修改\"><a href=\"#6、启动端口号修改\" class=\"headerlink\" title=\"6、启动端口号修改\"></a>6、启动端口号修改</h2><p>启动参数新增，如果配置了脚本，在脚本中添加–web.listen-address=:8091 （你要修改成的端口号）改参数即可</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# prometheus --config.file=prometheus.yml --web.listen-address=:8091\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"7、重载配置模式\"><a href=\"#7、重载配置模式\" class=\"headerlink\" title=\"7、重载配置模式\"></a>7、重载配置模式</h2><p>需配置参数 <strong>–web.enable-lifecycle</strong> ，上面后台脚本已经添加</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# curl -X POST http://127.0.0.1:9090/-/reload\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"8、prometheus页面警告\"><a href=\"#8、prometheus页面警告\" class=\"headerlink\" title=\"8、prometheus页面警告\"></a>8、prometheus页面警告</h2><p>解决方法：在服务器输入命令：ntpdate ntp.aliyun.com 同步时间即可正常~</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"CentOS7-安装-Prometheus，并配置后台启动\"><a href=\"#CentOS7-安装-Prometheus，并配置后台启动\" class=\"headerlink\" title=\"CentOS7 安装 Prometheus，并配置后台启动\"></a>CentOS7 安装 Prometheus，并配置后台启动</h1><blockquote>\n<p>官网获取下载链接地址：<a href=\"https://prometheus.io/download/\">https://prometheus.io/download/</a></p>\n</blockquote>\n<h5 id=\"1、获取安装包\"><a href=\"#1、获取安装包\" class=\"headerlink\" title=\"1、获取安装包\"></a>1、获取安装包</h5><p>切换目录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom ~]# cd &#x2F;opt&#x2F;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom opt]#  wget https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;prometheus&#x2F;releases&#x2F;download&#x2F;v2.19.0&#x2F;prometheus-2.19.0.linux-amd64.tar.gz\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果下载慢，可以用下载工具，下载后上传至服务器。</p>\n<h5 id=\"2、解压\"><a href=\"#2、解压\" class=\"headerlink\" title=\"2、解压\"></a>2、解压</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom opt]# tar -zxvf prometheus-2.19.0.linux-amd64.tar.gz\n[root@Prom opt]# mv prometheus-2.19.0.linux-amd64 prometheus\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"3、运行\"><a href=\"#3、运行\" class=\"headerlink\" title=\"3、运行\"></a>3、运行</h5><p>切换目录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom opt]# cd prometheus\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>默认的端口号是 9090，因此要开放 9090 端口号</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# sudo firewall-cmd --add-port&#x3D;9090&#x2F;tcp --permanent\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>重新加载防火墙</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# sudo firewall-cmd --reload\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>运行，指定配置文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# .&#x2F;prometheus --config.file&#x3D;prometheus.yml\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在网页输入地址：<br><strong>服务器 ip:9090</strong><br><img src=\"https://img-blog.csdnimg.cn/20200418215943525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70\"><br>出现以下网页，可以输入以下指令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rate(promhttp_metric_handler_requests_total&#123;code&#x3D;&quot;200&quot;&#125;[1m])\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200418220123216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNDE1MDYz,size_16,color_FFFFFF,t_70\"></p>\n<h2 id=\"5、后台启动方式\"><a href=\"#5、后台启动方式\" class=\"headerlink\" title=\"5、后台启动方式\"></a>5、后台启动方式</h2><p>创建日志文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]#  mkdir -p &#x2F;applog&#x2F;prometheus &amp;&amp; touch  &#x2F;applog&#x2F;prometheus&#x2F;prometheus.log\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>方式 一</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# nohup .&#x2F;prometheus --config.file&#x3D;prometheus.yml --web.enable-lifecycle &gt; &#x2F;applog&#x2F;prometheus&#x2F;prometheus.log 2&gt;&amp;1 &amp;\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>方式二 （systemctl 启动方式）</p>\n<p>启动脚本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# vi &#x2F;opt&#x2F;prometheus&#x2F;prometheus.sh\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>添加以下内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#!&#x2F;bin&#x2F;bash\n&#x2F;opt&#x2F;prometheus&#x2F;prometheus --web.enable-lifecycle --config.file&#x3D;&#x2F;opt&#x2F;prometheus&#x2F;prometheus.yml &amp;&gt;&gt; &#x2F;applog&#x2F;prometheus&#x2F;prometheus.log\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>授权脚本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# chmod +x prometheus.sh\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>新增 <strong>prometheus.service</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# vi &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;prometheus.service\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>添加以下内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[Unit]\nDescription&#x3D;Prometheus\nDocumentation&#x3D;https:&#x2F;&#x2F;prometheus.io&#x2F;docs&#x2F;introduction&#x2F;overview&#x2F;\nWants&#x3D;network-online.target\nAfter&#x3D;network-online.target\n\n[Service]\nUser&#x3D;root\nGroup&#x3D;root\nType&#x3D;simple\n# 启动脚本\nExecStart&#x3D;&#x2F;opt&#x2F;prometheus&#x2F;prometheus.sh\n\n[Install]\nWantedBy&#x3D;multi-user.target\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>验证启动</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# systemctl daemon-reload\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>配置开机加载</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# systemctl enable prometheus.service\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>启动 Prometheus</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# systemctl start prometheus.service\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>查看是启动状态</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# systemctl status prometheus\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"6、启动端口号修改\"><a href=\"#6、启动端口号修改\" class=\"headerlink\" title=\"6、启动端口号修改\"></a>6、启动端口号修改</h2><p>启动参数新增，如果配置了脚本，在脚本中添加–web.listen-address=:8091 （你要修改成的端口号）改参数即可</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# prometheus --config.file&#x3D;prometheus.yml --web.listen-address&#x3D;:8091\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"7、重载配置模式\"><a href=\"#7、重载配置模式\" class=\"headerlink\" title=\"7、重载配置模式\"></a>7、重载配置模式</h2><p>需配置参数 <strong>–web.enable-lifecycle</strong> ，上面后台脚本已经添加</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@Prom prometheus]# curl -X POST http:&#x2F;&#x2F;127.0.0.1:9090&#x2F;-&#x2F;reload\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"8、prometheus页面警告\"><a href=\"#8、prometheus页面警告\" class=\"headerlink\" title=\"8、prometheus页面警告\"></a>8、prometheus页面警告</h2><p>解决方法：在服务器输入命令：ntpdate ntp.aliyun.com 同步时间即可正常~</p>\n"},{"title":"Single Version installation","top":false,"date":"2022-07-18T10:33:18.000Z","_content":"\n# Single Version\n\n- install victoriametrics\n\n  ```sh\n  docker run -it -d \\\n  \t--name vm \\\n      -v /root/vm:/victoria-metrics-data \\\n      -p 8428:8428 \\\n      victoriametrics/victoria-metrics:latest\n  \n  ```\n\n  \n\n- install influxdb(latest)\n\n  ```sh\n  docker run -p 8086:8086 -d  \\\n  \t--name influxdb\n  \t-v /var/lib/influxdb2:/var/lib/influxdb2  \\\n      -e DOCKER_INFLUXDB_INIT_USERNAME=root    \\\n      -e DOCKER_INFLUXDB_INIT_PASSWORD=huayun@123   \\\n      -e DOCKER_INFLUXDB_INIT_ORG=huayun   \\\n      -e DOCKER_INFLUXDB_INIT_BUCKET=prometheus   \\\n      influxdb:latest\n  ```\n\n  \n\n- install cadvisor\n\n  ```sh\n  docker run -d \\\n      --name cadvisor \\\n      -p 8080:8080 \\\n      -v /:/rootfs:ro \\\n      -v /var/run/:/var/run/:rw \\\n      -v /sys/:/sys/:ro \\\n      -v /var/lib/docker/:/var/lib/docker/:ro \\\n      -v /dev/disk/:/dev/disk/:ro \\\n      google/cadvisor:latest\n  ```\n\n  ","source":"_posts/CloudNativate/single_version.md","raw":"---\ntitle: Single Version installation\ntags:\n  - k8s\n  - influxdb\n  - cadvisor\n  - benchmark\n  - prometheus\ncategories:\n  - tsdb\ntop: false\ndate: 2022-07-18 18:33:18\n---\n\n# Single Version\n\n- install victoriametrics\n\n  ```sh\n  docker run -it -d \\\n  \t--name vm \\\n      -v /root/vm:/victoria-metrics-data \\\n      -p 8428:8428 \\\n      victoriametrics/victoria-metrics:latest\n  \n  ```\n\n  \n\n- install influxdb(latest)\n\n  ```sh\n  docker run -p 8086:8086 -d  \\\n  \t--name influxdb\n  \t-v /var/lib/influxdb2:/var/lib/influxdb2  \\\n      -e DOCKER_INFLUXDB_INIT_USERNAME=root    \\\n      -e DOCKER_INFLUXDB_INIT_PASSWORD=huayun@123   \\\n      -e DOCKER_INFLUXDB_INIT_ORG=huayun   \\\n      -e DOCKER_INFLUXDB_INIT_BUCKET=prometheus   \\\n      influxdb:latest\n  ```\n\n  \n\n- install cadvisor\n\n  ```sh\n  docker run -d \\\n      --name cadvisor \\\n      -p 8080:8080 \\\n      -v /:/rootfs:ro \\\n      -v /var/run/:/var/run/:rw \\\n      -v /sys/:/sys/:ro \\\n      -v /var/lib/docker/:/var/lib/docker/:ro \\\n      -v /dev/disk/:/dev/disk/:ro \\\n      google/cadvisor:latest\n  ```\n\n  ","slug":"CloudNativate/single_version","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39h006i12mjargg7sj5","content":"<h1 id=\"Single-Version\"><a href=\"#Single-Version\" class=\"headerlink\" title=\"Single Version\"></a>Single Version</h1><ul>\n<li><p>install victoriametrics</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">docker run -it -d \\\n\t--name vm \\\n    -v /root/vm:/victoria-metrics-data \\\n    -p 8428:8428 \\\n    victoriametrics/victoria-metrics:latest\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>install influxdb(latest)</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">docker run -p 8086:8086 -d  \\\n\t--name influxdb\n\t-v /var/lib/influxdb2:/var/lib/influxdb2  \\\n    -e DOCKER_INFLUXDB_INIT_USERNAME=root    \\\n    -e DOCKER_INFLUXDB_INIT_PASSWORD=huayun@123   \\\n    -e DOCKER_INFLUXDB_INIT_ORG=huayun   \\\n    -e DOCKER_INFLUXDB_INIT_BUCKET=prometheus   \\\n    influxdb:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>install cadvisor</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">docker run -d \\\n    --name cadvisor \\\n    -p 8080:8080 \\\n    -v /:/rootfs:ro \\\n    -v /var/run/:/var/run/:rw \\\n    -v /sys/:/sys/:ro \\\n    -v /var/lib/docker/:/var/lib/docker/:ro \\\n    -v /dev/disk/:/dev/disk/:ro \\\n    google/cadvisor:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Single-Version\"><a href=\"#Single-Version\" class=\"headerlink\" title=\"Single Version\"></a>Single Version</h1><ul>\n<li><p>install victoriametrics</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">docker run -it -d \\\n\t--name vm \\\n    -v &#x2F;root&#x2F;vm:&#x2F;victoria-metrics-data \\\n    -p 8428:8428 \\\n    victoriametrics&#x2F;victoria-metrics:latest\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>install influxdb(latest)</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">docker run -p 8086:8086 -d  \\\n\t--name influxdb\n\t-v &#x2F;var&#x2F;lib&#x2F;influxdb2:&#x2F;var&#x2F;lib&#x2F;influxdb2  \\\n    -e DOCKER_INFLUXDB_INIT_USERNAME&#x3D;root    \\\n    -e DOCKER_INFLUXDB_INIT_PASSWORD&#x3D;huayun@123   \\\n    -e DOCKER_INFLUXDB_INIT_ORG&#x3D;huayun   \\\n    -e DOCKER_INFLUXDB_INIT_BUCKET&#x3D;prometheus   \\\n    influxdb:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>install cadvisor</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">docker run -d \\\n    --name cadvisor \\\n    -p 8080:8080 \\\n    -v &#x2F;:&#x2F;rootfs:ro \\\n    -v &#x2F;var&#x2F;run&#x2F;:&#x2F;var&#x2F;run&#x2F;:rw \\\n    -v &#x2F;sys&#x2F;:&#x2F;sys&#x2F;:ro \\\n    -v &#x2F;var&#x2F;lib&#x2F;docker&#x2F;:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;:ro \\\n    -v &#x2F;dev&#x2F;disk&#x2F;:&#x2F;dev&#x2F;disk&#x2F;:ro \\\n    google&#x2F;cadvisor:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ul>\n"},{"title":"Minicube","top":false,"date":"2022-06-24T10:33:18.000Z","_content":"\n# Minicube\n\n## minikebu start\n\n### 1. Install\n\n要在 x86-64 Linux 上使用二进制下载安装最新的 minikube 稳定版本:\n\n```bash\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n```\n> 添加到shell配置文件 `alias kubectl=\"minikube kubectl --\"`\n### 2. Start your cluster\n\n`minikube start`\n\n### 3. Interact with your cluster\n\n```bash\nkubectl get po -A\n```\n####  Kubernetes Dashboard\n`minikube dashboard`\n\n\n## 4. Deploy applications\n\n创建一个示例部署并在端口8080上公开它:\n\n`kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4`\n\n`kubectl expose deployment hello-minikube --type=NodePort --port=8080`\n\n这可能需要一些时间，但是当您运行时，您的部署很快就会显示出来:\n\n`kubectl get services hello-minikube`\n\n访问这项服务最简单的方法是让 minikube 为你启动一个网页浏览器:\n\n`minikube service hello-minikube`\n\n或者，使用 kubectl 转发端口:\n\n`kubectl port-forward service/hello-minikube 7080:8080`\n\n你的应用程序现在可以在 google http://localhost:7080/上使用了。\n> Note：\n k8s.gcr.io 换成 registry.cn-hangzhou.aliyuncs.com/google_containers\n\n### LoadBalancer deployments\n\n要访问 LoadBalancer 部署，可以使用“ minikube tunnel”命令:\n\n`kubectl create deployment balanced --image=k8s.gcr.io/echoserver:1.4`  \n`kubectl expose deployment balanced --type=LoadBalancer --port=8080`\n\n在另一个窗口中，启动隧道为平衡部署创建一个可路由的 IP:\n\n`minikube tunnel`\n\n要查找可路由的 IP，请运行以下命令并检查 external-IP 列:\n\n`kubectl get services balanced`\n\n您的部署现在可以在 < external-ip > : 8080获得\n\n\n## 5. Manage your cluster \n\n暂停 Kubernetes 而不影响已部署的应用程序:\n\n```shell\nminikube pause\n```\n\n打开暂停的实例:\n\n```shell\nminikube unpause\n```\n\n停止群集:\n\n```shell\nminikube stop\n```\n\n提高默认内存限制(需要重新启动) :\n\n```shell\nminikube config set memory 16384\n```\n\n浏览易于安装的 Kubernetes 服务的目录:\n\n```shell\nminikube addons list\n```\n\n创建第二个集群，运行老版本的 Kubernetes:\n\n```shell\nminikube start -p aged --kubernetes-version=v1.16.1\n```\n\n删除所有的 minikube 集群:\n\n```shell\nminikube delete --all\n```\n","source":"_posts/CloudNativate/minicube.md","raw":"---\ntitle: Minicube \ntags:\n  - k8s\n  - minikube\ncategories:\n  - k8s\ntop: false\ndate: 2022-06-24 18:33:18\n---\n\n# Minicube\n\n## minikebu start\n\n### 1. Install\n\n要在 x86-64 Linux 上使用二进制下载安装最新的 minikube 稳定版本:\n\n```bash\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n```\n> 添加到shell配置文件 `alias kubectl=\"minikube kubectl --\"`\n### 2. Start your cluster\n\n`minikube start`\n\n### 3. Interact with your cluster\n\n```bash\nkubectl get po -A\n```\n####  Kubernetes Dashboard\n`minikube dashboard`\n\n\n## 4. Deploy applications\n\n创建一个示例部署并在端口8080上公开它:\n\n`kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4`\n\n`kubectl expose deployment hello-minikube --type=NodePort --port=8080`\n\n这可能需要一些时间，但是当您运行时，您的部署很快就会显示出来:\n\n`kubectl get services hello-minikube`\n\n访问这项服务最简单的方法是让 minikube 为你启动一个网页浏览器:\n\n`minikube service hello-minikube`\n\n或者，使用 kubectl 转发端口:\n\n`kubectl port-forward service/hello-minikube 7080:8080`\n\n你的应用程序现在可以在 google http://localhost:7080/上使用了。\n> Note：\n k8s.gcr.io 换成 registry.cn-hangzhou.aliyuncs.com/google_containers\n\n### LoadBalancer deployments\n\n要访问 LoadBalancer 部署，可以使用“ minikube tunnel”命令:\n\n`kubectl create deployment balanced --image=k8s.gcr.io/echoserver:1.4`  \n`kubectl expose deployment balanced --type=LoadBalancer --port=8080`\n\n在另一个窗口中，启动隧道为平衡部署创建一个可路由的 IP:\n\n`minikube tunnel`\n\n要查找可路由的 IP，请运行以下命令并检查 external-IP 列:\n\n`kubectl get services balanced`\n\n您的部署现在可以在 < external-ip > : 8080获得\n\n\n## 5. Manage your cluster \n\n暂停 Kubernetes 而不影响已部署的应用程序:\n\n```shell\nminikube pause\n```\n\n打开暂停的实例:\n\n```shell\nminikube unpause\n```\n\n停止群集:\n\n```shell\nminikube stop\n```\n\n提高默认内存限制(需要重新启动) :\n\n```shell\nminikube config set memory 16384\n```\n\n浏览易于安装的 Kubernetes 服务的目录:\n\n```shell\nminikube addons list\n```\n\n创建第二个集群，运行老版本的 Kubernetes:\n\n```shell\nminikube start -p aged --kubernetes-version=v1.16.1\n```\n\n删除所有的 minikube 集群:\n\n```shell\nminikube delete --all\n```\n","slug":"CloudNativate/minicube","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39i006n12mjfr2u3em3","content":"<h1 id=\"Minicube\"><a href=\"#Minicube\" class=\"headerlink\" title=\"Minicube\"></a>Minicube</h1><h2 id=\"minikebu-start\"><a href=\"#minikebu-start\" class=\"headerlink\" title=\"minikebu start\"></a>minikebu start</h2><h3 id=\"1-Install\"><a href=\"#1-Install\" class=\"headerlink\" title=\"1. Install\"></a>1. Install</h3><p>要在 x86-64 Linux 上使用二进制下载安装最新的 minikube 稳定版本:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">install</span> minikube-linux-amd64 /usr/local/bin/minikube<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>添加到shell配置文件 <code>alias kubectl=\"minikube kubectl --\"</code></p>\n</blockquote>\n<h3 id=\"2-Start-your-cluster\"><a href=\"#2-Start-your-cluster\" class=\"headerlink\" title=\"2. Start your cluster\"></a>2. Start your cluster</h3><p><code>minikube start</code></p>\n<h3 id=\"3-Interact-with-your-cluster\"><a href=\"#3-Interact-with-your-cluster\" class=\"headerlink\" title=\"3. Interact with your cluster\"></a>3. Interact with your cluster</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get po -A<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Kubernetes-Dashboard\"><a href=\"#Kubernetes-Dashboard\" class=\"headerlink\" title=\"Kubernetes Dashboard\"></a>Kubernetes Dashboard</h4><p><code>minikube dashboard</code></p>\n<h2 id=\"4-Deploy-applications\"><a href=\"#4-Deploy-applications\" class=\"headerlink\" title=\"4. Deploy applications\"></a>4. Deploy applications</h2><p>创建一个示例部署并在端口8080上公开它:</p>\n<p><code>kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4</code></p>\n<p><code>kubectl expose deployment hello-minikube --type=NodePort --port=8080</code></p>\n<p>这可能需要一些时间，但是当您运行时，您的部署很快就会显示出来:</p>\n<p><code>kubectl get services hello-minikube</code></p>\n<p>访问这项服务最简单的方法是让 minikube 为你启动一个网页浏览器:</p>\n<p><code>minikube service hello-minikube</code></p>\n<p>或者，使用 kubectl 转发端口:</p>\n<p><code>kubectl port-forward service/hello-minikube 7080:8080</code></p>\n<p>你的应用程序现在可以在 google <a href=\"http://localhost:7080/%E4%B8%8A%E4%BD%BF%E7%94%A8%E4%BA%86%E3%80%82\">http://localhost:7080/上使用了。</a></p>\n<blockquote>\n<p>Note：<br> k8s.gcr.io 换成 registry.cn-hangzhou.aliyuncs.com/google_containers</p>\n</blockquote>\n<h3 id=\"LoadBalancer-deployments\"><a href=\"#LoadBalancer-deployments\" class=\"headerlink\" title=\"LoadBalancer deployments\"></a>LoadBalancer deployments</h3><p>要访问 LoadBalancer 部署，可以使用“ minikube tunnel”命令:</p>\n<p><code>kubectl create deployment balanced --image=k8s.gcr.io/echoserver:1.4</code><br><code>kubectl expose deployment balanced --type=LoadBalancer --port=8080</code></p>\n<p>在另一个窗口中，启动隧道为平衡部署创建一个可路由的 IP:</p>\n<p><code>minikube tunnel</code></p>\n<p>要查找可路由的 IP，请运行以下命令并检查 external-IP 列:</p>\n<p><code>kubectl get services balanced</code></p>\n<p>您的部署现在可以在 &lt; external-ip &gt; : 8080获得</p>\n<h2 id=\"5-Manage-your-cluster\"><a href=\"#5-Manage-your-cluster\" class=\"headerlink\" title=\"5. Manage your cluster\"></a>5. Manage your cluster</h2><p>暂停 Kubernetes 而不影响已部署的应用程序:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube pause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>打开暂停的实例:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube unpause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>停止群集:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>提高默认内存限制(需要重新启动) :</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube config <span class=\"token builtin class-name\">set</span> memory <span class=\"token number\">16384</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>浏览易于安装的 Kubernetes 服务的目录:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube addons list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建第二个集群，运行老版本的 Kubernetes:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube start -p aged --kubernetes-version<span class=\"token operator\">=</span>v1.16.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除所有的 minikube 集群:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube delete --all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Minicube\"><a href=\"#Minicube\" class=\"headerlink\" title=\"Minicube\"></a>Minicube</h1><h2 id=\"minikebu-start\"><a href=\"#minikebu-start\" class=\"headerlink\" title=\"minikebu start\"></a>minikebu start</h2><h3 id=\"1-Install\"><a href=\"#1-Install\" class=\"headerlink\" title=\"1. Install\"></a>1. Install</h3><p>要在 x86-64 Linux 上使用二进制下载安装最新的 minikube 稳定版本:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">install</span> minikube-linux-amd64 /usr/local/bin/minikube<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>添加到shell配置文件 <code>alias kubectl=&quot;minikube kubectl --&quot;</code></p>\n</blockquote>\n<h3 id=\"2-Start-your-cluster\"><a href=\"#2-Start-your-cluster\" class=\"headerlink\" title=\"2. Start your cluster\"></a>2. Start your cluster</h3><p><code>minikube start</code></p>\n<h3 id=\"3-Interact-with-your-cluster\"><a href=\"#3-Interact-with-your-cluster\" class=\"headerlink\" title=\"3. Interact with your cluster\"></a>3. Interact with your cluster</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get po -A<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Kubernetes-Dashboard\"><a href=\"#Kubernetes-Dashboard\" class=\"headerlink\" title=\"Kubernetes Dashboard\"></a>Kubernetes Dashboard</h4><p><code>minikube dashboard</code></p>\n<h2 id=\"4-Deploy-applications\"><a href=\"#4-Deploy-applications\" class=\"headerlink\" title=\"4. Deploy applications\"></a>4. Deploy applications</h2><p>创建一个示例部署并在端口8080上公开它:</p>\n<p><code>kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4</code></p>\n<p><code>kubectl expose deployment hello-minikube --type=NodePort --port=8080</code></p>\n<p>这可能需要一些时间，但是当您运行时，您的部署很快就会显示出来:</p>\n<p><code>kubectl get services hello-minikube</code></p>\n<p>访问这项服务最简单的方法是让 minikube 为你启动一个网页浏览器:</p>\n<p><code>minikube service hello-minikube</code></p>\n<p>或者，使用 kubectl 转发端口:</p>\n<p><code>kubectl port-forward service/hello-minikube 7080:8080</code></p>\n<p>你的应用程序现在可以在 google <a href=\"http://localhost:7080/%E4%B8%8A%E4%BD%BF%E7%94%A8%E4%BA%86%E3%80%82\">http://localhost:7080/上使用了。</a></p>\n<blockquote>\n<p>Note：<br> k8s.gcr.io 换成 registry.cn-hangzhou.aliyuncs.com/google_containers</p>\n</blockquote>\n<h3 id=\"LoadBalancer-deployments\"><a href=\"#LoadBalancer-deployments\" class=\"headerlink\" title=\"LoadBalancer deployments\"></a>LoadBalancer deployments</h3><p>要访问 LoadBalancer 部署，可以使用“ minikube tunnel”命令:</p>\n<p><code>kubectl create deployment balanced --image=k8s.gcr.io/echoserver:1.4</code><br><code>kubectl expose deployment balanced --type=LoadBalancer --port=8080</code></p>\n<p>在另一个窗口中，启动隧道为平衡部署创建一个可路由的 IP:</p>\n<p><code>minikube tunnel</code></p>\n<p>要查找可路由的 IP，请运行以下命令并检查 external-IP 列:</p>\n<p><code>kubectl get services balanced</code></p>\n<p>您的部署现在可以在 &lt; external-ip &gt; : 8080获得</p>\n<h2 id=\"5-Manage-your-cluster\"><a href=\"#5-Manage-your-cluster\" class=\"headerlink\" title=\"5. Manage your cluster\"></a>5. Manage your cluster</h2><p>暂停 Kubernetes 而不影响已部署的应用程序:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube pause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>打开暂停的实例:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube unpause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>停止群集:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>提高默认内存限制(需要重新启动) :</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube config <span class=\"token builtin class-name\">set</span> memory <span class=\"token number\">16384</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>浏览易于安装的 Kubernetes 服务的目录:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube addons list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建第二个集群，运行老版本的 Kubernetes:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube start -p aged --kubernetes-version<span class=\"token operator\">=</span>v1.16.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除所有的 minikube 集群:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">minikube delete --all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"victoriametrics_vs_tdengine_single_version","top":false,"date":"2022-08-08T10:33:18.000Z","_content":"\n# victoriametrics_vs_tdengine_single_version\n\n## Environment\n\n- **Prometheus**: 178.104.163.111 2c4g\n\n- **Node:** 178.104.163.188  4c8g\n\n  > victoriametrics、tdengine 均安装最新版本作为本次测试\n  >\n  > docker version：20.10.17 \n  >\n  > linux kernel version:  3.10.0-957.el7.x86_64 \n\n## Architecture\n\n![image-20220731222438136](https://s2.loli.net/2022/08/24/NMKVR8vDJuz7QPl.png)\n\n## Deploy\n\n\n\n## Test Result\n\n> duration: 5 days\n\n```sh\n[root@desktop-7f8a ~]# du -sh /var/lib/vm ;du -sh /var/lib/taos\n93M     /var/lib/vm\n859M    /var/lib/taos\n\n```\n\n```sh\nrate(prometheus_tsdb_head_samples_appended_total[1m])\navg(rate(container_cpu_usage_seconds_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}[1m])) by (name, image, instance,  job)\ncontainer_cpu_usage_seconds_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}\ncontainer_fs_writes_bytes_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}\ncontainer_fs_writes_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}\n```\n\n![image-20220802151311428](https://s2.loli.net/2022/08/24/GEn8bPtMgoUKNce.png)\n\n- CPU\n\n  ![image-20220802151441630](https://s2.loli.net/2022/08/24/B8FmzZjaHnXKuxA.png)\n\n- Memory\n\n  ![image-20220802151534464](https://s2.loli.net/2022/08/24/qMEp6AcTHWFo1z5.png)\n\n- Rss\n\n  ![image-20220802151648122](https://s2.loli.net/2022/08/24/QN2eRbYEsZDpqIu.png)\n\n- IO\n\n  ![image-20220802151728888](https://s2.loli.net/2022/08/24/vBA69xrTlufgazq.png)\n\n  ![image-20220802152224653](https://s2.loli.net/2022/08/24/b2CHjwZKGLWTYIq.png)\n\n\n\n> [PromQL] http://178.104.163.111:9090/graph?g0.expr=rate(prometheus_tsdb_head_samples_appended_total%5B1m%5D)&g0.tab=0&g0.stacked=0&g0.show_exemplars=0&g0.range_input=5d&g1.expr=avg(rate(container_cpu_usage_seconds_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&g1.tab=0&g1.stacked=0&g1.show_exemplars=0&g1.range_input=5d&g2.expr=container_memory_usage_bytes%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&g2.tab=0&g2.stacked=0&g2.show_exemplars=0&g2.range_input=5d&g3.expr=container_memory_rss%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&g3.tab=0&g3.stacked=0&g3.show_exemplars=0&g3.range_input=5d&g4.expr=avg(rate(container_fs_writes_bytes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&g4.tab=0&g4.stacked=0&g4.show_exemplars=0&g4.range_input=5d&g5.expr=rate(container_fs_writes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B1m%5D)&g5.tab=0&g5.stacked=0&g5.show_exemplars=0&g5.range_input=5d","source":"_posts/CloudNativate/vm_vs_tdengine_single_version.md","raw":"---\ntitle: victoriametrics_vs_tdengine_single_version\ntags:\n  - k8s\n  - victoriametrics\n  - tdengine\n  - cadvisor\n  - benchmark\n  - prometheus\ncategories:\n  - tsdb\ntop: false\ndate: 2022-08-8 18:33:18\n---\n\n# victoriametrics_vs_tdengine_single_version\n\n## Environment\n\n- **Prometheus**: 178.104.163.111 2c4g\n\n- **Node:** 178.104.163.188  4c8g\n\n  > victoriametrics、tdengine 均安装最新版本作为本次测试\n  >\n  > docker version：20.10.17 \n  >\n  > linux kernel version:  3.10.0-957.el7.x86_64 \n\n## Architecture\n\n![image-20220731222438136](https://s2.loli.net/2022/08/24/NMKVR8vDJuz7QPl.png)\n\n## Deploy\n\n\n\n## Test Result\n\n> duration: 5 days\n\n```sh\n[root@desktop-7f8a ~]# du -sh /var/lib/vm ;du -sh /var/lib/taos\n93M     /var/lib/vm\n859M    /var/lib/taos\n\n```\n\n```sh\nrate(prometheus_tsdb_head_samples_appended_total[1m])\navg(rate(container_cpu_usage_seconds_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}[1m])) by (name, image, instance,  job)\ncontainer_cpu_usage_seconds_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}\ncontainer_fs_writes_bytes_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}\ncontainer_fs_writes_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}\n```\n\n![image-20220802151311428](https://s2.loli.net/2022/08/24/GEn8bPtMgoUKNce.png)\n\n- CPU\n\n  ![image-20220802151441630](https://s2.loli.net/2022/08/24/B8FmzZjaHnXKuxA.png)\n\n- Memory\n\n  ![image-20220802151534464](https://s2.loli.net/2022/08/24/qMEp6AcTHWFo1z5.png)\n\n- Rss\n\n  ![image-20220802151648122](https://s2.loli.net/2022/08/24/QN2eRbYEsZDpqIu.png)\n\n- IO\n\n  ![image-20220802151728888](https://s2.loli.net/2022/08/24/vBA69xrTlufgazq.png)\n\n  ![image-20220802152224653](https://s2.loli.net/2022/08/24/b2CHjwZKGLWTYIq.png)\n\n\n\n> [PromQL] http://178.104.163.111:9090/graph?g0.expr=rate(prometheus_tsdb_head_samples_appended_total%5B1m%5D)&g0.tab=0&g0.stacked=0&g0.show_exemplars=0&g0.range_input=5d&g1.expr=avg(rate(container_cpu_usage_seconds_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&g1.tab=0&g1.stacked=0&g1.show_exemplars=0&g1.range_input=5d&g2.expr=container_memory_usage_bytes%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&g2.tab=0&g2.stacked=0&g2.show_exemplars=0&g2.range_input=5d&g3.expr=container_memory_rss%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&g3.tab=0&g3.stacked=0&g3.show_exemplars=0&g3.range_input=5d&g4.expr=avg(rate(container_fs_writes_bytes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&g4.tab=0&g4.stacked=0&g4.show_exemplars=0&g4.range_input=5d&g5.expr=rate(container_fs_writes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B1m%5D)&g5.tab=0&g5.stacked=0&g5.show_exemplars=0&g5.range_input=5d","slug":"CloudNativate/vm_vs_tdengine_single_version","published":1,"updated":"2022-08-25T14:12:05.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl86sz39i006q12mjck5d7tli","content":"<h1 id=\"victoriametrics-vs-tdengine-single-version\"><a href=\"#victoriametrics-vs-tdengine-single-version\" class=\"headerlink\" title=\"victoriametrics_vs_tdengine_single_version\"></a>victoriametrics_vs_tdengine_single_version</h1><h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><ul>\n<li><p><strong>Prometheus</strong>: 178.104.163.111 2c4g</p>\n</li>\n<li><p><strong>Node:</strong> 178.104.163.188  4c8g</p>\n<blockquote>\n<p>victoriametrics、tdengine 均安装最新版本作为本次测试</p>\n<p>docker version：20.10.17 </p>\n<p>linux kernel version:  3.10.0-957.el7.x86_64 </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p><img src=\"https://s2.loli.net/2022/08/24/NMKVR8vDJuz7QPl.png\" alt=\"image-20220731222438136\"></p>\n<h2 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h2><h2 id=\"Test-Result\"><a href=\"#Test-Result\" class=\"headerlink\" title=\"Test Result\"></a>Test Result</h2><blockquote>\n<p>duration: 5 days</p>\n</blockquote>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">[root@desktop-7f8a ~]# du -sh /var/lib/vm ;du -sh /var/lib/taos\n93M     /var/lib/vm\n859M    /var/lib/taos\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">rate(prometheus_tsdb_head_samples_appended_total[1m])\navg(rate(container_cpu_usage_seconds_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}[1m])) by (name, image, instance,  job)\ncontainer_cpu_usage_seconds_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}\ncontainer_fs_writes_bytes_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}\ncontainer_fs_writes_total{job=\"vm_td_cadvisor\", name=~\"vm|tdengine\"}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://s2.loli.net/2022/08/24/GEn8bPtMgoUKNce.png\" alt=\"image-20220802151311428\"></p>\n<ul>\n<li><p>CPU</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/B8FmzZjaHnXKuxA.png\" alt=\"image-20220802151441630\"></p>\n</li>\n<li><p>Memory</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/qMEp6AcTHWFo1z5.png\" alt=\"image-20220802151534464\"></p>\n</li>\n<li><p>Rss</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/QN2eRbYEsZDpqIu.png\" alt=\"image-20220802151648122\"></p>\n</li>\n<li><p>IO</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/vBA69xrTlufgazq.png\" alt=\"image-20220802151728888\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/b2CHjwZKGLWTYIq.png\" alt=\"image-20220802152224653\"></p>\n</li>\n</ul>\n<blockquote>\n<p>[PromQL] <a href=\"http://178.104.163.111:9090/graph?g0.expr=rate(prometheus_tsdb_head_samples_appended_total%5B1m%5D)&amp;g0.tab=0&amp;g0.stacked=0&amp;g0.show_exemplars=0&amp;g0.range_input=5d&amp;g1.expr=avg(rate(container_cpu_usage_seconds_total%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name,%20image,%20instance,%20%20job)&amp;g1.tab=0&amp;g1.stacked=0&amp;g1.show_exemplars=0&amp;g1.range_input=5d&amp;g2.expr=container_memory_usage_bytes%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D&amp;g2.tab=0&amp;g2.stacked=0&amp;g2.show_exemplars=0&amp;g2.range_input=5d&amp;g3.expr=container_memory_rss%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D&amp;g3.tab=0&amp;g3.stacked=0&amp;g3.show_exemplars=0&amp;g3.range_input=5d&amp;g4.expr=avg(rate(container_fs_writes_bytes_total%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name,%20image,%20instance,%20%20job)&amp;g4.tab=0&amp;g4.stacked=0&amp;g4.show_exemplars=0&amp;g4.range_input=5d&amp;g5.expr=rate(container_fs_writes_total%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D%5B1m%5D)&amp;g5.tab=0&amp;g5.stacked=0&amp;g5.show_exemplars=0&amp;g5.range_input=5d\">http://178.104.163.111:9090/graph?g0.expr=rate(prometheus_tsdb_head_samples_appended_total%5B1m%5D)&amp;g0.tab=0&amp;g0.stacked=0&amp;g0.show_exemplars=0&amp;g0.range_input=5d&amp;g1.expr=avg(rate(container_cpu_usage_seconds_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&amp;g1.tab=0&amp;g1.stacked=0&amp;g1.show_exemplars=0&amp;g1.range_input=5d&amp;g2.expr=container_memory_usage_bytes%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&amp;g2.tab=0&amp;g2.stacked=0&amp;g2.show_exemplars=0&amp;g2.range_input=5d&amp;g3.expr=container_memory_rss%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&amp;g3.tab=0&amp;g3.stacked=0&amp;g3.show_exemplars=0&amp;g3.range_input=5d&amp;g4.expr=avg(rate(container_fs_writes_bytes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&amp;g4.tab=0&amp;g4.stacked=0&amp;g4.show_exemplars=0&amp;g4.range_input=5d&amp;g5.expr=rate(container_fs_writes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B1m%5D)&amp;g5.tab=0&amp;g5.stacked=0&amp;g5.show_exemplars=0&amp;g5.range_input=5d</a></p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"victoriametrics-vs-tdengine-single-version\"><a href=\"#victoriametrics-vs-tdengine-single-version\" class=\"headerlink\" title=\"victoriametrics_vs_tdengine_single_version\"></a>victoriametrics_vs_tdengine_single_version</h1><h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><ul>\n<li><p><strong>Prometheus</strong>: 178.104.163.111 2c4g</p>\n</li>\n<li><p><strong>Node:</strong> 178.104.163.188  4c8g</p>\n<blockquote>\n<p>victoriametrics、tdengine 均安装最新版本作为本次测试</p>\n<p>docker version：20.10.17 </p>\n<p>linux kernel version:  3.10.0-957.el7.x86_64 </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p><img src=\"https://s2.loli.net/2022/08/24/NMKVR8vDJuz7QPl.png\" alt=\"image-20220731222438136\"></p>\n<h2 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h2><h2 id=\"Test-Result\"><a href=\"#Test-Result\" class=\"headerlink\" title=\"Test Result\"></a>Test Result</h2><blockquote>\n<p>duration: 5 days</p>\n</blockquote>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">[root@desktop-7f8a ~]# du -sh &#x2F;var&#x2F;lib&#x2F;vm ;du -sh &#x2F;var&#x2F;lib&#x2F;taos\n93M     &#x2F;var&#x2F;lib&#x2F;vm\n859M    &#x2F;var&#x2F;lib&#x2F;taos\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">rate(prometheus_tsdb_head_samples_appended_total[1m])\navg(rate(container_cpu_usage_seconds_total&#123;job&#x3D;&quot;vm_td_cadvisor&quot;, name&#x3D;~&quot;vm|tdengine&quot;&#125;[1m])) by (name, image, instance,  job)\ncontainer_cpu_usage_seconds_total&#123;job&#x3D;&quot;vm_td_cadvisor&quot;, name&#x3D;~&quot;vm|tdengine&quot;&#125;\ncontainer_fs_writes_bytes_total&#123;job&#x3D;&quot;vm_td_cadvisor&quot;, name&#x3D;~&quot;vm|tdengine&quot;&#125;\ncontainer_fs_writes_total&#123;job&#x3D;&quot;vm_td_cadvisor&quot;, name&#x3D;~&quot;vm|tdengine&quot;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://s2.loli.net/2022/08/24/GEn8bPtMgoUKNce.png\" alt=\"image-20220802151311428\"></p>\n<ul>\n<li><p>CPU</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/B8FmzZjaHnXKuxA.png\" alt=\"image-20220802151441630\"></p>\n</li>\n<li><p>Memory</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/qMEp6AcTHWFo1z5.png\" alt=\"image-20220802151534464\"></p>\n</li>\n<li><p>Rss</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/QN2eRbYEsZDpqIu.png\" alt=\"image-20220802151648122\"></p>\n</li>\n<li><p>IO</p>\n<p><img src=\"https://s2.loli.net/2022/08/24/vBA69xrTlufgazq.png\" alt=\"image-20220802151728888\"></p>\n<p><img src=\"https://s2.loli.net/2022/08/24/b2CHjwZKGLWTYIq.png\" alt=\"image-20220802152224653\"></p>\n</li>\n</ul>\n<blockquote>\n<p>[PromQL] <a href=\"http://178.104.163.111:9090/graph?g0.expr=rate(prometheus_tsdb_head_samples_appended_total%5B1m%5D)&amp;g0.tab=0&amp;g0.stacked=0&amp;g0.show_exemplars=0&amp;g0.range_input=5d&amp;g1.expr=avg(rate(container_cpu_usage_seconds_total%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name,%20image,%20instance,%20%20job)&amp;g1.tab=0&amp;g1.stacked=0&amp;g1.show_exemplars=0&amp;g1.range_input=5d&amp;g2.expr=container_memory_usage_bytes%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D&amp;g2.tab=0&amp;g2.stacked=0&amp;g2.show_exemplars=0&amp;g2.range_input=5d&amp;g3.expr=container_memory_rss%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D&amp;g3.tab=0&amp;g3.stacked=0&amp;g3.show_exemplars=0&amp;g3.range_input=5d&amp;g4.expr=avg(rate(container_fs_writes_bytes_total%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name,%20image,%20instance,%20%20job)&amp;g4.tab=0&amp;g4.stacked=0&amp;g4.show_exemplars=0&amp;g4.range_input=5d&amp;g5.expr=rate(container_fs_writes_total%7Bjob=%22vm_td_cadvisor%22,%20name=~%22vm%7Ctdengine%22%7D%5B1m%5D)&amp;g5.tab=0&amp;g5.stacked=0&amp;g5.show_exemplars=0&amp;g5.range_input=5d\">http://178.104.163.111:9090/graph?g0.expr=rate(prometheus_tsdb_head_samples_appended_total%5B1m%5D)&amp;g0.tab=0&amp;g0.stacked=0&amp;g0.show_exemplars=0&amp;g0.range_input=5d&amp;g1.expr=avg(rate(container_cpu_usage_seconds_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&amp;g1.tab=0&amp;g1.stacked=0&amp;g1.show_exemplars=0&amp;g1.range_input=5d&amp;g2.expr=container_memory_usage_bytes%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&amp;g2.tab=0&amp;g2.stacked=0&amp;g2.show_exemplars=0&amp;g2.range_input=5d&amp;g3.expr=container_memory_rss%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D&amp;g3.tab=0&amp;g3.stacked=0&amp;g3.show_exemplars=0&amp;g3.range_input=5d&amp;g4.expr=avg(rate(container_fs_writes_bytes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B5m%5D))%20by%20(name%2C%20image%2C%20instance%2C%20%20job)&amp;g4.tab=0&amp;g4.stacked=0&amp;g4.show_exemplars=0&amp;g4.range_input=5d&amp;g5.expr=rate(container_fs_writes_total%7Bjob%3D%22vm_td_cadvisor%22%2C%20name%3D~%22vm%7Ctdengine%22%7D%5B1m%5D)&amp;g5.tab=0&amp;g5.stacked=0&amp;g5.show_exemplars=0&amp;g5.range_input=5d</a></p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/markdown/wechat.jpg","post":"cl86sz394002c12mjbdd6f5yg","slug":"wechat.jpg","modified":1,"renderable":1},{"_id":"source/_posts/sort-algorithms/1.png","post":"cl86sz398003q12mj7ynfbvj7","slug":"1.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl86sz38j000112mj6uq921b0","category_id":"cl86sz38m000412mj6rkc8nll","_id":"cl86sz38p000j12mj6rl7h8z6"},{"post_id":"cl86sz38l000312mj19bn2ls2","category_id":"cl86sz38o000c12mj315z1ssf","_id":"cl86sz38q000n12mj2nxr3u2r"},{"post_id":"cl86sz38n000712mj6m0tef8c","category_id":"cl86sz38p000k12mj8umiecox","_id":"cl86sz38q000s12mja7o3ha4g"},{"post_id":"cl86sz38n000912mjfd2kgnc2","category_id":"cl86sz38q000o12mj4pkzhkc1","_id":"cl86sz38q000w12mj1sen8wjt"},{"post_id":"cl86sz38o000b12mj20gm3usy","category_id":"cl86sz38m000412mj6rkc8nll","_id":"cl86sz38q001012mjg62f6py4"},{"post_id":"cl86sz38o000b12mj20gm3usy","category_id":"cl86sz38q000t12mj4vp909vj","_id":"cl86sz38q001312mj1i4c048a"},{"post_id":"cl86sz38o000g12mj5tw44dcv","category_id":"cl86sz38q000x12mj3jqicwbr","_id":"cl86sz38q001412mj9qhph9gl"},{"post_id":"cl86sz38p000i12mjefp623d6","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz38q001712mj7dt46vrk"},{"post_id":"cl86sz38p000m12mj2zkihb9b","category_id":"cl86sz38q001512mj7lm8bhav","_id":"cl86sz38r001b12mj3r5nh1c3"},{"post_id":"cl86sz391001k12mj1my43bdl","category_id":"cl86sz38m000412mj6rkc8nll","_id":"cl86sz393001s12mj5asr2zqh"},{"post_id":"cl86sz391001k12mj1my43bdl","category_id":"cl86sz38q000t12mj4vp909vj","_id":"cl86sz393001x12mj3gwocyue"},{"post_id":"cl86sz392001n12mjgo7beos0","category_id":"cl86sz38q000x12mj3jqicwbr","_id":"cl86sz393002012mj3cigdz8q"},{"post_id":"cl86sz38z001j12mjhqhj0ylq","category_id":"cl86sz392001l12mj4wyj4h8r","_id":"cl86sz394002312mj23h328ak"},{"post_id":"cl86sz392001r12mj13w4g05t","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz394002612mj2wa19t4p"},{"post_id":"cl86sz393001z12mjcv609fio","category_id":"cl86sz38m000412mj6rkc8nll","_id":"cl86sz394002a12mj64vt9k1x"},{"post_id":"cl86sz392001p12mj3w431tzy","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz395002d12mjbz07e1z2"},{"post_id":"cl86sz392001p12mj3w431tzy","category_id":"cl86sz393001w12mjd305h4t9","_id":"cl86sz395002g12mjd064g6o0"},{"post_id":"cl86sz393002112mjetmg1f6e","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz395002j12mjbh7f5y87"},{"post_id":"cl86sz395002i12mjf0hadcqo","category_id":"cl86sz38q000x12mj3jqicwbr","_id":"cl86sz396002s12mj4ktjakho"},{"post_id":"cl86sz395002n12mj6sxh3lf4","category_id":"cl86sz38m000412mj6rkc8nll","_id":"cl86sz396002w12mjbs261z3n"},{"post_id":"cl86sz395002p12mj978vf061","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz396002z12mj8jwsdn6m"},{"post_id":"cl86sz395002f12mjhjoa1cks","category_id":"cl86sz395002k12mjgh4608qu","_id":"cl86sz396003312mj5rg809iq"},{"post_id":"cl86sz396002r12mjcz16gmgc","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz397003612mj6jaz5fep"},{"post_id":"cl86sz396002v12mj81q563e8","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz397003912mj0k2xdliw"},{"post_id":"cl86sz396002y12mj1skraks8","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz397003c12mj1kcj3usb"},{"post_id":"cl86sz396003212mjekps434m","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz397003f12mj7ika2ns7"},{"post_id":"cl86sz397003512mjdz4k5sds","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz398003i12mjgcu8hz6a"},{"post_id":"cl86sz397003812mjg9611160","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz398003l12mj3tk8b6cp"},{"post_id":"cl86sz397003b12mj3l26gr8i","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz398003o12mjb1i8bh0t"},{"post_id":"cl86sz398003h12mjgfm36mva","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz398003r12mj5rmn8h1v"},{"post_id":"cl86sz398003k12mj5d5h6174","category_id":"cl86sz395002k12mjgh4608qu","_id":"cl86sz399003v12mjcl24etrr"},{"post_id":"cl86sz398003n12mj3s1x6cj9","category_id":"cl86sz38q000x12mj3jqicwbr","_id":"cl86sz399003z12mjf2v45nvb"},{"post_id":"cl86sz398003q12mj7ynfbvj7","category_id":"cl86sz399003w12mj2e6f2mvd","_id":"cl86sz39a004a12mjghc4hsf7"},{"post_id":"cl86sz399004412mj0ft69es6","category_id":"cl86sz399003w12mj2e6f2mvd","_id":"cl86sz39a004d12mje5npeyfq"},{"post_id":"cl86sz399003u12mj5wvo5bzz","category_id":"cl86sz399004512mj287b8ko4","_id":"cl86sz39b004g12mjavyw2vze"},{"post_id":"cl86sz39b004f12mjevcid0jc","category_id":"cl86sz38m000412mj6rkc8nll","_id":"cl86sz39c004q12mj2dtpgn80"},{"post_id":"cl86sz39b004j12mj4o883mmt","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39c004t12mj92uec30g"},{"post_id":"cl86sz399004112mj8dj8h274","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39c004x12mj3x5ohc3a"},{"post_id":"cl86sz39c004p12mj2sjp8sw5","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39d005112mj4y5d9hdq"},{"post_id":"cl86sz39c004s12mjfv0u47lj","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39d005412mj1jy66odp"},{"post_id":"cl86sz39a004712mj7aos3gf8","category_id":"cl86sz39c004o12mj9un2fd9d","_id":"cl86sz39e005812mjgil2efg1"},{"post_id":"cl86sz39c004w12mj3i6df1t6","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39e005c12mjhui9bkpn"},{"post_id":"cl86sz39d005012mjf5vq23hl","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39e005g12mjg2a01i9z"},{"post_id":"cl86sz39a004912mjasuq6ydd","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39f005k12mj8pzm1fe5"},{"post_id":"cl86sz39d005312mjcekqbkrq","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39f005o12mj5q5p1kur"},{"post_id":"cl86sz39e005712mja940b3ub","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39f005s12mj12mpfasn"},{"post_id":"cl86sz39a004c12mj9zrv2iwk","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39g005w12mj0m9d6jsm"},{"post_id":"cl86sz39e005b12mj40kca0fy","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39g006012mjgmjm4qny"},{"post_id":"cl86sz39e005f12mj0qdfcx69","category_id":"cl86sz39c004o12mj9un2fd9d","_id":"cl86sz39g006412mj4mof7fyw"},{"post_id":"cl86sz399003y12mjc50odhby","category_id":"cl86sz38q001112mj9mjwalhg","_id":"cl86sz39h006812mj2y74a9z2"},{"post_id":"cl86sz399003y12mjc50odhby","category_id":"cl86sz39a004b12mjba2s9nea","_id":"cl86sz39h006b12mjf7p648i7"},{"post_id":"cl86sz399003y12mjc50odhby","category_id":"cl86sz39e005d12mjct32fgpu","_id":"cl86sz39h006g12mjfw4vgibp"},{"post_id":"cl86sz39b004m12mj5l6fgj29","category_id":"cl86sz39f005m12mjcc223uwf","_id":"cl86sz39h006j12mjabvig50o"},{"post_id":"cl86sz39f005r12mja4xq4w9c","category_id":"cl86sz39b004i12mj02ovcjrw","_id":"cl86sz39i006o12mj2ha40nxc"},{"post_id":"cl86sz39f005j12mj180oe33t","category_id":"cl86sz39f005u12mjbnqw0kh8","_id":"cl86sz39i006r12mj1e2y6pi5"},{"post_id":"cl86sz39g006712mj7nzgfc3r","category_id":"cl86sz39g006212mjcw4o1o0z","_id":"cl86sz39i006v12mj5x46h1bb"},{"post_id":"cl86sz39f005n12mj65mx2om1","category_id":"cl86sz39g006212mjcw4o1o0z","_id":"cl86sz39i006x12mj92fi7jn5"},{"post_id":"cl86sz39h006a12mj1cq256y4","category_id":"cl86sz39g006212mjcw4o1o0z","_id":"cl86sz39j007112mj4jtvdshe"},{"post_id":"cl86sz39h006f12mj11iy9esm","category_id":"cl86sz39g006212mjcw4o1o0z","_id":"cl86sz39j007312mj7q8ud74h"},{"post_id":"cl86sz39f005v12mj277dbw22","category_id":"cl86sz39g006212mjcw4o1o0z","_id":"cl86sz39j007612mj5e18hfwg"},{"post_id":"cl86sz39h006i12mjargg7sj5","category_id":"cl86sz39g006212mjcw4o1o0z","_id":"cl86sz39j007812mj4d575j4k"},{"post_id":"cl86sz39g005z12mjhs5p7n4r","category_id":"cl86sz39g006212mjcw4o1o0z","_id":"cl86sz39j007b12mjcd048m6u"},{"post_id":"cl86sz39i006q12mjck5d7tli","category_id":"cl86sz39g006212mjcw4o1o0z","_id":"cl86sz39j007d12mjgyf2frxi"},{"post_id":"cl86sz39g006312mj3ch3gv9z","category_id":"cl86sz39g006212mjcw4o1o0z","_id":"cl86sz39j007g12mj4g10h3ic"},{"post_id":"cl86sz39i006n12mjfr2u3em3","category_id":"cl86sz39i006y12mj8qc20fx7","_id":"cl86sz39j007i12mj18svhqao"}],"PostTag":[{"post_id":"cl86sz38j000112mj6uq921b0","tag_id":"cl86sz38m000512mj9hi54xho","_id":"cl86sz38o000e12mjhekwamda"},{"post_id":"cl86sz38l000312mj19bn2ls2","tag_id":"cl86sz38o000d12mj8pcncd6f","_id":"cl86sz38q000q12mj49yu1d47"},{"post_id":"cl86sz38l000312mj19bn2ls2","tag_id":"cl86sz38p000l12mj8vbm6l3a","_id":"cl86sz38q000r12mjdzx719me"},{"post_id":"cl86sz38n000712mj6m0tef8c","tag_id":"cl86sz38q000p12mj9z4b7z74","_id":"cl86sz38q000v12mj4jc54ntk"},{"post_id":"cl86sz38n000912mjfd2kgnc2","tag_id":"cl86sz38q000u12mjgm310i4o","_id":"cl86sz38q000z12mjbhtge8vn"},{"post_id":"cl86sz38o000b12mj20gm3usy","tag_id":"cl86sz38q000y12mj7dgqdrqp","_id":"cl86sz38r001912mjbzjq156l"},{"post_id":"cl86sz38o000b12mj20gm3usy","tag_id":"cl86sz38m000512mj9hi54xho","_id":"cl86sz38r001a12mj8kl2829r"},{"post_id":"cl86sz38o000b12mj20gm3usy","tag_id":"cl86sz38q001212mj1uu6by0c","_id":"cl86sz38r001d12mj0ogl2azb"},{"post_id":"cl86sz38o000b12mj20gm3usy","tag_id":"cl86sz38q001612mjatzj6vvc","_id":"cl86sz38r001e12mj58cw16gm"},{"post_id":"cl86sz38o000g12mj5tw44dcv","tag_id":"cl86sz38q001812mj76t5avmn","_id":"cl86sz38r001g12mjcrt722k7"},{"post_id":"cl86sz38p000i12mjefp623d6","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz38r001h12mj9wqie3v2"},{"post_id":"cl86sz38p000m12mj2zkihb9b","tag_id":"cl86sz38r001f12mjf22e42b4","_id":"cl86sz38r001i12mjc2ama8hk"},{"post_id":"cl86sz38z001j12mjhqhj0ylq","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz392001m12mjefma56gq"},{"post_id":"cl86sz391001k12mj1my43bdl","tag_id":"cl86sz38q000y12mj7dgqdrqp","_id":"cl86sz392001o12mja77lakcb"},{"post_id":"cl86sz391001k12mj1my43bdl","tag_id":"cl86sz38m000512mj9hi54xho","_id":"cl86sz392001q12mj164d9lyq"},{"post_id":"cl86sz391001k12mj1my43bdl","tag_id":"cl86sz38q001212mj1uu6by0c","_id":"cl86sz393001u12mjbhpi85ua"},{"post_id":"cl86sz392001n12mjgo7beos0","tag_id":"cl86sz38q001812mj76t5avmn","_id":"cl86sz393001y12mj93f175wf"},{"post_id":"cl86sz393001z12mjcv609fio","tag_id":"cl86sz38m000512mj9hi54xho","_id":"cl86sz394002412mj2kef5dtn"},{"post_id":"cl86sz392001p12mj3w431tzy","tag_id":"cl86sz393001t12mj4jwl01no","_id":"cl86sz394002712mjamng6v58"},{"post_id":"cl86sz392001p12mj3w431tzy","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz394002b12mj66hu66mu"},{"post_id":"cl86sz394002512mjetue29rt","tag_id":"cl86sz38q000u12mjgm310i4o","_id":"cl86sz395002e12mjdbed3f5k"},{"post_id":"cl86sz394002512mjetue29rt","tag_id":"cl86sz38q001812mj76t5avmn","_id":"cl86sz395002h12mj9xx64umh"},{"post_id":"cl86sz392001r12mj13w4g05t","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz395002m12mjhz989d0d"},{"post_id":"cl86sz392001r12mj13w4g05t","tag_id":"cl86sz394002212mjcy92gaoh","_id":"cl86sz395002o12mjdui4asqa"},{"post_id":"cl86sz393002112mjetmg1f6e","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz396002q12mjc52bflct"},{"post_id":"cl86sz393002112mjetmg1f6e","tag_id":"cl86sz394002912mjgz2t2u39","_id":"cl86sz396002u12mj2f0s7w2n"},{"post_id":"cl86sz395002n12mj6sxh3lf4","tag_id":"cl86sz38m000512mj9hi54xho","_id":"cl86sz396002x12mj428y5zjp"},{"post_id":"cl86sz395002p12mj978vf061","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz396003112mj1c5l8wf3"},{"post_id":"cl86sz396002r12mjcz16gmgc","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz397003412mj3cbz87dk"},{"post_id":"cl86sz396002v12mj81q563e8","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz397003712mjg0qi3b9u"},{"post_id":"cl86sz395002f12mjhjoa1cks","tag_id":"cl86sz395002l12mjfmhl9byy","_id":"cl86sz397003a12mjh7br3nzs"},{"post_id":"cl86sz395002f12mjhjoa1cks","tag_id":"cl86sz396002t12mj18b3fnqp","_id":"cl86sz397003d12mj4zkybhf5"},{"post_id":"cl86sz396002y12mj1skraks8","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz398003g12mj9m5709gi"},{"post_id":"cl86sz396003212mjekps434m","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz398003j12mj95s0ethv"},{"post_id":"cl86sz395002i12mjf0hadcqo","tag_id":"cl86sz396003012mj75k13oqe","_id":"cl86sz398003m12mj6e2ca97y"},{"post_id":"cl86sz397003512mjdz4k5sds","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz398003p12mjhbmaebr6"},{"post_id":"cl86sz397003812mjg9611160","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz398003t12mja4y1b92c"},{"post_id":"cl86sz397003b12mj3l26gr8i","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz399003x12mjf5kj6bbf"},{"post_id":"cl86sz398003h12mjgfm36mva","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz399004012mj3cav57yw"},{"post_id":"cl86sz398003k12mj5d5h6174","tag_id":"cl86sz396002t12mj18b3fnqp","_id":"cl86sz399004312mjaz04f37u"},{"post_id":"cl86sz398003n12mj3s1x6cj9","tag_id":"cl86sz398003s12mj1za42urm","_id":"cl86sz399004612mja72c3lru"},{"post_id":"cl86sz398003q12mj7ynfbvj7","tag_id":"cl86sz399004212mj51qx94za","_id":"cl86sz39b004h12mjhv8v9b7o"},{"post_id":"cl86sz398003q12mj7ynfbvj7","tag_id":"cl86sz39a004812mj1zx7b8np","_id":"cl86sz39b004k12mj3z9ddgfv"},{"post_id":"cl86sz39b004f12mjevcid0jc","tag_id":"cl86sz38q000y12mj7dgqdrqp","_id":"cl86sz39b004n12mjh0nic8vh"},{"post_id":"cl86sz39b004f12mjevcid0jc","tag_id":"cl86sz38m000512mj9hi54xho","_id":"cl86sz39c004r12mj8tit5rqk"},{"post_id":"cl86sz39b004f12mjevcid0jc","tag_id":"cl86sz38q001212mj1uu6by0c","_id":"cl86sz39c004v12mjct59d1vw"},{"post_id":"cl86sz399003u12mj5wvo5bzz","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39d004z12mjfpbociws"},{"post_id":"cl86sz399003y12mjc50odhby","tag_id":"cl86sz39b004l12mjgjqd9jwj","_id":"cl86sz39d005612mj1ne5hwcm"},{"post_id":"cl86sz399003y12mjc50odhby","tag_id":"cl86sz39c004u12mjc61zhee1","_id":"cl86sz39e005912mjgpf853uu"},{"post_id":"cl86sz39d005312mjcekqbkrq","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39e005e12mjb3hm8jl4"},{"post_id":"cl86sz39d005312mjcekqbkrq","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39e005h12mj8ll76rk9"},{"post_id":"cl86sz39e005712mja940b3ub","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39f005l12mj0t6m2pup"},{"post_id":"cl86sz39e005712mja940b3ub","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39f005p12mj2smr5601"},{"post_id":"cl86sz39e005b12mj40kca0fy","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39f005t12mjg68tagrb"},{"post_id":"cl86sz39e005b12mj40kca0fy","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39g005x12mjbml30evm"},{"post_id":"cl86sz399004112mj8dj8h274","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39g006112mjbfvyf1iw"},{"post_id":"cl86sz399004112mj8dj8h274","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39g006512mj4svm4t6f"},{"post_id":"cl86sz39e005f12mj0qdfcx69","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39h006912mj94eu9xjf"},{"post_id":"cl86sz39e005f12mj0qdfcx69","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39h006d12mjfkscacuz"},{"post_id":"cl86sz399004412mj0ft69es6","tag_id":"cl86sz399004212mj51qx94za","_id":"cl86sz39h006h12mjgee4cypm"},{"post_id":"cl86sz399004412mj0ft69es6","tag_id":"cl86sz39a004812mj1zx7b8np","_id":"cl86sz39h006l12mjaig11zo6"},{"post_id":"cl86sz39f005r12mja4xq4w9c","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39i006p12mj54qh1qns"},{"post_id":"cl86sz39f005r12mja4xq4w9c","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39i006t12mjhpk52psl"},{"post_id":"cl86sz39a004712mj7aos3gf8","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39i006w12mjbn8e99cz"},{"post_id":"cl86sz39a004712mj7aos3gf8","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39j006z12mjczmw38em"},{"post_id":"cl86sz39a004912mjasuq6ydd","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39j007212mj80aw77ud"},{"post_id":"cl86sz39a004912mjasuq6ydd","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39j007412mjeid79fjn"},{"post_id":"cl86sz39a004c12mj9zrv2iwk","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39j007712mj2hu5f180"},{"post_id":"cl86sz39a004c12mj9zrv2iwk","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39j007912mj6ltf0w9q"},{"post_id":"cl86sz39b004j12mj4o883mmt","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39j007c12mjgigq5kbp"},{"post_id":"cl86sz39b004j12mj4o883mmt","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39j007e12mjd6ngg8sl"},{"post_id":"cl86sz39b004m12mj5l6fgj29","tag_id":"cl86sz39j007512mj0svhhe7o","_id":"cl86sz39j007h12mjbpo75cv2"},{"post_id":"cl86sz39b004m12mj5l6fgj29","tag_id":"cl86sz38r001c12mjdq2b7e8j","_id":"cl86sz39j007j12mj6ob7htyp"},{"post_id":"cl86sz39c004p12mj2sjp8sw5","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39j007l12mjegechzfh"},{"post_id":"cl86sz39c004p12mj2sjp8sw5","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39j007m12mj693c71gj"},{"post_id":"cl86sz39c004s12mjfv0u47lj","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39j007o12mjcldrao4m"},{"post_id":"cl86sz39c004s12mjfv0u47lj","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39j007p12mjb65h56wp"},{"post_id":"cl86sz39c004w12mj3i6df1t6","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39j007r12mjfqli6mp6"},{"post_id":"cl86sz39c004w12mj3i6df1t6","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39j007s12mj5h2bcjjq"},{"post_id":"cl86sz39d005012mjf5vq23hl","tag_id":"cl86sz39d005212mj4bxqfbqj","_id":"cl86sz39j007u12mj1wmx3q0i"},{"post_id":"cl86sz39d005012mjf5vq23hl","tag_id":"cl86sz39a004e12mj6apzfelu","_id":"cl86sz39j007v12mj4ces9hyh"},{"post_id":"cl86sz39f005j12mj180oe33t","tag_id":"cl86sz39j007q12mjbzc5e1k9","_id":"cl86sz39j007w12mjgrdz2i8k"},{"post_id":"cl86sz39f005n12mj65mx2om1","tag_id":"cl86sz39j007t12mj6pi73k82","_id":"cl86sz39k008112mj9rom2g3l"},{"post_id":"cl86sz39f005n12mj65mx2om1","tag_id":"cl86sz39j007x12mj1kr7b5rh","_id":"cl86sz39k008212mj4x9vatgk"},{"post_id":"cl86sz39f005n12mj65mx2om1","tag_id":"cl86sz39k007y12mjeis9cgdk","_id":"cl86sz39k008412mj8rgs3g3w"},{"post_id":"cl86sz39f005n12mj65mx2om1","tag_id":"cl86sz39k007z12mj6fsrbjyj","_id":"cl86sz39k008512mj8jj24dzj"},{"post_id":"cl86sz39f005v12mj277dbw22","tag_id":"cl86sz39j007t12mj6pi73k82","_id":"cl86sz39k008a12mjaytqe40k"},{"post_id":"cl86sz39f005v12mj277dbw22","tag_id":"cl86sz39j007x12mj1kr7b5rh","_id":"cl86sz39k008b12mj0o3h7ukr"},{"post_id":"cl86sz39f005v12mj277dbw22","tag_id":"cl86sz39k008612mjbfsr5jis","_id":"cl86sz39k008d12mj59sfaliz"},{"post_id":"cl86sz39f005v12mj277dbw22","tag_id":"cl86sz39k007y12mjeis9cgdk","_id":"cl86sz39k008e12mj2mj22rcs"},{"post_id":"cl86sz39f005v12mj277dbw22","tag_id":"cl86sz39k007z12mj6fsrbjyj","_id":"cl86sz39k008g12mj14dfbcwk"},{"post_id":"cl86sz39g005z12mjhs5p7n4r","tag_id":"cl86sz39j007t12mj6pi73k82","_id":"cl86sz39l008k12mj5h91hnbd"},{"post_id":"cl86sz39g005z12mjhs5p7n4r","tag_id":"cl86sz39j007x12mj1kr7b5rh","_id":"cl86sz39l008l12mjf8y11eil"},{"post_id":"cl86sz39g005z12mjhs5p7n4r","tag_id":"cl86sz39k008612mjbfsr5jis","_id":"cl86sz39l008n12mjgb5e2g76"},{"post_id":"cl86sz39g005z12mjhs5p7n4r","tag_id":"cl86sz39k007y12mjeis9cgdk","_id":"cl86sz39l008o12mjatkv2jt1"},{"post_id":"cl86sz39g005z12mjhs5p7n4r","tag_id":"cl86sz39k007z12mj6fsrbjyj","_id":"cl86sz39l008q12mjhhth6awj"},{"post_id":"cl86sz39g006312mj3ch3gv9z","tag_id":"cl86sz39j007t12mj6pi73k82","_id":"cl86sz39l008t12mjhpny430b"},{"post_id":"cl86sz39g006312mj3ch3gv9z","tag_id":"cl86sz39j007x12mj1kr7b5rh","_id":"cl86sz39l008u12mj4jzr05pj"},{"post_id":"cl86sz39g006312mj3ch3gv9z","tag_id":"cl86sz39k007y12mjeis9cgdk","_id":"cl86sz39l008w12mj1kih9pb3"},{"post_id":"cl86sz39g006312mj3ch3gv9z","tag_id":"cl86sz39k007z12mj6fsrbjyj","_id":"cl86sz39l008x12mjhwzo7908"},{"post_id":"cl86sz39g006712mj7nzgfc3r","tag_id":"cl86sz39j007t12mj6pi73k82","_id":"cl86sz39l009112mjf6it48qq"},{"post_id":"cl86sz39g006712mj7nzgfc3r","tag_id":"cl86sz39j007x12mj1kr7b5rh","_id":"cl86sz39l009212mje20e4zlv"},{"post_id":"cl86sz39g006712mj7nzgfc3r","tag_id":"cl86sz39k007y12mjeis9cgdk","_id":"cl86sz39l009412mj0uri92nh"},{"post_id":"cl86sz39g006712mj7nzgfc3r","tag_id":"cl86sz39k007z12mj6fsrbjyj","_id":"cl86sz39l009512mjdngrhzbj"},{"post_id":"cl86sz39h006a12mj1cq256y4","tag_id":"cl86sz39j007t12mj6pi73k82","_id":"cl86sz39m009912mj6v6fbabr"},{"post_id":"cl86sz39h006a12mj1cq256y4","tag_id":"cl86sz39j007x12mj1kr7b5rh","_id":"cl86sz39m009a12mj9kp6gq88"},{"post_id":"cl86sz39h006a12mj1cq256y4","tag_id":"cl86sz39k007y12mjeis9cgdk","_id":"cl86sz39m009c12mj5k46girl"},{"post_id":"cl86sz39h006a12mj1cq256y4","tag_id":"cl86sz39k007z12mj6fsrbjyj","_id":"cl86sz39m009d12mj8t8n4xku"},{"post_id":"cl86sz39h006f12mj11iy9esm","tag_id":"cl86sz39k007z12mj6fsrbjyj","_id":"cl86sz39m009f12mj9yh2ftzp"},{"post_id":"cl86sz39h006i12mjargg7sj5","tag_id":"cl86sz39j007t12mj6pi73k82","_id":"cl86sz39m009k12mjc83jf6lf"},{"post_id":"cl86sz39h006i12mjargg7sj5","tag_id":"cl86sz39j007x12mj1kr7b5rh","_id":"cl86sz39m009l12mj0mrpbibu"},{"post_id":"cl86sz39h006i12mjargg7sj5","tag_id":"cl86sz39m009g12mjdth0gjpg","_id":"cl86sz39m009n12mj971ke7yj"},{"post_id":"cl86sz39h006i12mjargg7sj5","tag_id":"cl86sz39k007y12mjeis9cgdk","_id":"cl86sz39m009o12mj5v7b5nks"},{"post_id":"cl86sz39h006i12mjargg7sj5","tag_id":"cl86sz39k007z12mj6fsrbjyj","_id":"cl86sz39m009q12mjh60g9obm"},{"post_id":"cl86sz39i006n12mjfr2u3em3","tag_id":"cl86sz39j007t12mj6pi73k82","_id":"cl86sz39m009r12mj2l6fd3b1"},{"post_id":"cl86sz39i006n12mjfr2u3em3","tag_id":"cl86sz39m009m12mjdopo1n7b","_id":"cl86sz39m009t12mjf6d9d06g"},{"post_id":"cl86sz39i006q12mjck5d7tli","tag_id":"cl86sz39j007t12mj6pi73k82","_id":"cl86sz39n009y12mjhsawbjaw"},{"post_id":"cl86sz39i006q12mjck5d7tli","tag_id":"cl86sz39k008612mjbfsr5jis","_id":"cl86sz39n009z12mj16ig03ka"},{"post_id":"cl86sz39i006q12mjck5d7tli","tag_id":"cl86sz39m009u12mjcbshab9y","_id":"cl86sz39n00a012mj14e48hjo"},{"post_id":"cl86sz39i006q12mjck5d7tli","tag_id":"cl86sz39m009g12mjdth0gjpg","_id":"cl86sz39n00a112mj2wb97mz1"},{"post_id":"cl86sz39i006q12mjck5d7tli","tag_id":"cl86sz39k007y12mjeis9cgdk","_id":"cl86sz39n00a212mjei390juc"},{"post_id":"cl86sz39i006q12mjck5d7tli","tag_id":"cl86sz39k007z12mj6fsrbjyj","_id":"cl86sz39n00a312mj6m3f6qr3"}],"Tag":[{"name":"Docker","_id":"cl86sz38m000512mj9hi54xho"},{"name":"Go","_id":"cl86sz38o000d12mj8pcncd6f"},{"name":"GoByExamble","_id":"cl86sz38p000l12mj8vbm6l3a"},{"name":"Celery","_id":"cl86sz38q000p12mj9z4b7z74"},{"name":"Git","_id":"cl86sz38q000u12mjgm310i4o"},{"name":"容器","_id":"cl86sz38q000y12mj7dgqdrqp"},{"name":"K8s","_id":"cl86sz38q001212mj1uu6by0c"},{"name":"Kubernetets","_id":"cl86sz38q001612mjatzj6vvc"},{"name":"Linux","_id":"cl86sz38q001812mj76t5avmn"},{"name":"Python","_id":"cl86sz38r001c12mjdq2b7e8j"},{"name":"RPC","_id":"cl86sz38r001f12mjf22e42b4"},{"name":"Schedule","_id":"cl86sz393001t12mj4jwl01no"},{"name":"Collections","_id":"cl86sz394002212mjcy92gaoh"},{"name":"Django","_id":"cl86sz394002912mjgz2t2u39"},{"name":"Mongodb","_id":"cl86sz395002l12mjfmhl9byy"},{"name":"Redis","_id":"cl86sz396002t12mj18b3fnqp"},{"name":"Ununtu","_id":"cl86sz396003012mj75k13oqe"},{"name":"Mysql","_id":"cl86sz398003s12mj1za42urm"},{"name":"Leetcode","_id":"cl86sz399004212mj51qx94za"},{"name":"算法","_id":"cl86sz39a004812mj1zx7b8np"},{"name":"云开发","_id":"cl86sz39a004e12mj6apzfelu"},{"name":"词云","_id":"cl86sz39b004l12mjgjqd9jwj"},{"name":"爬虫","_id":"cl86sz39c004u12mjc61zhee1"},{"name":"微信小程序","_id":"cl86sz39d005212mj4bxqfbqj"},{"name":"RabbitMQ","_id":"cl86sz39j007512mj0svhhe7o"},{"name":"操作系统","_id":"cl86sz39j007q12mjbzc5e1k9"},{"name":"k8s","_id":"cl86sz39j007t12mj6pi73k82"},{"name":"influxdb","_id":"cl86sz39j007x12mj1kr7b5rh"},{"name":"benchmark","_id":"cl86sz39k007y12mjeis9cgdk"},{"name":"prometheus","_id":"cl86sz39k007z12mj6fsrbjyj"},{"name":"victoriametrics","_id":"cl86sz39k008612mjbfsr5jis"},{"name":"cadvisor","_id":"cl86sz39m009g12mjdth0gjpg"},{"name":"minikube","_id":"cl86sz39m009m12mjdopo1n7b"},{"name":"tdengine","_id":"cl86sz39m009u12mjcbshab9y"}]}}